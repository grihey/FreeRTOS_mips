
build/FPGA_Ram.elf:     file format elf32-tradlittlemips


Disassembly of section .bootrom:

9fc00000 <__reset_vector>:
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:65
/**************************************************************************************
    R E S E T   E X C E P T I O N   H A N D L E R
**************************************************************************************/

LEAF(__reset_vector)
    la a2,__cpu_init
9fc00000:	3c069fc0 	lui	a2,0x9fc0
9fc00004:	24c60014 	addiu	a2,a2,20
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:66
    jr a2
9fc00008:	00c00008 	jr	a2
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:67
    mtc0    $0, C0_COUNT        # Clear cp0 Count (Used to measure boot time.)
9fc0000c:	40804800 	mtc0	zero,c0_count
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:68
    nop
9fc00010:	00000000 	nop

9fc00014 <__cpu_init>:
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:77
LEAF(__cpu_init)

    # Verify the code is here due to a reset and not NMI. If this is an NMI then trigger
    # a debugger breakpoint using a sdbp instruction.

    mfc0    s1, C0_STATUS       # Read CP0 Status
9fc00014:	40116000 	mfc0	s1,c0_status
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:78
    ext     s1, s1, 19, 1       # extract NMI
9fc00018:	7e3104c0 	ext	s1,s1,0x13,0x1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:79
    beqz    s1, init_resources  # Branch if this is NOT an NMI exception.
9fc0001c:	12200002 	beqz	s1,9fc00028 <init_resources>
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:80
    nop
9fc00020:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:81
    sdbbp                       # Failed assertion: NMI.
9fc00024:	7000003f 	sdbbp

9fc00028 <init_resources>:
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:86

init_resources:                 # initializes resources for "cpu".

    #!!!
    la gp, _gp
9fc00028:	3c1c8001 	lui	gp,0x8001
9fc0002c:	279c422d 	addiu	gp,gp,16941
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:90

    # Initialize CP0 registers

    la a2,      init_cp0        # Init CP0 Status, Count, Compare, Watch*, and Cause.
9fc00030:	3c069fc0 	lui	a2,0x9fc0
9fc00034:	24c60288 	addiu	a2,a2,648
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:91
    jalr a2
9fc00038:	00c0f809 	jalr	a2
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:92
    nop
9fc0003c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:96

    # Initialize the TLB

    la      a2, init_tlb        # Generate unique EntryHi contents per entry pair.
9fc00040:	3c069fc0 	lui	a2,0x9fc0
9fc00044:	24c60308 	addiu	a2,a2,776
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:97
    jalr    a2
9fc00048:	00c0f809 	jalr	a2
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:98
    nop
9fc0004c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:102

    #Initialize the Instruction cache

    la      a2, init_icache     # Initialize the L1 instruction cache. (Executing using I$ on return.)
9fc00050:	3c069fc0 	lui	a2,0x9fc0
9fc00054:	24c600b0 	addiu	a2,a2,176
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:103
    jalr    a2
9fc00058:	00c0f809 	jalr	a2
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:104
    nop
9fc0005c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:109

    # The changing of Kernel mode cacheability must be done from KSEG1
    # Since the code is executing from KSEG0 It needs to do a jump to KSEG1 change K0 and jump back to KSEG0

    la          a2, change_k0_cca
9fc00060:	3c069fc0 	lui	a2,0x9fc0
9fc00064:	24c60168 	addiu	a2,a2,360
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:110
    li          a1, 0xf
9fc00068:	2405000f 	li	a1,15
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:111
    ins         a2, a1, 29, 1   # changed to KSEG1 address by setting bit 29
9fc0006c:	7ca6ef44 	ins	a2,a1,0x1d,0x1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:112
    jalr        a2
9fc00070:	00c0f809 	jalr	a2
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:113
    nop
9fc00074:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:117

    # Initialize the Data cache

    la      a2, init_dcache     # Initialize the L1 data cache
9fc00078:	3c069fc0 	lui	a2,0x9fc0
9fc0007c:	24c60108 	addiu	a2,a2,264
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:118
    jalr    a2
9fc00080:	00c0f809 	jalr	a2
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:119
    nop
9fc00084:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:123

    # Prepare for eret to main.

    la      ra, all_done        # If main returns then go to all_done:.
9fc00088:	3c1f9fc0 	lui	ra,0x9fc0
9fc0008c:	27ff00a8 	addiu	ra,ra,168
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:124
    move    a0, zero            # Indicate that there are no arguments available.
9fc00090:	00002025 	move	a0,zero
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:125
    la      v0, _start          # load the address of the CRT entry point _start.
9fc00094:	3c028000 	lui	v0,0x8000
9fc00098:	24420204 	addiu	v0,v0,516
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:126
    mtc0    v0, $30             # Write ErrorEPC with the address of main
9fc0009c:	4082f000 	mtc0	v0,c0_errorepc
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:127
    ehb                         # clear hazards (makes sure write to ErrorPC has completed)
9fc000a0:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:131

    # Return from exception will now execute code in main

    eret                        # Exit reset exception handler and start execution of _start.
9fc000a4:	42000018 	eret

9fc000a8 <all_done>:
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:137


/**************************************************************************************/
all_done:
    # If main returns it will return to this point.  Just spin here.
    b       all_done
9fc000a8:	1000ffff 	b	9fc000a8 <all_done>
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:138
    nop
9fc000ac:	00000000 	nop

9fc000b0 <init_icache>:
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:63
LEAF(init_icache)

	// Can be skipped if using magic simulation cache flush

	// Determine how big the I$ is
	mfc0	v0, C0_CONFIG1		// read C0_Config1
9fc000b0:	40028001 	mfc0	v0,c0_config1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:66

	// Isolate I$ Line Size
	ext	    v1, v0, CFG1_ILSHIFT, 3		// extract IL
9fc000b4:	7c4314c0 	ext	v1,v0,0x13,0x3
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:69

	// Skip ahead if No I$
	beq	    v1, zero, done_icache
9fc000b8:	10600011 	beqz	v1,9fc00100 <done_icache>
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:70
	nop
9fc000bc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:72

	li	    a2, 2
9fc000c0:	24060002 	li	a2,2
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:73
	sllv    v1, a2, v1			// Now have true I$ line size in bytes
9fc000c4:	00661804 	sllv	v1,a2,v1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:75

	ext	    a0, v0, CFG1_ISSHIFT, 3		// extract IS
9fc000c8:	7c441580 	ext	a0,v0,0x16,0x3
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:76
	li	    a2, 64
9fc000cc:	24060040 	li	a2,64
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:77
	sllv    a0, a2, a0			// I$ Sets per way
9fc000d0:	00862004 	sllv	a0,a2,a0
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:80

	// Config1IA == I$ Assoc - 1
	ext	    a1, v0, CFG1_IASHIFT, 3		// extract IA
9fc000d4:	7c451400 	ext	a1,v0,0x10,0x3
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:81
	add	    a1, 1
9fc000d8:	20a50001 	addi	a1,a1,1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:83

	mul	    a0, a0, a1			// Total number of sets
9fc000dc:	70852002 	mul	a0,a0,a1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:85

	lui	    a2, 0x8000			// Get a KSeg0 address for cacheops
9fc000e0:	3c068000 	lui	a2,0x8000
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:88

	// Clear TagLo/TagHi registers
	mtc0    zero, C0_TAGLO		// write C0_ITagLo
9fc000e4:	4080e000 	mtc0	zero,c0_taglo
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:89
	mtc0    zero, C0_TAGHI		// write C0_ITagHi
9fc000e8:	4080e800 	mtc0	zero,c0_taghi
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:91

	move    a3, a0
9fc000ec:	00803825 	move	a3,a0

9fc000f0 <next_icache_tag>:
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:96

next_icache_tag:
	// Index Store Tag Cache Op
	// Will invalidate the tag entry, clear the lock bit, and clear the LRF bit
	cache   0x8, 0(a2)			// ICIndexStTag
9fc000f0:	bcc80000 	cache	0x8,0(a2)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:97
	add	    a3, -1				// Decrement set counter
9fc000f4:	20e7ffff 	addi	a3,a3,-1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:98
	bne     a3, zero, next_icache_tag
9fc000f8:	14e0fffd 	bnez	a3,9fc000f0 <next_icache_tag>
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:99
	add     a2, v1				// Get next line address
9fc000fc:	00c33020 	add	a2,a2,v1

9fc00100 <done_icache>:
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:103

done_icache:

    jr      ra
9fc00100:	03e00008 	jr	ra
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:104
    nop
9fc00104:	00000000 	nop

9fc00108 <init_dcache>:
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:113
* init_dcache invalidates all data cache entries
**************************************************************************************/

LEAF(init_dcache)

	mfc0	v0, C0_CONFIG1		// read C0_Config1
9fc00108:	40028001 	mfc0	v0,c0_config1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:116

	// Isolate D$ Line Size
	ext	    v1, v0, CFG1_DLSHIFT, 3		// extract DL
9fc0010c:	7c431280 	ext	v1,v0,0xa,0x3
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:119

	// Skip ahead if No D$
	beq	    v1, zero, done_dcache
9fc00110:	10600013 	beqz	v1,9fc00160 <done_dcache>
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:120
	nop
9fc00114:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:122

	li	    a2, 2
9fc00118:	24060002 	li	a2,2
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:123
	sllv	v1, a2, v1			// Now have true D$ line size in bytes
9fc0011c:	00661804 	sllv	v1,a2,v1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:125

	ext	    a0, v0, CFG1_DSSHIFT, 3		// extract DS
9fc00120:	7c441340 	ext	a0,v0,0xd,0x3
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:126
	li	    a2, 64
9fc00124:	24060040 	li	a2,64
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:127
	sllv	a0, a2, a0	// D$ Sets per way
9fc00128:	00862004 	sllv	a0,a2,a0
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:130

	// Config1DA == D$ Assoc - 1
	ext	    a1, v0, CFG1_DASHIFT, 3		// extract DA
9fc0012c:	7c4511c0 	ext	a1,v0,0x7,0x3
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:131
	add	    a1, 1
9fc00130:	20a50001 	addi	a1,a1,1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:133

	mul	    a0, a0, a1			// Get total number of sets
9fc00134:	70852002 	mul	a0,a0,a1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:135

	lui	    a2, 0x8000		    // Get a KSeg0 address for cacheops
9fc00138:	3c068000 	lui	a2,0x8000
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:138

	// Clear TagLo/TagHi registers
	mtc0	zero, C0_TAGLO		// write C0_TagLo
9fc0013c:	4080e000 	mtc0	zero,c0_taglo
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:139
	mtc0	zero, C0_TAGHI		// write C0_TagHi
9fc00140:	4080e800 	mtc0	zero,c0_taghi
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:140
	mtc0	zero, C0_TAGLO, 2	// write C0_DTagLo
9fc00144:	4080e002 	mtc0	zero,c0_taglo1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:141
	mtc0	zero, C0_TAGHI, 2	// write C0_DTagHi
9fc00148:	4080e802 	mtc0	zero,c0_taghi1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:143

	move	a3, a0
9fc0014c:	00803825 	move	a3,a0

9fc00150 <next_dcache_tag>:
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:149

next_dcache_tag:
	// Index Store Tag Cache Op
	// Will invalidate the tag entry, clear the lock bit, and clear the LRF bit

    cache	0x9, 0(a2)			// DCIndexStTag
9fc00150:	bcc90000 	cache	0x9,0(a2)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:150
	add	    a3, -1			    // Decrement set counter
9fc00154:	20e7ffff 	addi	a3,a3,-1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:152

	bne	    a3, zero, next_dcache_tag
9fc00158:	14e0fffd 	bnez	a3,9fc00150 <next_dcache_tag>
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:153
	add	    a2, v1		    	// Get next line address
9fc0015c:	00c33020 	add	a2,a2,v1

9fc00160 <done_dcache>:
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:156

done_dcache:
    jr      ra
9fc00160:	03e00008 	jr	ra
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:157
    nop
9fc00164:	00000000 	nop

9fc00168 <change_k0_cca>:
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:163
END(init_dcache)

LEAF(change_k0_cca)
	// NOTE! This code must be executed in KSEG1 (not KSGE0 uncached)
    // Set CCA for kseg0 to cacheable
	mfc0	v0, C0_CONFIG	// read C0_Config
9fc00168:	40028000 	mfc0	v0,c0_config
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:164
	li	v1, 3			// CCA for single-core processors
9fc0016c:	24030003 	li	v1,3
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:165
      ins	v0, v1, 0, 3	// insert K0
9fc00170:	7c621004 	ins	v0,v1,0x0,0x3
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:166
	mtc0	v0, C0_CONFIG	// write C0_Config
9fc00174:	40828000 	mtc0	v0,c0_config
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:167
	jr.hb   ra
9fc00178:	03e00408 	jr.hb	ra
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_caches.S:168
    	nop
9fc0017c:	00000000 	nop
	...
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:153
**************************************************************************************/
/* NOTE: the linker script must insure that this code starts at start + 0x200 so the exception */
/* vectors will be addressed properly. All .org assume this! */
/* TLB refill, 32 bit task. */
.org 0x200                      # TLB refill, 32 bit task.
    sdbbp                       # This has the effect of starting the debugger
9fc00200:	7000003f 	sdbbp
	...
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:157
    nop

.org 0x280                      # XTLB refill, 64 bit task. start + 0x280
    sdbbp                       # This has the effect of starting the debugger
9fc00280:	7000003f 	sdbbp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:158
    nop
9fc00284:	00000000 	nop

9fc00288 <init_cp0>:
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:59
/**************************************************************************************
**************************************************************************************/
LEAF(init_cp0)

    // Initialize Status
	li	    v1, 0x00400404		// (M_StatusERL | M_StatusIPL1 | M_StatusBEV)
9fc00288:	3c030040 	lui	v1,0x40
9fc0028c:	34630404 	ori	v1,v1,0x404
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:60
	mtc0	v1, C0_STATUS		// write C0_Status
9fc00290:	40836000 	mtc0	v1,c0_status
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:63

	// Initialize Watch registers if implemented.
	mfc0	v0, C0_CONFIG1		// read C0_Config1
9fc00294:	40028001 	mfc0	v0,c0_config1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:64
	ext	    v1, v0, 3, 1		// extract bit 3 WR (Watch registers implemented)
9fc00298:	7c4300c0 	ext	v1,v0,0x3,0x1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:65
	beq 	v1, zero, done_wr
9fc0029c:	10600011 	beqz	v1,9fc002e4 <done_wr>
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:66
	li    	v1, 0x7				// (M_WatchHiI | M_WatchHiR | M_WatchHiW)
9fc002a0:	24030007 	li	v1,7
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:69

	// Clear all possible Watch Status bits and disable watch exceptions
	mtc0	v1, C0_WATCHHI		// write C0_WatchHi0
9fc002a4:	40839800 	mtc0	v1,c0_watchhi
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:70
	mtc0	zero, C0_WATCHLO	// write C0_WatchLo0
9fc002a8:	40809000 	mtc0	zero,c0_watchlo
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:72

	mtc0	v1, C0_WATCHHI, 1	// write C0_WatchHi1
9fc002ac:	40839801 	mtc0	v1,c0_watchhi,1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:73
	mtc0	zero, C0_WATCHLO, 1	// write C0_WatchLo1
9fc002b0:	40809001 	mtc0	zero,c0_watchlo,1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:75

	mtc0	v1, C0_WATCHHI, 2	// write C0_WatchHi2
9fc002b4:	40839802 	mtc0	v1,c0_watchhi,2
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:76
	mtc0	zero, C0_WATCHLO, 2	// write C0_WatchLo2
9fc002b8:	40809002 	mtc0	zero,c0_watchlo,2
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:78

	mtc0	v1, C0_WATCHHI, 3	// write C0_WatchHi3
9fc002bc:	40839803 	mtc0	v1,c0_watchhi,3
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:79
	mtc0	zero, C0_WATCHLO, 3	// write C0_WatchLo3
9fc002c0:	40809003 	mtc0	zero,c0_watchlo,3
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:81

	mtc0	v1, C0_WATCHHI, 4	// write C0_WatchHi4
9fc002c4:	40839804 	mtc0	v1,c0_watchhi,4
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:82
	mtc0	zero, C0_WATCHLO, 4	// write C0_WatchLo4
9fc002c8:	40809004 	mtc0	zero,c0_watchlo,4
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:84

	mtc0	v1, C0_WATCHHI, 5	// write C0_WatchHi5
9fc002cc:	40839805 	mtc0	v1,c0_watchhi,5
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:85
	mtc0	zero, C0_WATCHLO, 5	// write C0_WatchLo5
9fc002d0:	40809005 	mtc0	zero,c0_watchlo,5
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:87

	mtc0	v1, C0_WATCHHI, 6	// write C0_WatchHi6
9fc002d4:	40839806 	mtc0	v1,c0_watchhi,6
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:88
	mtc0	zero, C0_WATCHLO, 6	// write C0_WatchLo6
9fc002d8:	40809006 	mtc0	zero,c0_watchlo,6
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:90

	mtc0	v1, C0_WATCHHI, 7	// write C0_WatchHi7
9fc002dc:	40839807 	mtc0	v1,c0_watchhi,7
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:91
	mtc0	zero, C0_WATCHLO, 7	// write C0_WatchLo7
9fc002e0:	40809007 	mtc0	zero,c0_watchlo,7

9fc002e4 <done_wr>:
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:96

done_wr:

	// Clear WP bit to avoid watch exception upon user code entry, IV, and software interrupts.
	mtc0	zero, C0_CAUSE		// write C0_Cause: Init AFTER init of CP0 WatchHi/Lo registers.
9fc002e4:	40806800 	mtc0	zero,c0_cause
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:99

	// Clear timer interrupt. (Count was cleared at the reset vector to allow timing boot.)
	mtc0	zero, C0_COMPARE	// write C0_Compare
9fc002e8:	40805800 	mtc0	zero,c0_compare
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:101

        jr      ra
9fc002ec:	03e00008 	jr	ra
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_cp0.S:102
	nop
9fc002f0:	00000000 	nop
	...
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:163

#include "init_cp0.S"

.org 0x300                      # Cache error exception. start + 0x300
    sdbbp                       # This has the effect of starting the debugger
9fc00300:	7000003f 	sdbbp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:164
    nop
9fc00304:	00000000 	nop

9fc00308 <init_tlb>:
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_tlb.S:60
**************************************************************************************/
LEAF(init_tlb)

check_for_tlb:
	// Determine if we have a TLB
	mfc0    v1, C0_CONFIG			// read C0_Config
9fc00308:	40038000 	mfc0	v1,c0_config
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_tlb.S:61
	ext	    v1, v1, 7, 3			// extract MT field
9fc0030c:	7c6311c0 	ext	v1,v1,0x7,0x3
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_tlb.S:62
	li	    a3, 0x1					// load a 1 to check against
9fc00310:	24070001 	li	a3,1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_tlb.S:63
	bne	    v1, a3, done_init_tlb
9fc00314:	1467000f 	bne	v1,a3,9fc00354 <done_init_tlb>
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_tlb.S:64
	mfc0    v0, C0_CONFIG1			// C0_Config1
9fc00318:	40028001 	mfc0	v0,c0_config1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_tlb.S:65
	nop
9fc0031c:	00000000 	nop

9fc00320 <start_init_tlb>:
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_tlb.S:69

start_init_tlb:
	// Config1MMUSize == Number of TLB entries - 1
	ext     v1, v0, CFG1_MMUSSHIFT, 6 // extract MMU Size
9fc00320:	7c432e40 	ext	v1,v0,0x19,0x6
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_tlb.S:70
	mtc0    zero, C0_ENTRYLO0		// write C0_EntryLo0
9fc00324:	40801000 	mtc0	zero,c0_entrylo0
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_tlb.S:71
	mtc0    zero, C0_ENTRYLO1		// write C0_EntryLo1
9fc00328:	40801800 	mtc0	zero,c0_entrylo1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_tlb.S:72
	mtc0    zero, C0_PAGEMASK		// write C0_PageMask
9fc0032c:	40802800 	mtc0	zero,c0_pagemask
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_tlb.S:73
	mtc0    zero, C0_WIRED			// write C0_Wired
9fc00330:	40803000 	mtc0	zero,c0_wired
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_tlb.S:74
	li	    a0, 0x80000000
9fc00334:	3c048000 	lui	a0,0x8000

9fc00338 <next_tlb_entry_pair>:
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_tlb.S:77

next_tlb_entry_pair:
	mtc0    v1, C0_INDEX			// write C0_Index
9fc00338:	40830000 	mtc0	v1,c0_index
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_tlb.S:78
	mtc0	a0, C0_ENTRYHI			// write C0_EntryHi
9fc0033c:	40845000 	mtc0	a0,c0_entryhi
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_tlb.S:79
	ehb
9fc00340:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_tlb.S:80
	tlbwi
9fc00344:	42000002 	tlbwi
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_tlb.S:82
	#add	    a0, (2<<13)				// Add 8K to the address to avoid TLB conflict with previous entry
	add	    a0, (2<<12)				// Add 8K to the address to avoid TLB conflict with previous entry
9fc00348:	20842000 	addi	a0,a0,8192
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_tlb.S:84

	bne		v1, zero, next_tlb_entry_pair
9fc0034c:	1460fffa 	bnez	v1,9fc00338 <next_tlb_entry_pair>
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_tlb.S:85
	add	    v1, -1
9fc00350:	2063ffff 	addi	v1,v1,-1

9fc00354 <done_init_tlb>:
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_tlb.S:88

done_init_tlb:
    jr      ra
9fc00354:	03e00008 	jr	ra
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/init_tlb.S:89
    nop
9fc00358:	00000000 	nop
	...
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:171
#include "init_tlb.S"


.org 0x380    /* General exception. */
    # display alternating one-zeros on board LEDs
    li      k0, BOARD_16_LEDS_ADDR  # Board LEDs display
9fc00380:	3c1abf80 	lui	k0,0xbf80
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:172
    li      k1, 0x5555          # alternating one-zeros
9fc00384:	241b5555 	li	k1,21845
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:173
    sw      k1, 0(k0)           # Write pattern to LEDs
9fc00388:	af5b0000 	sw	k1,0(k0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:174
    eret
9fc0038c:	42000018 	eret
	...
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:181

# If you want the above code to fit into 1k flash you will need to leave out the
# code below. This is the code that covers the debug exception which you normally will not get.

.org 0x480 /* EJTAG debug exception (EJTAG Control Register[ProbTrap] == 0.) */
    li      r24_malta_word, BOARD_16_LEDS_ADDR     # If post boot then $24 is clobbered.
9fc00480:	3c18bf80 	lui	t8,0xbf80
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:182
    mtc0    a0, C0_DESAVE       # DeSave a0
9fc00484:	4084f800 	mtc0	a0,c0_desave
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:183
    mfc0    a0, C0_DEPC         # Read DEPC
9fc00488:	4004c000 	mfc0	a0,c0_depc
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:184
    sw      a0, 0(r24_malta_word)    # Display lower 16 bits of DEPC if there is not an EJTAG probe.
9fc0048c:	af040000 	sw	a0,0(t8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:185
    mfc0    a0, C0_DESAVE       # Restore a0
9fc00490:	4004f800 	mfc0	a0,c0_desave
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:186
1:  b       1b  /* Stay here */
9fc00494:	1000ffff 	b	9fc00494 <done_init_tlb+0x140>
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/boot.S:187
    nop
9fc00498:	00000000 	nop
done_init_tlb():
9fc0049c:	00000000 	nop

Disassembly of section .exception_vector:

80000000 <__exception_entry>:
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:68
80000000:	3c1b8001 	lui	k1,0x8001
80000004:	277bc228 	addiu	k1,k1,-15832
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:69
80000008:	8f7b0000 	lw	k1,0(k1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:70
8000000c:	13600003 	beqz	k1,8000001c <__exception_entry+0x1c>
80000010:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:73
80000014:	08000081 	j	80000204 <_start>
80000018:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:75
8000001c:	3c1b8001 	lui	k1,0x8001
80000020:	277bb9ec 	addiu	k1,k1,-17940
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:76
80000024:	1360fff6 	beqz	k1,80000000 <__exception_entry>
80000028:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:77
8000002c:	03600008 	jr	k1
80000030:	00000000 	nop
	...

80000080 <__xtlb_refill_loop>:
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:83
80000080:	3c1b8001 	lui	k1,0x8001
80000084:	277bb9ec 	addiu	k1,k1,-17940
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:84
80000088:	1360fffd 	beqz	k1,80000080 <__xtlb_refill_loop>
8000008c:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:85
80000090:	03600008 	jr	k1
80000094:	00000000 	nop
	...

80000100 <__cache_error_loop>:
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:90
80000100:	3c1b0000 	lui	k1,0x0
80000104:	277b0000 	addiu	k1,k1,0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:91
80000108:	1360fffd 	beqz	k1,80000100 <__cache_error_loop>
8000010c:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:92
80000110:	03600008 	jr	k1
80000114:	00000000 	nop
	...
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:96
80000180:	afbbffc8 	sw	k1,-56(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:99
80000184:	3c1b8001 	lui	k1,0x8001
80000188:	277bb9ec 	addiu	k1,k1,-17940
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:100
8000018c:	03600008 	jr	k1
80000190:	00000000 	nop
__cache_error_loop():
80000194:	00000000 	nop

Disassembly of section .text:

80000200 <_start-0x4>:
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:78
80000200:	00000000 	nop

80000204 <_start>:
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:111
80000204:	3c088001 	lui	t0,0x8001
80000208:	2508bdf0 	addiu	t0,t0,-16912
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:112
8000020c:	ad040000 	sw	a0,0(t0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:113
80000210:	ad050004 	sw	a1,4(t0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:121
80000214:	ad060008 	sw	a2,8(t0)
80000218:	3c198001 	lui	t9,0x8001
8000021c:	2739b93c 	addiu	t9,t9,-18116
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:122
80000220:	13200006 	beqz	t9,8000023c <_start+0x38>
80000224:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:123
80000228:	03e02025 	move	a0,ra
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:124
8000022c:	0320f809 	jalr	t9
80000230:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:125
80000234:	10000004 	b	80000248 <_start+0x44>
80000238:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:128
8000023c:	40806800 	mtc0	zero,c0_cause
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:129
80000240:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:130
80000244:	00001025 	move	v0,zero
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:136
80000248:	3c088001 	lui	t0,0x8001
8000024c:	2508bc10 	addiu	t0,t0,-17392
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:137
80000250:	3c098001 	lui	t1,0x8001
80000254:	2529bc28 	addiu	t1,t1,-17368
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:138
80000258:	2529ffe8 	addiu	t1,t1,-24
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:142
8000025c:	15090021 	bne	t0,t1,800002e4 <_start+0xe0>
80000260:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:145
80000264:	91090002 	lbu	t1,2(t0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:146
80000268:	2d230003 	sltiu	v1,t1,3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:148
8000026c:	10600003 	beqz	v1,8000027c <_start+0x78>
80000270:	39290040 	xori	t1,t1,0x40
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:149
80000274:	3c030010 	lui	v1,0x10
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:150
80000278:	00431025 	or	v0,v0,v1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:153
8000027c:	15200002 	bnez	t1,80000288 <_start+0x84>
80000280:	240300e0 	li	v1,224
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:154
80000284:	00431025 	or	v0,v0,v1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:157
80000288:	8d09000c 	lw	t1,12(t0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:158
8000028c:	31290013 	andi	t1,t1,0x13
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:160
80000290:	11200002 	beqz	t1,8000029c <_start+0x98>
80000294:	3c030100 	lui	v1,0x100
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:161
80000298:	00431025 	or	v0,v0,v1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:164
8000029c:	91090007 	lbu	t1,7(t0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:165
800002a0:	39290003 	xori	t1,t1,0x3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:167
800002a4:	11200010 	beqz	t1,800002e8 <_start+0xe4>
800002a8:	3c032000 	lui	v1,0x2000
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:168
800002ac:	00431025 	or	v0,v0,v1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:171
800002b0:	91090005 	lbu	t1,5(t0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:172
800002b4:	39290002 	xori	t1,t1,0x2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:174
800002b8:	15200002 	bnez	t1,800002c4 <_start+0xc0>
800002bc:	3c030400 	lui	v1,0x400
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:175
800002c0:	00431025 	or	v0,v0,v1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:178
800002c4:	8d09000c 	lw	t1,12(t0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:179
800002c8:	31290200 	andi	t1,t1,0x200
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:181
800002cc:	11200006 	beqz	t1,800002e8 <_start+0xe4>
800002d0:	3c030400 	lui	v1,0x400
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:182
800002d4:	00431025 	or	v0,v0,v1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:183
800002d8:	3c030800 	lui	v1,0x800
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:188
800002dc:	10000002 	b	800002e8 <_start+0xe4>
800002e0:	40838005 	mtc0	v1,$16,5
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:194
800002e4:	24020000 	li	v0,0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:201
800002e8:	40826000 	mtc0	v0,c0_status
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:202
800002ec:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:205
800002f0:	3c080000 	lui	t0,0x0
800002f4:	25080000 	addiu	t0,t0,0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:206
800002f8:	11000003 	beqz	t0,80000308 <_start+0x104>
800002fc:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:207
80000300:	0100f809 	jalr	t0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:213
80000304:	00000000 	nop
80000308:	3c028000 	lui	v0,0x8000
8000030c:	24420318 	addiu	v0,v0,792
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:214
80000310:	00400008 	jr	v0
80000314:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:216
80000318:	3c1c8001 	lui	gp,0x8001
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:227
8000031c:	279c422d 	addiu	gp,gp,16941

80000320 <zerobss>:
80000320:	3c028001 	lui	v0,0x8001
80000324:	2442c25c 	addiu	v0,v0,-15780
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:228
80000328:	3c038002 	lui	v1,0x8002
8000032c:	2463b920 	addiu	v1,v1,-18144
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:229
80000330:	10430004 	beq	v0,v1,80000344 <zerobss+0x24>
80000334:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:231
80000338:	24420004 	addiu	v0,v0,4
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:233
8000033c:	1443fffe 	bne	v0,v1,80000338 <zerobss+0x18>
80000340:	ac40fffc 	sw	zero,-4(v0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:236
80000344:	3c088004 	lui	t0,0x8004
80000348:	25080000 	addiu	t0,t0,0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:237
8000034c:	1500000b 	bnez	t0,8000037c <zerobss+0x5c>
80000350:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:239
80000354:	3c1d8002 	lui	sp,0x8002
80000358:	27bdb910 	addiu	sp,sp,-18160
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:241
8000035c:	24040000 	li	a0,0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:242
80000360:	3c058002 	lui	a1,0x8002
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:243
80000364:	0c002e3c 	jal	8000b8f0 <_get_ram_range>
80000368:	24a5b910 	addiu	a1,a1,-18160
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:246
8000036c:	3c048002 	lui	a0,0x8002
80000370:	2484b910 	addiu	a0,a0,-18160
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:247
80000374:	8c880000 	lw	t0,0(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:248
80000378:	8d00fffc 	lw	zero,-4(t0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:253
8000037c:	2508ffc0 	addiu	t0,t0,-64
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:269
80000380:	0100e825 	move	sp,t0

80000384 <init>:
80000384:	3c190000 	lui	t9,0x0
80000388:	27390000 	addiu	t9,t9,0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:270
8000038c:	13200003 	beqz	t9,8000039c <init+0x18>
80000390:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:271
80000394:	0320f809 	jalr	t9
80000398:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:273
8000039c:	3c190000 	lui	t9,0x0
800003a0:	27390000 	addiu	t9,t9,0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:274
800003a4:	13200003 	beqz	t9,800003b4 <init+0x30>
800003a8:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:275
800003ac:	0320f809 	jalr	t9
800003b0:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:277
800003b4:	3c048001 	lui	a0,0x8001
800003b8:	2484bbd8 	addiu	a0,a0,-17448
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:278
800003bc:	0c002bef 	jal	8000afbc <atexit>
800003c0:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:288
800003c4:	0c002eed 	jal	8000bbb4 <_init>
800003c8:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:291
800003cc:	3c088001 	lui	t0,0x8001
800003d0:	2508bdf0 	addiu	t0,t0,-16912
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:292
800003d4:	8d040000 	lw	a0,0(t0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:293
800003d8:	8d050004 	lw	a1,4(t0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:294
800003dc:	8d060008 	lw	a2,8(t0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:298
800003e0:	3c080000 	lui	t0,0x0
800003e4:	25080000 	addiu	t0,t0,0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:299
800003e8:	11000003 	beqz	t0,800003f8 <init+0x74>
800003ec:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:300
800003f0:	0100f809 	jalr	t0
800003f4:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:303
800003f8:	1c800013 	bgtz	a0,80000448 <init+0xc4>
800003fc:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:305
80000400:	1080000c 	beqz	a0,80000434 <init+0xb0>
80000404:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:308
80000408:	2884ffff 	slti	a0,a0,-1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:309
8000040c:	14800009 	bnez	a0,80000434 <init+0xb0>
80000410:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:313
80000414:	3c088001 	lui	t0,0x8001
80000418:	2508b838 	addiu	t0,t0,-18376
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:314
8000041c:	11000005 	beqz	t0,80000434 <init+0xb0>
80000420:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:315
80000424:	0100f809 	jalr	t0
80000428:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:316
8000042c:	10000006 	b	80000448 <init+0xc4>
80000430:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:319
80000434:	00002025 	move	a0,zero
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:320
80000438:	27a50020 	addiu	a1,sp,32
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:321
8000043c:	27a60028 	addiu	a2,sp,40
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:322
80000440:	aca00000 	sw	zero,0(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:323
80000444:	acc00000 	sw	zero,0(a2)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:326
80000448:	0c0003b5 	jal	80000ed4 <main>
8000044c:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:330
80000450:	0c002bf9 	jal	8000afe4 <exit>
80000454:	00402025 	move	a0,v0

80000458 <_exit>:
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:355
80000458:	3c088001 	lui	t0,0x8001
8000045c:	2508bdf0 	addiu	t0,t0,-16912
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:356
80000460:	ad040000 	sw	a0,0(t0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:373
80000464:	3c080000 	lui	t0,0x0
80000468:	25080000 	addiu	t0,t0,0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:374
8000046c:	11000003 	beqz	t0,8000047c <_exit+0x24>
80000470:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:375
80000474:	0100f809 	jalr	t0
80000478:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:379
8000047c:	3c088001 	lui	t0,0x8001
80000480:	2508bdf0 	addiu	t0,t0,-16912
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:383
80000484:	0c002dec 	jal	8000b7b0 <__exit>
80000488:	8d040000 	lw	a0,0(t0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:386
8000048c:	03ff000d 	break	0x3ff
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/crt0.S:387
80000490:	1000fff1 	b	80000458 <_exit>
80000494:	00000000 	nop

80000498 <deregister_tm_clones>:
deregister_tm_clones():
80000498:	3c048001 	lui	a0,0x8001
8000049c:	3c028001 	lui	v0,0x8001
800004a0:	2484c22c 	addiu	a0,a0,-15828
800004a4:	2442c22f 	addiu	v0,v0,-15825
800004a8:	00441023 	subu	v0,v0,a0
800004ac:	2c420007 	sltiu	v0,v0,7
800004b0:	14400006 	bnez	v0,800004cc <deregister_tm_clones+0x34>
800004b4:	3c190000 	lui	t9,0x0
800004b8:	27390000 	addiu	t9,t9,0
800004bc:	13200003 	beqz	t9,800004cc <deregister_tm_clones+0x34>
800004c0:	00000000 	nop
800004c4:	03200008 	jr	t9
800004c8:	00000000 	nop
800004cc:	03e00008 	jr	ra
800004d0:	00000000 	nop

800004d4 <register_tm_clones>:
register_tm_clones():
800004d4:	3c048001 	lui	a0,0x8001
800004d8:	3c028001 	lui	v0,0x8001
800004dc:	2484c22c 	addiu	a0,a0,-15828
800004e0:	2442c22c 	addiu	v0,v0,-15828
800004e4:	00441023 	subu	v0,v0,a0
800004e8:	00021083 	sra	v0,v0,0x2
800004ec:	00022fc2 	srl	a1,v0,0x1f
800004f0:	00a22821 	addu	a1,a1,v0
800004f4:	00052843 	sra	a1,a1,0x1
800004f8:	10a00006 	beqz	a1,80000514 <register_tm_clones+0x40>
800004fc:	3c190000 	lui	t9,0x0
80000500:	27390000 	addiu	t9,t9,0
80000504:	13200003 	beqz	t9,80000514 <register_tm_clones+0x40>
80000508:	00000000 	nop
8000050c:	03200008 	jr	t9
80000510:	00000000 	nop
80000514:	03e00008 	jr	ra
80000518:	00000000 	nop

8000051c <__do_global_dtors_aux>:
__do_global_dtors_aux():
8000051c:	27bdffd8 	addiu	sp,sp,-40
80000520:	afb10018 	sw	s1,24(sp)
80000524:	3c118001 	lui	s1,0x8001
80000528:	afbf0024 	sw	ra,36(sp)
8000052c:	afb30020 	sw	s3,32(sp)
80000530:	afb2001c 	sw	s2,28(sp)
80000534:	afb00014 	sw	s0,20(sp)
80000538:	9222c33c 	lbu	v0,-15556(s1)
8000053c:	14400020 	bnez	v0,800005c0 <__do_global_dtors_aux+0xa4>
80000540:	3c028001 	lui	v0,0x8001
80000544:	3c108001 	lui	s0,0x8001
80000548:	2442bc04 	addiu	v0,v0,-17404
8000054c:	2610bc08 	addiu	s0,s0,-17400
80000550:	3c138001 	lui	s3,0x8001
80000554:	02028023 	subu	s0,s0,v0
80000558:	00409025 	move	s2,v0
8000055c:	00108083 	sra	s0,s0,0x2
80000560:	2610ffff 	addiu	s0,s0,-1
80000564:	8e62c340 	lw	v0,-15552(s3)
80000568:	0050182b 	sltu	v1,v0,s0
8000056c:	10600009 	beqz	v1,80000594 <__do_global_dtors_aux+0x78>
80000570:	24420001 	addiu	v0,v0,1
80000574:	ae62c340 	sw	v0,-15552(s3)
80000578:	00021080 	sll	v0,v0,0x2
8000057c:	02421021 	addu	v0,s2,v0
80000580:	8c420000 	lw	v0,0(v0)
80000584:	0040f809 	jalr	v0
80000588:	00000000 	nop
8000058c:	1000fff6 	b	80000568 <__do_global_dtors_aux+0x4c>
80000590:	8e62c340 	lw	v0,-15552(s3)
80000594:	0c000126 	jal	80000498 <deregister_tm_clones>
80000598:	00000000 	nop
8000059c:	3c020000 	lui	v0,0x0
800005a0:	24420000 	addiu	v0,v0,0
800005a4:	10400005 	beqz	v0,800005bc <__do_global_dtors_aux+0xa0>
800005a8:	24020001 	li	v0,1
800005ac:	3c048001 	lui	a0,0x8001
800005b0:	0c000000 	jal	80000000 <__app_start>
800005b4:	2484bbf4 	addiu	a0,a0,-17420
800005b8:	24020001 	li	v0,1
800005bc:	a222c33c 	sb	v0,-15556(s1)
800005c0:	8fbf0024 	lw	ra,36(sp)
800005c4:	8fb30020 	lw	s3,32(sp)
800005c8:	8fb2001c 	lw	s2,28(sp)
800005cc:	8fb10018 	lw	s1,24(sp)
800005d0:	8fb00014 	lw	s0,20(sp)
800005d4:	03e00008 	jr	ra
800005d8:	27bd0028 	addiu	sp,sp,40

800005dc <frame_dummy>:
frame_dummy():
800005dc:	3c020000 	lui	v0,0x0
800005e0:	27bdffe8 	addiu	sp,sp,-24
800005e4:	24420000 	addiu	v0,v0,0
800005e8:	10400006 	beqz	v0,80000604 <frame_dummy+0x28>
800005ec:	afbf0014 	sw	ra,20(sp)
800005f0:	3c048001 	lui	a0,0x8001
800005f4:	3c058001 	lui	a1,0x8001
800005f8:	2484bbf4 	addiu	a0,a0,-17420
800005fc:	0c000000 	jal	80000000 <__app_start>
80000600:	24a5c344 	addiu	a1,a1,-15548
80000604:	3c048001 	lui	a0,0x8001
80000608:	2484bbf8 	addiu	a0,a0,-17416
8000060c:	8c820000 	lw	v0,0(a0)
80000610:	10400008 	beqz	v0,80000634 <frame_dummy+0x58>
80000614:	8fbf0014 	lw	ra,20(sp)
80000618:	3c020000 	lui	v0,0x0
8000061c:	24420000 	addiu	v0,v0,0
80000620:	10400004 	beqz	v0,80000634 <frame_dummy+0x58>
80000624:	00000000 	nop
80000628:	0040f809 	jalr	v0
8000062c:	00000000 	nop
80000630:	8fbf0014 	lw	ra,20(sp)
80000634:	08000135 	j	800004d4 <register_tm_clones>
80000638:	27bd0018 	addiu	sp,sp,24

8000063c <vPortTickInterruptHandler>:
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:97
	.set  noat
    /*.section .text, code*/

LEAF(vPortTickInterruptHandler)

	portSAVE_CONTEXT
8000063c:	401a6800 	mfc0	k0,c0_cause
80000640:	27bdff60 	addiu	sp,sp,-160
80000644:	401b6000 	mfc0	k1,c0_status
80000648:	afb70030 	sw	s7,48(sp)
8000064c:	afb6002c 	sw	s6,44(sp)
80000650:	afb50028 	sw	s5,40(sp)
80000654:	afbb009c 	sw	k1,156(sp)
80000658:	001ad282 	srl	k0,k0,0xa
8000065c:	7f5b8284 	ins	k1,k0,0xa,0x7
80000660:	001ad1c2 	srl	k0,k0,0x7
80000664:	7f5b9484 	ins	k1,k0,0x12,0x1
80000668:	7c1b2044 	ins	k1,zero,0x1,0x4
8000066c:	001da820 	add	s5,zero,sp
80000670:	3c1a8001 	lui	k0,0x8001
80000674:	275ac248 	addiu	k0,k0,-15800
80000678:	8f560000 	lw	s6,0(k0)
8000067c:	16c00004 	bnez	s6,80000690 <vPortTickInterruptHandler+0x54>
80000680:	00000000 	nop
80000684:	3c1d8001 	lui	sp,0x8001
80000688:	27bdc244 	addiu	sp,sp,-15804
8000068c:	8fbd0000 	lw	sp,0(sp)
80000690:	26d60001 	addiu	s6,s6,1
80000694:	af560000 	sw	s6,0(k0)
80000698:	40167000 	mfc0	s6,c0_epc
8000069c:	409b6000 	mtc0	k1,c0_status
800006a0:	aebf0078 	sw	ra,120(s5)
800006a4:	aebe0074 	sw	s8,116(s5)
800006a8:	aeb90070 	sw	t9,112(s5)
800006ac:	aeb8006c 	sw	t8,108(s5)
800006b0:	aeaf0068 	sw	t7,104(s5)
800006b4:	aeae0064 	sw	t6,100(s5)
800006b8:	aead0060 	sw	t5,96(s5)
800006bc:	aeac005c 	sw	t4,92(s5)
800006c0:	aeab0058 	sw	t3,88(s5)
800006c4:	aeaa0054 	sw	t2,84(s5)
800006c8:	aea90050 	sw	t1,80(s5)
800006cc:	aea8004c 	sw	t0,76(s5)
800006d0:	aea70048 	sw	a3,72(s5)
800006d4:	aea60044 	sw	a2,68(s5)
800006d8:	aea50040 	sw	a1,64(s5)
800006dc:	aea4003c 	sw	a0,60(s5)
800006e0:	aea30038 	sw	v1,56(s5)
800006e4:	aea20034 	sw	v0,52(s5)
800006e8:	aeb60098 	sw	s6,152(s5)
800006ec:	aea10010 	sw	at,16(s5)
800006f0:	3c168001 	lui	s6,0x8001
800006f4:	26d6c248 	addiu	s6,s6,-15800
800006f8:	8ed60000 	lw	s6,0(s6)
800006fc:	26d6ffff 	addiu	s6,s6,-1
80000700:	16c00004 	bnez	s6,80000714 <vPortTickInterruptHandler+0xd8>
80000704:	00000000 	nop
80000708:	3c168001 	lui	s6,0x8001
8000070c:	26d6c318 	addiu	s6,s6,-15592
80000710:	aed50000 	sw	s5,0(s6)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:99

	jal 		vPortIncrementTick
80000714:	0c0029af 	jal	8000a6bc <vPortIncrementTick>
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:100
	nop
80000718:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:102

	portRESTORE_CONTEXT
8000071c:	3c168001 	lui	s6,0x8001
80000720:	26d6c248 	addiu	s6,s6,-15800
80000724:	8ed60000 	lw	s6,0(s6)
80000728:	26d6ffff 	addiu	s6,s6,-1
8000072c:	16c00004 	bnez	s6,80000740 <vPortTickInterruptHandler+0x104>
80000730:	00000000 	nop
80000734:	3c168001 	lui	s6,0x8001
80000738:	26d6c318 	addiu	s6,s6,-15592
8000073c:	8ed50000 	lw	s5,0(s6)
80000740:	8eb70030 	lw	s7,48(s5)
80000744:	8eb6002c 	lw	s6,44(s5)
80000748:	8ea20034 	lw	v0,52(s5)
8000074c:	8ea30038 	lw	v1,56(s5)
80000750:	8ea4003c 	lw	a0,60(s5)
80000754:	8ea50040 	lw	a1,64(s5)
80000758:	8ea60044 	lw	a2,68(s5)
8000075c:	8ea70048 	lw	a3,72(s5)
80000760:	8ea8004c 	lw	t0,76(s5)
80000764:	8ea90050 	lw	t1,80(s5)
80000768:	8eaa0054 	lw	t2,84(s5)
8000076c:	8eab0058 	lw	t3,88(s5)
80000770:	8eac005c 	lw	t4,92(s5)
80000774:	8ead0060 	lw	t5,96(s5)
80000778:	8eae0064 	lw	t6,100(s5)
8000077c:	8eaf0068 	lw	t7,104(s5)
80000780:	8eb8006c 	lw	t8,108(s5)
80000784:	8eb90070 	lw	t9,112(s5)
80000788:	8ebe0074 	lw	s8,116(s5)
8000078c:	8ebf0078 	lw	ra,120(s5)
80000790:	41606000 	di
80000794:	000000c0 	ehb
80000798:	3c1a8001 	lui	k0,0x8001
8000079c:	275ac248 	addiu	k0,k0,-15800
800007a0:	8f5b0000 	lw	k1,0(k0)
800007a4:	277bffff 	addiu	k1,k1,-1
800007a8:	af5b0000 	sw	k1,0(k0)
800007ac:	8eba009c 	lw	k0,156(s5)
800007b0:	8ebb0098 	lw	k1,152(s5)
800007b4:	0015e820 	add	sp,zero,s5
800007b8:	8fb50028 	lw	s5,40(sp)
800007bc:	27bd00a0 	addiu	sp,sp,160
800007c0:	409a6000 	mtc0	k0,c0_status
800007c4:	409b7000 	mtc0	k1,c0_epc
800007c8:	000000c0 	ehb
800007cc:	42000018 	eret
800007d0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:104
    
    jr      ra
800007d4:	03e00008 	jr	ra
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:105
    nop
800007d8:	00000000 	nop

800007dc <vPortStartFirstTask>:
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:119

LEAF(vPortStartFirstTask)

	/* Simply restore the context of the highest priority task that has been
	created so far. */
	portRESTORE_CONTEXT
800007dc:	3c168001 	lui	s6,0x8001
800007e0:	26d6c248 	addiu	s6,s6,-15800
800007e4:	8ed60000 	lw	s6,0(s6)
800007e8:	26d6ffff 	addiu	s6,s6,-1
800007ec:	16c00004 	bnez	s6,80000800 <vPortStartFirstTask+0x24>
800007f0:	00000000 	nop
800007f4:	3c168001 	lui	s6,0x8001
800007f8:	26d6c318 	addiu	s6,s6,-15592
800007fc:	8ed50000 	lw	s5,0(s6)
80000800:	8eb70030 	lw	s7,48(s5)
80000804:	8eb6002c 	lw	s6,44(s5)
80000808:	8ea20034 	lw	v0,52(s5)
8000080c:	8ea30038 	lw	v1,56(s5)
80000810:	8ea4003c 	lw	a0,60(s5)
80000814:	8ea50040 	lw	a1,64(s5)
80000818:	8ea60044 	lw	a2,68(s5)
8000081c:	8ea70048 	lw	a3,72(s5)
80000820:	8ea8004c 	lw	t0,76(s5)
80000824:	8ea90050 	lw	t1,80(s5)
80000828:	8eaa0054 	lw	t2,84(s5)
8000082c:	8eab0058 	lw	t3,88(s5)
80000830:	8eac005c 	lw	t4,92(s5)
80000834:	8ead0060 	lw	t5,96(s5)
80000838:	8eae0064 	lw	t6,100(s5)
8000083c:	8eaf0068 	lw	t7,104(s5)
80000840:	8eb8006c 	lw	t8,108(s5)
80000844:	8eb90070 	lw	t9,112(s5)
80000848:	8ebe0074 	lw	s8,116(s5)
8000084c:	8ebf0078 	lw	ra,120(s5)
80000850:	41606000 	di
80000854:	000000c0 	ehb
80000858:	3c1a8001 	lui	k0,0x8001
8000085c:	275ac248 	addiu	k0,k0,-15800
80000860:	8f5b0000 	lw	k1,0(k0)
80000864:	277bffff 	addiu	k1,k1,-1
80000868:	af5b0000 	sw	k1,0(k0)
8000086c:	8eba009c 	lw	k0,156(s5)
80000870:	8ebb0098 	lw	k1,152(s5)
80000874:	0015e820 	add	sp,zero,s5
80000878:	8fb50028 	lw	s5,40(sp)
8000087c:	27bd00a0 	addiu	sp,sp,160
80000880:	409a6000 	mtc0	k0,c0_status
80000884:	409b7000 	mtc0	k1,c0_epc
80000888:	000000c0 	ehb
8000088c:	42000018 	eret
	...

80000898 <vPortYieldISR>:
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:151
    knowledge of the stack frame size when no FPU is being used */

    /* Make room for the context. First save the current status so it can be
    manipulated, and the cause and EPC registers so thier original values are
    captured. */
    addiu	sp, sp, -portCONTEXT_SIZE
80000898:	27bdff60 	addiu	sp,sp,-160
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:152
    mfc0	k1, C0_SR
8000089c:	401b6000 	mfc0	k1,c0_status
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:156

    /* Also save s6 and s5 so they can be used.  Any nesting interrupts should
    maintain the values of these registers across the ISR. */
    sw		s6, 44(sp)
800008a0:	afb6002c 	sw	s6,44(sp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:157
    sw		s5, 40(sp)
800008a4:	afb50028 	sw	s5,40(sp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:158
    sw		k1, portSTATUS_STACK_LOCATION(sp)
800008a8:	afbb009c 	sw	k1,156(sp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:161

    /* Prepare to re-enabled interrupts above the kernel priority. */
    ins 	k1, zero, 10, 7         /* Clear IPL bits 0:6. */
800008ac:	7c1b8284 	ins	k1,zero,0xa,0x7
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:162
    ins 	k1, zero, 18, 1         /* Clear IPL bit 7.  It would be an error here if this bit were set anyway. */
800008b0:	7c1b9484 	ins	k1,zero,0x12,0x1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:163
    ori		k1, k1, ( configMAX_SYSCALL_INTERRUPT_PRIORITY << 10 )
800008b4:	377b0c00 	ori	k1,k1,0xc00
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:164
    ins		k1, zero, 1, 4          /* Clear EXL, ERL and UM. */
800008b8:	7c1b2044 	ins	k1,zero,0x1,0x4
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:167

    /* s5 is used as the frame pointer. */
    add		s5, zero, sp
800008bc:	001da820 	add	s5,zero,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:172

    /* Swap to the system stack.  This is not conditional on the nesting
    count as this interrupt is always the lowest priority and therefore
    the nesting is always 0. */
    la		sp, xISRStackTop
800008c0:	3c1d8001 	lui	sp,0x8001
800008c4:	27bdc244 	addiu	sp,sp,-15804
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:173
    lw		sp, (sp)
800008c8:	8fbd0000 	lw	sp,0(sp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:176

    /* Set the nesting count. */
    la		k0, uxInterruptNesting
800008cc:	3c1a8001 	lui	k0,0x8001
800008d0:	275ac248 	addiu	k0,k0,-15800
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:177
    addiu	s6, zero, 1
800008d4:	24160001 	li	s6,1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:178
    sw		s6, 0(k0)
800008d8:	af560000 	sw	s6,0(k0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:182

    /* s6 holds the EPC value, this is saved with the rest of the context
    after interrupts are enabled. */
    mfc0 	s6, C0_EPC
800008dc:	40167000 	mfc0	s6,c0_epc
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:185

    /* Re-enable interrupts above configMAX_SYSCALL_INTERRUPT_PRIORITY. */
    mtc0	k1, C0_SR
800008e0:	409b6000 	mtc0	k1,c0_status
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:189

    /* Save the context into the space just created.  s6 is saved again
    here as it now contains the EPC value. */
    sw		ra, 120(s5)
800008e4:	aebf0078 	sw	ra,120(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:190
    sw		s8, 116(s5)
800008e8:	aebe0074 	sw	s8,116(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:191
    sw		t9, 112(s5)
800008ec:	aeb90070 	sw	t9,112(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:192
    sw		t8, 108(s5)
800008f0:	aeb8006c 	sw	t8,108(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:193
    sw		t7, 104(s5)
800008f4:	aeaf0068 	sw	t7,104(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:194
    sw		t6, 100(s5)
800008f8:	aeae0064 	sw	t6,100(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:195
    sw		t5, 96(s5)
800008fc:	aead0060 	sw	t5,96(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:196
    sw		t4, 92(s5)
80000900:	aeac005c 	sw	t4,92(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:197
    sw		t3, 88(s5)
80000904:	aeab0058 	sw	t3,88(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:198
    sw		t2, 84(s5)
80000908:	aeaa0054 	sw	t2,84(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:199
    sw		t1, 80(s5)
8000090c:	aea90050 	sw	t1,80(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:200
    sw		t0, 76(s5)
80000910:	aea8004c 	sw	t0,76(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:201
    sw		a3, 72(s5)
80000914:	aea70048 	sw	a3,72(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:202
    sw		a2, 68(s5)
80000918:	aea60044 	sw	a2,68(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:203
    sw		a1, 64(s5)
8000091c:	aea50040 	sw	a1,64(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:204
    sw		a0, 60(s5)
80000920:	aea4003c 	sw	a0,60(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:205
    sw		v1, 56(s5)
80000924:	aea30038 	sw	v1,56(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:206
    sw		v0, 52(s5)
80000928:	aea20034 	sw	v0,52(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:207
    sw		s7, 48(s5)
8000092c:	aeb70030 	sw	s7,48(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:208
    sw		s6, portEPC_STACK_LOCATION(s5)
80000930:	aeb60098 	sw	s6,152(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:210
    /* s5 and s6 has already been saved. */
    sw		s4, 36(s5)
80000934:	aeb40024 	sw	s4,36(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:211
    sw		s3, 32(s5)
80000938:	aeb30020 	sw	s3,32(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:212
    sw		s2, 28(s5)
8000093c:	aeb2001c 	sw	s2,28(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:213
    sw		s1, 24(s5)
80000940:	aeb10018 	sw	s1,24(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:214
    sw		s0, 20(s5)
80000944:	aeb00014 	sw	s0,20(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:215
    sw		$1, 16(s5)
80000948:	aea10010 	sw	at,16(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:222
    /* s7 is used as a scratch register as this should always be saved across
    nesting interrupts. */


    /* Save the stack pointer to the task. */
    la		s7, pxCurrentTCB
8000094c:	3c178001 	lui	s7,0x8001
80000950:	26f7c2dc 	addiu	s7,s7,-15652
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:223
    lw		s7, (s7)
80000954:	8ef70000 	lw	s7,0(s7)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:224
    sw		s5, (s7)
80000958:	aef50000 	sw	s5,0(s7)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:230

    /* Set the interrupt mask to the max priority that can use the API.  The
    yield handler will only be called at configKERNEL_INTERRUPT_PRIORITY which
    is below configMAX_SYSCALL_INTERRUPT_PRIORITY - so this can only ever
    raise the IPL value and never lower it. */
    di
8000095c:	41606000 	di
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:231
    ehb
80000960:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:232
    mfc0	s7, C0_SR
80000964:	40176000 	mfc0	s7,c0_status
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:233
    ins 	s7, zero, 10, 7
80000968:	7c178284 	ins	s7,zero,0xa,0x7
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:234
    ins 	s7, zero, 18, 1
8000096c:	7c179484 	ins	s7,zero,0x12,0x1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:235
    ori		s6, s7, ( configMAX_SYSCALL_INTERRUPT_PRIORITY << 10 ) | 1
80000970:	36f60c01 	ori	s6,s7,0xc01
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:239

    /* This mtc0 re-enables interrupts, but only above
    configMAX_SYSCALL_INTERRUPT_PRIORITY. */
    mtc0	s6, C0_SR
80000974:	40966000 	mtc0	s6,c0_status
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:240
    ehb
80000978:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:243

    /* Clear the software interrupt in the core. */
    mfc0	s6, C0_CR
8000097c:	40166800 	mfc0	s6,c0_cause
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:244
    ins		s6, zero, 8, 1
80000980:	7c164204 	ins	s6,zero,0x8,0x1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:245
    mtc0	s6, C0_CR
80000984:	40966800 	mtc0	s6,c0_cause
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:246
    ehb
80000988:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:253
    /* Clear the interrupt in the interrupt controller. */
    /*la		s6, IFS0CLR
    addiu	s4, zero, 2
    sw		s4, (s6)*/ /* comment for MIPSfpga */

    jal		vTaskSwitchContext
8000098c:	0c0019d6 	jal	80006758 <vTaskSwitchContext>
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:254
    nop
80000990:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:257

    /* Clear the interrupt mask again.  The saved status value is still in s7. */
    mtc0	s7, C0_SR
80000994:	40976000 	mtc0	s7,c0_status
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:258
    ehb
80000998:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:261

    /* Restore the stack pointer from the TCB. */
    la		s0, pxCurrentTCB
8000099c:	3c108001 	lui	s0,0x8001
800009a0:	2610c2dc 	addiu	s0,s0,-15652
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:262
    lw		s0, (s0)
800009a4:	8e100000 	lw	s0,0(s0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:263
    lw		s5, (s0)
800009a8:	8e150000 	lw	s5,0(s0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:265

    lw		$1, 16(s5)
800009ac:	8ea10010 	lw	at,16(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:266
    lw		s0, 20(s5)
800009b0:	8eb00014 	lw	s0,20(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:267
    lw		s1, 24(s5)
800009b4:	8eb10018 	lw	s1,24(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:268
    lw		s2, 28(s5)
800009b8:	8eb2001c 	lw	s2,28(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:269
    lw		s3, 32(s5)
800009bc:	8eb30020 	lw	s3,32(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:270
    lw		s4, 36(s5)
800009c0:	8eb40024 	lw	s4,36(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:273

    /* s5 is loaded later. */
    lw		s6, 44(s5)
800009c4:	8eb6002c 	lw	s6,44(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:274
    lw		s7, 48(s5)
800009c8:	8eb70030 	lw	s7,48(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:275
    lw		v0, 52(s5)
800009cc:	8ea20034 	lw	v0,52(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:276
    lw		v1, 56(s5)
800009d0:	8ea30038 	lw	v1,56(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:277
    lw		a0, 60(s5)
800009d4:	8ea4003c 	lw	a0,60(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:278
    lw		a1, 64(s5)
800009d8:	8ea50040 	lw	a1,64(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:279
    lw		a2, 68(s5)
800009dc:	8ea60044 	lw	a2,68(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:280
    lw		a3, 72(s5)
800009e0:	8ea70048 	lw	a3,72(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:281
    lw		t0, 76(s5)
800009e4:	8ea8004c 	lw	t0,76(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:282
    lw		t1, 80(s5)
800009e8:	8ea90050 	lw	t1,80(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:283
    lw		t2, 84(s5)
800009ec:	8eaa0054 	lw	t2,84(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:284
    lw		t3, 88(s5)
800009f0:	8eab0058 	lw	t3,88(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:285
    lw		t4, 92(s5)
800009f4:	8eac005c 	lw	t4,92(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:286
    lw		t5, 96(s5)
800009f8:	8ead0060 	lw	t5,96(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:287
    lw		t6, 100(s5)
800009fc:	8eae0064 	lw	t6,100(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:288
    lw		t7, 104(s5)
80000a00:	8eaf0068 	lw	t7,104(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:289
    lw		t8, 108(s5)
80000a04:	8eb8006c 	lw	t8,108(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:290
    lw		t9, 112(s5)
80000a08:	8eb90070 	lw	t9,112(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:291
    lw		s8, 116(s5)
80000a0c:	8ebe0074 	lw	s8,116(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:292
    lw		ra, 120(s5)
80000a10:	8ebf0078 	lw	ra,120(s5)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:295

    /* Protect access to the k registers, and others. */
    di
80000a14:	41606000 	di
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:296
    ehb
80000a18:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:300

    /* Set nesting back to zero.  As the lowest priority interrupt this
    interrupt cannot have nested. */
    la		k0, uxInterruptNesting
80000a1c:	3c1a8001 	lui	k0,0x8001
80000a20:	275ac248 	addiu	k0,k0,-15800
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:301
    sw		zero, 0(k0)
80000a24:	af400000 	sw	zero,0(k0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:304

    /* Switch back to use the real stack pointer. */
    add		sp, zero, s5
80000a28:	0015e820 	add	sp,zero,s5
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:307

    /* Restore the real s5 value. */
    lw		s5, 40(sp)
80000a2c:	8fb50028 	lw	s5,40(sp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:310

    /* Pop the status and epc values. */
    lw		k1, portSTATUS_STACK_LOCATION(sp)
80000a30:	8fbb009c 	lw	k1,156(sp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:311
    lw		k0, portEPC_STACK_LOCATION(sp)
80000a34:	8fba0098 	lw	k0,152(sp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:314

    /* Remove stack frame. */
    addiu	sp, sp, portCONTEXT_SIZE
80000a38:	27bd00a0 	addiu	sp,sp,160
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:318


	/* Restore the status and EPC registers and return */
	mtc0	k1, C0_SR
80000a3c:	409b6000 	mtc0	k1,c0_status
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:319
	mtc0 	k0, C0_EPC
80000a40:	409a7000 	mtc0	k0,c0_epc
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:320
	ehb
80000a44:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:322
	/*eret*/
	nop
80000a48:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:324
    
    jr      ra
80000a4c:	03e00008 	jr	ra
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port_asm.S:325
    nop
80000a50:	00000000 	nop

80000a54 <vParTestToggleLED>:
vParTestToggleLED():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:148

volatile int *IO_LEDR = (int*)0xbf800000;


void vParTestToggleLED( UBaseType_t uxLED )
{
80000a54:	27bdfff8 	addiu	sp,sp,-8
80000a58:	afbe0004 	sw	s8,4(sp)
80000a5c:	03a0f025 	move	s8,sp
80000a60:	afc40008 	sw	a0,8(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:149
    *IO_LEDR = *IO_LEDR ^ (1 << uxLED);
80000a64:	8f828003 	lw	v0,-32765(gp)
80000a68:	8f838003 	lw	v1,-32765(gp)
80000a6c:	8c640000 	lw	a0,0(v1)
80000a70:	8fc30008 	lw	v1,8(s8)
80000a74:	24050001 	li	a1,1
80000a78:	00651804 	sllv	v1,a1,v1
80000a7c:	00831826 	xor	v1,a0,v1
80000a80:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:150
}
80000a84:	03c0e825 	move	sp,s8
80000a88:	8fbe0004 	lw	s8,4(sp)
80000a8c:	27bd0008 	addiu	sp,sp,8
80000a90:	03e00008 	jr	ra
80000a94:	00000000 	nop

80000a98 <main_blinky>:
main_blinky():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:181
static QueueHandle_t xQueue = NULL;

/*-----------------------------------------------------------*/

void main_blinky( void )
{
80000a98:	27bdffd8 	addiu	sp,sp,-40
80000a9c:	afbf0024 	sw	ra,36(sp)
80000aa0:	afbe0020 	sw	s8,32(sp)
80000aa4:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:186
    TimerHandle_t xTimer;

    extern void vPortStartFirstTask( void );

    *IO_LEDR = 0x1;
80000aa8:	8f828003 	lw	v0,-32765(gp)
80000aac:	24030001 	li	v1,1
80000ab0:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:189

	/* Create the queue. */
	xQueue = xQueueCreate( mainQUEUE_LENGTH, sizeof( unsigned long ) );
80000ab4:	24040001 	li	a0,1
80000ab8:	24050004 	li	a1,4
80000abc:	00003025 	move	a2,zero
80000ac0:	0c00212f 	jal	800084bc <xQueueGenericCreate>
80000ac4:	00000000 	nop
80000ac8:	af82802f 	sw	v0,-32721(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:190
	configASSERT( xQueue );
80000acc:	8f82802f 	lw	v0,-32721(gp)
80000ad0:	14400006 	bnez	v0,80000aec <main_blinky+0x54>
80000ad4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:190 (discriminator 1)
80000ad8:	3c028001 	lui	v0,0x8001
80000adc:	2444bc28 	addiu	a0,v0,-17368
80000ae0:	240500be 	li	a1,190
80000ae4:	0c000417 	jal	8000105c <vAssertCalled>
80000ae8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:192

    *IO_LEDR = 0x2;
80000aec:	8f828003 	lw	v0,-32765(gp)
80000af0:	24030002 	li	v1,2
80000af4:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:194

	if( xQueue != NULL )
80000af8:	8f82802f 	lw	v0,-32721(gp)
80000afc:	1040004a 	beqz	v0,80000c28 <main_blinky+0x190>
80000b00:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:196
	{
        *IO_LEDR = 0x3;
80000b04:	8f828003 	lw	v0,-32765(gp)
80000b08:	24030003 	li	v1,3
80000b0c:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:199
		/* Create the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate(	prvQueueReceiveTask,					/* The function that implements the task. */
80000b10:	24020001 	li	v0,1
80000b14:	afa20010 	sw	v0,16(sp)
80000b18:	afa00014 	sw	zero,20(sp)
80000b1c:	3c028000 	lui	v0,0x8000
80000b20:	24440dd0 	addiu	a0,v0,3536
80000b24:	3c028001 	lui	v0,0x8001
80000b28:	2445bc3c 	addiu	a1,v0,-17348
80000b2c:	240600be 	li	a2,190
80000b30:	24070022 	li	a3,34
80000b34:	0c00133d 	jal	80004cf4 <xTaskCreate>
80000b38:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:206
						configMINIMAL_STACK_SIZE, 				/* The size of the stack to allocate to the task. */
						( void * ) mainQUEUE_RECEIVE_PARAMETER,	/* - just to check the functionality. */
						mainQUEUE_RECEIVE_TASK_PRIORITY,		/* The priority assigned to the task. */
						NULL );									/* The task handle is not required, so NULL is passed. */

        *IO_LEDR = 0x4;
80000b3c:	8f828003 	lw	v0,-32765(gp)
80000b40:	24030004 	li	v1,4
80000b44:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:209


		xTaskCreate(    prvQueueSendTask,
80000b48:	24020001 	li	v0,1
80000b4c:	afa20010 	sw	v0,16(sp)
80000b50:	afa00014 	sw	zero,20(sp)
80000b54:	3c028000 	lui	v0,0x8000
80000b58:	24440d60 	addiu	a0,v0,3424
80000b5c:	3c028001 	lui	v0,0x8001
80000b60:	2445bc40 	addiu	a1,v0,-17344
80000b64:	240600be 	li	a2,190
80000b68:	24071111 	li	a3,4369
80000b6c:	0c00133d 	jal	80004cf4 <xTaskCreate>
80000b70:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:217
                        ( void * ) mainQUEUE_SEND_PARAMETER,
                        mainQUEUE_SEND_TASK_PRIORITY,
                        NULL );


        *IO_LEDR = 0x5;
80000b74:	8f828003 	lw	v0,-32765(gp)
80000b78:	24030005 	li	v1,5
80000b7c:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:220

		/* Create the blinky software timer as described at the top of this file. */
		xTimer = xTimerCreate(	"Blinky",					/* A text name, purely to help debugging. */
80000b80:	3c028000 	lui	v0,0x8000
80000b84:	24420e9c 	addiu	v0,v0,3740
80000b88:	afa20010 	sw	v0,16(sp)
80000b8c:	3c028001 	lui	v0,0x8001
80000b90:	2444bc44 	addiu	a0,v0,-17340
80000b94:	24050032 	li	a1,50
80000b98:	24060001 	li	a2,1
80000b9c:	00003825 	move	a3,zero
80000ba0:	0c000ce6 	jal	80003398 <xTimerCreate>
80000ba4:	00000000 	nop
80000ba8:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:225
							    ( mainBLINKY_TIMER_PERIOD ),/* The timer period. */
						    	pdTRUE,						/* This is an auto-reload timer, so xAutoReload is set to pdTRUE. */
							    ( void * ) 0,				/* The ID is not used, so can be set to anything. */
								prvBlinkyTimerCallback );	/* The callback function that inspects the status of all the other tasks. */
		configASSERT( xTimer );
80000bac:	8fc20018 	lw	v0,24(s8)
80000bb0:	14400006 	bnez	v0,80000bcc <main_blinky+0x134>
80000bb4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:225 (discriminator 1)
80000bb8:	3c028001 	lui	v0,0x8001
80000bbc:	2444bc28 	addiu	a0,v0,-17368
80000bc0:	240500e1 	li	a1,225
80000bc4:	0c000417 	jal	8000105c <vAssertCalled>
80000bc8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:227

        *IO_LEDR = 0x6;
80000bcc:	8f828003 	lw	v0,-32765(gp)
80000bd0:	24030006 	li	v1,6
80000bd4:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:229

		if( xTimer != NULL )
80000bd8:	8fc20018 	lw	v0,24(s8)
80000bdc:	1040000a 	beqz	v0,80000c08 <main_blinky+0x170>
80000be0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:231
		{
			xTimerStart( xTimer, mainDONT_BLOCK );
80000be4:	0c0018fd 	jal	800063f4 <xTaskGetTickCount>
80000be8:	00000000 	nop
80000bec:	afa00010 	sw	zero,16(sp)
80000bf0:	8fc40018 	lw	a0,24(s8)
80000bf4:	24050001 	li	a1,1
80000bf8:	00403025 	move	a2,v0
80000bfc:	00003825 	move	a3,zero
80000c00:	0c000d35 	jal	800034d4 <xTimerGenericCommand>
80000c04:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:234
		}

        *IO_LEDR = 0x7;
80000c08:	8f828003 	lw	v0,-32765(gp)
80000c0c:	24030007 	li	v1,7
80000c10:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:237

		/* Start the tasks and timer running. */
		vTaskStartScheduler();
80000c14:	0c001810 	jal	80006040 <vTaskStartScheduler>
80000c18:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:239

        *IO_LEDR = 0x8;
80000c1c:	8f828003 	lw	v0,-32765(gp)
80000c20:	24030008 	li	v1,8
80000c24:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:247 (discriminator 1)
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for the idle and/or
	timer tasks	to be created.  See the memory management section on the
	FreeRTOS web site for more details. http://www.freertos.org/a00111.html */
	for( ;; );
80000c28:	1000ffff 	b	80000c28 <main_blinky+0x190>
80000c2c:	00000000 	nop

80000c30 <main_blinky_just>:
main_blinky_just():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:250
}

void main_blinky_just( void ){
80000c30:	27bdffe0 	addiu	sp,sp,-32
80000c34:	afbf001c 	sw	ra,28(sp)
80000c38:	afbe0018 	sw	s8,24(sp)
80000c3c:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:252

    xTaskCreate(	    justTask,
80000c40:	24020003 	li	v0,3
80000c44:	afa20010 	sw	v0,16(sp)
80000c48:	afa00014 	sw	zero,20(sp)
80000c4c:	3c028000 	lui	v0,0x8000
80000c50:	24440cb8 	addiu	a0,v0,3256
80000c54:	3c028001 	lui	v0,0x8001
80000c58:	2445bc3c 	addiu	a1,v0,-17348
80000c5c:	240600be 	li	a2,190
80000c60:	00003825 	move	a3,zero
80000c64:	0c00133d 	jal	80004cf4 <xTaskCreate>
80000c68:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:259
						configMINIMAL_STACK_SIZE,
						( void * ) ( 0UL ),
						3, //PRIORITY
						NULL );

    xTaskCreate(	    justTask,
80000c6c:	24020003 	li	v0,3
80000c70:	afa20010 	sw	v0,16(sp)
80000c74:	afa00014 	sw	zero,20(sp)
80000c78:	3c028000 	lui	v0,0x8000
80000c7c:	24440cb8 	addiu	a0,v0,3256
80000c80:	3c028001 	lui	v0,0x8001
80000c84:	2445bc3c 	addiu	a1,v0,-17348
80000c88:	240600be 	li	a2,190
80000c8c:	24070008 	li	a3,8
80000c90:	0c00133d 	jal	80004cf4 <xTaskCreate>
80000c94:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:266
						configMINIMAL_STACK_SIZE,
						( void * ) ( 8UL ),
						3, //PRIORITY
						NULL );

    vTaskStartScheduler();
80000c98:	0c001810 	jal	80006040 <vTaskStartScheduler>
80000c9c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:267
}
80000ca0:	03c0e825 	move	sp,s8
80000ca4:	8fbf001c 	lw	ra,28(sp)
80000ca8:	8fbe0018 	lw	s8,24(sp)
80000cac:	27bd0020 	addiu	sp,sp,32
80000cb0:	03e00008 	jr	ra
80000cb4:	00000000 	nop

80000cb8 <justTask>:
justTask():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:270

static void justTask( void *pvParameters )
{
80000cb8:	27bdfff0 	addiu	sp,sp,-16
80000cbc:	afbe000c 	sw	s8,12(sp)
80000cc0:	03a0f025 	move	s8,sp
80000cc4:	afc40010 	sw	a0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:272
    ( void ) pvParameters;
    int i = 0;
80000cc8:	afc00000 	sw	zero,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:273
    int j = 0;
80000ccc:	afc00004 	sw	zero,4(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:275
    for(;;){
        *IO_LEDR = 0xf0 << ( ( unsigned ) pvParameters);
80000cd0:	8f828003 	lw	v0,-32765(gp)
80000cd4:	8fc30010 	lw	v1,16(s8)
80000cd8:	240400f0 	li	a0,240
80000cdc:	00641804 	sllv	v1,a0,v1
80000ce0:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:276
        for(i = 0; i<1000000; i++);
80000ce4:	afc00000 	sw	zero,0(s8)
80000ce8:	10000004 	b	80000cfc <justTask+0x44>
80000cec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:276 (discriminator 3)
80000cf0:	8fc20000 	lw	v0,0(s8)
80000cf4:	24420001 	addiu	v0,v0,1
80000cf8:	afc20000 	sw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:276 (discriminator 1)
80000cfc:	8fc30000 	lw	v1,0(s8)
80000d00:	3c02000f 	lui	v0,0xf
80000d04:	34424240 	ori	v0,v0,0x4240
80000d08:	0062102a 	slt	v0,v1,v0
80000d0c:	1440fff8 	bnez	v0,80000cf0 <justTask+0x38>
80000d10:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:277
        *IO_LEDR = 0x0f << ( ( unsigned ) pvParameters);
80000d14:	8f828003 	lw	v0,-32765(gp)
80000d18:	8fc30010 	lw	v1,16(s8)
80000d1c:	2404000f 	li	a0,15
80000d20:	00641804 	sllv	v1,a0,v1
80000d24:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:278
        for(j = 0; j<1000000; j++);
80000d28:	afc00004 	sw	zero,4(s8)
80000d2c:	10000004 	b	80000d40 <justTask+0x88>
80000d30:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:278 (discriminator 3)
80000d34:	8fc20004 	lw	v0,4(s8)
80000d38:	24420001 	addiu	v0,v0,1
80000d3c:	afc20004 	sw	v0,4(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:278 (discriminator 1)
80000d40:	8fc30004 	lw	v1,4(s8)
80000d44:	3c02000f 	lui	v0,0xf
80000d48:	34424240 	ori	v0,v0,0x4240
80000d4c:	0062102a 	slt	v0,v1,v0
80000d50:	1440fff8 	bnez	v0,80000d34 <justTask+0x7c>
80000d54:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:279
    }
80000d58:	1000ffdd 	b	80000cd0 <justTask+0x18>
80000d5c:	00000000 	nop

80000d60 <prvQueueSendTask>:
prvQueueSendTask():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:284
}
/*-----------------------------------------------------------*/

static void prvQueueSendTask( void *pvParameters )
{
80000d60:	27bdffe0 	addiu	sp,sp,-32
80000d64:	afbf001c 	sw	ra,28(sp)
80000d68:	afbe0018 	sw	s8,24(sp)
80000d6c:	03a0f025 	move	s8,sp
80000d70:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:286
TickType_t xNextWakeTime;
const unsigned long ulValueToSend = 100UL;
80000d74:	24020064 	li	v0,100
80000d78:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:294

	/* Check the task parameter is as expected. */
	//configASSERT( ( ( unsigned long ) pvParameters ) == mainQUEUE_SEND_PARAMETER );

	/* Initialise xNextWakeTime - this only needs to be done once. */
	xNextWakeTime = xTaskGetTickCount();
80000d7c:	0c0018fd 	jal	800063f4 <xTaskGetTickCount>
80000d80:	00000000 	nop
80000d84:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:298 (discriminator 1)

	for( ;; )
	{
        *IO_LEDR = 0xaf;
80000d88:	8f828003 	lw	v0,-32765(gp)
80000d8c:	240300af 	li	v1,175
80000d90:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:303 (discriminator 1)
		/* Place this task in the blocked state until it is time to run again.
		The block time is specified in ticks, the constant used converts ticks
		to ms.  While in the Blocked state this task will not consume any CPU
		time. */
		vTaskDelayUntil( &xNextWakeTime, mainQUEUE_SEND_FREQUENCY_MS );
80000d94:	27c20010 	addiu	v0,s8,16
80000d98:	00402025 	move	a0,v0
80000d9c:	240500c8 	li	a1,200
80000da0:	0c0014ff 	jal	800053fc <vTaskDelayUntil>
80000da4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:309 (discriminator 1)

		/* Send to the queue - causing the queue receive task to unblock and
		toggle the LED.  0 is used as the block time so the sending operation
		will not block - it shouldn't need to block as the queue should always
		be empty at this point in the code. */
		xQueueSend( xQueue, &ulValueToSend, 0U );
80000da8:	8f83802f 	lw	v1,-32721(gp)
80000dac:	27c20014 	addiu	v0,s8,20
80000db0:	00602025 	move	a0,v1
80000db4:	00402825 	move	a1,v0
80000db8:	00003025 	move	a2,zero
80000dbc:	00003825 	move	a3,zero
80000dc0:	0c002254 	jal	80008950 <xQueueGenericSend>
80000dc4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:310 (discriminator 1)
	}
80000dc8:	1000ffef 	b	80000d88 <prvQueueSendTask+0x28>
80000dcc:	00000000 	nop

80000dd0 <prvQueueReceiveTask>:
prvQueueReceiveTask():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:315
}
/*-----------------------------------------------------------*/

static void prvQueueReceiveTask( void *pvParameters )
{
80000dd0:	27bdffe0 	addiu	sp,sp,-32
80000dd4:	afbf001c 	sw	ra,28(sp)
80000dd8:	afbe0018 	sw	s8,24(sp)
80000ddc:	03a0f025 	move	s8,sp
80000de0:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:320
unsigned long ulReceivedValue;

	/* Remove compiler warnings in the case where configASSERT() is not defined. */
	( void ) pvParameters;
    int i = 0;
80000de4:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:322
	/* Check the task parameter is as expected. */
	configASSERT( ( ( unsigned long ) pvParameters ) == mainQUEUE_RECEIVE_PARAMETER );
80000de8:	8fc30020 	lw	v1,32(s8)
80000dec:	24020022 	li	v0,34
80000df0:	10620006 	beq	v1,v0,80000e0c <prvQueueReceiveTask+0x3c>
80000df4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:322 (discriminator 1)
80000df8:	3c028001 	lui	v0,0x8001
80000dfc:	2444bc28 	addiu	a0,v0,-17368
80000e00:	24050142 	li	a1,322
80000e04:	0c000417 	jal	8000105c <vAssertCalled>
80000e08:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:326

	for( ;; )
	{
        *IO_LEDR = 0xfe;
80000e0c:	8f828003 	lw	v0,-32765(gp)
80000e10:	240300fe 	li	v1,254
80000e14:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:330
		/* Wait until something arrives in the queue - this task will block
		indefinitely provided INCLUDE_vTaskSuspend is set to 1 in
		FreeRTOSConfig.h. */
		xQueueReceive( xQueue, &ulReceivedValue, portMAX_DELAY );
80000e18:	8f83802f 	lw	v1,-32721(gp)
80000e1c:	27c20014 	addiu	v0,s8,20
80000e20:	00602025 	move	a0,v1
80000e24:	00402825 	move	a1,v0
80000e28:	2406ffff 	li	a2,-1
80000e2c:	00003825 	move	a3,zero
80000e30:	0c002461 	jal	80009184 <xQueueGenericReceive>
80000e34:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:334

		/*  To get here something must have been received from the queue, but
		is it the expected value?  If it is, toggle the LED. */
		if( ulReceivedValue == 100UL )
80000e38:	8fc30014 	lw	v1,20(s8)
80000e3c:	24020064 	li	v0,100
80000e40:	14620014 	bne	v1,v0,80000e94 <prvQueueReceiveTask+0xc4>
80000e44:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:336
		{
        *IO_LEDR = 0xfa;
80000e48:	8f828003 	lw	v0,-32765(gp)
80000e4c:	240300fa 	li	v1,250
80000e50:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:337
			vParTestToggleLED( mainTASKS_LED );
80000e54:	00002025 	move	a0,zero
80000e58:	0c000295 	jal	80000a54 <vParTestToggleLED>
80000e5c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:338
            for( i = 0; i < 100000; i++);
80000e60:	afc00010 	sw	zero,16(s8)
80000e64:	10000004 	b	80000e78 <prvQueueReceiveTask+0xa8>
80000e68:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:338 (discriminator 3)
80000e6c:	8fc20010 	lw	v0,16(s8)
80000e70:	24420001 	addiu	v0,v0,1
80000e74:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:338 (discriminator 1)
80000e78:	8fc30010 	lw	v1,16(s8)
80000e7c:	3c020001 	lui	v0,0x1
80000e80:	344286a0 	ori	v0,v0,0x86a0
80000e84:	0062102a 	slt	v0,v1,v0
80000e88:	1440fff8 	bnez	v0,80000e6c <prvQueueReceiveTask+0x9c>
80000e8c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:339
			ulReceivedValue = 0U;
80000e90:	afc00014 	sw	zero,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:341
		}
	}
80000e94:	1000ffdd 	b	80000e0c <prvQueueReceiveTask+0x3c>
80000e98:	00000000 	nop

80000e9c <prvBlinkyTimerCallback>:
prvBlinkyTimerCallback():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:346
}
/*-----------------------------------------------------------*/

static void prvBlinkyTimerCallback( TimerHandle_t xTimer )
{
80000e9c:	27bdffe8 	addiu	sp,sp,-24
80000ea0:	afbf0014 	sw	ra,20(sp)
80000ea4:	afbe0010 	sw	s8,16(sp)
80000ea8:	03a0f025 	move	s8,sp
80000eac:	afc40018 	sw	a0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:353
	( void ) xTimer;

	/* This function is called when the blinky software time expires.  All the
	function does is toggle the LED.  LED mainTIMER_LED should therefore toggle
	with the period set by mainBLINKY_TIMER_PERIOD. */
	vParTestToggleLED( mainTIMER_LED );
80000eb0:	24040001 	li	a0,1
80000eb4:	0c000295 	jal	80000a54 <vParTestToggleLED>
80000eb8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main_blinky.c:354
}
80000ebc:	03c0e825 	move	sp,s8
80000ec0:	8fbf0014 	lw	ra,20(sp)
80000ec4:	8fbe0010 	lw	s8,16(sp)
80000ec8:	27bd0018 	addiu	sp,sp,24
80000ecc:	03e00008 	jr	ra
80000ed0:	00000000 	nop

80000ed4 <main>:
main():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:139

/*
 * Create the demo tasks then start the scheduler.
 */
int main( void )
{
80000ed4:	27bdffe8 	addiu	sp,sp,-24
80000ed8:	afbf0014 	sw	ra,20(sp)
80000edc:	afbe0010 	sw	s8,16(sp)
80000ee0:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:149

	/* Prepare the hardware to run this demo. */
	//prvSetupHardware();

	//main_blinky();
    *IO_LEDR = 0x1005;
80000ee4:	8f828003 	lw	v0,-32765(gp)
80000ee8:	24031005 	li	v1,4101
80000eec:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:151

	main_blinky_just();
80000ef0:	0c00030c 	jal	80000c30 <main_blinky_just>
80000ef4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:153

    *IO_LEDR = 0x1000;
80000ef8:	8f828003 	lw	v0,-32765(gp)
80000efc:	24031000 	li	v1,4096
80000f00:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:154 (discriminator 1)
    while(1);
80000f04:	1000ffff 	b	80000f04 <main+0x30>
80000f08:	00000000 	nop

80000f0c <prvSetupHardware>:
prvSetupHardware():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:161
	return 0;
}
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
80000f0c:	27bdfff8 	addiu	sp,sp,-8
80000f10:	afbe0004 	sw	s8,4(sp)
80000f14:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:163
    //dummy impl
}
80000f18:	03c0e825 	move	sp,s8
80000f1c:	8fbe0004 	lw	s8,4(sp)
80000f20:	27bd0008 	addiu	sp,sp,8
80000f24:	03e00008 	jr	ra
80000f28:	00000000 	nop

80000f2c <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:167
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
80000f2c:	27bdfff0 	addiu	sp,sp,-16
80000f30:	afbf000c 	sw	ra,12(sp)
80000f34:	afbe0008 	sw	s8,8(sp)
80000f38:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:178
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
80000f3c:	40026000 	mfc0	v0,c0_status
80000f40:	0040f825 	move	ra,v0
80000f44:	03e01025 	move	v0,ra
80000f48:	afc20000 	sw	v0,0(s8)
80000f4c:	8fc30000 	lw	v1,0(s8)
80000f50:	3c020001 	lui	v0,0x1
80000f54:	3442fc00 	ori	v0,v0,0xfc00
80000f58:	00621024 	and	v0,v1,v0
80000f5c:	00021282 	srl	v0,v0,0xa
80000f60:	2c420003 	sltiu	v0,v0,3
80000f64:	10400008 	beqz	v0,80000f88 <vApplicationMallocFailedHook+0x5c>
80000f68:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:178 (discriminator 1)
80000f6c:	8fc20000 	lw	v0,0(s8)
80000f70:	7c028284 	ins	v0,zero,0xa,0x7
80000f74:	afc20000 	sw	v0,0(s8)
80000f78:	8fc20000 	lw	v0,0(s8)
80000f7c:	34420c00 	ori	v0,v0,0xc00
80000f80:	40826000 	mtc0	v0,c0_status
80000f84:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:179 (discriminator 1)
	for( ;; );
80000f88:	1000ffff 	b	80000f88 <vApplicationMallocFailedHook+0x5c>
80000f8c:	00000000 	nop

80000f90 <vApplicationIdleHook>:
vApplicationIdleHook():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:184
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
80000f90:	27bdfff8 	addiu	sp,sp,-8
80000f94:	afbe0004 	sw	s8,4(sp)
80000f98:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:194
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
80000f9c:	03c0e825 	move	sp,s8
80000fa0:	8fbe0004 	lw	s8,4(sp)
80000fa4:	27bd0008 	addiu	sp,sp,8
80000fa8:	03e00008 	jr	ra
80000fac:	00000000 	nop

80000fb0 <vApplicationStackOverflowHook>:
vApplicationStackOverflowHook():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:198
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
80000fb0:	27bdfff0 	addiu	sp,sp,-16
80000fb4:	afbf000c 	sw	ra,12(sp)
80000fb8:	afbe0008 	sw	s8,8(sp)
80000fbc:	03a0f025 	move	s8,sp
80000fc0:	afc40010 	sw	a0,16(s8)
80000fc4:	afc50014 	sw	a1,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:206

	/* Run time task stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook	function is
	called if a task stack overflow is detected.  Note the system/interrupt
	stack is not checked. */
	taskDISABLE_INTERRUPTS();
80000fc8:	40026000 	mfc0	v0,c0_status
80000fcc:	0040f825 	move	ra,v0
80000fd0:	03e01025 	move	v0,ra
80000fd4:	afc20000 	sw	v0,0(s8)
80000fd8:	8fc30000 	lw	v1,0(s8)
80000fdc:	3c020001 	lui	v0,0x1
80000fe0:	3442fc00 	ori	v0,v0,0xfc00
80000fe4:	00621024 	and	v0,v1,v0
80000fe8:	00021282 	srl	v0,v0,0xa
80000fec:	2c420003 	sltiu	v0,v0,3
80000ff0:	10400008 	beqz	v0,80001014 <vApplicationStackOverflowHook+0x64>
80000ff4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:206 (discriminator 1)
80000ff8:	8fc20000 	lw	v0,0(s8)
80000ffc:	7c028284 	ins	v0,zero,0xa,0x7
80001000:	afc20000 	sw	v0,0(s8)
80001004:	8fc20000 	lw	v0,0(s8)
80001008:	34420c00 	ori	v0,v0,0xc00
8000100c:	40826000 	mtc0	v0,c0_status
80001010:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:207 (discriminator 1)
	for( ;; );
80001014:	1000ffff 	b	80001014 <vApplicationStackOverflowHook+0x64>
80001018:	00000000 	nop

8000101c <vApplicationTickHook>:
vApplicationTickHook():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:212
}
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
8000101c:	27bdffe8 	addiu	sp,sp,-24
80001020:	afbf0014 	sw	ra,20(sp)
80001024:	afbe0010 	sw	s8,16(sp)
80001028:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:222
	functions can be used (those that end in FromISR()). */

	#if( mainCREATE_SIMPLE_BLINKY_DEMO_ONLY == 0 )
	{
		/* Call the periodic queue overwrite from ISR demo. */
		vQueueOverwritePeriodicISRDemo();
8000102c:	0c0004cd 	jal	80001334 <vQueueOverwritePeriodicISRDemo>
80001030:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:225

		/* Call the queue set ISR test function. */
		vQueueSetAccessQueueSetFromISR();
80001034:	0c000658 	jal	80001960 <vQueueSetAccessQueueSetFromISR>
80001038:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:228

		/* Exercise event groups from interrupts. */
		vPeriodicEventGroupsProcessing();
8000103c:	0c000c3f 	jal	800030fc <vPeriodicEventGroupsProcessing>
80001040:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:231
	}
	#endif
}
80001044:	03c0e825 	move	sp,s8
80001048:	8fbf0014 	lw	ra,20(sp)
8000104c:	8fbe0010 	lw	s8,16(sp)
80001050:	27bd0018 	addiu	sp,sp,24
80001054:	03e00008 	jr	ra
80001058:	00000000 	nop

8000105c <vAssertCalled>:
vAssertCalled():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:235
/*-----------------------------------------------------------*/

extern void vAssertCalled( const char * pcFile, unsigned long ulLine )
{
8000105c:	27bdfff0 	addiu	sp,sp,-16
80001060:	afbe000c 	sw	s8,12(sp)
80001064:	03a0f025 	move	s8,sp
80001068:	afc40010 	sw	a0,16(s8)
8000106c:	afc50014 	sw	a1,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:241
volatile char *pcFileName;
volatile unsigned long ulLineNumber;

	/* Prevent things that are useful to view in the debugger from being
	optimised away. */
	pcFileName = ( char * ) pcFile;
80001070:	8fc20010 	lw	v0,16(s8)
80001074:	afc20000 	sw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:243
	( void ) pcFileName;
	ulLineNumber = ulLine;
80001078:	8fc20014 	lw	v0,20(s8)
8000107c:	afc20004 	sw	v0,4(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:247

	/* Set ulLineNumber to 0 in the debugger to break out of this loop and
	return to the line that triggered the assert. */
	while( ulLineNumber != 0 )
80001080:	10000006 	b	8000109c <vAssertCalled+0x40>
80001084:	00000000 	nop
	...
8000109c:	8fc20004 	lw	v0,4(s8)
800010a0:	1440fff9 	bnez	v0,80001088 <vAssertCalled+0x2c>
800010a4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/src/main.c:255
		__asm volatile( "NOP" );
		__asm volatile( "NOP" );
		__asm volatile( "NOP" );
		__asm volatile( "NOP" );
	}
}
800010a8:	03c0e825 	move	sp,s8
800010ac:	8fbe000c 	lw	s8,12(sp)
800010b0:	27bd0010 	addiu	sp,sp,16
800010b4:	03e00008 	jr	ra
800010b8:	00000000 	nop

800010bc <vStartQueueOverwriteTask>:
vStartQueueOverwriteTask():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:107
static QueueHandle_t xISRQueue = NULL;

/*-----------------------------------------------------------*/

void vStartQueueOverwriteTask( UBaseType_t uxPriority )
{
800010bc:	27bdffd8 	addiu	sp,sp,-40
800010c0:	afbf0024 	sw	ra,36(sp)
800010c4:	afbe0020 	sw	s8,32(sp)
800010c8:	03a0f025 	move	s8,sp
800010cc:	afc40028 	sw	a0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:108
const UBaseType_t uxQueueLength = 1;
800010d0:	24020001 	li	v0,1
800010d4:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:112

	/* Create the queue used by the ISR.  xQueueOverwriteFromISR() should only
	be used on queues that have a length of 1. */
	xISRQueue = xQueueCreate( uxQueueLength, ( UBaseType_t ) sizeof( uint32_t ) );
800010d8:	8fc40018 	lw	a0,24(s8)
800010dc:	24050004 	li	a1,4
800010e0:	00003025 	move	a2,zero
800010e4:	0c00212f 	jal	800084bc <xQueueGenericCreate>
800010e8:	00000000 	nop
800010ec:	af828037 	sw	v0,-32713(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:116

	/* Create the test task.  The queue used by the test task is created inside
	the task itself. */
	xTaskCreate( prvQueueOverwriteTask, "QOver", configMINIMAL_STACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
800010f0:	8fc20028 	lw	v0,40(s8)
800010f4:	afa20010 	sw	v0,16(sp)
800010f8:	afa00014 	sw	zero,20(sp)
800010fc:	3c028000 	lui	v0,0x8000
80001100:	24441134 	addiu	a0,v0,4404
80001104:	3c028001 	lui	v0,0x8001
80001108:	2445bc4c 	addiu	a1,v0,-17332
8000110c:	240600be 	li	a2,190
80001110:	00003825 	move	a3,zero
80001114:	0c00133d 	jal	80004cf4 <xTaskCreate>
80001118:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:117
}
8000111c:	03c0e825 	move	sp,s8
80001120:	8fbf0024 	lw	ra,36(sp)
80001124:	8fbe0020 	lw	s8,32(sp)
80001128:	27bd0028 	addiu	sp,sp,40
8000112c:	03e00008 	jr	ra
80001130:	00000000 	nop

80001134 <prvQueueOverwriteTask>:
prvQueueOverwriteTask():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:121
/*-----------------------------------------------------------*/

static void prvQueueOverwriteTask( void *pvParameters )
{
80001134:	27bdffd0 	addiu	sp,sp,-48
80001138:	afbf002c 	sw	ra,44(sp)
8000113c:	afbe0028 	sw	s8,40(sp)
80001140:	03a0f025 	move	s8,sp
80001144:	afc40030 	sw	a0,48(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:123
QueueHandle_t xTaskQueue;
const UBaseType_t uxQueueLength = 1;
80001148:	24020001 	li	v0,1
8000114c:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:124
uint32_t ulValue, ulStatus = pdPASS, x;
80001150:	24020001 	li	v0,1
80001154:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:131
	/* The parameter is not used. */
	( void ) pvParameters;

	/* Create the queue.  xQueueOverwrite() should only be used on queues that
	have a length of 1. */
	xTaskQueue = xQueueCreate( uxQueueLength, ( UBaseType_t ) sizeof( uint32_t ) );
80001158:	8fc40014 	lw	a0,20(s8)
8000115c:	24050004 	li	a1,4
80001160:	00003025 	move	a2,zero
80001164:	0c00212f 	jal	800084bc <xQueueGenericCreate>
80001168:	00000000 	nop
8000116c:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:132
	configASSERT( xTaskQueue );
80001170:	8fc20018 	lw	v0,24(s8)
80001174:	14400006 	bnez	v0,80001190 <prvQueueOverwriteTask+0x5c>
80001178:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:132 (discriminator 1)
8000117c:	3c028001 	lui	v0,0x8001
80001180:	2444bc54 	addiu	a0,v0,-17324
80001184:	24050084 	li	a1,132
80001188:	0c000417 	jal	8000105c <vAssertCalled>
8000118c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:138

	for( ;; )
	{
		/* The queue is empty.  Writing to the queue then reading from the queue
		should return the item written. */
		ulValue = 10;
80001190:	2402000a 	li	v0,10
80001194:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:139
		xQueueOverwrite( xTaskQueue, &ulValue );
80001198:	27c2001c 	addiu	v0,s8,28
8000119c:	8fc40018 	lw	a0,24(s8)
800011a0:	00402825 	move	a1,v0
800011a4:	00003025 	move	a2,zero
800011a8:	24070002 	li	a3,2
800011ac:	0c002254 	jal	80008950 <xQueueGenericSend>
800011b0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:141

		ulValue = 0;
800011b4:	afc0001c 	sw	zero,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:142
		xQueueReceive( xTaskQueue, &ulValue, qoDONT_BLOCK );
800011b8:	27c2001c 	addiu	v0,s8,28
800011bc:	8fc40018 	lw	a0,24(s8)
800011c0:	00402825 	move	a1,v0
800011c4:	00003025 	move	a2,zero
800011c8:	00003825 	move	a3,zero
800011cc:	0c002461 	jal	80009184 <xQueueGenericReceive>
800011d0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:144

		if( ulValue != 10 )
800011d4:	8fc3001c 	lw	v1,28(s8)
800011d8:	2402000a 	li	v0,10
800011dc:	10620002 	beq	v1,v0,800011e8 <prvQueueOverwriteTask+0xb4>
800011e0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:146
		{
			ulStatus = pdFAIL;
800011e4:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:151
		}

		/* Now try writing to the queue several times.  Each time the value
		in the queue should get overwritten. */
		for( x = 0; x < qoLOOPS; x++ )
800011e8:	afc00020 	sw	zero,32(s8)
800011ec:	1000001f 	b	8000126c <prvQueueOverwriteTask+0x138>
800011f0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:154
		{
			/* Write to the queue. */
			xQueueOverwrite( xTaskQueue, &x );
800011f4:	27c20020 	addiu	v0,s8,32
800011f8:	8fc40018 	lw	a0,24(s8)
800011fc:	00402825 	move	a1,v0
80001200:	00003025 	move	a2,zero
80001204:	24070002 	li	a3,2
80001208:	0c002254 	jal	80008950 <xQueueGenericSend>
8000120c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:158

			/* Check the value in the queue is that written, even though the
			queue was not necessarily empty. */
			xQueuePeek( xTaskQueue, &ulValue, qoDONT_BLOCK );
80001210:	27c2001c 	addiu	v0,s8,28
80001214:	8fc40018 	lw	a0,24(s8)
80001218:	00402825 	move	a1,v0
8000121c:	00003025 	move	a2,zero
80001220:	24070001 	li	a3,1
80001224:	0c002461 	jal	80009184 <xQueueGenericReceive>
80001228:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:159
			if( ulValue != x )
8000122c:	8fc3001c 	lw	v1,28(s8)
80001230:	8fc20020 	lw	v0,32(s8)
80001234:	10620002 	beq	v1,v0,80001240 <prvQueueOverwriteTask+0x10c>
80001238:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:161
			{
				ulStatus = pdFAIL;
8000123c:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:165
			}

			/* There should always be one item in the queue. */
			if( uxQueueMessagesWaiting( xTaskQueue ) != uxQueueLength )
80001240:	8fc40018 	lw	a0,24(s8)
80001244:	0c002612 	jal	80009848 <uxQueueMessagesWaiting>
80001248:	00000000 	nop
8000124c:	00401825 	move	v1,v0
80001250:	8fc20014 	lw	v0,20(s8)
80001254:	10620002 	beq	v1,v0,80001260 <prvQueueOverwriteTask+0x12c>
80001258:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:167
			{
				ulStatus = pdFAIL;
8000125c:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:151 (discriminator 2)
			ulStatus = pdFAIL;
		}

		/* Now try writing to the queue several times.  Each time the value
		in the queue should get overwritten. */
		for( x = 0; x < qoLOOPS; x++ )
80001260:	8fc20020 	lw	v0,32(s8)
80001264:	24420001 	addiu	v0,v0,1
80001268:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:151 (discriminator 1)
8000126c:	8fc20020 	lw	v0,32(s8)
80001270:	2c420005 	sltiu	v0,v0,5
80001274:	1440ffdf 	bnez	v0,800011f4 <prvQueueOverwriteTask+0xc0>
80001278:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:172
				ulStatus = pdFAIL;
			}
		}

		/* Empty the queue again. */
		xQueueReceive( xTaskQueue, &ulValue, qoDONT_BLOCK );
8000127c:	27c2001c 	addiu	v0,s8,28
80001280:	8fc40018 	lw	a0,24(s8)
80001284:	00402825 	move	a1,v0
80001288:	00003025 	move	a2,zero
8000128c:	00003825 	move	a3,zero
80001290:	0c002461 	jal	80009184 <xQueueGenericReceive>
80001294:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:174

		if( uxQueueMessagesWaiting( xTaskQueue ) != 0 )
80001298:	8fc40018 	lw	a0,24(s8)
8000129c:	0c002612 	jal	80009848 <uxQueueMessagesWaiting>
800012a0:	00000000 	nop
800012a4:	10400002 	beqz	v0,800012b0 <prvQueueOverwriteTask+0x17c>
800012a8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:176
		{
			ulStatus = pdFAIL;
800012ac:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:179
		}

		if( ulStatus != pdFAIL )
800012b0:	8fc20010 	lw	v0,16(s8)
800012b4:	10400004 	beqz	v0,800012c8 <prvQueueOverwriteTask+0x194>
800012b8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:183
		{
			/* Increment a counter to show this task is still running without
			error. */
			ulLoopCounter++;
800012bc:	8f828033 	lw	v0,-32717(gp)
800012c0:	24420001 	addiu	v0,v0,1
800012c4:	af828033 	sw	v0,-32717(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:189
		}

		#if( configUSE_PREEMPTION == 0 )
			taskYIELD();
		#endif
	}
800012c8:	1000ffb1 	b	80001190 <prvQueueOverwriteTask+0x5c>
800012cc:	00000000 	nop

800012d0 <xIsQueueOverwriteTaskStillRunning>:
xIsQueueOverwriteTaskStillRunning():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:194
}
/*-----------------------------------------------------------*/

BaseType_t xIsQueueOverwriteTaskStillRunning( void )
{
800012d0:	27bdfff0 	addiu	sp,sp,-16
800012d4:	afbe000c 	sw	s8,12(sp)
800012d8:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:197
BaseType_t xReturn;

	if( xISRTestStatus != pdPASS )
800012dc:	8f838007 	lw	v1,-32761(gp)
800012e0:	24020001 	li	v0,1
800012e4:	10620004 	beq	v1,v0,800012f8 <xIsQueueOverwriteTaskStillRunning+0x28>
800012e8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:199
	{
		xReturn = pdFAIL;
800012ec:	afc00000 	sw	zero,0(s8)
800012f0:	10000009 	b	80001318 <xIsQueueOverwriteTaskStillRunning+0x48>
800012f4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:201
	}
	else if( ulLoopCounter > 0 )
800012f8:	8f828033 	lw	v0,-32717(gp)
800012fc:	10400005 	beqz	v0,80001314 <xIsQueueOverwriteTaskStillRunning+0x44>
80001300:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:203
	{
		xReturn = pdPASS;
80001304:	24020001 	li	v0,1
80001308:	afc20000 	sw	v0,0(s8)
8000130c:	10000002 	b	80001318 <xIsQueueOverwriteTaskStillRunning+0x48>
80001310:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:208
	}
	else
	{
		/* The task has either stalled of discovered an error. */
		xReturn = pdFAIL;
80001314:	afc00000 	sw	zero,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:211
	}

	ulLoopCounter = 0;
80001318:	af808033 	sw	zero,-32717(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:213

	return xReturn;
8000131c:	8fc20000 	lw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:214
}
80001320:	03c0e825 	move	sp,s8
80001324:	8fbe000c 	lw	s8,12(sp)
80001328:	27bd0010 	addiu	sp,sp,16
8000132c:	03e00008 	jr	ra
80001330:	00000000 	nop

80001334 <vQueueOverwritePeriodicISRDemo>:
vQueueOverwritePeriodicISRDemo():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:218
/*-----------------------------------------------------------*/

void vQueueOverwritePeriodicISRDemo( void )
{
80001334:	27bdffd8 	addiu	sp,sp,-40
80001338:	afbf0024 	sw	ra,36(sp)
8000133c:	afbe0020 	sw	s8,32(sp)
80001340:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:220
static uint32_t ulCallCount = 0;
const uint32_t ulTx1 = 10UL, ulTx2 = 20UL, ulNumberOfSwitchCases = 3UL;
80001344:	2402000a 	li	v0,10
80001348:	afc20014 	sw	v0,20(s8)
8000134c:	24020014 	li	v0,20
80001350:	afc20018 	sw	v0,24(s8)
80001354:	24020003 	li	v0,3
80001358:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:226
uint32_t ulRx;

	/* This function should be called from an interrupt, such as the tick hook
	function vApplicationTickHook(). */

	configASSERT( xISRQueue );
8000135c:	8f828037 	lw	v0,-32713(gp)
80001360:	14400006 	bnez	v0,8000137c <vQueueOverwritePeriodicISRDemo+0x48>
80001364:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:226 (discriminator 1)
80001368:	3c028001 	lui	v0,0x8001
8000136c:	2444bc54 	addiu	a0,v0,-17324
80001370:	240500e2 	li	a1,226
80001374:	0c000417 	jal	8000105c <vAssertCalled>
80001378:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:228

	switch( ulCallCount )
8000137c:	8f82803b 	lw	v0,-32709(gp)
80001380:	24030001 	li	v1,1
80001384:	10430020 	beq	v0,v1,80001408 <vQueueOverwritePeriodicISRDemo+0xd4>
80001388:	00000000 	nop
8000138c:	2c430001 	sltiu	v1,v0,1
80001390:	14600006 	bnez	v1,800013ac <vQueueOverwritePeriodicISRDemo+0x78>
80001394:	00000000 	nop
80001398:	24030002 	li	v1,2
8000139c:	10430024 	beq	v0,v1,80001430 <vQueueOverwritePeriodicISRDemo+0xfc>
800013a0:	00000000 	nop
800013a4:	10000031 	b	8000146c <vQueueOverwritePeriodicISRDemo+0x138>
800013a8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:234
	{
		case 0:
			/* The queue is empty.  Write ulTx1 to the queue.  In this demo the
			last parameter is not used because there are no tasks blocked on
			this queue. */
			xQueueOverwriteFromISR( xISRQueue, &ulTx1, NULL );
800013ac:	8f838037 	lw	v1,-32713(gp)
800013b0:	27c20014 	addiu	v0,s8,20
800013b4:	00602025 	move	a0,v1
800013b8:	00402825 	move	a1,v0
800013bc:	00003025 	move	a2,zero
800013c0:	24070002 	li	a3,2
800013c4:	0c002358 	jal	80008d60 <xQueueGenericSendFromISR>
800013c8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:237

			/* Peek the queue to check it holds the expected value. */
			xQueuePeekFromISR( xISRQueue, &ulRx );
800013cc:	8f838037 	lw	v1,-32713(gp)
800013d0:	27c2001c 	addiu	v0,s8,28
800013d4:	00602025 	move	a0,v1
800013d8:	00402825 	move	a1,v0
800013dc:	0c0025c7 	jal	8000971c <xQueuePeekFromISR>
800013e0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:238
			if( ulRx != ulTx1 )
800013e4:	8fc3001c 	lw	v1,28(s8)
800013e8:	8fc20014 	lw	v0,20(s8)
800013ec:	10620004 	beq	v1,v0,80001400 <vQueueOverwritePeriodicISRDemo+0xcc>
800013f0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:240
			{
				xISRTestStatus = pdFAIL;
800013f4:	af808007 	sw	zero,-32761(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:242
			}
			break;
800013f8:	1000001c 	b	8000146c <vQueueOverwritePeriodicISRDemo+0x138>
800013fc:	00000000 	nop
80001400:	1000001a 	b	8000146c <vQueueOverwritePeriodicISRDemo+0x138>
80001404:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:247

		case 1:
			/* The queue already holds ulTx1.  Overwrite the value in the queue
			with ulTx2. */
			xQueueOverwriteFromISR( xISRQueue, &ulTx2, NULL );
80001408:	8f838037 	lw	v1,-32713(gp)
8000140c:	27c20018 	addiu	v0,s8,24
80001410:	00602025 	move	a0,v1
80001414:	00402825 	move	a1,v0
80001418:	00003025 	move	a2,zero
8000141c:	24070002 	li	a3,2
80001420:	0c002358 	jal	80008d60 <xQueueGenericSendFromISR>
80001424:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:248
			break;
80001428:	10000010 	b	8000146c <vQueueOverwritePeriodicISRDemo+0x138>
8000142c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:253

		case 2:
			/* Read from the queue to empty the queue again.  The value read
			should be ulTx2. */
			xQueueReceiveFromISR( xISRQueue, &ulRx, NULL );
80001430:	8f838037 	lw	v1,-32713(gp)
80001434:	27c2001c 	addiu	v0,s8,28
80001438:	00602025 	move	a0,v1
8000143c:	00402825 	move	a1,v0
80001440:	00003025 	move	a2,zero
80001444:	0c002564 	jal	80009590 <xQueueReceiveFromISR>
80001448:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:255

			if( ulRx != ulTx2 )
8000144c:	8fc3001c 	lw	v1,28(s8)
80001450:	8fc20018 	lw	v0,24(s8)
80001454:	10620004 	beq	v1,v0,80001468 <vQueueOverwritePeriodicISRDemo+0x134>
80001458:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:257
			{
				xISRTestStatus = pdFAIL;
8000145c:	af808007 	sw	zero,-32761(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:259
			}
			break;
80001460:	10000001 	b	80001468 <vQueueOverwritePeriodicISRDemo+0x134>
80001464:	00000000 	nop
80001468:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:264
	}

	/* Run the next case in the switch statement above next time this function
	is called. */
	ulCallCount++;
8000146c:	8f82803b 	lw	v0,-32709(gp)
80001470:	24420001 	addiu	v0,v0,1
80001474:	af82803b 	sw	v0,-32709(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:266

	if( ulCallCount >= ulNumberOfSwitchCases )
80001478:	8f83803b 	lw	v1,-32709(gp)
8000147c:	8fc20010 	lw	v0,16(s8)
80001480:	0062102b 	sltu	v0,v1,v0
80001484:	14400002 	bnez	v0,80001490 <vQueueOverwritePeriodicISRDemo+0x15c>
80001488:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:269
	{
		/* Go back to the start. */
		ulCallCount = 0;
8000148c:	af80803b 	sw	zero,-32709(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueOverwrite.c:271
	}
}
80001490:	03c0e825 	move	sp,s8
80001494:	8fbf0024 	lw	ra,36(sp)
80001498:	8fbe0020 	lw	s8,32(sp)
8000149c:	27bd0028 	addiu	sp,sp,40
800014a0:	03e00008 	jr	ra
800014a4:	00000000 	nop

800014a8 <vStartQueueSetTasks>:
vStartQueueSetTasks():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:234
TaskHandle_t xQueueSetSendingTask, xQueueSetReceivingTask;

/*-----------------------------------------------------------*/

void vStartQueueSetTasks( void )
{
800014a8:	27bdffe0 	addiu	sp,sp,-32
800014ac:	afbf001c 	sw	ra,28(sp)
800014b0:	afbe0018 	sw	s8,24(sp)
800014b4:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:236
	/* Create the tasks. */
	xTaskCreate( prvQueueSetSendingTask, "SetTx", configMINIMAL_STACK_SIZE, NULL, queuesetMEDIUM_PRIORITY, &xQueueSetSendingTask );
800014b8:	24020001 	li	v0,1
800014bc:	afa20010 	sw	v0,16(sp)
800014c0:	27828107 	addiu	v0,gp,-32505
800014c4:	afa20014 	sw	v0,20(sp)
800014c8:	3c028000 	lui	v0,0x8000
800014cc:	24441664 	addiu	a0,v0,5732
800014d0:	3c028001 	lui	v0,0x8001
800014d4:	2445bc78 	addiu	a1,v0,-17288
800014d8:	240600be 	li	a2,190
800014dc:	00003825 	move	a3,zero
800014e0:	0c00133d 	jal	80004cf4 <xTaskCreate>
800014e4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:238

	if( xQueueSetSendingTask != NULL )
800014e8:	8f828107 	lw	v0,-32505(gp)
800014ec:	10400012 	beqz	v0,80001538 <vStartQueueSetTasks+0x90>
800014f0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:240
	{
		xTaskCreate( prvQueueSetReceivingTask, "SetRx", configMINIMAL_STACK_SIZE, ( void * ) xQueueSetSendingTask, queuesetMEDIUM_PRIORITY, &xQueueSetReceivingTask );
800014f4:	8f838107 	lw	v1,-32505(gp)
800014f8:	24020001 	li	v0,1
800014fc:	afa20010 	sw	v0,16(sp)
80001500:	2782810b 	addiu	v0,gp,-32501
80001504:	afa20014 	sw	v0,20(sp)
80001508:	3c028000 	lui	v0,0x8000
8000150c:	2444186c 	addiu	a0,v0,6252
80001510:	3c028001 	lui	v0,0x8001
80001514:	2445bc80 	addiu	a1,v0,-17280
80001518:	240600be 	li	a2,190
8000151c:	00603825 	move	a3,v1
80001520:	0c00133d 	jal	80004cf4 <xTaskCreate>
80001524:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:247
		/* It is important that the sending task does not attempt to write to a
		queue before the queue has been created.  It is therefore placed into
		the suspended state before the scheduler has started.  It is resumed by
		the receiving task after the receiving task has created the queues and
		added the queues to the queue set. */
		vTaskSuspend( xQueueSetSendingTask );
80001528:	8f828107 	lw	v0,-32505(gp)
8000152c:	00402025 	move	a0,v0
80001530:	0c0016c6 	jal	80005b18 <vTaskSuspend>
80001534:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:249
	}
}
80001538:	03c0e825 	move	sp,s8
8000153c:	8fbf001c 	lw	ra,28(sp)
80001540:	8fbe0018 	lw	s8,24(sp)
80001544:	27bd0020 	addiu	sp,sp,32
80001548:	03e00008 	jr	ra
8000154c:	00000000 	nop

80001550 <xAreQueueSetTasksStillRunning>:
xAreQueueSetTasksStillRunning():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:253
/*-----------------------------------------------------------*/

BaseType_t xAreQueueSetTasksStillRunning( void )
{
80001550:	27bdfff0 	addiu	sp,sp,-16
80001554:	afbe000c 	sw	s8,12(sp)
80001558:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:256
static uint32_t ulLastCycleCounter, ulLastISRTxValue = 0;
static uint32_t ulLastQueueUsedCounter[ queuesetNUM_QUEUES_IN_SET ] = { 0 };
BaseType_t xReturn = pdPASS, x;
8000155c:	24020001 	li	v0,1
80001560:	afc20000 	sw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:258

	if( ulLastCycleCounter == ulCycleCounter )
80001564:	8f83804f 	lw	v1,-32689(gp)
80001568:	8f828043 	lw	v0,-32701(gp)
8000156c:	14620002 	bne	v1,v0,80001578 <xAreQueueSetTasksStillRunning+0x28>
80001570:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:262
	{
		/* The cycle counter is no longer being incremented.  Either one of the
		tasks is stalled or an error has been detected. */
		xReturn = pdFAIL;
80001574:	afc00000 	sw	zero,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:265
	}

	ulLastCycleCounter = ulCycleCounter;
80001578:	8f828043 	lw	v0,-32701(gp)
8000157c:	af82804f 	sw	v0,-32689(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:270

	/* Ensure that all the queues in the set have been used.  This ensures the
	test is working as intended and guards against the rand() in the Tx task
	missing some values. */
	for( x = 0; x < queuesetNUM_QUEUES_IN_SET; x++ )
80001580:	afc00004 	sw	zero,4(s8)
80001584:	1000001f 	b	80001604 <xAreQueueSetTasksStillRunning+0xb4>
80001588:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:272
	{
		if( ulLastQueueUsedCounter[ x ] == ulQueueUsedCounter[ x ] )
8000158c:	3c028001 	lui	v0,0x8001
80001590:	8fc30004 	lw	v1,4(s8)
80001594:	00031880 	sll	v1,v1,0x2
80001598:	2442c374 	addiu	v0,v0,-15500
8000159c:	00621021 	addu	v0,v1,v0
800015a0:	8c430000 	lw	v1,0(v0)
800015a4:	3c028001 	lui	v0,0x8001
800015a8:	8fc40004 	lw	a0,4(s8)
800015ac:	00042080 	sll	a0,a0,0x2
800015b0:	2442c368 	addiu	v0,v0,-15512
800015b4:	00821021 	addu	v0,a0,v0
800015b8:	8c420000 	lw	v0,0(v0)
800015bc:	14620002 	bne	v1,v0,800015c8 <xAreQueueSetTasksStillRunning+0x78>
800015c0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:274
		{
			xReturn = pdFAIL;
800015c4:	afc00000 	sw	zero,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:277 (discriminator 2)
		}

		ulLastQueueUsedCounter[ x ] = ulQueueUsedCounter[ x ];
800015c8:	3c028001 	lui	v0,0x8001
800015cc:	8fc30004 	lw	v1,4(s8)
800015d0:	00031880 	sll	v1,v1,0x2
800015d4:	2442c368 	addiu	v0,v0,-15512
800015d8:	00621021 	addu	v0,v1,v0
800015dc:	8c430000 	lw	v1,0(v0)
800015e0:	3c028001 	lui	v0,0x8001
800015e4:	8fc40004 	lw	a0,4(s8)
800015e8:	00042080 	sll	a0,a0,0x2
800015ec:	2442c374 	addiu	v0,v0,-15500
800015f0:	00821021 	addu	v0,a0,v0
800015f4:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:270 (discriminator 2)
	ulLastCycleCounter = ulCycleCounter;

	/* Ensure that all the queues in the set have been used.  This ensures the
	test is working as intended and guards against the rand() in the Tx task
	missing some values. */
	for( x = 0; x < queuesetNUM_QUEUES_IN_SET; x++ )
800015f8:	8fc20004 	lw	v0,4(s8)
800015fc:	24420001 	addiu	v0,v0,1
80001600:	afc20004 	sw	v0,4(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:270 (discriminator 1)
80001604:	8fc20004 	lw	v0,4(s8)
80001608:	28420003 	slti	v0,v0,3
8000160c:	1440ffdf 	bnez	v0,8000158c <xAreQueueSetTasksStillRunning+0x3c>
80001610:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:281

		ulLastQueueUsedCounter[ x ] = ulQueueUsedCounter[ x ];
	}

	/* Check the global status flag. */
	if( xQueueSetTasksStatus != pdPASS )
80001614:	8f83800b 	lw	v1,-32757(gp)
80001618:	24020001 	li	v0,1
8000161c:	10620002 	beq	v1,v0,80001628 <xAreQueueSetTasksStillRunning+0xd8>
80001620:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:283
	{
		xReturn = pdFAIL;
80001624:	afc00000 	sw	zero,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:287
	}

	/* Check that the ISR is still sending values to the queues too. */
	if( ulISRTxValue == ulLastISRTxValue )
80001628:	8f83800f 	lw	v1,-32753(gp)
8000162c:	8f828053 	lw	v0,-32685(gp)
80001630:	14620004 	bne	v1,v0,80001644 <xAreQueueSetTasksStillRunning+0xf4>
80001634:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:289
	{
		xReturn = pdFAIL;
80001638:	afc00000 	sw	zero,0(s8)
8000163c:	10000003 	b	8000164c <xAreQueueSetTasksStillRunning+0xfc>
80001640:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:293
	}
	else
	{
		ulLastISRTxValue = ulISRTxValue;
80001644:	8f82800f 	lw	v0,-32753(gp)
80001648:	af828053 	sw	v0,-32685(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:296
	}

	return xReturn;
8000164c:	8fc20000 	lw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:297
}
80001650:	03c0e825 	move	sp,s8
80001654:	8fbe000c 	lw	s8,12(sp)
80001658:	27bd0010 	addiu	sp,sp,16
8000165c:	03e00008 	jr	ra
80001660:	00000000 	nop

80001664 <prvQueueSetSendingTask>:
prvQueueSetSendingTask():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:301
/*-----------------------------------------------------------*/

static void prvQueueSetSendingTask( void *pvParameters )
{
80001664:	27bdffd8 	addiu	sp,sp,-40
80001668:	afbf0024 	sw	ra,36(sp)
8000166c:	afbe0020 	sw	s8,32(sp)
80001670:	03a0f025 	move	s8,sp
80001674:	afc40028 	sw	a0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:302
uint32_t ulTaskTxValue = 0;
80001678:	afc00018 	sw	zero,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:310

	/* Remove compiler warning about the unused parameter. */
	( void ) pvParameters;

	/* Seed mini pseudo random number generator. */
	prvSRand( ( size_t ) &ulTaskTxValue );
8000167c:	27c20018 	addiu	v0,s8,24
80001680:	00402025 	move	a0,v0
80001684:	0c000806 	jal	80002018 <prvSRand>
80001688:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:315

	for( ;; )
	{
		/* Generate the index for the queue to which a value is to be sent. */
		uxQueueToWriteTo = prvRand() % queuesetNUM_QUEUES_IN_SET;
8000168c:	0c0007f4 	jal	80001fd0 <prvRand>
80001690:	00000000 	nop
80001694:	00401825 	move	v1,v0
80001698:	3c02aaaa 	lui	v0,0xaaaa
8000169c:	3442aaab 	ori	v0,v0,0xaaab
800016a0:	00620019 	multu	v1,v0
800016a4:	00001010 	mfhi	v0
800016a8:	00022042 	srl	a0,v0,0x1
800016ac:	00801025 	move	v0,a0
800016b0:	00021040 	sll	v0,v0,0x1
800016b4:	00441021 	addu	v0,v0,a0
800016b8:	00621023 	subu	v0,v1,v0
800016bc:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:316
		xQueueInUse = xQueues[ uxQueueToWriteTo ];
800016c0:	3c028001 	lui	v0,0x8001
800016c4:	8fc30010 	lw	v1,16(s8)
800016c8:	00031880 	sll	v1,v1,0x2
800016cc:	2442c35c 	addiu	v0,v0,-15524
800016d0:	00621021 	addu	v0,v1,v0
800016d4:	8c420000 	lw	v0,0(v0)
800016d8:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:320

		/* Note which index is being written to to ensure all the queues are
		used. */
		( ulQueueUsedCounter[ uxQueueToWriteTo ] )++;
800016dc:	3c028001 	lui	v0,0x8001
800016e0:	8fc30010 	lw	v1,16(s8)
800016e4:	00031880 	sll	v1,v1,0x2
800016e8:	2442c368 	addiu	v0,v0,-15512
800016ec:	00621021 	addu	v0,v1,v0
800016f0:	8c420000 	lw	v0,0(v0)
800016f4:	24430001 	addiu	v1,v0,1
800016f8:	3c028001 	lui	v0,0x8001
800016fc:	8fc40010 	lw	a0,16(s8)
80001700:	00042080 	sll	a0,a0,0x2
80001704:	2442c368 	addiu	v0,v0,-15512
80001708:	00821021 	addu	v0,a0,v0
8000170c:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:324

		/* Send to the queue to unblock the task that is waiting for data to
		arrive on a queue within the queue set to which this queue belongs. */
		if( xQueueSendToBack( xQueueInUse, &ulTaskTxValue, portMAX_DELAY ) != pdPASS )
80001710:	27c20018 	addiu	v0,s8,24
80001714:	8fc40014 	lw	a0,20(s8)
80001718:	00402825 	move	a1,v0
8000171c:	2406ffff 	li	a2,-1
80001720:	00003825 	move	a3,zero
80001724:	0c002254 	jal	80008950 <xQueueGenericSend>
80001728:	00000000 	nop
8000172c:	00401825 	move	v1,v0
80001730:	24020001 	li	v0,1
80001734:	10620002 	beq	v1,v0,80001740 <prvQueueSetSendingTask+0xdc>
80001738:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:328
		{
			/* The send should always pass as an infinite block time was
			used. */
			xQueueSetTasksStatus = pdFAIL;
8000173c:	af80800b 	sw	zero,-32757(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:335

		#if( configUSE_PREEMPTION == 0 )
			taskYIELD();
		#endif

		ulTaskTxValue++;
80001740:	8fc20018 	lw	v0,24(s8)
80001744:	24420001 	addiu	v0,v0,1
80001748:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:339

		/* If the Tx value has reached the range used by the ISR then set it
		back to 0. */
		if( ulTaskTxValue == queuesetINITIAL_ISR_TX_VALUE )
8000174c:	8fc30018 	lw	v1,24(s8)
80001750:	3402ffff 	li	v0,0xffff
80001754:	14620002 	bne	v1,v0,80001760 <prvQueueSetSendingTask+0xfc>
80001758:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:341
		{
			ulTaskTxValue = 0;
8000175c:	afc00018 	sw	zero,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:346
		}

		/* Increase test coverage by occasionally change the priorities of the
		two tasks relative to each other. */
		prvChangeRelativePriorities();
80001760:	0c0005dc 	jal	80001770 <prvChangeRelativePriorities>
80001764:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:347
	}
80001768:	1000ffc8 	b	8000168c <prvQueueSetSendingTask+0x28>
8000176c:	00000000 	nop

80001770 <prvChangeRelativePriorities>:
prvChangeRelativePriorities():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:352
}
/*-----------------------------------------------------------*/

static void prvChangeRelativePriorities( void )
{
80001770:	27bdffe8 	addiu	sp,sp,-24
80001774:	afbf0014 	sw	ra,20(sp)
80001778:	afbe0010 	sw	s8,16(sp)
8000177c:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:358
static UBaseType_t ulLoops = 0;
static eRelativePriorities ePriorities = eEqualPriority;

	/* Occasionally change the task priority relative to the priority of
	the receiving task. */
	ulLoops++;
80001780:	8f828057 	lw	v0,-32681(gp)
80001784:	24420001 	addiu	v0,v0,1
80001788:	af828057 	sw	v0,-32681(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:359
	if( ulLoops >= queuesetPRIORITY_CHANGE_LOOPS )
8000178c:	8f828057 	lw	v0,-32681(gp)
80001790:	2c420012 	sltiu	v0,v0,18
80001794:	1440002f 	bnez	v0,80001854 <prvChangeRelativePriorities+0xe4>
80001798:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:361
	{
		ulLoops = 0;
8000179c:	af808057 	sw	zero,-32681(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:363

		switch( ePriorities )
800017a0:	8f82805b 	lw	v0,-32677(gp)
800017a4:	24030001 	li	v1,1
800017a8:	10430012 	beq	v0,v1,800017f4 <prvChangeRelativePriorities+0x84>
800017ac:	00000000 	nop
800017b0:	2c430001 	sltiu	v1,v0,1
800017b4:	14600006 	bnez	v1,800017d0 <prvChangeRelativePriorities+0x60>
800017b8:	00000000 	nop
800017bc:	24030002 	li	v1,2
800017c0:	1043001a 	beq	v0,v1,8000182c <prvChangeRelativePriorities+0xbc>
800017c4:	00000000 	nop
800017c8:	10000022 	b	80001854 <prvChangeRelativePriorities+0xe4>
800017cc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:369
		{
			case eEqualPriority:
				/* Both tasks are running with medium priority.  Now lower the
				priority of the receiving task so the Tx task has the higher
				relative priority. */
				vTaskPrioritySet( xQueueSetReceivingTask, queuesetLOW_PRIORITY );
800017d0:	8f82810b 	lw	v0,-32501(gp)
800017d4:	00402025 	move	a0,v0
800017d8:	00002825 	move	a1,zero
800017dc:	0c001624 	jal	80005890 <vTaskPrioritySet>
800017e0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:370
				ePriorities = eTxHigherPriority;
800017e4:	24020001 	li	v0,1
800017e8:	af82805b 	sw	v0,-32677(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:371
				break;
800017ec:	10000019 	b	80001854 <prvChangeRelativePriorities+0xe4>
800017f0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:377

			case eTxHigherPriority:
				/* The Tx task is running with a higher priority than the Rx
				task.  Switch the priorities around so the Rx task has the
				higher relative priority. */
				vTaskPrioritySet( xQueueSetReceivingTask, queuesetMEDIUM_PRIORITY );
800017f4:	8f82810b 	lw	v0,-32501(gp)
800017f8:	00402025 	move	a0,v0
800017fc:	24050001 	li	a1,1
80001800:	0c001624 	jal	80005890 <vTaskPrioritySet>
80001804:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:378
				vTaskPrioritySet( xQueueSetSendingTask, queuesetLOW_PRIORITY );
80001808:	8f828107 	lw	v0,-32505(gp)
8000180c:	00402025 	move	a0,v0
80001810:	00002825 	move	a1,zero
80001814:	0c001624 	jal	80005890 <vTaskPrioritySet>
80001818:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:379
				ePriorities = eTxLowerPriority;
8000181c:	24020002 	li	v0,2
80001820:	af82805b 	sw	v0,-32677(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:380
				break;
80001824:	1000000b 	b	80001854 <prvChangeRelativePriorities+0xe4>
80001828:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:385

			case eTxLowerPriority:
				/* The Tx task is running with a lower priority than the Rx
				task.  Make the priorities equal again. */
				vTaskPrioritySet( xQueueSetSendingTask, queuesetMEDIUM_PRIORITY );
8000182c:	8f828107 	lw	v0,-32505(gp)
80001830:	00402025 	move	a0,v0
80001834:	24050001 	li	a1,1
80001838:	0c001624 	jal	80005890 <vTaskPrioritySet>
8000183c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:386
				ePriorities = eEqualPriority;
80001840:	af80805b 	sw	zero,-32677(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:391

				/* When both tasks are using a non-idle priority the queue set
				tasks will starve idle priority tasks of execution time - so
				relax a bit before the next iteration to minimise the impact. */
				vTaskDelay( queuesetTX_LOOP_DELAY );
80001844:	240400c8 	li	a0,200
80001848:	0c00156e 	jal	800055b8 <vTaskDelay>
8000184c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:393

				break;
80001850:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:396
		}
	}
}
80001854:	03c0e825 	move	sp,s8
80001858:	8fbf0014 	lw	ra,20(sp)
8000185c:	8fbe0010 	lw	s8,16(sp)
80001860:	27bd0018 	addiu	sp,sp,24
80001864:	03e00008 	jr	ra
80001868:	00000000 	nop

8000186c <prvQueueSetReceivingTask>:
prvQueueSetReceivingTask():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:400
/*-----------------------------------------------------------*/

static void prvQueueSetReceivingTask( void *pvParameters )
{
8000186c:	27bdffd8 	addiu	sp,sp,-40
80001870:	afbf0024 	sw	ra,36(sp)
80001874:	afbe0020 	sw	s8,32(sp)
80001878:	03a0f025 	move	s8,sp
8000187c:	afc40028 	sw	a0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:410
	/* Remove compiler warnings. */
	( void ) pvParameters;

	/* Create the queues and add them to the queue set before resuming the Tx
	task. */
	prvSetupTest();
80001880:	0c000757 	jal	80001d5c <prvSetupTest>
80001884:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:417
	for( ;; )
	{
		/* For test coverage reasons, the block time is dependent on the
		priority of this task - which changes during the test.  When the task
		is at the idle priority it polls the queue set. */
		if( uxTaskPriorityGet( NULL ) == tskIDLE_PRIORITY )
80001888:	00002025 	move	a0,zero
8000188c:	0c0015ec 	jal	800057b0 <uxTaskPriorityGet>
80001890:	00000000 	nop
80001894:	14400004 	bnez	v0,800018a8 <prvQueueSetReceivingTask+0x3c>
80001898:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:419
		{
			xBlockTime = 0;
8000189c:	afc00010 	sw	zero,16(s8)
800018a0:	10000003 	b	800018b0 <prvQueueSetReceivingTask+0x44>
800018a4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:423
		}
		else
		{
			xBlockTime = portMAX_DELAY;
800018a8:	2402ffff 	li	v0,-1
800018ac:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:427
		}

		/* Wait for a message to arrive on one of the queues in the set. */
		xActivatedQueue = xQueueSelectFromSet( xQueueSet, portMAX_DELAY );
800018b0:	8f82803f 	lw	v0,-32705(gp)
800018b4:	00402025 	move	a0,v0
800018b8:	2405ffff 	li	a1,-1
800018bc:	0c002877 	jal	8000a1dc <xQueueSelectFromSet>
800018c0:	00000000 	nop
800018c4:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:429

		if( xActivatedQueue == NULL )
800018c8:	8fc20014 	lw	v0,20(s8)
800018cc:	14400007 	bnez	v0,800018ec <prvQueueSetReceivingTask+0x80>
800018d0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:431
		{
			if( xBlockTime != 0 )
800018d4:	8fc20010 	lw	v0,16(s8)
800018d8:	1040001f 	beqz	v0,80001958 <prvQueueSetReceivingTask+0xec>
800018dc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:434
			{
				/* This should not happen as an infinite delay was used. */
				xQueueSetTasksStatus = pdFAIL;
800018e0:	af80800b 	sw	zero,-32757(gp)
800018e4:	1000ffe8 	b	80001888 <prvQueueSetReceivingTask+0x1c>
800018e8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:442
		else
		{
			/* Reading from the queue should pass with a zero block time as
			this task will only run when something has been posted to a task
			in the queue set. */
			if( xQueueReceive( xActivatedQueue, &ulReceived, queuesetDONT_BLOCK ) != pdPASS )
800018ec:	27c20018 	addiu	v0,s8,24
800018f0:	8fc40014 	lw	a0,20(s8)
800018f4:	00402825 	move	a1,v0
800018f8:	00003025 	move	a2,zero
800018fc:	00003825 	move	a3,zero
80001900:	0c002461 	jal	80009184 <xQueueGenericReceive>
80001904:	00000000 	nop
80001908:	00401825 	move	v1,v0
8000190c:	24020001 	li	v0,1
80001910:	10620002 	beq	v1,v0,8000191c <prvQueueSetReceivingTask+0xb0>
80001914:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:444
			{
				xQueueSetTasksStatus = pdFAIL;
80001918:	af80800b 	sw	zero,-32757(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:450
			}

			/* Ensure the value received was the value expected.  This function
			manipulates file scope data and is also called from an ISR, hence
			the critical section. */
			taskENTER_CRITICAL();
8000191c:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80001920:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:452
			{
				prvCheckReceivedValue( ulReceived );
80001924:	8fc20018 	lw	v0,24(s8)
80001928:	00402025 	move	a0,v0
8000192c:	0c000672 	jal	800019c8 <prvCheckReceivedValue>
80001930:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:454
			}
			taskEXIT_CRITICAL();
80001934:	0c001de3 	jal	8000778c <vTaskExitCritical>
80001938:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:456

			if( xQueueSetTasksStatus == pdPASS )
8000193c:	8f83800b 	lw	v1,-32757(gp)
80001940:	24020001 	li	v0,1
80001944:	14620004 	bne	v1,v0,80001958 <prvQueueSetReceivingTask+0xec>
80001948:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:458
			{
				ulCycleCounter++;
8000194c:	8f828043 	lw	v0,-32701(gp)
80001950:	24420001 	addiu	v0,v0,1
80001954:	af828043 	sw	v0,-32701(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:461 (discriminator 1)
			}
		}
	}
80001958:	1000ffcb 	b	80001888 <prvQueueSetReceivingTask+0x1c>
8000195c:	00000000 	nop

80001960 <vQueueSetAccessQueueSetFromISR>:
vQueueSetAccessQueueSetFromISR():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:466
}
/*-----------------------------------------------------------*/

void vQueueSetAccessQueueSetFromISR( void )
{
80001960:	27bdffe8 	addiu	sp,sp,-24
80001964:	afbf0014 	sw	ra,20(sp)
80001968:	afbe0010 	sw	s8,16(sp)
8000196c:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:471
static uint32_t ulCallCount = 0;

	/* xSetupComplete is set to pdTRUE when the queues have been created and
	are available for use. */
	if( xSetupComplete == pdTRUE )
80001970:	8f838047 	lw	v1,-32697(gp)
80001974:	24020001 	li	v0,1
80001978:	1462000d 	bne	v1,v0,800019b0 <vQueueSetAccessQueueSetFromISR+0x50>
8000197c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:475
	{
		/* It is intended that this function is called from the tick hook
		function, so each call is one tick period apart. */
		ulCallCount++;
80001980:	8f82805f 	lw	v0,-32673(gp)
80001984:	24420001 	addiu	v0,v0,1
80001988:	af82805f 	sw	v0,-32673(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:476
		if( ulCallCount > queuesetISR_TX_PERIOD )
8000198c:	8f82805f 	lw	v0,-32673(gp)
80001990:	2c420065 	sltiu	v0,v0,101
80001994:	14400006 	bnez	v0,800019b0 <vQueueSetAccessQueueSetFromISR+0x50>
80001998:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:478
		{
			ulCallCount = 0;
8000199c:	af80805f 	sw	zero,-32673(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:481

			/* First attempt to read from the queue set. */
			prvReceiveFromQueueInSetFromISR();
800019a0:	0c00070c 	jal	80001c30 <prvReceiveFromQueueInSetFromISR>
800019a4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:484

			/* Then write to the queue set. */
			prvSendToQueueInSetFromISR();
800019a8:	0c00072d 	jal	80001cb4 <prvSendToQueueInSetFromISR>
800019ac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:487
		}
	}
}
800019b0:	03c0e825 	move	sp,s8
800019b4:	8fbf0014 	lw	ra,20(sp)
800019b8:	8fbe0010 	lw	s8,16(sp)
800019bc:	27bd0018 	addiu	sp,sp,24
800019c0:	03e00008 	jr	ra
800019c4:	00000000 	nop

800019c8 <prvCheckReceivedValue>:
prvCheckReceivedValue():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:491
/*-----------------------------------------------------------*/

static void prvCheckReceivedValue( uint32_t ulReceived )
{
800019c8:	27bdffe8 	addiu	sp,sp,-24
800019cc:	afbf0014 	sw	ra,20(sp)
800019d0:	afbe0010 	sw	s8,16(sp)
800019d4:	03a0f025 	move	s8,sp
800019d8:	afc40018 	sw	a0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:505
	values, rather than a single absolute value.  To make the range testing
	easier values in the range limits are ignored. */

	/* If the received value is equal to or greater than
	queuesetINITIAL_ISR_TX_VALUE then it was sent by an ISR. */
	if( ulReceived >= queuesetINITIAL_ISR_TX_VALUE )
800019dc:	8fc30018 	lw	v1,24(s8)
800019e0:	3402ffff 	li	v0,0xffff
800019e4:	0062102b 	sltu	v0,v1,v0
800019e8:	1440002a 	bnez	v0,80001a94 <prvCheckReceivedValue+0xcc>
800019ec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:508
	{
		/* The value was sent from the ISR. */
		if( ( ulReceived - queuesetINITIAL_ISR_TX_VALUE ) < queuesetIGNORED_BOUNDARY )
800019f0:	8fc30018 	lw	v1,24(s8)
800019f4:	3c02ffff 	lui	v0,0xffff
800019f8:	34420001 	ori	v0,v0,0x1
800019fc:	00621021 	addu	v0,v1,v0
80001a00:	2c420006 	sltiu	v0,v0,6
80001a04:	1440000f 	bnez	v0,80001a44 <prvCheckReceivedValue+0x7c>
80001a08:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:513
		{
			/* The value received is at the lower limit of the expected range.
			Don't test it and expect to receive one higher next time. */
		}
		else if( ( ULONG_MAX - ulReceived ) <= queuesetIGNORED_BOUNDARY )
80001a0c:	8fc20018 	lw	v0,24(s8)
80001a10:	2c42fff9 	sltiu	v0,v0,-7
80001a14:	1040000b 	beqz	v0,80001a44 <prvCheckReceivedValue+0x7c>
80001a18:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:521
			Don't test it and expect to wrap soon. */
		}
		else
		{
			/* Check the value against its expected value range. */
			if( prvCheckReceivedValueWithinExpectedRange( ulReceived, ulExpectedReceivedFromISR ) != pdPASS )
80001a1c:	8f828013 	lw	v0,-32749(gp)
80001a20:	8fc40018 	lw	a0,24(s8)
80001a24:	00402825 	move	a1,v0
80001a28:	0c0006d0 	jal	80001b40 <prvCheckReceivedValueWithinExpectedRange>
80001a2c:	00000000 	nop
80001a30:	00401825 	move	v1,v0
80001a34:	24020001 	li	v0,1
80001a38:	10620002 	beq	v1,v0,80001a44 <prvCheckReceivedValue+0x7c>
80001a3c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:523
			{
				xQueueSetTasksStatus = pdFAIL;
80001a40:	af80800b 	sw	zero,-32757(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:527
			}
		}

		configASSERT( xQueueSetTasksStatus );
80001a44:	8f82800b 	lw	v0,-32757(gp)
80001a48:	14400006 	bnez	v0,80001a64 <prvCheckReceivedValue+0x9c>
80001a4c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:527 (discriminator 1)
80001a50:	3c028001 	lui	v0,0x8001
80001a54:	2444bc88 	addiu	a0,v0,-17272
80001a58:	2405020f 	li	a1,527
80001a5c:	0c000417 	jal	8000105c <vAssertCalled>
80001a60:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:530

		/* It is expected to receive an incrementing number. */
		ulExpectedReceivedFromISR++;
80001a64:	8f828013 	lw	v0,-32749(gp)
80001a68:	24420001 	addiu	v0,v0,1
80001a6c:	af828013 	sw	v0,-32749(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:531
		if( ulExpectedReceivedFromISR == 0 )
80001a70:	8f828013 	lw	v0,-32749(gp)
80001a74:	14400005 	bnez	v0,80001a8c <prvCheckReceivedValue+0xc4>
80001a78:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:533
		{
			ulExpectedReceivedFromISR = queuesetINITIAL_ISR_TX_VALUE;
80001a7c:	3402ffff 	li	v0,0xffff
80001a80:	af828013 	sw	v0,-32749(gp)
80001a84:	10000028 	b	80001b28 <prvCheckReceivedValue+0x160>
80001a88:	00000000 	nop
80001a8c:	10000026 	b	80001b28 <prvCheckReceivedValue+0x160>
80001a90:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:539
		}
	}
	else
	{
		/* The value was sent from the Tx task. */
		if( ulReceived < queuesetIGNORED_BOUNDARY )
80001a94:	8fc20018 	lw	v0,24(s8)
80001a98:	2c420006 	sltiu	v0,v0,6
80001a9c:	14400011 	bnez	v0,80001ae4 <prvCheckReceivedValue+0x11c>
80001aa0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:544
		{
			/* The value received is at the lower limit of the expected range.
			Don't test it, and expect to receive one higher next time. */
		}
		else if( ( ( queuesetINITIAL_ISR_TX_VALUE - 1 ) - ulReceived ) <= queuesetIGNORED_BOUNDARY )
80001aa4:	3403fffe 	li	v1,0xfffe
80001aa8:	8fc20018 	lw	v0,24(s8)
80001aac:	00621023 	subu	v0,v1,v0
80001ab0:	2c420007 	sltiu	v0,v0,7
80001ab4:	1440000b 	bnez	v0,80001ae4 <prvCheckReceivedValue+0x11c>
80001ab8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:552
			Don't test it and expect to wrap soon. */
		}
		else
		{
			/* Check the value against its expected value range. */
			if( prvCheckReceivedValueWithinExpectedRange( ulReceived, ulExpectedReceivedFromTask ) != pdPASS )
80001abc:	8f828063 	lw	v0,-32669(gp)
80001ac0:	8fc40018 	lw	a0,24(s8)
80001ac4:	00402825 	move	a1,v0
80001ac8:	0c0006d0 	jal	80001b40 <prvCheckReceivedValueWithinExpectedRange>
80001acc:	00000000 	nop
80001ad0:	00401825 	move	v1,v0
80001ad4:	24020001 	li	v0,1
80001ad8:	10620002 	beq	v1,v0,80001ae4 <prvCheckReceivedValue+0x11c>
80001adc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:554
			{
				xQueueSetTasksStatus = pdFAIL;
80001ae0:	af80800b 	sw	zero,-32757(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:558
			}
		}

		configASSERT( xQueueSetTasksStatus );
80001ae4:	8f82800b 	lw	v0,-32757(gp)
80001ae8:	14400006 	bnez	v0,80001b04 <prvCheckReceivedValue+0x13c>
80001aec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:558 (discriminator 1)
80001af0:	3c028001 	lui	v0,0x8001
80001af4:	2444bc88 	addiu	a0,v0,-17272
80001af8:	2405022e 	li	a1,558
80001afc:	0c000417 	jal	8000105c <vAssertCalled>
80001b00:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:561

		/* It is expected to receive an incrementing number. */
		ulExpectedReceivedFromTask++;
80001b04:	8f828063 	lw	v0,-32669(gp)
80001b08:	24420001 	addiu	v0,v0,1
80001b0c:	af828063 	sw	v0,-32669(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:562
		if( ulExpectedReceivedFromTask >= queuesetINITIAL_ISR_TX_VALUE )
80001b10:	8f838063 	lw	v1,-32669(gp)
80001b14:	3402ffff 	li	v0,0xffff
80001b18:	0062102b 	sltu	v0,v1,v0
80001b1c:	14400002 	bnez	v0,80001b28 <prvCheckReceivedValue+0x160>
80001b20:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:564
		{
			ulExpectedReceivedFromTask = 0;
80001b24:	af808063 	sw	zero,-32669(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:567
		}
	}
}
80001b28:	03c0e825 	move	sp,s8
80001b2c:	8fbf0014 	lw	ra,20(sp)
80001b30:	8fbe0010 	lw	s8,16(sp)
80001b34:	27bd0018 	addiu	sp,sp,24
80001b38:	03e00008 	jr	ra
80001b3c:	00000000 	nop

80001b40 <prvCheckReceivedValueWithinExpectedRange>:
prvCheckReceivedValueWithinExpectedRange():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:571
/*-----------------------------------------------------------*/

static BaseType_t prvCheckReceivedValueWithinExpectedRange( uint32_t ulReceived, uint32_t ulExpectedReceived )
{
80001b40:	27bdffe0 	addiu	sp,sp,-32
80001b44:	afbf001c 	sw	ra,28(sp)
80001b48:	afbe0018 	sw	s8,24(sp)
80001b4c:	03a0f025 	move	s8,sp
80001b50:	afc40020 	sw	a0,32(s8)
80001b54:	afc50024 	sw	a1,36(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:572
BaseType_t xReturn = pdPASS;
80001b58:	24020001 	li	v0,1
80001b5c:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:574

	if( ulReceived > ulExpectedReceived )
80001b60:	8fc30020 	lw	v1,32(s8)
80001b64:	8fc20024 	lw	v0,36(s8)
80001b68:	0043102b 	sltu	v0,v0,v1
80001b6c:	10400017 	beqz	v0,80001bcc <prvCheckReceivedValueWithinExpectedRange+0x8c>
80001b70:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:576
	{
		configASSERT( ( ulReceived - ulExpectedReceived ) <= queuesetALLOWABLE_RX_DEVIATION );
80001b74:	8fc30020 	lw	v1,32(s8)
80001b78:	8fc20024 	lw	v0,36(s8)
80001b7c:	00621023 	subu	v0,v1,v0
80001b80:	2c420004 	sltiu	v0,v0,4
80001b84:	14400006 	bnez	v0,80001ba0 <prvCheckReceivedValueWithinExpectedRange+0x60>
80001b88:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:576 (discriminator 1)
80001b8c:	3c028001 	lui	v0,0x8001
80001b90:	2444bc88 	addiu	a0,v0,-17272
80001b94:	24050240 	li	a1,576
80001b98:	0c000417 	jal	8000105c <vAssertCalled>
80001b9c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:577
		if( ( ulReceived - ulExpectedReceived ) > queuesetALLOWABLE_RX_DEVIATION )
80001ba0:	8fc30020 	lw	v1,32(s8)
80001ba4:	8fc20024 	lw	v0,36(s8)
80001ba8:	00621023 	subu	v0,v1,v0
80001bac:	2c420004 	sltiu	v0,v0,4
80001bb0:	14400004 	bnez	v0,80001bc4 <prvCheckReceivedValueWithinExpectedRange+0x84>
80001bb4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:579
		{
			xReturn = pdFALSE;
80001bb8:	afc00010 	sw	zero,16(s8)
80001bbc:	10000015 	b	80001c14 <prvCheckReceivedValueWithinExpectedRange+0xd4>
80001bc0:	00000000 	nop
80001bc4:	10000013 	b	80001c14 <prvCheckReceivedValueWithinExpectedRange+0xd4>
80001bc8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:584
		}
	}
	else
	{
		configASSERT( ( ulExpectedReceived - ulReceived ) <= queuesetALLOWABLE_RX_DEVIATION );
80001bcc:	8fc30024 	lw	v1,36(s8)
80001bd0:	8fc20020 	lw	v0,32(s8)
80001bd4:	00621023 	subu	v0,v1,v0
80001bd8:	2c420004 	sltiu	v0,v0,4
80001bdc:	14400006 	bnez	v0,80001bf8 <prvCheckReceivedValueWithinExpectedRange+0xb8>
80001be0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:584 (discriminator 1)
80001be4:	3c028001 	lui	v0,0x8001
80001be8:	2444bc88 	addiu	a0,v0,-17272
80001bec:	24050248 	li	a1,584
80001bf0:	0c000417 	jal	8000105c <vAssertCalled>
80001bf4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:585
		if( ( ulExpectedReceived - ulReceived ) > queuesetALLOWABLE_RX_DEVIATION )
80001bf8:	8fc30024 	lw	v1,36(s8)
80001bfc:	8fc20020 	lw	v0,32(s8)
80001c00:	00621023 	subu	v0,v1,v0
80001c04:	2c420004 	sltiu	v0,v0,4
80001c08:	14400002 	bnez	v0,80001c14 <prvCheckReceivedValueWithinExpectedRange+0xd4>
80001c0c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:587
		{
			xReturn = pdFALSE;
80001c10:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:591
		}
	}

	return xReturn;
80001c14:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:592
}
80001c18:	03c0e825 	move	sp,s8
80001c1c:	8fbf001c 	lw	ra,28(sp)
80001c20:	8fbe0018 	lw	s8,24(sp)
80001c24:	27bd0020 	addiu	sp,sp,32
80001c28:	03e00008 	jr	ra
80001c2c:	00000000 	nop

80001c30 <prvReceiveFromQueueInSetFromISR>:
prvReceiveFromQueueInSetFromISR():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:596
/*-----------------------------------------------------------*/

static void prvReceiveFromQueueInSetFromISR( void )
{
80001c30:	27bdffe0 	addiu	sp,sp,-32
80001c34:	afbf001c 	sw	ra,28(sp)
80001c38:	afbe0018 	sw	s8,24(sp)
80001c3c:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:601
QueueSetMemberHandle_t xActivatedQueue;
uint32_t ulReceived;

	/* See if any of the queues in the set contain data. */
	xActivatedQueue = xQueueSelectFromSetFromISR( xQueueSet );
80001c40:	8f82803f 	lw	v0,-32705(gp)
80001c44:	00402025 	move	a0,v0
80001c48:	0c00288c 	jal	8000a230 <xQueueSelectFromSetFromISR>
80001c4c:	00000000 	nop
80001c50:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:603

	if( xActivatedQueue != NULL )
80001c54:	8fc20010 	lw	v0,16(s8)
80001c58:	10400010 	beqz	v0,80001c9c <prvReceiveFromQueueInSetFromISR+0x6c>
80001c5c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:606
	{
		/* Reading from the queue for test purposes only. */
		if( xQueueReceiveFromISR( xActivatedQueue, &ulReceived, NULL ) != pdPASS )
80001c60:	27c20014 	addiu	v0,s8,20
80001c64:	8fc40010 	lw	a0,16(s8)
80001c68:	00402825 	move	a1,v0
80001c6c:	00003025 	move	a2,zero
80001c70:	0c002564 	jal	80009590 <xQueueReceiveFromISR>
80001c74:	00000000 	nop
80001c78:	00401825 	move	v1,v0
80001c7c:	24020001 	li	v0,1
80001c80:	10620002 	beq	v1,v0,80001c8c <prvReceiveFromQueueInSetFromISR+0x5c>
80001c84:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:610
		{
			/* Data should have been available as the handle was returned from
			xQueueSelectFromSetFromISR(). */
			xQueueSetTasksStatus = pdFAIL;
80001c88:	af80800b 	sw	zero,-32757(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:614
		}

		/* Ensure the value received was the value expected. */
		prvCheckReceivedValue( ulReceived );
80001c8c:	8fc20014 	lw	v0,20(s8)
80001c90:	00402025 	move	a0,v0
80001c94:	0c000672 	jal	800019c8 <prvCheckReceivedValue>
80001c98:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:616
	}
}
80001c9c:	03c0e825 	move	sp,s8
80001ca0:	8fbf001c 	lw	ra,28(sp)
80001ca4:	8fbe0018 	lw	s8,24(sp)
80001ca8:	27bd0020 	addiu	sp,sp,32
80001cac:	03e00008 	jr	ra
80001cb0:	00000000 	nop

80001cb4 <prvSendToQueueInSetFromISR>:
prvSendToQueueInSetFromISR():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:620
/*-----------------------------------------------------------*/

static void prvSendToQueueInSetFromISR( void )
{
80001cb4:	27bdffe8 	addiu	sp,sp,-24
80001cb8:	afbf0014 	sw	ra,20(sp)
80001cbc:	afbe0010 	sw	s8,16(sp)
80001cc0:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:623
static BaseType_t xQueueToWriteTo = 0;

	if( xQueueSendFromISR( xQueues[ xQueueToWriteTo ], ( void * ) &ulISRTxValue, NULL ) == pdPASS )
80001cc4:	8f838067 	lw	v1,-32665(gp)
80001cc8:	3c028001 	lui	v0,0x8001
80001ccc:	00031880 	sll	v1,v1,0x2
80001cd0:	2442c35c 	addiu	v0,v0,-15524
80001cd4:	00621021 	addu	v0,v1,v0
80001cd8:	8c420000 	lw	v0,0(v0)
80001cdc:	00402025 	move	a0,v0
80001ce0:	2785800f 	addiu	a1,gp,-32753
80001ce4:	00003025 	move	a2,zero
80001ce8:	00003825 	move	a3,zero
80001cec:	0c002358 	jal	80008d60 <xQueueGenericSendFromISR>
80001cf0:	00000000 	nop
80001cf4:	00401825 	move	v1,v0
80001cf8:	24020001 	li	v0,1
80001cfc:	14620011 	bne	v1,v0,80001d44 <prvSendToQueueInSetFromISR+0x90>
80001d00:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:625
	{
		ulISRTxValue++;
80001d04:	8f82800f 	lw	v0,-32753(gp)
80001d08:	24420001 	addiu	v0,v0,1
80001d0c:	af82800f 	sw	v0,-32753(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:628

		/* If the Tx value has wrapped then set it back to its initial value. */
		if( ulISRTxValue == 0UL )
80001d10:	8f82800f 	lw	v0,-32753(gp)
80001d14:	14400003 	bnez	v0,80001d24 <prvSendToQueueInSetFromISR+0x70>
80001d18:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:630
		{
			ulISRTxValue = queuesetINITIAL_ISR_TX_VALUE;
80001d1c:	3402ffff 	li	v0,0xffff
80001d20:	af82800f 	sw	v0,-32753(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:634
		}

		/* Use a different queue next time. */
		xQueueToWriteTo++;
80001d24:	8f828067 	lw	v0,-32665(gp)
80001d28:	24420001 	addiu	v0,v0,1
80001d2c:	af828067 	sw	v0,-32665(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:635
		if( xQueueToWriteTo >= queuesetNUM_QUEUES_IN_SET )
80001d30:	8f828067 	lw	v0,-32665(gp)
80001d34:	28420003 	slti	v0,v0,3
80001d38:	14400002 	bnez	v0,80001d44 <prvSendToQueueInSetFromISR+0x90>
80001d3c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:637
		{
			xQueueToWriteTo = 0;
80001d40:	af808067 	sw	zero,-32665(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:640
		}
	}
}
80001d44:	03c0e825 	move	sp,s8
80001d48:	8fbf0014 	lw	ra,20(sp)
80001d4c:	8fbe0010 	lw	s8,16(sp)
80001d50:	27bd0018 	addiu	sp,sp,24
80001d54:	03e00008 	jr	ra
80001d58:	00000000 	nop

80001d5c <prvSetupTest>:
prvSetupTest():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:644
/*-----------------------------------------------------------*/

static void prvSetupTest( void )
{
80001d5c:	27bdffe0 	addiu	sp,sp,-32
80001d60:	afbf001c 	sw	ra,28(sp)
80001d64:	afbe0018 	sw	s8,24(sp)
80001d68:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:646
BaseType_t x;
uint32_t ulValueToSend = 0;
80001d6c:	afc00014 	sw	zero,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:653
	/* Ensure the queues are created and the queue set configured before the
	sending task is unsuspended.

	First Create the queue set such that it will be able to hold a message for
	every space in every queue in the set. */
	xQueueSet = xQueueCreateSet( queuesetNUM_QUEUES_IN_SET * queuesetQUEUE_LENGTH );
80001d70:	24040009 	li	a0,9
80001d74:	0c00281b 	jal	8000a06c <xQueueCreateSet>
80001d78:	00000000 	nop
80001d7c:	af82803f 	sw	v0,-32705(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:655

	for( x = 0; x < queuesetNUM_QUEUES_IN_SET; x++ )
80001d80:	afc00010 	sw	zero,16(s8)
80001d84:	1000003d 	b	80001e7c <prvSetupTest+0x120>
80001d88:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:659
	{
		/* Create the queue and add it to the set.  The queue is just holding
		uint32_t value. */
		xQueues[ x ] = xQueueCreate( queuesetQUEUE_LENGTH, sizeof( uint32_t ) );
80001d8c:	24040003 	li	a0,3
80001d90:	24050004 	li	a1,4
80001d94:	00003025 	move	a2,zero
80001d98:	0c00212f 	jal	800084bc <xQueueGenericCreate>
80001d9c:	00000000 	nop
80001da0:	00402025 	move	a0,v0
80001da4:	3c028001 	lui	v0,0x8001
80001da8:	8fc30010 	lw	v1,16(s8)
80001dac:	00031880 	sll	v1,v1,0x2
80001db0:	2442c35c 	addiu	v0,v0,-15524
80001db4:	00621021 	addu	v0,v1,v0
80001db8:	ac440000 	sw	a0,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:660
		configASSERT( xQueues[ x ] );
80001dbc:	3c028001 	lui	v0,0x8001
80001dc0:	8fc30010 	lw	v1,16(s8)
80001dc4:	00031880 	sll	v1,v1,0x2
80001dc8:	2442c35c 	addiu	v0,v0,-15524
80001dcc:	00621021 	addu	v0,v1,v0
80001dd0:	8c420000 	lw	v0,0(v0)
80001dd4:	14400006 	bnez	v0,80001df0 <prvSetupTest+0x94>
80001dd8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:660 (discriminator 1)
80001ddc:	3c028001 	lui	v0,0x8001
80001de0:	2444bc88 	addiu	a0,v0,-17272
80001de4:	24050294 	li	a1,660
80001de8:	0c000417 	jal	8000105c <vAssertCalled>
80001dec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:661
		if( xQueueAddToSet( xQueues[ x ], xQueueSet ) != pdPASS )
80001df0:	3c028001 	lui	v0,0x8001
80001df4:	8fc30010 	lw	v1,16(s8)
80001df8:	00031880 	sll	v1,v1,0x2
80001dfc:	2442c35c 	addiu	v0,v0,-15524
80001e00:	00621021 	addu	v0,v1,v0
80001e04:	8c430000 	lw	v1,0(v0)
80001e08:	8f82803f 	lw	v0,-32705(gp)
80001e0c:	00602025 	move	a0,v1
80001e10:	00402825 	move	a1,v0
80001e14:	0c00282d 	jal	8000a0b4 <xQueueAddToSet>
80001e18:	00000000 	nop
80001e1c:	00401825 	move	v1,v0
80001e20:	24020001 	li	v0,1
80001e24:	10620004 	beq	v1,v0,80001e38 <prvSetupTest+0xdc>
80001e28:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:663
		{
			xQueueSetTasksStatus = pdFAIL;
80001e2c:	af80800b 	sw	zero,-32757(gp)
80001e30:	1000000f 	b	80001e70 <prvSetupTest+0x114>
80001e34:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:669
		}
		else
		{
			/* The queue has now been added to the queue set and cannot be added to
			another. */
			if( xQueueAddToSet( xQueues[ x ], xQueueSet ) != pdFAIL )
80001e38:	3c028001 	lui	v0,0x8001
80001e3c:	8fc30010 	lw	v1,16(s8)
80001e40:	00031880 	sll	v1,v1,0x2
80001e44:	2442c35c 	addiu	v0,v0,-15524
80001e48:	00621021 	addu	v0,v1,v0
80001e4c:	8c430000 	lw	v1,0(v0)
80001e50:	8f82803f 	lw	v0,-32705(gp)
80001e54:	00602025 	move	a0,v1
80001e58:	00402825 	move	a1,v0
80001e5c:	0c00282d 	jal	8000a0b4 <xQueueAddToSet>
80001e60:	00000000 	nop
80001e64:	10400002 	beqz	v0,80001e70 <prvSetupTest+0x114>
80001e68:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:671
			{
				xQueueSetTasksStatus = pdFAIL;
80001e6c:	af80800b 	sw	zero,-32757(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:655 (discriminator 2)

	First Create the queue set such that it will be able to hold a message for
	every space in every queue in the set. */
	xQueueSet = xQueueCreateSet( queuesetNUM_QUEUES_IN_SET * queuesetQUEUE_LENGTH );

	for( x = 0; x < queuesetNUM_QUEUES_IN_SET; x++ )
80001e70:	8fc20010 	lw	v0,16(s8)
80001e74:	24420001 	addiu	v0,v0,1
80001e78:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:655 (discriminator 1)
80001e7c:	8fc20010 	lw	v0,16(s8)
80001e80:	28420003 	slti	v0,v0,3
80001e84:	1440ffc1 	bnez	v0,80001d8c <prvSetupTest+0x30>
80001e88:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:678
		}
	}

	/* Attempt to remove a queue from a queue set it does not belong
	to (NULL being passed as the queue set in this case). */
	if( xQueueRemoveFromSet( xQueues[ 0 ], NULL ) != pdFAIL )
80001e8c:	3c028001 	lui	v0,0x8001
80001e90:	8c42c35c 	lw	v0,-15524(v0)
80001e94:	00402025 	move	a0,v0
80001e98:	00002825 	move	a1,zero
80001e9c:	0c002851 	jal	8000a144 <xQueueRemoveFromSet>
80001ea0:	00000000 	nop
80001ea4:	10400002 	beqz	v0,80001eb0 <prvSetupTest+0x154>
80001ea8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:682
	{
		/* It is not possible to successfully remove a queue from a queue
		set it does not belong to. */
		xQueueSetTasksStatus = pdFAIL;
80001eac:	af80800b 	sw	zero,-32757(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:686
	}

	/* Attempt to remove a queue from the queue set it does belong to. */
	if( xQueueRemoveFromSet( xQueues[ 0 ], xQueueSet ) != pdPASS )
80001eb0:	3c028001 	lui	v0,0x8001
80001eb4:	8c43c35c 	lw	v1,-15524(v0)
80001eb8:	8f82803f 	lw	v0,-32705(gp)
80001ebc:	00602025 	move	a0,v1
80001ec0:	00402825 	move	a1,v0
80001ec4:	0c002851 	jal	8000a144 <xQueueRemoveFromSet>
80001ec8:	00000000 	nop
80001ecc:	00401825 	move	v1,v0
80001ed0:	24020001 	li	v0,1
80001ed4:	10620002 	beq	v1,v0,80001ee0 <prvSetupTest+0x184>
80001ed8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:690
	{
		/* It should be possible to remove the queue from the queue set it
		does belong to. */
		xQueueSetTasksStatus = pdFAIL;
80001edc:	af80800b 	sw	zero,-32757(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:695
	}

	/* Add an item to the queue before attempting to add it back into the
	set. */
	xQueueSend( xQueues[ 0 ], ( void * ) &ulValueToSend, 0 );
80001ee0:	3c028001 	lui	v0,0x8001
80001ee4:	8c43c35c 	lw	v1,-15524(v0)
80001ee8:	27c20014 	addiu	v0,s8,20
80001eec:	00602025 	move	a0,v1
80001ef0:	00402825 	move	a1,v0
80001ef4:	00003025 	move	a2,zero
80001ef8:	00003825 	move	a3,zero
80001efc:	0c002254 	jal	80008950 <xQueueGenericSend>
80001f00:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:696
	if( xQueueAddToSet( xQueues[ 0 ], xQueueSet ) != pdFAIL )
80001f04:	3c028001 	lui	v0,0x8001
80001f08:	8c43c35c 	lw	v1,-15524(v0)
80001f0c:	8f82803f 	lw	v0,-32705(gp)
80001f10:	00602025 	move	a0,v1
80001f14:	00402825 	move	a1,v0
80001f18:	0c00282d 	jal	8000a0b4 <xQueueAddToSet>
80001f1c:	00000000 	nop
80001f20:	10400002 	beqz	v0,80001f2c <prvSetupTest+0x1d0>
80001f24:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:699
	{
		/* Should not be able to add a non-empty queue to a set. */
		xQueueSetTasksStatus = pdFAIL;
80001f28:	af80800b 	sw	zero,-32757(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:704
	}

	/* Remove the item from the queue before adding the queue back into the
	set so the dynamic tests can begin. */
	xQueueReceive( xQueues[ 0 ], &ulValueToSend, 0 );
80001f2c:	3c028001 	lui	v0,0x8001
80001f30:	8c43c35c 	lw	v1,-15524(v0)
80001f34:	27c20014 	addiu	v0,s8,20
80001f38:	00602025 	move	a0,v1
80001f3c:	00402825 	move	a1,v0
80001f40:	00003025 	move	a2,zero
80001f44:	00003825 	move	a3,zero
80001f48:	0c002461 	jal	80009184 <xQueueGenericReceive>
80001f4c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:705
	if( xQueueAddToSet( xQueues[ 0 ], xQueueSet ) != pdPASS )
80001f50:	3c028001 	lui	v0,0x8001
80001f54:	8c43c35c 	lw	v1,-15524(v0)
80001f58:	8f82803f 	lw	v0,-32705(gp)
80001f5c:	00602025 	move	a0,v1
80001f60:	00402825 	move	a1,v0
80001f64:	0c00282d 	jal	8000a0b4 <xQueueAddToSet>
80001f68:	00000000 	nop
80001f6c:	00401825 	move	v1,v0
80001f70:	24020001 	li	v0,1
80001f74:	10620002 	beq	v1,v0,80001f80 <prvSetupTest+0x224>
80001f78:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:709
	{
		/* If the queue was successfully removed from the queue set then it
		should be possible to add it back in again. */
		xQueueSetTasksStatus = pdFAIL;
80001f7c:	af80800b 	sw	zero,-32757(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:714
	}

	/* The task that sends to the queues is not running yet, so attempting to
	read from the queue set should fail. */
	if( xQueueSelectFromSet( xQueueSet, queuesetSHORT_DELAY ) != NULL )
80001f80:	8f82803f 	lw	v0,-32705(gp)
80001f84:	00402025 	move	a0,v0
80001f88:	240500c8 	li	a1,200
80001f8c:	0c002877 	jal	8000a1dc <xQueueSelectFromSet>
80001f90:	00000000 	nop
80001f94:	10400002 	beqz	v0,80001fa0 <prvSetupTest+0x244>
80001f98:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:716
	{
		xQueueSetTasksStatus = pdFAIL;
80001f9c:	af80800b 	sw	zero,-32757(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:720
	}

	/* Resume the task that writes to the queues. */
	vTaskResume( xQueueSetSendingTask );
80001fa0:	8f828107 	lw	v0,-32505(gp)
80001fa4:	00402025 	move	a0,v0
80001fa8:	0c00176d 	jal	80005db4 <vTaskResume>
80001fac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:723

	/* Let the ISR access the queues also. */
	xSetupComplete = pdTRUE;
80001fb0:	24020001 	li	v0,1
80001fb4:	af828047 	sw	v0,-32697(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:724
}
80001fb8:	03c0e825 	move	sp,s8
80001fbc:	8fbf001c 	lw	ra,28(sp)
80001fc0:	8fbe0018 	lw	s8,24(sp)
80001fc4:	27bd0020 	addiu	sp,sp,32
80001fc8:	03e00008 	jr	ra
80001fcc:	00000000 	nop

80001fd0 <prvRand>:
prvRand():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:728
/*-----------------------------------------------------------*/

static size_t prvRand( void )
{
80001fd0:	27bdfff8 	addiu	sp,sp,-8
80001fd4:	afbe0004 	sw	s8,4(sp)
80001fd8:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:729
	uxNextRand = ( uxNextRand * ( size_t ) 1103515245 ) + ( size_t ) 12345;
80001fdc:	8f83804b 	lw	v1,-32693(gp)
80001fe0:	3c0241c6 	lui	v0,0x41c6
80001fe4:	34424e6d 	ori	v0,v0,0x4e6d
80001fe8:	00620018 	mult	v1,v0
80001fec:	00001012 	mflo	v0
80001ff0:	24423039 	addiu	v0,v0,12345
80001ff4:	af82804b 	sw	v0,-32693(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:730
	return ( uxNextRand / ( size_t ) 65536 ) % ( size_t ) 32768;
80001ff8:	8f82804b 	lw	v0,-32693(gp)
80001ffc:	00021402 	srl	v0,v0,0x10
80002000:	30427fff 	andi	v0,v0,0x7fff
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:731
}
80002004:	03c0e825 	move	sp,s8
80002008:	8fbe0004 	lw	s8,4(sp)
8000200c:	27bd0008 	addiu	sp,sp,8
80002010:	03e00008 	jr	ra
80002014:	00000000 	nop

80002018 <prvSRand>:
prvSRand():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:735
/*-----------------------------------------------------------*/

static void prvSRand( size_t uxSeed )
{
80002018:	27bdfff8 	addiu	sp,sp,-8
8000201c:	afbe0004 	sw	s8,4(sp)
80002020:	03a0f025 	move	s8,sp
80002024:	afc40008 	sw	a0,8(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:736
	uxNextRand = uxSeed;
80002028:	8fc20008 	lw	v0,8(s8)
8000202c:	af82804b 	sw	v0,-32693(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/QueueSet.c:737
}
80002030:	03c0e825 	move	sp,s8
80002034:	8fbe0004 	lw	s8,4(sp)
80002038:	27bd0008 	addiu	sp,sp,8
8000203c:	03e00008 	jr	ra
80002040:	00000000 	nop

80002044 <vStartEventGroupTasks>:
vStartEventGroupTasks():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:209
static TaskHandle_t xSyncTask1 = NULL, xSyncTask2 = NULL;

/*-----------------------------------------------------------*/

void vStartEventGroupTasks( void )
{
80002044:	27bdffd8 	addiu	sp,sp,-40
80002048:	afbf0024 	sw	ra,36(sp)
8000204c:	afbe0020 	sw	s8,32(sp)
80002050:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:223
	 * only and are not part of the module tests that make use of the
	 * mtCOVERAGE_TEST_MARKER macro within the event groups implementation.
	 *
	 * Create the test tasks as described at the top of this file.
	 */
	xTaskCreate( prvTestSlaveTask, "WaitO", configMINIMAL_STACK_SIZE, NULL, ebWAIT_BIT_TASK_PRIORITY, &xTestSlaveTaskHandle );
80002054:	24020001 	li	v0,1
80002058:	afa20010 	sw	v0,16(sp)
8000205c:	27c20018 	addiu	v0,s8,24
80002060:	afa20014 	sw	v0,20(sp)
80002064:	3c028000 	lui	v0,0x8000
80002068:	244423fc 	addiu	a0,v0,9212
8000206c:	3c028001 	lui	v0,0x8001
80002070:	2445bca8 	addiu	a1,v0,-17240
80002074:	240600be 	li	a2,190
80002078:	00003825 	move	a3,zero
8000207c:	0c00133d 	jal	80004cf4 <xTaskCreate>
80002080:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:224
	xTaskCreate( prvTestMasterTask, "SetB", configMINIMAL_STACK_SIZE, ( void * ) xTestSlaveTaskHandle, ebSET_BIT_TASK_PRIORITY, NULL );
80002084:	8fc30018 	lw	v1,24(s8)
80002088:	afa00010 	sw	zero,16(sp)
8000208c:	afa00014 	sw	zero,20(sp)
80002090:	3c028000 	lui	v0,0x8000
80002094:	24442174 	addiu	a0,v0,8564
80002098:	3c028001 	lui	v0,0x8001
8000209c:	2445bcb0 	addiu	a1,v0,-17232
800020a0:	240600be 	li	a2,190
800020a4:	00603825 	move	a3,v1
800020a8:	0c00133d 	jal	80004cf4 <xTaskCreate>
800020ac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:225
	xTaskCreate( prvSyncTask, "Rndv", configMINIMAL_STACK_SIZE, ( void * ) ebRENDESVOUS_TASK_1_SYNC_BIT, ebWAIT_BIT_TASK_PRIORITY, &xSyncTask1 );
800020b0:	24020001 	li	v0,1
800020b4:	afa20010 	sw	v0,16(sp)
800020b8:	2782807f 	addiu	v0,gp,-32641
800020bc:	afa20014 	sw	v0,20(sp)
800020c0:	3c028000 	lui	v0,0x8000
800020c4:	244422e0 	addiu	a0,v0,8928
800020c8:	3c028001 	lui	v0,0x8001
800020cc:	2445bcb8 	addiu	a1,v0,-17224
800020d0:	240600be 	li	a2,190
800020d4:	24070004 	li	a3,4
800020d8:	0c00133d 	jal	80004cf4 <xTaskCreate>
800020dc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:226
	xTaskCreate( prvSyncTask, "Rndv", configMINIMAL_STACK_SIZE, ( void * ) ebRENDESVOUS_TASK_2_SYNC_BIT, ebWAIT_BIT_TASK_PRIORITY, &xSyncTask2 );
800020e0:	24020001 	li	v0,1
800020e4:	afa20010 	sw	v0,16(sp)
800020e8:	27828083 	addiu	v0,gp,-32637
800020ec:	afa20014 	sw	v0,20(sp)
800020f0:	3c028000 	lui	v0,0x8000
800020f4:	244422e0 	addiu	a0,v0,8928
800020f8:	3c028001 	lui	v0,0x8001
800020fc:	2445bcb8 	addiu	a1,v0,-17224
80002100:	240600be 	li	a2,190
80002104:	24070008 	li	a3,8
80002108:	0c00133d 	jal	80004cf4 <xTaskCreate>
8000210c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:229

	/* If the last task was created then the others will have been too. */
	configASSERT( xSyncTask2 );
80002110:	8f828083 	lw	v0,-32637(gp)
80002114:	14400006 	bnez	v0,80002130 <vStartEventGroupTasks+0xec>
80002118:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:229 (discriminator 1)
8000211c:	3c028001 	lui	v0,0x8001
80002120:	2444bcc0 	addiu	a0,v0,-17216
80002124:	240500e5 	li	a1,229
80002128:	0c000417 	jal	8000105c <vAssertCalled>
8000212c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:233

	/* Create the event group used by the ISR tests.  The event group used by
	the tasks is created by the tasks themselves. */
	xISREventGroup = xEventGroupCreate();
80002130:	0c0010a7 	jal	8000429c <xEventGroupCreate>
80002134:	00000000 	nop
80002138:	af82807b 	sw	v0,-32645(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:234
	configASSERT( xISREventGroup );
8000213c:	8f82807b 	lw	v0,-32645(gp)
80002140:	14400006 	bnez	v0,8000215c <vStartEventGroupTasks+0x118>
80002144:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:234 (discriminator 1)
80002148:	3c028001 	lui	v0,0x8001
8000214c:	2444bcc0 	addiu	a0,v0,-17216
80002150:	240500ea 	li	a1,234
80002154:	0c000417 	jal	8000105c <vAssertCalled>
80002158:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:235
}
8000215c:	03c0e825 	move	sp,s8
80002160:	8fbf0024 	lw	ra,36(sp)
80002164:	8fbe0020 	lw	s8,32(sp)
80002168:	27bd0028 	addiu	sp,sp,40
8000216c:	03e00008 	jr	ra
80002170:	00000000 	nop

80002174 <prvTestMasterTask>:
prvTestMasterTask():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:239
/*-----------------------------------------------------------*/

static void prvTestMasterTask( void *pvParameters )
{
80002174:	27bdffe0 	addiu	sp,sp,-32
80002178:	afbf001c 	sw	ra,28(sp)
8000217c:	afbe0018 	sw	s8,24(sp)
80002180:	03a0f025 	move	s8,sp
80002184:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:243
BaseType_t xError;

/* The handle to the slave task is passed in as the task parameter. */
TaskHandle_t xTestSlaveTaskHandle = ( TaskHandle_t ) pvParameters;
80002188:	8fc20020 	lw	v0,32(s8)
8000218c:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:249

	/* Avoid compiler warnings. */
	( void ) pvParameters;

	/* Create the event group used by the tasks ready for the initial tests. */
	xEventGroup = xEventGroupCreate();
80002190:	0c0010a7 	jal	8000429c <xEventGroupCreate>
80002194:	00000000 	nop
80002198:	af828077 	sw	v0,-32649(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:250
	configASSERT( xEventGroup );
8000219c:	8f828077 	lw	v0,-32649(gp)
800021a0:	14400006 	bnez	v0,800021bc <prvTestMasterTask+0x48>
800021a4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:250 (discriminator 1)
800021a8:	3c028001 	lui	v0,0x8001
800021ac:	2444bcc0 	addiu	a0,v0,-17216
800021b0:	240500fa 	li	a1,250
800021b4:	0c000417 	jal	8000105c <vAssertCalled>
800021b8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:255

	/* Perform the tests that block two tasks on different combinations of bits,
	then set each bit in turn and check the correct tasks unblock at the correct
	times. */
	xError = prvSelectiveBitsTestMasterFunction();
800021bc:	0c000bb3 	jal	80002ecc <prvSelectiveBitsTestMasterFunction>
800021c0:	00000000 	nop
800021c4:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:260

	for( ;; )
	{
		/* Recreate the event group ready for the next cycle. */
		xEventGroup = xEventGroupCreate();
800021c8:	0c0010a7 	jal	8000429c <xEventGroupCreate>
800021cc:	00000000 	nop
800021d0:	af828077 	sw	v0,-32649(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:261
		configASSERT( xEventGroup );
800021d4:	8f828077 	lw	v0,-32649(gp)
800021d8:	14400006 	bnez	v0,800021f4 <prvTestMasterTask+0x80>
800021dc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:261 (discriminator 1)
800021e0:	3c028001 	lui	v0,0x8001
800021e4:	2444bcc0 	addiu	a0,v0,-17216
800021e8:	24050105 	li	a1,261
800021ec:	0c000417 	jal	8000105c <vAssertCalled>
800021f0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:265

		/* Perform the tests that check the behaviour when a single task is
		blocked on various combinations of event bits. */
		xError = prvBitCombinationTestMasterFunction( xError, xTestSlaveTaskHandle );
800021f4:	8fc40010 	lw	a0,16(s8)
800021f8:	8fc50014 	lw	a1,20(s8)
800021fc:	0c000ad5 	jal	80002b54 <prvBitCombinationTestMasterFunction>
80002200:	00000000 	nop
80002204:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:268

		/* Perform the task synchronisation tests. */
		xError = prvPerformTaskSyncTests( xError, xTestSlaveTaskHandle );
80002208:	8fc40010 	lw	a0,16(s8)
8000220c:	8fc50014 	lw	a1,20(s8)
80002210:	0c0009a0 	jal	80002680 <prvPerformTaskSyncTests>
80002214:	00000000 	nop
80002218:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:271

		/* Delete the event group. */
		vEventGroupDelete( xEventGroup );
8000221c:	8f828077 	lw	v0,-32649(gp)
80002220:	00402025 	move	a0,v0
80002224:	0c0012ce 	jal	80004b38 <vEventGroupDelete>
80002228:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:275

		/* Now all the other tasks should have completed and suspended
		themselves ready for the next go around the loop. */
		if( eTaskGetState( xTestSlaveTaskHandle ) != eSuspended )
8000222c:	8fc40014 	lw	a0,20(s8)
80002230:	0c00159d 	jal	80005674 <eTaskGetState>
80002234:	00000000 	nop
80002238:	00401825 	move	v1,v0
8000223c:	24020003 	li	v0,3
80002240:	10620003 	beq	v1,v0,80002250 <prvTestMasterTask+0xdc>
80002244:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:277
		{
			xError = pdTRUE;
80002248:	24020001 	li	v0,1
8000224c:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:280
		}

		if( eTaskGetState( xSyncTask1 ) != eSuspended )
80002250:	8f82807f 	lw	v0,-32641(gp)
80002254:	00402025 	move	a0,v0
80002258:	0c00159d 	jal	80005674 <eTaskGetState>
8000225c:	00000000 	nop
80002260:	00401825 	move	v1,v0
80002264:	24020003 	li	v0,3
80002268:	10620003 	beq	v1,v0,80002278 <prvTestMasterTask+0x104>
8000226c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:282
		{
			xError = pdTRUE;
80002270:	24020001 	li	v0,1
80002274:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:285
		}

		if( eTaskGetState( xSyncTask2 ) != eSuspended )
80002278:	8f828083 	lw	v0,-32637(gp)
8000227c:	00402025 	move	a0,v0
80002280:	0c00159d 	jal	80005674 <eTaskGetState>
80002284:	00000000 	nop
80002288:	00401825 	move	v1,v0
8000228c:	24020003 	li	v0,3
80002290:	10620003 	beq	v1,v0,800022a0 <prvTestMasterTask+0x12c>
80002294:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:287
		{
			xError = pdTRUE;
80002298:	24020001 	li	v0,1
8000229c:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:291
		}

		/* Only increment the cycle variable if no errors have been detected. */
		if( xError == pdFALSE )
800022a0:	8fc20010 	lw	v0,16(s8)
800022a4:	14400004 	bnez	v0,800022b8 <prvTestMasterTask+0x144>
800022a8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:293
		{
			ulTestMasterCycles++;
800022ac:	8f82806b 	lw	v0,-32661(gp)
800022b0:	24420001 	addiu	v0,v0,1
800022b4:	af82806b 	sw	v0,-32661(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:296
		}

		configASSERT( xError == pdFALSE );
800022b8:	8fc20010 	lw	v0,16(s8)
800022bc:	10400006 	beqz	v0,800022d8 <prvTestMasterTask+0x164>
800022c0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:296 (discriminator 1)
800022c4:	3c028001 	lui	v0,0x8001
800022c8:	2444bcc0 	addiu	a0,v0,-17216
800022cc:	24050128 	li	a1,296
800022d0:	0c000417 	jal	8000105c <vAssertCalled>
800022d4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:297
	}
800022d8:	1000ffbb 	b	800021c8 <prvTestMasterTask+0x54>
800022dc:	00000000 	nop

800022e0 <prvSyncTask>:
prvSyncTask():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:302
}
/*-----------------------------------------------------------*/

static void prvSyncTask( void *pvParameters )
{
800022e0:	27bdffd8 	addiu	sp,sp,-40
800022e4:	afbf0024 	sw	ra,36(sp)
800022e8:	afbe0020 	sw	s8,32(sp)
800022ec:	03a0f025 	move	s8,sp
800022f0:	afc40028 	sw	a0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:308
EventBits_t uxSynchronisationBit, uxReturned;

	/* A few tests that check the behaviour when two tasks are blocked on
	various different bits within an event group are performed before this task
	enters its infinite loop to carry out its main demo function. */
	prvSelectiveBitsTestSlaveFunction();
800022f4:	0c000b89 	jal	80002e24 <prvSelectiveBitsTestSlaveFunction>
800022f8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:312

	/* The bit to use to indicate this task is at the synchronisation point is
	passed in as the task parameter. */
	uxSynchronisationBit = ( EventBits_t ) pvParameters;
800022fc:	8fc20028 	lw	v0,40(s8)
80002300:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:321
		/* Now this task takes part in a task synchronisation - sometimes known
		as a 'rendezvous'.  Its execution pattern is controlled by the 'test
		master' task, which is responsible for taking this task out of the
		Suspended state when it is time to test the synchronisation behaviour.
		See: http://www.freertos.org/xEventGroupSync.html. */
		vTaskSuspend( NULL );
80002304:	00002025 	move	a0,zero
80002308:	0c0016c6 	jal	80005b18 <vTaskSuspend>
8000230c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:327

		/* Set the bit that indicates this task is at the synchronisation
		point.  The first time this is done the 'test master' task has a lower
		priority than this task so this task will get to the sync point before
		the set bits task. */
		uxReturned = xEventGroupSync( xEventGroup,	/* The event group used for the synchronisation. */
80002310:	8f828077 	lw	v0,-32649(gp)
80002314:	00402025 	move	a0,v0
80002318:	8fc50018 	lw	a1,24(s8)
8000231c:	2406000f 	li	a2,15
80002320:	2407ffff 	li	a3,-1
80002324:	0c0010c0 	jal	80004300 <xEventGroupSync>
80002328:	00000000 	nop
8000232c:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:335
									portMAX_DELAY );/* The maximum time to wait for the sync condition to be met before giving up. */

		/* A max delay was used, so this task should only exit the above
		function call when the sync condition is met.  Check this is the
		case. */
		configASSERT( ( uxReturned & ebALL_SYNC_BITS ) == ebALL_SYNC_BITS );
80002330:	8fc2001c 	lw	v0,28(s8)
80002334:	3043000f 	andi	v1,v0,0xf
80002338:	2402000f 	li	v0,15
8000233c:	10620006 	beq	v1,v0,80002358 <prvSyncTask+0x78>
80002340:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:335 (discriminator 1)
80002344:	3c028001 	lui	v0,0x8001
80002348:	2444bcc0 	addiu	a0,v0,-17216
8000234c:	2405014f 	li	a1,335
80002350:	0c000417 	jal	8000105c <vAssertCalled>
80002354:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:341

		/* Remove compiler warning if configASSERT() is not defined. */
		( void ) uxReturned;

		/* Wait until the 'test master' task unsuspends this task again. */
		vTaskSuspend( NULL );
80002358:	00002025 	move	a0,zero
8000235c:	0c0016c6 	jal	80005b18 <vTaskSuspend>
80002360:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:346

		/* Set the bit that indicates this task is at the synchronisation
		point again.  This time the 'test master' task has a higher priority
		than this task so will get to the sync point before this task. */
		uxReturned = xEventGroupSync( xEventGroup, uxSynchronisationBit, ebALL_SYNC_BITS, portMAX_DELAY );
80002364:	8f828077 	lw	v0,-32649(gp)
80002368:	00402025 	move	a0,v0
8000236c:	8fc50018 	lw	a1,24(s8)
80002370:	2406000f 	li	a2,15
80002374:	2407ffff 	li	a3,-1
80002378:	0c0010c0 	jal	80004300 <xEventGroupSync>
8000237c:	00000000 	nop
80002380:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:351

		/* Again a max delay was used, so this task should only exit the above
		function call when the sync condition is met.  Check this is the
		case. */
		configASSERT( ( uxReturned & ebALL_SYNC_BITS ) == ebALL_SYNC_BITS );
80002384:	8fc2001c 	lw	v0,28(s8)
80002388:	3043000f 	andi	v1,v0,0xf
8000238c:	2402000f 	li	v0,15
80002390:	10620006 	beq	v1,v0,800023ac <prvSyncTask+0xcc>
80002394:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:351 (discriminator 1)
80002398:	3c028001 	lui	v0,0x8001
8000239c:	2444bcc0 	addiu	a0,v0,-17216
800023a0:	2405015f 	li	a1,351
800023a4:	0c000417 	jal	8000105c <vAssertCalled>
800023a8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:356

		/* Block on the event group again.  This time the event group is going
		to be deleted while this task is blocked on it so it is expected that 0
		be returned. */
		uxReturned = xEventGroupWaitBits( xEventGroup, ebALL_SYNC_BITS, pdFALSE, pdTRUE, portMAX_DELAY );
800023ac:	8f838077 	lw	v1,-32649(gp)
800023b0:	2402ffff 	li	v0,-1
800023b4:	afa20010 	sw	v0,16(sp)
800023b8:	00602025 	move	a0,v1
800023bc:	2405000f 	li	a1,15
800023c0:	00003025 	move	a2,zero
800023c4:	24070001 	li	a3,1
800023c8:	0c00115a 	jal	80004568 <xEventGroupWaitBits>
800023cc:	00000000 	nop
800023d0:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:357
		configASSERT( uxReturned == 0 );
800023d4:	8fc2001c 	lw	v0,28(s8)
800023d8:	10400006 	beqz	v0,800023f4 <prvSyncTask+0x114>
800023dc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:357 (discriminator 1)
800023e0:	3c028001 	lui	v0,0x8001
800023e4:	2444bcc0 	addiu	a0,v0,-17216
800023e8:	24050165 	li	a1,357
800023ec:	0c000417 	jal	8000105c <vAssertCalled>
800023f0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:358
	}
800023f4:	1000ffc3 	b	80002304 <prvSyncTask+0x24>
800023f8:	00000000 	nop

800023fc <prvTestSlaveTask>:
prvTestSlaveTask():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:363
}
/*-----------------------------------------------------------*/

static void prvTestSlaveTask( void *pvParameters )
{
800023fc:	27bdffd8 	addiu	sp,sp,-40
80002400:	afbf0024 	sw	ra,36(sp)
80002404:	afbe0020 	sw	s8,32(sp)
80002408:	03a0f025 	move	s8,sp
8000240c:	afc40028 	sw	a0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:365
EventBits_t uxReturned;
BaseType_t xError = pdFALSE;
80002410:	afc00018 	sw	zero,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:381
		***********************************************************************

		This task is controller by the 'test master' task (which is
		implemented by prvTestMasterTask()).  Suspend until resumed by the
		'test master' task. */
		vTaskSuspend( NULL );
80002414:	00002025 	move	a0,zero
80002418:	0c0016c6 	jal	80005b18 <vTaskSuspend>
8000241c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:385

		/* Wait indefinitely for one of the bits in ebCOMBINED_BITS to get
		set.  Clear the bit on exit. */
		uxReturned = xEventGroupWaitBits( xEventGroup,	/* The event group that contains the event bits being queried. */
80002420:	8f838077 	lw	v1,-32649(gp)
80002424:	2402ffff 	li	v0,-1
80002428:	afa20010 	sw	v0,16(sp)
8000242c:	00602025 	move	a0,v1
80002430:	24050002 	li	a1,2
80002434:	24060001 	li	a2,1
80002438:	24070001 	li	a3,1
8000243c:	0c00115a 	jal	80004568 <xEventGroupWaitBits>
80002440:	00000000 	nop
80002444:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:396
		/* The 'test master' task set all the bits defined by ebCOMBINED_BITS,
		only one of which was being waited for by this task.  The return value
		shows the state of the event bits when the task was unblocked, however
		because the task was waiting for ebBIT_1 and 'clear on exit' was set to
		the current state of the event bits will have ebBIT_1 clear.  */
		if( uxReturned != ebCOMBINED_BITS )
80002448:	8fc3001c 	lw	v1,28(s8)
8000244c:	240200a2 	li	v0,162
80002450:	10620003 	beq	v1,v0,80002460 <prvTestSlaveTask+0x64>
80002454:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:398
		{
			xError = pdTRUE;
80002458:	24020001 	li	v0,1
8000245c:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:405

		/* Now call xEventGroupWaitBits() again, this time waiting for all the
		bits in ebCOMBINED_BITS to be set.  This call should block until the
		'test master' task sets ebBIT_1 - which was the bit cleared in the call
		to xEventGroupWaitBits() above. */
		uxReturned = xEventGroupWaitBits( xEventGroup,
80002460:	8f838077 	lw	v1,-32649(gp)
80002464:	2402ffff 	li	v0,-1
80002468:	afa20010 	sw	v0,16(sp)
8000246c:	00602025 	move	a0,v1
80002470:	240500a2 	li	a1,162
80002474:	00003025 	move	a2,zero
80002478:	24070001 	li	a3,1
8000247c:	0c00115a 	jal	80004568 <xEventGroupWaitBits>
80002480:	00000000 	nop
80002484:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:412
										 pdFALSE,		  /* Don't clear the bits on exit. */
										 pdTRUE,		  /* All the bits must be set to unblock. */
										 portMAX_DELAY );

		/* Were all the bits set? */
		if( ( uxReturned & ebCOMBINED_BITS ) != ebCOMBINED_BITS )
80002488:	8fc2001c 	lw	v0,28(s8)
8000248c:	304300a2 	andi	v1,v0,0xa2
80002490:	240200a2 	li	v0,162
80002494:	10620003 	beq	v1,v0,800024a4 <prvTestSlaveTask+0xa8>
80002498:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:414
		{
			xError = pdTRUE;
8000249c:	24020001 	li	v0,1
800024a0:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:418
		}

		/* Suspend again to wait for the 'test master' task. */
		vTaskSuspend( NULL );
800024a4:	00002025 	move	a0,zero
800024a8:	0c0016c6 	jal	80005b18 <vTaskSuspend>
800024ac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:423

		/* Now call xEventGroupWaitBits() again, again waiting for all the bits
		in ebCOMBINED_BITS to be set, but this time clearing the bits when the
		task is unblocked. */
		uxReturned = xEventGroupWaitBits( xEventGroup,
800024b0:	8f838077 	lw	v1,-32649(gp)
800024b4:	2402ffff 	li	v0,-1
800024b8:	afa20010 	sw	v0,16(sp)
800024bc:	00602025 	move	a0,v1
800024c0:	240500a2 	li	a1,162
800024c4:	24060001 	li	a2,1
800024c8:	24070001 	li	a3,1
800024cc:	0c00115a 	jal	80004568 <xEventGroupWaitBits>
800024d0:	00000000 	nop
800024d4:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:433

		/* The 'test master' task set all the bits in the event group, so that
		is the value that should have been returned.  The bits defined by
		ebCOMBINED_BITS will have been clear again in the current value though
		as 'clear on exit' was set to pdTRUE. */
		if( uxReturned != ebALL_BITS )
800024d8:	8fc3001c 	lw	v1,28(s8)
800024dc:	240200ff 	li	v0,255
800024e0:	10620003 	beq	v1,v0,800024f0 <prvTestSlaveTask+0xf4>
800024e4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:435
		{
			xError = pdTRUE;
800024e8:	24020001 	li	v0,1
800024ec:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:451
		***********************************************************************


		Once again wait for the 'test master' task to unsuspend this task
		when it is time for the next test. */
		vTaskSuspend( NULL );
800024f0:	00002025 	move	a0,zero
800024f4:	0c0016c6 	jal	80005b18 <vTaskSuspend>
800024f8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:456

		/* Now peform a synchronisation with all the other tasks.  At this point
		the 'test master' task has the lowest priority so will get to the sync
		point after all the other synchronising tasks. */
		uxReturned = xEventGroupSync( xEventGroup,		/* The event group used for the sync. */
800024fc:	8f828077 	lw	v0,-32649(gp)
80002500:	00402025 	move	a0,v0
80002504:	24050002 	li	a1,2
80002508:	2406000f 	li	a2,15
8000250c:	2407ffff 	li	a3,-1
80002510:	0c0010c0 	jal	80004300 <xEventGroupSync>
80002514:	00000000 	nop
80002518:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:463
									ebALL_SYNC_BITS,	/* The bits to wait for.  These bits are set by the other tasks taking part in the sync. */
									portMAX_DELAY );	/* The maximum time to wait for the sync condition to be met before giving up. */

		/* A sync with a max delay should only exit when all the synchronisation
		bits are set... */
		if( ( uxReturned & ebALL_SYNC_BITS ) != ebALL_SYNC_BITS )
8000251c:	8fc2001c 	lw	v0,28(s8)
80002520:	3043000f 	andi	v1,v0,0xf
80002524:	2402000f 	li	v0,15
80002528:	10620003 	beq	v1,v0,80002538 <prvTestSlaveTask+0x13c>
8000252c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:465
		{
			xError = pdTRUE;
80002530:	24020001 	li	v0,1
80002534:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:472

		/* ...but now the synchronisation bits should be clear again.  Read back
		the current value of the bits within the event group to check that is
		the case.  Setting the bits to zero will return the bits previous value
		then leave all the bits clear. */
		if( xEventGroupSetBits( xEventGroup, 0x00 ) != 0 )
80002538:	8f828077 	lw	v0,-32649(gp)
8000253c:	00402025 	move	a0,v0
80002540:	00002825 	move	a1,zero
80002544:	0c001250 	jal	80004940 <xEventGroupSetBits>
80002548:	00000000 	nop
8000254c:	10400003 	beqz	v0,8000255c <prvTestSlaveTask+0x160>
80002550:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:474
		{
			xError = pdTRUE;
80002554:	24020001 	li	v0,1
80002558:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:478
		}

		/* Check the bits are indeed 0 now by simply reading then. */
		if( xEventGroupGetBits( xEventGroup ) != 0 )
8000255c:	8f828077 	lw	v0,-32649(gp)
80002560:	00402025 	move	a0,v0
80002564:	00002825 	move	a1,zero
80002568:	0c00120b 	jal	8000482c <xEventGroupClearBits>
8000256c:	00000000 	nop
80002570:	10400003 	beqz	v0,80002580 <prvTestSlaveTask+0x184>
80002574:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:480
		{
			xError = pdTRUE;
80002578:	24020001 	li	v0,1
8000257c:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:483
		}

		if( xError == pdFALSE )
80002580:	8fc20018 	lw	v0,24(s8)
80002584:	14400004 	bnez	v0,80002598 <prvTestSlaveTask+0x19c>
80002588:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:486
		{
			/* This task is still cycling without finding an error. */
			ulTestSlaveCycles++;
8000258c:	8f82806f 	lw	v0,-32657(gp)
80002590:	24420001 	addiu	v0,v0,1
80002594:	af82806f 	sw	v0,-32657(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:489
		}

		vTaskSuspend( NULL );
80002598:	00002025 	move	a0,zero
8000259c:	0c0016c6 	jal	80005b18 <vTaskSuspend>
800025a0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:494

		/* This time sync when the 'test master' task has the highest priority
		at the point where it sets its sync bit - so this time the 'test master'
		task will get to the sync point before this task. */
		uxReturned = xEventGroupSync( xEventGroup, ebWAIT_BIT_TASK_SYNC_BIT, ebALL_SYNC_BITS, portMAX_DELAY );
800025a4:	8f828077 	lw	v0,-32649(gp)
800025a8:	00402025 	move	a0,v0
800025ac:	24050002 	li	a1,2
800025b0:	2406000f 	li	a2,15
800025b4:	2407ffff 	li	a3,-1
800025b8:	0c0010c0 	jal	80004300 <xEventGroupSync>
800025bc:	00000000 	nop
800025c0:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:498

		/* A sync with a max delay should only exit when all the synchronisation
		bits are set... */
		if( ( uxReturned & ebALL_SYNC_BITS ) != ebALL_SYNC_BITS )
800025c4:	8fc2001c 	lw	v0,28(s8)
800025c8:	3043000f 	andi	v1,v0,0xf
800025cc:	2402000f 	li	v0,15
800025d0:	10620003 	beq	v1,v0,800025e0 <prvTestSlaveTask+0x1e4>
800025d4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:500
		{
			xError = pdTRUE;
800025d8:	24020001 	li	v0,1
800025dc:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:504
		}

		/* ...but now the sync bits should be clear again. */
		if( xEventGroupSetBits( xEventGroup, 0x00 ) != 0 )
800025e0:	8f828077 	lw	v0,-32649(gp)
800025e4:	00402025 	move	a0,v0
800025e8:	00002825 	move	a1,zero
800025ec:	0c001250 	jal	80004940 <xEventGroupSetBits>
800025f0:	00000000 	nop
800025f4:	10400003 	beqz	v0,80002604 <prvTestSlaveTask+0x208>
800025f8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:506
		{
			xError = pdTRUE;
800025fc:	24020001 	li	v0,1
80002600:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:512
		}

		/* Block on the event group again.  This time the event group is going
		to be deleted while this task is blocked on it, so it is expected that 0
		will be returned. */
		uxReturned = xEventGroupWaitBits( xEventGroup, ebALL_SYNC_BITS, pdFALSE, pdTRUE, portMAX_DELAY );
80002604:	8f838077 	lw	v1,-32649(gp)
80002608:	2402ffff 	li	v0,-1
8000260c:	afa20010 	sw	v0,16(sp)
80002610:	00602025 	move	a0,v1
80002614:	2405000f 	li	a1,15
80002618:	00003025 	move	a2,zero
8000261c:	24070001 	li	a3,1
80002620:	0c00115a 	jal	80004568 <xEventGroupWaitBits>
80002624:	00000000 	nop
80002628:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:514

		if( uxReturned != 0 )
8000262c:	8fc2001c 	lw	v0,28(s8)
80002630:	10400003 	beqz	v0,80002640 <prvTestSlaveTask+0x244>
80002634:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:516
		{
			xError = pdTRUE;
80002638:	24020001 	li	v0,1
8000263c:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:519
		}

		if( xError == pdFALSE )
80002640:	8fc20018 	lw	v0,24(s8)
80002644:	14400004 	bnez	v0,80002658 <prvTestSlaveTask+0x25c>
80002648:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:522
		{
			/* This task is still cycling without finding an error. */
			ulTestSlaveCycles++;
8000264c:	8f82806f 	lw	v0,-32657(gp)
80002650:	24420001 	addiu	v0,v0,1
80002654:	af82806f 	sw	v0,-32657(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:525
		}

		configASSERT( xError == pdFALSE );
80002658:	8fc20018 	lw	v0,24(s8)
8000265c:	10400006 	beqz	v0,80002678 <prvTestSlaveTask+0x27c>
80002660:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:525 (discriminator 1)
80002664:	3c028001 	lui	v0,0x8001
80002668:	2444bcc0 	addiu	a0,v0,-17216
8000266c:	2405020d 	li	a1,525
80002670:	0c000417 	jal	8000105c <vAssertCalled>
80002674:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:526
	}
80002678:	1000ff66 	b	80002414 <prvTestSlaveTask+0x18>
8000267c:	00000000 	nop

80002680 <prvPerformTaskSyncTests>:
prvPerformTaskSyncTests():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:531
}
/*-----------------------------------------------------------*/

static BaseType_t prvPerformTaskSyncTests( BaseType_t xError, TaskHandle_t xTestSlaveTaskHandle )
{
80002680:	27bdffe0 	addiu	sp,sp,-32
80002684:	afbf001c 	sw	ra,28(sp)
80002688:	afbe0018 	sw	s8,24(sp)
8000268c:	03a0f025 	move	s8,sp
80002690:	afc40020 	sw	a0,32(s8)
80002694:	afc50024 	sw	a1,36(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:536
EventBits_t uxBits;

	/* The three tasks that take part in the synchronisation (rendezvous) are
	expected to be in the suspended state at the start of the test. */
	if( eTaskGetState( xTestSlaveTaskHandle ) != eSuspended )
80002698:	8fc40024 	lw	a0,36(s8)
8000269c:	0c00159d 	jal	80005674 <eTaskGetState>
800026a0:	00000000 	nop
800026a4:	00401825 	move	v1,v0
800026a8:	24020003 	li	v0,3
800026ac:	10620003 	beq	v1,v0,800026bc <prvPerformTaskSyncTests+0x3c>
800026b0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:538
	{
		xError = pdTRUE;
800026b4:	24020001 	li	v0,1
800026b8:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:541
	}

	if( eTaskGetState( xSyncTask1 ) != eSuspended )
800026bc:	8f82807f 	lw	v0,-32641(gp)
800026c0:	00402025 	move	a0,v0
800026c4:	0c00159d 	jal	80005674 <eTaskGetState>
800026c8:	00000000 	nop
800026cc:	00401825 	move	v1,v0
800026d0:	24020003 	li	v0,3
800026d4:	10620003 	beq	v1,v0,800026e4 <prvPerformTaskSyncTests+0x64>
800026d8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:543
	{
		xError = pdTRUE;
800026dc:	24020001 	li	v0,1
800026e0:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:546
	}

	if( eTaskGetState( xSyncTask2 ) != eSuspended )
800026e4:	8f828083 	lw	v0,-32637(gp)
800026e8:	00402025 	move	a0,v0
800026ec:	0c00159d 	jal	80005674 <eTaskGetState>
800026f0:	00000000 	nop
800026f4:	00401825 	move	v1,v0
800026f8:	24020003 	li	v0,3
800026fc:	10620003 	beq	v1,v0,8000270c <prvPerformTaskSyncTests+0x8c>
80002700:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:548
	{
		xError = pdTRUE;
80002704:	24020001 	li	v0,1
80002708:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:553
	}

	/* Try a synch with no other tasks involved.  First set all the bits other
	than this task's bit. */
	xEventGroupSetBits( xEventGroup, ( ebALL_SYNC_BITS & ~ebSET_BIT_TASK_SYNC_BIT ) );
8000270c:	8f828077 	lw	v0,-32649(gp)
80002710:	00402025 	move	a0,v0
80002714:	2405000e 	li	a1,14
80002718:	0c001250 	jal	80004940 <xEventGroupSetBits>
8000271c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:556

	/* Then wait on just one bit - the bit that is being set. */
	uxBits = xEventGroupSync( xEventGroup,			/* The event group used for the synchronisation. */
80002720:	8f828077 	lw	v0,-32649(gp)
80002724:	00402025 	move	a0,v0
80002728:	24050001 	li	a1,1
8000272c:	24060001 	li	a2,1
80002730:	2407ffff 	li	a3,-1
80002734:	0c0010c0 	jal	80004300 <xEventGroupSync>
80002738:	00000000 	nop
8000273c:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:564
							portMAX_DELAY );		/* The maximum time to wait for the sync condition to be met. */

	/* A sync with a max delay should only exit when all the synchronise
	bits are set...check that is the case.  In this case there is only one
	sync bit anyway. */
	if( ( uxBits & ebSET_BIT_TASK_SYNC_BIT ) != ebSET_BIT_TASK_SYNC_BIT )
80002740:	8fc20010 	lw	v0,16(s8)
80002744:	30420001 	andi	v0,v0,0x1
80002748:	14400003 	bnez	v0,80002758 <prvPerformTaskSyncTests+0xd8>
8000274c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:566
	{
		xError = pdTRUE;
80002750:	24020001 	li	v0,1
80002754:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:571
	}

	/* ...but now the sync bits should be clear again, leaving all the other
	bits set (as only one bit was being waited for). */
	if( xEventGroupGetBits( xEventGroup ) != ( ebALL_SYNC_BITS & ~ebSET_BIT_TASK_SYNC_BIT ) )
80002758:	8f828077 	lw	v0,-32649(gp)
8000275c:	00402025 	move	a0,v0
80002760:	00002825 	move	a1,zero
80002764:	0c00120b 	jal	8000482c <xEventGroupClearBits>
80002768:	00000000 	nop
8000276c:	00401825 	move	v1,v0
80002770:	2402000e 	li	v0,14
80002774:	10620003 	beq	v1,v0,80002784 <prvPerformTaskSyncTests+0x104>
80002778:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:573
	{
		xError = pdTRUE;
8000277c:	24020001 	li	v0,1
80002780:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:577
	}

	/* Clear all the bits to zero again. */
	xEventGroupClearBits( xEventGroup, ( ebALL_SYNC_BITS & ~ebSET_BIT_TASK_SYNC_BIT ) );
80002784:	8f828077 	lw	v0,-32649(gp)
80002788:	00402025 	move	a0,v0
8000278c:	2405000e 	li	a1,14
80002790:	0c00120b 	jal	8000482c <xEventGroupClearBits>
80002794:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:578
	if( xEventGroupGetBits( xEventGroup ) != 0 )
80002798:	8f828077 	lw	v0,-32649(gp)
8000279c:	00402025 	move	a0,v0
800027a0:	00002825 	move	a1,zero
800027a4:	0c00120b 	jal	8000482c <xEventGroupClearBits>
800027a8:	00000000 	nop
800027ac:	10400003 	beqz	v0,800027bc <prvPerformTaskSyncTests+0x13c>
800027b0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:580
	{
		xError = pdTRUE;
800027b4:	24020001 	li	v0,1
800027b8:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:585
	}

	/* Unsuspend the other tasks then check they have executed up to the
	synchronisation point. */
	vTaskResume( xTestSlaveTaskHandle );
800027bc:	8fc40024 	lw	a0,36(s8)
800027c0:	0c00176d 	jal	80005db4 <vTaskResume>
800027c4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:586
	vTaskResume( xSyncTask1 );
800027c8:	8f82807f 	lw	v0,-32641(gp)
800027cc:	00402025 	move	a0,v0
800027d0:	0c00176d 	jal	80005db4 <vTaskResume>
800027d4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:587
	vTaskResume( xSyncTask2 );
800027d8:	8f828083 	lw	v0,-32637(gp)
800027dc:	00402025 	move	a0,v0
800027e0:	0c00176d 	jal	80005db4 <vTaskResume>
800027e4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:589

	if( eTaskGetState( xTestSlaveTaskHandle ) != eBlocked )
800027e8:	8fc40024 	lw	a0,36(s8)
800027ec:	0c00159d 	jal	80005674 <eTaskGetState>
800027f0:	00000000 	nop
800027f4:	00401825 	move	v1,v0
800027f8:	24020002 	li	v0,2
800027fc:	10620003 	beq	v1,v0,8000280c <prvPerformTaskSyncTests+0x18c>
80002800:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:591
	{
		xError = pdTRUE;
80002804:	24020001 	li	v0,1
80002808:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:594
	}

	if( eTaskGetState( xSyncTask1 ) != eBlocked )
8000280c:	8f82807f 	lw	v0,-32641(gp)
80002810:	00402025 	move	a0,v0
80002814:	0c00159d 	jal	80005674 <eTaskGetState>
80002818:	00000000 	nop
8000281c:	00401825 	move	v1,v0
80002820:	24020002 	li	v0,2
80002824:	10620003 	beq	v1,v0,80002834 <prvPerformTaskSyncTests+0x1b4>
80002828:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:596
	{
		xError = pdTRUE;
8000282c:	24020001 	li	v0,1
80002830:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:599
	}

	if( eTaskGetState( xSyncTask2 ) != eBlocked )
80002834:	8f828083 	lw	v0,-32637(gp)
80002838:	00402025 	move	a0,v0
8000283c:	0c00159d 	jal	80005674 <eTaskGetState>
80002840:	00000000 	nop
80002844:	00401825 	move	v1,v0
80002848:	24020002 	li	v0,2
8000284c:	10620003 	beq	v1,v0,8000285c <prvPerformTaskSyncTests+0x1dc>
80002850:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:601
	{
		xError = pdTRUE;
80002854:	24020001 	li	v0,1
80002858:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:605
	}

	/* Set this task's sync bit. */
	uxBits = xEventGroupSync( xEventGroup,			/* The event group used for the synchronisation. */
8000285c:	8f828077 	lw	v0,-32649(gp)
80002860:	00402025 	move	a0,v0
80002864:	24050001 	li	a1,1
80002868:	2406000f 	li	a2,15
8000286c:	2407ffff 	li	a3,-1
80002870:	0c0010c0 	jal	80004300 <xEventGroupSync>
80002874:	00000000 	nop
80002878:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:612
							ebALL_SYNC_BITS,		/* The bits to wait for - these bits are set by the other tasks that take part in the sync. */
							portMAX_DELAY );		/* The maximum time to wait for the sync condition to be met. */

	/* A sync with a max delay should only exit when all the synchronise
	bits are set...check that is the case. */
	if( ( uxBits & ebALL_SYNC_BITS ) != ebALL_SYNC_BITS )
8000287c:	8fc20010 	lw	v0,16(s8)
80002880:	3043000f 	andi	v1,v0,0xf
80002884:	2402000f 	li	v0,15
80002888:	10620003 	beq	v1,v0,80002898 <prvPerformTaskSyncTests+0x218>
8000288c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:614
	{
		xError = pdTRUE;
80002890:	24020001 	li	v0,1
80002894:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:618
	}

	/* ...but now the sync bits should be clear again. */
	if( xEventGroupGetBits( xEventGroup ) != 0 )
80002898:	8f828077 	lw	v0,-32649(gp)
8000289c:	00402025 	move	a0,v0
800028a0:	00002825 	move	a1,zero
800028a4:	0c00120b 	jal	8000482c <xEventGroupClearBits>
800028a8:	00000000 	nop
800028ac:	10400003 	beqz	v0,800028bc <prvPerformTaskSyncTests+0x23c>
800028b0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:620
	{
		xError = pdTRUE;
800028b4:	24020001 	li	v0,1
800028b8:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:626
	}


	/* The other tasks should now all be suspended again, ready for the next
	synchronisation. */
	if( eTaskGetState( xTestSlaveTaskHandle ) != eSuspended )
800028bc:	8fc40024 	lw	a0,36(s8)
800028c0:	0c00159d 	jal	80005674 <eTaskGetState>
800028c4:	00000000 	nop
800028c8:	00401825 	move	v1,v0
800028cc:	24020003 	li	v0,3
800028d0:	10620003 	beq	v1,v0,800028e0 <prvPerformTaskSyncTests+0x260>
800028d4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:628
	{
		xError = pdTRUE;
800028d8:	24020001 	li	v0,1
800028dc:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:631
	}

	if( eTaskGetState( xSyncTask1 ) != eSuspended )
800028e0:	8f82807f 	lw	v0,-32641(gp)
800028e4:	00402025 	move	a0,v0
800028e8:	0c00159d 	jal	80005674 <eTaskGetState>
800028ec:	00000000 	nop
800028f0:	00401825 	move	v1,v0
800028f4:	24020003 	li	v0,3
800028f8:	10620003 	beq	v1,v0,80002908 <prvPerformTaskSyncTests+0x288>
800028fc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:633
	{
		xError = pdTRUE;
80002900:	24020001 	li	v0,1
80002904:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:636
	}

	if( eTaskGetState( xSyncTask2 ) != eSuspended )
80002908:	8f828083 	lw	v0,-32637(gp)
8000290c:	00402025 	move	a0,v0
80002910:	0c00159d 	jal	80005674 <eTaskGetState>
80002914:	00000000 	nop
80002918:	00401825 	move	v1,v0
8000291c:	24020003 	li	v0,3
80002920:	10620003 	beq	v1,v0,80002930 <prvPerformTaskSyncTests+0x2b0>
80002924:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:638
	{
		xError = pdTRUE;
80002928:	24020001 	li	v0,1
8000292c:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:646

	/* Sync again - but this time set the last necessary bit as the
	highest priority task, rather than the lowest priority task.  Unsuspend
	the other tasks then check they have executed up to the	synchronisation
	point. */
	vTaskResume( xTestSlaveTaskHandle );
80002930:	8fc40024 	lw	a0,36(s8)
80002934:	0c00176d 	jal	80005db4 <vTaskResume>
80002938:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:647
	vTaskResume( xSyncTask1 );
8000293c:	8f82807f 	lw	v0,-32641(gp)
80002940:	00402025 	move	a0,v0
80002944:	0c00176d 	jal	80005db4 <vTaskResume>
80002948:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:648
	vTaskResume( xSyncTask2 );
8000294c:	8f828083 	lw	v0,-32637(gp)
80002950:	00402025 	move	a0,v0
80002954:	0c00176d 	jal	80005db4 <vTaskResume>
80002958:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:650

	if( eTaskGetState( xTestSlaveTaskHandle ) != eBlocked )
8000295c:	8fc40024 	lw	a0,36(s8)
80002960:	0c00159d 	jal	80005674 <eTaskGetState>
80002964:	00000000 	nop
80002968:	00401825 	move	v1,v0
8000296c:	24020002 	li	v0,2
80002970:	10620003 	beq	v1,v0,80002980 <prvPerformTaskSyncTests+0x300>
80002974:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:652
	{
		xError = pdTRUE;
80002978:	24020001 	li	v0,1
8000297c:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:655
	}

	if( eTaskGetState( xSyncTask1 ) != eBlocked )
80002980:	8f82807f 	lw	v0,-32641(gp)
80002984:	00402025 	move	a0,v0
80002988:	0c00159d 	jal	80005674 <eTaskGetState>
8000298c:	00000000 	nop
80002990:	00401825 	move	v1,v0
80002994:	24020002 	li	v0,2
80002998:	10620003 	beq	v1,v0,800029a8 <prvPerformTaskSyncTests+0x328>
8000299c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:657
	{
		xError = pdTRUE;
800029a0:	24020001 	li	v0,1
800029a4:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:660
	}

	if( eTaskGetState( xSyncTask2 ) != eBlocked )
800029a8:	8f828083 	lw	v0,-32637(gp)
800029ac:	00402025 	move	a0,v0
800029b0:	0c00159d 	jal	80005674 <eTaskGetState>
800029b4:	00000000 	nop
800029b8:	00401825 	move	v1,v0
800029bc:	24020002 	li	v0,2
800029c0:	10620003 	beq	v1,v0,800029d0 <prvPerformTaskSyncTests+0x350>
800029c4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:662
	{
		xError = pdTRUE;
800029c8:	24020001 	li	v0,1
800029cc:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:666
	}

	/* Raise the priority of this task above that of the other tasks. */
	vTaskPrioritySet( NULL, ebWAIT_BIT_TASK_PRIORITY + 1 );
800029d0:	00002025 	move	a0,zero
800029d4:	24050002 	li	a1,2
800029d8:	0c001624 	jal	80005890 <vTaskPrioritySet>
800029dc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:669

	/* Set this task's sync bit. */
	uxBits = xEventGroupSync( xEventGroup, ebSET_BIT_TASK_SYNC_BIT, ebALL_SYNC_BITS, portMAX_DELAY );
800029e0:	8f828077 	lw	v0,-32649(gp)
800029e4:	00402025 	move	a0,v0
800029e8:	24050001 	li	a1,1
800029ec:	2406000f 	li	a2,15
800029f0:	2407ffff 	li	a3,-1
800029f4:	0c0010c0 	jal	80004300 <xEventGroupSync>
800029f8:	00000000 	nop
800029fc:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:673

	/* A sync with a max delay should only exit when all the synchronisation
	bits are set... */
	if( ( uxBits & ebALL_SYNC_BITS ) != ebALL_SYNC_BITS )
80002a00:	8fc20010 	lw	v0,16(s8)
80002a04:	3043000f 	andi	v1,v0,0xf
80002a08:	2402000f 	li	v0,15
80002a0c:	10620003 	beq	v1,v0,80002a1c <prvPerformTaskSyncTests+0x39c>
80002a10:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:675
	{
		xError = pdTRUE;
80002a14:	24020001 	li	v0,1
80002a18:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:679
	}

	/* ...but now the sync bits should be clear again. */
	if( xEventGroupGetBits( xEventGroup ) != 0 )
80002a1c:	8f828077 	lw	v0,-32649(gp)
80002a20:	00402025 	move	a0,v0
80002a24:	00002825 	move	a1,zero
80002a28:	0c00120b 	jal	8000482c <xEventGroupClearBits>
80002a2c:	00000000 	nop
80002a30:	10400003 	beqz	v0,80002a40 <prvPerformTaskSyncTests+0x3c0>
80002a34:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:681
	{
		xError = pdTRUE;
80002a38:	24020001 	li	v0,1
80002a3c:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:687
	}


	/* The other tasks should now all be in the ready state again, but not
	executed yet as this task still has a higher relative priority. */
	if( eTaskGetState( xTestSlaveTaskHandle ) != eReady )
80002a40:	8fc40024 	lw	a0,36(s8)
80002a44:	0c00159d 	jal	80005674 <eTaskGetState>
80002a48:	00000000 	nop
80002a4c:	00401825 	move	v1,v0
80002a50:	24020001 	li	v0,1
80002a54:	10620003 	beq	v1,v0,80002a64 <prvPerformTaskSyncTests+0x3e4>
80002a58:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:689
	{
		xError = pdTRUE;
80002a5c:	24020001 	li	v0,1
80002a60:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:692
	}

	if( eTaskGetState( xSyncTask1 ) != eReady )
80002a64:	8f82807f 	lw	v0,-32641(gp)
80002a68:	00402025 	move	a0,v0
80002a6c:	0c00159d 	jal	80005674 <eTaskGetState>
80002a70:	00000000 	nop
80002a74:	00401825 	move	v1,v0
80002a78:	24020001 	li	v0,1
80002a7c:	10620003 	beq	v1,v0,80002a8c <prvPerformTaskSyncTests+0x40c>
80002a80:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:694
	{
		xError = pdTRUE;
80002a84:	24020001 	li	v0,1
80002a88:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:697
	}

	if( eTaskGetState( xSyncTask2 ) != eReady )
80002a8c:	8f828083 	lw	v0,-32637(gp)
80002a90:	00402025 	move	a0,v0
80002a94:	0c00159d 	jal	80005674 <eTaskGetState>
80002a98:	00000000 	nop
80002a9c:	00401825 	move	v1,v0
80002aa0:	24020001 	li	v0,1
80002aa4:	10620003 	beq	v1,v0,80002ab4 <prvPerformTaskSyncTests+0x434>
80002aa8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:699
	{
		xError = pdTRUE;
80002aac:	24020001 	li	v0,1
80002ab0:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:704
	}


	/* Reset the priority of this task back to its original value. */
	vTaskPrioritySet( NULL, ebSET_BIT_TASK_PRIORITY );
80002ab4:	00002025 	move	a0,zero
80002ab8:	00002825 	move	a1,zero
80002abc:	0c001624 	jal	80005890 <vTaskPrioritySet>
80002ac0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:708

	/* Now all the other tasks should have reblocked on the event bits
	to test the behaviour when the event bits are deleted. */
	if( eTaskGetState( xTestSlaveTaskHandle ) != eBlocked )
80002ac4:	8fc40024 	lw	a0,36(s8)
80002ac8:	0c00159d 	jal	80005674 <eTaskGetState>
80002acc:	00000000 	nop
80002ad0:	00401825 	move	v1,v0
80002ad4:	24020002 	li	v0,2
80002ad8:	10620003 	beq	v1,v0,80002ae8 <prvPerformTaskSyncTests+0x468>
80002adc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:710
	{
		xError = pdTRUE;
80002ae0:	24020001 	li	v0,1
80002ae4:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:713
	}

	if( eTaskGetState( xSyncTask1 ) != eBlocked )
80002ae8:	8f82807f 	lw	v0,-32641(gp)
80002aec:	00402025 	move	a0,v0
80002af0:	0c00159d 	jal	80005674 <eTaskGetState>
80002af4:	00000000 	nop
80002af8:	00401825 	move	v1,v0
80002afc:	24020002 	li	v0,2
80002b00:	10620003 	beq	v1,v0,80002b10 <prvPerformTaskSyncTests+0x490>
80002b04:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:715
	{
		xError = pdTRUE;
80002b08:	24020001 	li	v0,1
80002b0c:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:718
	}

	if( eTaskGetState( xSyncTask2 ) != eBlocked )
80002b10:	8f828083 	lw	v0,-32637(gp)
80002b14:	00402025 	move	a0,v0
80002b18:	0c00159d 	jal	80005674 <eTaskGetState>
80002b1c:	00000000 	nop
80002b20:	00401825 	move	v1,v0
80002b24:	24020002 	li	v0,2
80002b28:	10620003 	beq	v1,v0,80002b38 <prvPerformTaskSyncTests+0x4b8>
80002b2c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:720
	{
		xError = pdTRUE;
80002b30:	24020001 	li	v0,1
80002b34:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:723
	}

	return xError;
80002b38:	8fc20020 	lw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:724
}
80002b3c:	03c0e825 	move	sp,s8
80002b40:	8fbf001c 	lw	ra,28(sp)
80002b44:	8fbe0018 	lw	s8,24(sp)
80002b48:	27bd0020 	addiu	sp,sp,32
80002b4c:	03e00008 	jr	ra
80002b50:	00000000 	nop

80002b54 <prvBitCombinationTestMasterFunction>:
prvBitCombinationTestMasterFunction():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:728
/*-----------------------------------------------------------*/

static BaseType_t prvBitCombinationTestMasterFunction( BaseType_t xError, TaskHandle_t xTestSlaveTaskHandle )
{
80002b54:	27bdffd8 	addiu	sp,sp,-40
80002b58:	afbf0024 	sw	ra,36(sp)
80002b5c:	afbe0020 	sw	s8,32(sp)
80002b60:	03a0f025 	move	s8,sp
80002b64:	afc40028 	sw	a0,40(s8)
80002b68:	afc5002c 	sw	a1,44(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:733
EventBits_t uxBits;

	/* Resume the other task.  It will block, pending a single bit from
	within ebCOMBINED_BITS. */
	vTaskResume( xTestSlaveTaskHandle );
80002b6c:	8fc4002c 	lw	a0,44(s8)
80002b70:	0c00176d 	jal	80005db4 <vTaskResume>
80002b74:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:736

	/* Ensure the other task is blocked on the task. */
	if( eTaskGetState( xTestSlaveTaskHandle ) != eBlocked )
80002b78:	8fc4002c 	lw	a0,44(s8)
80002b7c:	0c00159d 	jal	80005674 <eTaskGetState>
80002b80:	00000000 	nop
80002b84:	00401825 	move	v1,v0
80002b88:	24020002 	li	v0,2
80002b8c:	10620003 	beq	v1,v0,80002b9c <prvBitCombinationTestMasterFunction+0x48>
80002b90:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:738
	{
		xError = pdTRUE;
80002b94:	24020001 	li	v0,1
80002b98:	afc20028 	sw	v0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:743
	}

	/* Set all the bits in ebCOMBINED_BITS - the 'test slave' task is only
	blocked waiting for one of them. */
	xEventGroupSetBits( xEventGroup, ebCOMBINED_BITS );
80002b9c:	8f828077 	lw	v0,-32649(gp)
80002ba0:	00402025 	move	a0,v0
80002ba4:	240500a2 	li	a1,162
80002ba8:	0c001250 	jal	80004940 <xEventGroupSetBits>
80002bac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:749

	/* The 'test slave' task should now have executed, clearing ebBIT_1 (the
	bit it was blocked on), then re-entered the Blocked state to wait for
	all the other bits in ebCOMBINED_BITS to be set again.  First check
	ebBIT_1 is clear. */
	uxBits = xEventGroupWaitBits( xEventGroup, ebALL_BITS, pdFALSE, pdFALSE, ebDONT_BLOCK );
80002bb0:	8f828077 	lw	v0,-32649(gp)
80002bb4:	afa00010 	sw	zero,16(sp)
80002bb8:	00402025 	move	a0,v0
80002bbc:	240500ff 	li	a1,255
80002bc0:	00003025 	move	a2,zero
80002bc4:	00003825 	move	a3,zero
80002bc8:	0c00115a 	jal	80004568 <xEventGroupWaitBits>
80002bcc:	00000000 	nop
80002bd0:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:751

	if( uxBits != ( ebCOMBINED_BITS & ~ebBIT_1 ) )
80002bd4:	8fc30018 	lw	v1,24(s8)
80002bd8:	240200a0 	li	v0,160
80002bdc:	10620003 	beq	v1,v0,80002bec <prvBitCombinationTestMasterFunction+0x98>
80002be0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:753
	{
		xError = pdTRUE;
80002be4:	24020001 	li	v0,1
80002be8:	afc20028 	sw	v0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:757
	}

	/* Ensure the other task is still in the blocked state. */
	if( eTaskGetState( xTestSlaveTaskHandle ) != eBlocked )
80002bec:	8fc4002c 	lw	a0,44(s8)
80002bf0:	0c00159d 	jal	80005674 <eTaskGetState>
80002bf4:	00000000 	nop
80002bf8:	00401825 	move	v1,v0
80002bfc:	24020002 	li	v0,2
80002c00:	10620003 	beq	v1,v0,80002c10 <prvBitCombinationTestMasterFunction+0xbc>
80002c04:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:759
	{
		xError = pdTRUE;
80002c08:	24020001 	li	v0,1
80002c0c:	afc20028 	sw	v0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:764
	}

	/* Set all the bits other than ebBIT_1 - which is the bit that must be
	set before the other task unblocks. */
	xEventGroupSetBits( xEventGroup, ebALL_BITS & ~ebBIT_1 );
80002c10:	8f828077 	lw	v0,-32649(gp)
80002c14:	00402025 	move	a0,v0
80002c18:	240500fd 	li	a1,253
80002c1c:	0c001250 	jal	80004940 <xEventGroupSetBits>
80002c20:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:767

	/* Ensure all the expected bits are still set. */
	uxBits = xEventGroupWaitBits( xEventGroup, ebALL_BITS, pdFALSE, pdFALSE, ebDONT_BLOCK );
80002c24:	8f828077 	lw	v0,-32649(gp)
80002c28:	afa00010 	sw	zero,16(sp)
80002c2c:	00402025 	move	a0,v0
80002c30:	240500ff 	li	a1,255
80002c34:	00003025 	move	a2,zero
80002c38:	00003825 	move	a3,zero
80002c3c:	0c00115a 	jal	80004568 <xEventGroupWaitBits>
80002c40:	00000000 	nop
80002c44:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:769

	if( uxBits != ( ebALL_BITS & ~ebBIT_1 ) )
80002c48:	8fc30018 	lw	v1,24(s8)
80002c4c:	240200fd 	li	v0,253
80002c50:	10620003 	beq	v1,v0,80002c60 <prvBitCombinationTestMasterFunction+0x10c>
80002c54:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:771
	{
		xError = pdTRUE;
80002c58:	24020001 	li	v0,1
80002c5c:	afc20028 	sw	v0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:775
	}

	/* Ensure the other task is still in the blocked state. */
	if( eTaskGetState( xTestSlaveTaskHandle ) != eBlocked )
80002c60:	8fc4002c 	lw	a0,44(s8)
80002c64:	0c00159d 	jal	80005674 <eTaskGetState>
80002c68:	00000000 	nop
80002c6c:	00401825 	move	v1,v0
80002c70:	24020002 	li	v0,2
80002c74:	10620003 	beq	v1,v0,80002c84 <prvBitCombinationTestMasterFunction+0x130>
80002c78:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:777
	{
		xError = pdTRUE;
80002c7c:	24020001 	li	v0,1
80002c80:	afc20028 	sw	v0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:782
	}

	/* Now also set ebBIT_1, which should unblock the other task, which will
	then suspend itself. */
	xEventGroupSetBits( xEventGroup, ebBIT_1 );
80002c84:	8f828077 	lw	v0,-32649(gp)
80002c88:	00402025 	move	a0,v0
80002c8c:	24050002 	li	a1,2
80002c90:	0c001250 	jal	80004940 <xEventGroupSetBits>
80002c94:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:785

	/* Ensure the other task is suspended. */
	if( eTaskGetState( xTestSlaveTaskHandle ) != eSuspended )
80002c98:	8fc4002c 	lw	a0,44(s8)
80002c9c:	0c00159d 	jal	80005674 <eTaskGetState>
80002ca0:	00000000 	nop
80002ca4:	00401825 	move	v1,v0
80002ca8:	24020003 	li	v0,3
80002cac:	10620003 	beq	v1,v0,80002cbc <prvBitCombinationTestMasterFunction+0x168>
80002cb0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:787
	{
		xError = pdTRUE;
80002cb4:	24020001 	li	v0,1
80002cb8:	afc20028 	sw	v0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:792
	}

	/* The other task should not have cleared the bits - so all the bits
	should still be set. */
	if( xEventGroupSetBits( xEventGroup, 0x00 ) != ebALL_BITS )
80002cbc:	8f828077 	lw	v0,-32649(gp)
80002cc0:	00402025 	move	a0,v0
80002cc4:	00002825 	move	a1,zero
80002cc8:	0c001250 	jal	80004940 <xEventGroupSetBits>
80002ccc:	00000000 	nop
80002cd0:	00401825 	move	v1,v0
80002cd4:	240200ff 	li	v0,255
80002cd8:	10620003 	beq	v1,v0,80002ce8 <prvBitCombinationTestMasterFunction+0x194>
80002cdc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:794
	{
		xError = pdTRUE;
80002ce0:	24020001 	li	v0,1
80002ce4:	afc20028 	sw	v0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:798
	}

	/* Clear ebBIT_1 again. */
	if( xEventGroupClearBits( xEventGroup, ebBIT_1 ) != ebALL_BITS )
80002ce8:	8f828077 	lw	v0,-32649(gp)
80002cec:	00402025 	move	a0,v0
80002cf0:	24050002 	li	a1,2
80002cf4:	0c00120b 	jal	8000482c <xEventGroupClearBits>
80002cf8:	00000000 	nop
80002cfc:	00401825 	move	v1,v0
80002d00:	240200ff 	li	v0,255
80002d04:	10620003 	beq	v1,v0,80002d14 <prvBitCombinationTestMasterFunction+0x1c0>
80002d08:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:800
	{
		xError = pdTRUE;
80002d0c:	24020001 	li	v0,1
80002d10:	afc20028 	sw	v0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:805
	}

	/* Resume the other task - which will wait on all the ebCOMBINED_BITS
	again - this time clearing the bits when it is unblocked. */
	vTaskResume( xTestSlaveTaskHandle );
80002d14:	8fc4002c 	lw	a0,44(s8)
80002d18:	0c00176d 	jal	80005db4 <vTaskResume>
80002d1c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:808

	/* Ensure the other task is blocked once again. */
	if( eTaskGetState( xTestSlaveTaskHandle ) != eBlocked )
80002d20:	8fc4002c 	lw	a0,44(s8)
80002d24:	0c00159d 	jal	80005674 <eTaskGetState>
80002d28:	00000000 	nop
80002d2c:	00401825 	move	v1,v0
80002d30:	24020002 	li	v0,2
80002d34:	10620003 	beq	v1,v0,80002d44 <prvBitCombinationTestMasterFunction+0x1f0>
80002d38:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:810
	{
		xError = pdTRUE;
80002d3c:	24020001 	li	v0,1
80002d40:	afc20028 	sw	v0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:814
	}

	/* Set the bit the other task is waiting for. */
	xEventGroupSetBits( xEventGroup, ebBIT_1 );
80002d44:	8f828077 	lw	v0,-32649(gp)
80002d48:	00402025 	move	a0,v0
80002d4c:	24050002 	li	a1,2
80002d50:	0c001250 	jal	80004940 <xEventGroupSetBits>
80002d54:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:817

	/* Ensure the other task is suspended once again. */
	if( eTaskGetState( xTestSlaveTaskHandle ) != eSuspended )
80002d58:	8fc4002c 	lw	a0,44(s8)
80002d5c:	0c00159d 	jal	80005674 <eTaskGetState>
80002d60:	00000000 	nop
80002d64:	00401825 	move	v1,v0
80002d68:	24020003 	li	v0,3
80002d6c:	10620003 	beq	v1,v0,80002d7c <prvBitCombinationTestMasterFunction+0x228>
80002d70:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:819
	{
		xError = pdTRUE;
80002d74:	24020001 	li	v0,1
80002d78:	afc20028 	sw	v0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:824
	}

	/* The other task should have cleared the bits in ebCOMBINED_BITS.
	Clear the remaining bits. */
	uxBits = xEventGroupWaitBits( xEventGroup, ebALL_BITS, pdFALSE, pdFALSE, ebDONT_BLOCK );
80002d7c:	8f828077 	lw	v0,-32649(gp)
80002d80:	afa00010 	sw	zero,16(sp)
80002d84:	00402025 	move	a0,v0
80002d88:	240500ff 	li	a1,255
80002d8c:	00003025 	move	a2,zero
80002d90:	00003825 	move	a3,zero
80002d94:	0c00115a 	jal	80004568 <xEventGroupWaitBits>
80002d98:	00000000 	nop
80002d9c:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:826

	if( uxBits != ( ebALL_BITS & ~ebCOMBINED_BITS ) )
80002da0:	8fc30018 	lw	v1,24(s8)
80002da4:	2402005d 	li	v0,93
80002da8:	10620003 	beq	v1,v0,80002db8 <prvBitCombinationTestMasterFunction+0x264>
80002dac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:828
	{
		xError = pdTRUE;
80002db0:	24020001 	li	v0,1
80002db4:	afc20028 	sw	v0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:833
	}

	/* Clear all bits ready for the sync with the other three tasks.  The
	value returned is the value prior to the bits being cleared. */
	if( xEventGroupClearBits( xEventGroup, ebALL_BITS ) != ( ebALL_BITS & ~ebCOMBINED_BITS ) )
80002db8:	8f828077 	lw	v0,-32649(gp)
80002dbc:	00402025 	move	a0,v0
80002dc0:	240500ff 	li	a1,255
80002dc4:	0c00120b 	jal	8000482c <xEventGroupClearBits>
80002dc8:	00000000 	nop
80002dcc:	00401825 	move	v1,v0
80002dd0:	2402005d 	li	v0,93
80002dd4:	10620003 	beq	v1,v0,80002de4 <prvBitCombinationTestMasterFunction+0x290>
80002dd8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:835
	{
		xError = pdTRUE;
80002ddc:	24020001 	li	v0,1
80002de0:	afc20028 	sw	v0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:839
	}

	/* The bits should be clear now. */
	if( xEventGroupGetBits( xEventGroup ) != 0x00 )
80002de4:	8f828077 	lw	v0,-32649(gp)
80002de8:	00402025 	move	a0,v0
80002dec:	00002825 	move	a1,zero
80002df0:	0c00120b 	jal	8000482c <xEventGroupClearBits>
80002df4:	00000000 	nop
80002df8:	10400003 	beqz	v0,80002e08 <prvBitCombinationTestMasterFunction+0x2b4>
80002dfc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:841
	{
		xError = pdTRUE;
80002e00:	24020001 	li	v0,1
80002e04:	afc20028 	sw	v0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:844
	}

	return xError;
80002e08:	8fc20028 	lw	v0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:845
}
80002e0c:	03c0e825 	move	sp,s8
80002e10:	8fbf0024 	lw	ra,36(sp)
80002e14:	8fbe0020 	lw	s8,32(sp)
80002e18:	27bd0028 	addiu	sp,sp,40
80002e1c:	03e00008 	jr	ra
80002e20:	00000000 	nop

80002e24 <prvSelectiveBitsTestSlaveFunction>:
prvSelectiveBitsTestSlaveFunction():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:849
/*-----------------------------------------------------------*/

static void prvSelectiveBitsTestSlaveFunction( void )
{
80002e24:	27bdffd8 	addiu	sp,sp,-40
80002e28:	afbf0024 	sw	ra,36(sp)
80002e2c:	afbe0020 	sw	s8,32(sp)
80002e30:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:859
	unblock at the correct times.

	This function is called by two different tasks - each of which will use a
	different bit.  Check the task handle to see which task the function was
	called by. */
	if( xTaskGetCurrentTaskHandle() == xSyncTask1 )
80002e34:	0c001cad 	jal	800072b4 <xTaskGetCurrentTaskHandle>
80002e38:	00000000 	nop
80002e3c:	00401825 	move	v1,v0
80002e40:	8f82807f 	lw	v0,-32641(gp)
80002e44:	14620005 	bne	v1,v0,80002e5c <prvSelectiveBitsTestSlaveFunction+0x38>
80002e48:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:861
	{
		uxPendBits = ebSELECTIVE_BITS_1;
80002e4c:	24020003 	li	v0,3
80002e50:	afc20018 	sw	v0,24(s8)
80002e54:	10000003 	b	80002e64 <prvSelectiveBitsTestSlaveFunction+0x40>
80002e58:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:865
	}
	else
	{
		uxPendBits = ebSELECTIVE_BITS_2;
80002e5c:	24020005 	li	v0,5
80002e60:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:873
	for( ;; )
	{
		/* Wait until it is time to perform the next cycle of the test.  The
		task is unsuspended by the tests implemented in the
		prvSelectiveBitsTestMasterFunction() function. */
		vTaskSuspend( NULL );
80002e64:	00002025 	move	a0,zero
80002e68:	0c0016c6 	jal	80005b18 <vTaskSuspend>
80002e6c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:874
		uxReturned = xEventGroupWaitBits( xEventGroup, uxPendBits, pdTRUE, pdFALSE, portMAX_DELAY );
80002e70:	8f838077 	lw	v1,-32649(gp)
80002e74:	2402ffff 	li	v0,-1
80002e78:	afa20010 	sw	v0,16(sp)
80002e7c:	00602025 	move	a0,v1
80002e80:	8fc50018 	lw	a1,24(s8)
80002e84:	24060001 	li	a2,1
80002e88:	00003825 	move	a3,zero
80002e8c:	0c00115a 	jal	80004568 <xEventGroupWaitBits>
80002e90:	00000000 	nop
80002e94:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:876

		if( uxReturned == ( EventBits_t ) 0 )
80002e98:	8fc2001c 	lw	v0,28(s8)
80002e9c:	14400003 	bnez	v0,80002eac <prvSelectiveBitsTestSlaveFunction+0x88>
80002ea0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:878
		{
			break;
80002ea4:	10000003 	b	80002eb4 <prvSelectiveBitsTestSlaveFunction+0x90>
80002ea8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:880
		}
	}
80002eac:	1000ffed 	b	80002e64 <prvSelectiveBitsTestSlaveFunction+0x40>
80002eb0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:881
}
80002eb4:	03c0e825 	move	sp,s8
80002eb8:	8fbf0024 	lw	ra,36(sp)
80002ebc:	8fbe0020 	lw	s8,32(sp)
80002ec0:	27bd0028 	addiu	sp,sp,40
80002ec4:	03e00008 	jr	ra
80002ec8:	00000000 	nop

80002ecc <prvSelectiveBitsTestMasterFunction>:
prvSelectiveBitsTestMasterFunction():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:885
/*-----------------------------------------------------------*/

static BaseType_t prvSelectiveBitsTestMasterFunction( void )
{
80002ecc:	27bdffe0 	addiu	sp,sp,-32
80002ed0:	afbf001c 	sw	ra,28(sp)
80002ed4:	afbe0018 	sw	s8,24(sp)
80002ed8:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:886
BaseType_t xError = pdFALSE;
80002edc:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:896
	unblock at the correct times.  The two other tasks (xSyncTask1 and
	xSyncTask2) call prvSelectiveBitsTestSlaveFunction() to perform their parts in
	this test.

	Both other tasks should start in the suspended state. */
	if( eTaskGetState( xSyncTask1 ) != eSuspended )
80002ee0:	8f82807f 	lw	v0,-32641(gp)
80002ee4:	00402025 	move	a0,v0
80002ee8:	0c00159d 	jal	80005674 <eTaskGetState>
80002eec:	00000000 	nop
80002ef0:	00401825 	move	v1,v0
80002ef4:	24020003 	li	v0,3
80002ef8:	10620003 	beq	v1,v0,80002f08 <prvSelectiveBitsTestMasterFunction+0x3c>
80002efc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:898
	{
		xError = pdTRUE;
80002f00:	24020001 	li	v0,1
80002f04:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:901
	}

	if( eTaskGetState( xSyncTask2 ) != eSuspended )
80002f08:	8f828083 	lw	v0,-32637(gp)
80002f0c:	00402025 	move	a0,v0
80002f10:	0c00159d 	jal	80005674 <eTaskGetState>
80002f14:	00000000 	nop
80002f18:	00401825 	move	v1,v0
80002f1c:	24020003 	li	v0,3
80002f20:	10620003 	beq	v1,v0,80002f30 <prvSelectiveBitsTestMasterFunction+0x64>
80002f24:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:903
	{
		xError = pdTRUE;
80002f28:	24020001 	li	v0,1
80002f2c:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:907
	}

	/* Test each bit in the byte individually. */
	for( uxBit = 0x01; uxBit < 0x100; uxBit <<= 1 )
80002f30:	24020001 	li	v0,1
80002f34:	afc20014 	sw	v0,20(s8)
80002f38:	10000059 	b	800030a0 <prvSelectiveBitsTestMasterFunction+0x1d4>
80002f3c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:910
	{
		/* Resume both tasks. */
		vTaskResume( xSyncTask1 );
80002f40:	8f82807f 	lw	v0,-32641(gp)
80002f44:	00402025 	move	a0,v0
80002f48:	0c00176d 	jal	80005db4 <vTaskResume>
80002f4c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:911
		vTaskResume( xSyncTask2 );
80002f50:	8f828083 	lw	v0,-32637(gp)
80002f54:	00402025 	move	a0,v0
80002f58:	0c00176d 	jal	80005db4 <vTaskResume>
80002f5c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:914

		/* Now both tasks should be blocked on the event group. */
		if( eTaskGetState( xSyncTask1 ) != eBlocked )
80002f60:	8f82807f 	lw	v0,-32641(gp)
80002f64:	00402025 	move	a0,v0
80002f68:	0c00159d 	jal	80005674 <eTaskGetState>
80002f6c:	00000000 	nop
80002f70:	00401825 	move	v1,v0
80002f74:	24020002 	li	v0,2
80002f78:	10620003 	beq	v1,v0,80002f88 <prvSelectiveBitsTestMasterFunction+0xbc>
80002f7c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:916
		{
			xError = pdTRUE;
80002f80:	24020001 	li	v0,1
80002f84:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:919
		}

		if( eTaskGetState( xSyncTask2 ) != eBlocked )
80002f88:	8f828083 	lw	v0,-32637(gp)
80002f8c:	00402025 	move	a0,v0
80002f90:	0c00159d 	jal	80005674 <eTaskGetState>
80002f94:	00000000 	nop
80002f98:	00401825 	move	v1,v0
80002f9c:	24020002 	li	v0,2
80002fa0:	10620003 	beq	v1,v0,80002fb0 <prvSelectiveBitsTestMasterFunction+0xe4>
80002fa4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:921
		{
			xError = pdTRUE;
80002fa8:	24020001 	li	v0,1
80002fac:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:925
		}

		/* Set one bit. */
		xEventGroupSetBits( xEventGroup, uxBit );
80002fb0:	8f828077 	lw	v0,-32649(gp)
80002fb4:	00402025 	move	a0,v0
80002fb8:	8fc50014 	lw	a1,20(s8)
80002fbc:	0c001250 	jal	80004940 <xEventGroupSetBits>
80002fc0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:929

		/* Is the bit set in the first set of selective bits?  If so the first
		sync task should have unblocked and returned to the suspended state. */
		if( ( uxBit & ebSELECTIVE_BITS_1 ) == 0 )
80002fc4:	8fc20014 	lw	v0,20(s8)
80002fc8:	30420003 	andi	v0,v0,0x3
80002fcc:	1440000d 	bnez	v0,80003004 <prvSelectiveBitsTestMasterFunction+0x138>
80002fd0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:932
		{
			/* Task should not have unblocked. */
			if( eTaskGetState( xSyncTask1 ) != eBlocked )
80002fd4:	8f82807f 	lw	v0,-32641(gp)
80002fd8:	00402025 	move	a0,v0
80002fdc:	0c00159d 	jal	80005674 <eTaskGetState>
80002fe0:	00000000 	nop
80002fe4:	00401825 	move	v1,v0
80002fe8:	24020002 	li	v0,2
80002fec:	1062000f 	beq	v1,v0,8000302c <prvSelectiveBitsTestMasterFunction+0x160>
80002ff0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:934
			{
				xError = pdTRUE;
80002ff4:	24020001 	li	v0,1
80002ff8:	afc20010 	sw	v0,16(s8)
80002ffc:	1000000b 	b	8000302c <prvSelectiveBitsTestMasterFunction+0x160>
80003000:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:940
			}
		}
		else
		{
			/* Task should have unblocked and returned to the suspended state. */
			if( eTaskGetState( xSyncTask1 ) != eSuspended )
80003004:	8f82807f 	lw	v0,-32641(gp)
80003008:	00402025 	move	a0,v0
8000300c:	0c00159d 	jal	80005674 <eTaskGetState>
80003010:	00000000 	nop
80003014:	00401825 	move	v1,v0
80003018:	24020003 	li	v0,3
8000301c:	10620003 	beq	v1,v0,8000302c <prvSelectiveBitsTestMasterFunction+0x160>
80003020:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:942
			{
				xError = pdTRUE;
80003024:	24020001 	li	v0,1
80003028:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:947
			}
		}

		/* Same checks for the second sync task. */
		if( ( uxBit & ebSELECTIVE_BITS_2 ) == 0 )
8000302c:	8fc20014 	lw	v0,20(s8)
80003030:	30420005 	andi	v0,v0,0x5
80003034:	1440000d 	bnez	v0,8000306c <prvSelectiveBitsTestMasterFunction+0x1a0>
80003038:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:950
		{
			/* Task should not have unblocked. */
			if( eTaskGetState( xSyncTask2 ) != eBlocked )
8000303c:	8f828083 	lw	v0,-32637(gp)
80003040:	00402025 	move	a0,v0
80003044:	0c00159d 	jal	80005674 <eTaskGetState>
80003048:	00000000 	nop
8000304c:	00401825 	move	v1,v0
80003050:	24020002 	li	v0,2
80003054:	1062000f 	beq	v1,v0,80003094 <prvSelectiveBitsTestMasterFunction+0x1c8>
80003058:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:952
			{
				xError = pdTRUE;
8000305c:	24020001 	li	v0,1
80003060:	afc20010 	sw	v0,16(s8)
80003064:	1000000b 	b	80003094 <prvSelectiveBitsTestMasterFunction+0x1c8>
80003068:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:958
			}
		}
		else
		{
			/* Task should have unblocked and returned to the suspended state. */
			if( eTaskGetState( xSyncTask2 ) != eSuspended )
8000306c:	8f828083 	lw	v0,-32637(gp)
80003070:	00402025 	move	a0,v0
80003074:	0c00159d 	jal	80005674 <eTaskGetState>
80003078:	00000000 	nop
8000307c:	00401825 	move	v1,v0
80003080:	24020003 	li	v0,3
80003084:	10620003 	beq	v1,v0,80003094 <prvSelectiveBitsTestMasterFunction+0x1c8>
80003088:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:960
			{
				xError = pdTRUE;
8000308c:	24020001 	li	v0,1
80003090:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:907 (discriminator 2)
	{
		xError = pdTRUE;
	}

	/* Test each bit in the byte individually. */
	for( uxBit = 0x01; uxBit < 0x100; uxBit <<= 1 )
80003094:	8fc20014 	lw	v0,20(s8)
80003098:	00021040 	sll	v0,v0,0x1
8000309c:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:907 (discriminator 1)
800030a0:	8fc20014 	lw	v0,20(s8)
800030a4:	2c420100 	sltiu	v0,v0,256
800030a8:	1440ffa5 	bnez	v0,80002f40 <prvSelectiveBitsTestMasterFunction+0x74>
800030ac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:967
		}
	}

	/* Ensure both tasks are blocked on the event group again, then delete the
	event group so the other tasks leave this portion of the test. */
	vTaskResume( xSyncTask1 );
800030b0:	8f82807f 	lw	v0,-32641(gp)
800030b4:	00402025 	move	a0,v0
800030b8:	0c00176d 	jal	80005db4 <vTaskResume>
800030bc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:968
	vTaskResume( xSyncTask2 );
800030c0:	8f828083 	lw	v0,-32637(gp)
800030c4:	00402025 	move	a0,v0
800030c8:	0c00176d 	jal	80005db4 <vTaskResume>
800030cc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:973

	/* Deleting the event group is the signal that the two other tasks should
	leave the prvSelectiveBitsTestSlaveFunction() function and continue to the main
	part of their functionality. */
	vEventGroupDelete( xEventGroup );
800030d0:	8f828077 	lw	v0,-32649(gp)
800030d4:	00402025 	move	a0,v0
800030d8:	0c0012ce 	jal	80004b38 <vEventGroupDelete>
800030dc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:975

	return xError;
800030e0:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:976
}
800030e4:	03c0e825 	move	sp,s8
800030e8:	8fbf001c 	lw	ra,28(sp)
800030ec:	8fbe0018 	lw	s8,24(sp)
800030f0:	27bd0020 	addiu	sp,sp,32
800030f4:	03e00008 	jr	ra
800030f8:	00000000 	nop

800030fc <vPeriodicEventGroupsProcessing>:
vPeriodicEventGroupsProcessing():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:980
/*-----------------------------------------------------------*/

void vPeriodicEventGroupsProcessing( void )
{
800030fc:	27bdffd0 	addiu	sp,sp,-48
80003100:	afbf002c 	sw	ra,44(sp)
80003104:	afbe0028 	sw	s8,40(sp)
80003108:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:982
static BaseType_t xCallCount = 0, xISRTestError = pdFALSE;
const BaseType_t xSetBitCount = 100, xGetBitsCount = 200, xClearBitsCount = 300;
8000310c:	24020064 	li	v0,100
80003110:	afc20010 	sw	v0,16(s8)
80003114:	240200c8 	li	v0,200
80003118:	afc20014 	sw	v0,20(s8)
8000311c:	2402012c 	li	v0,300
80003120:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:983
const EventBits_t uxBitsToSet = 0x12U;
80003124:	24020012 	li	v0,18
80003128:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:990
BaseType_t xMessagePosted;

	/* Called periodically from the tick hook to exercise the "FromISR"
	functions. */

	xCallCount++;
8000312c:	8f828087 	lw	v0,-32633(gp)
80003130:	24420001 	addiu	v0,v0,1
80003134:	af828087 	sw	v0,-32633(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:992

	if( xCallCount == xSetBitCount )
80003138:	8f838087 	lw	v1,-32633(gp)
8000313c:	8fc20010 	lw	v0,16(s8)
80003140:	1462001e 	bne	v1,v0,800031bc <vPeriodicEventGroupsProcessing+0xc0>
80003144:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:995
	{
		/* All the event bits should start clear. */
		uxReturned = xEventGroupGetBitsFromISR( xISREventGroup );
80003148:	8f82807b 	lw	v0,-32645(gp)
8000314c:	00402025 	move	a0,v0
80003150:	0c001239 	jal	800048e4 <xEventGroupGetBitsFromISR>
80003154:	00000000 	nop
80003158:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:996
		if( uxReturned != 0x00 )
8000315c:	8fc20020 	lw	v0,32(s8)
80003160:	10400005 	beqz	v0,80003178 <vPeriodicEventGroupsProcessing+0x7c>
80003164:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:998
		{
			xISRTestError = pdTRUE;
80003168:	24020001 	li	v0,1
8000316c:	af82808b 	sw	v0,-32629(gp)
80003170:	1000003d 	b	80003268 <vPeriodicEventGroupsProcessing+0x16c>
80003174:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1005
		else
		{
			/* Set the bits.  This is called from the tick hook so it is not
			necessary to use the last parameter to ensure a context switch
			occurs immediately. */
			xMessagePosted = xEventGroupSetBitsFromISR( xISREventGroup, uxBitsToSet, NULL );
80003178:	8f83807b 	lw	v1,-32645(gp)
8000317c:	3c028000 	lui	v0,0x8000
80003180:	24444bf0 	addiu	a0,v0,19440
80003184:	00602825 	move	a1,v1
80003188:	8fc6001c 	lw	a2,28(s8)
8000318c:	00003825 	move	a3,zero
80003190:	0c00105f 	jal	8000417c <xTimerPendFunctionCallFromISR>
80003194:	00000000 	nop
80003198:	afc20024 	sw	v0,36(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1006
			if( xMessagePosted != pdPASS )
8000319c:	8fc30024 	lw	v1,36(s8)
800031a0:	24020001 	li	v0,1
800031a4:	10620030 	beq	v1,v0,80003268 <vPeriodicEventGroupsProcessing+0x16c>
800031a8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1008
			{
				xISRTestError = pdTRUE;
800031ac:	24020001 	li	v0,1
800031b0:	af82808b 	sw	v0,-32629(gp)
800031b4:	1000002c 	b	80003268 <vPeriodicEventGroupsProcessing+0x16c>
800031b8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1012
			}
		}
	}
	else if( xCallCount == xGetBitsCount )
800031bc:	8f838087 	lw	v1,-32633(gp)
800031c0:	8fc20014 	lw	v0,20(s8)
800031c4:	1462000e 	bne	v1,v0,80003200 <vPeriodicEventGroupsProcessing+0x104>
800031c8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1015
	{
		/* Check the bits were set as expected. */
		uxReturned = xEventGroupGetBitsFromISR( xISREventGroup );
800031cc:	8f82807b 	lw	v0,-32645(gp)
800031d0:	00402025 	move	a0,v0
800031d4:	0c001239 	jal	800048e4 <xEventGroupGetBitsFromISR>
800031d8:	00000000 	nop
800031dc:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1016
		if( uxReturned != uxBitsToSet )
800031e0:	8fc30020 	lw	v1,32(s8)
800031e4:	8fc2001c 	lw	v0,28(s8)
800031e8:	1062001f 	beq	v1,v0,80003268 <vPeriodicEventGroupsProcessing+0x16c>
800031ec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1018
		{
			xISRTestError = pdTRUE;
800031f0:	24020001 	li	v0,1
800031f4:	af82808b 	sw	v0,-32629(gp)
800031f8:	1000001b 	b	80003268 <vPeriodicEventGroupsProcessing+0x16c>
800031fc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1021
		}
	}
	else if( xCallCount == xClearBitsCount )
80003200:	8f838087 	lw	v1,-32633(gp)
80003204:	8fc20018 	lw	v0,24(s8)
80003208:	14620017 	bne	v1,v0,80003268 <vPeriodicEventGroupsProcessing+0x16c>
8000320c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1024
	{
		/* Clear the bits again. */
		uxReturned = ( EventBits_t ) xEventGroupClearBitsFromISR( xISREventGroup, uxBitsToSet );
80003210:	8f83807b 	lw	v1,-32645(gp)
80003214:	3c028000 	lui	v0,0x8000
80003218:	24444c30 	addiu	a0,v0,19504
8000321c:	00602825 	move	a1,v1
80003220:	8fc6001c 	lw	a2,28(s8)
80003224:	00003825 	move	a3,zero
80003228:	0c00105f 	jal	8000417c <xTimerPendFunctionCallFromISR>
8000322c:	00000000 	nop
80003230:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1027

		/* Check the message was posted. */
		if( uxReturned != pdPASS )
80003234:	8fc30020 	lw	v1,32(s8)
80003238:	24020001 	li	v0,1
8000323c:	10620003 	beq	v1,v0,8000324c <vPeriodicEventGroupsProcessing+0x150>
80003240:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1029
		{
			xISRTestError = pdTRUE;
80003244:	24020001 	li	v0,1
80003248:	af82808b 	sw	v0,-32629(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1033
		}

		/* Go back to the start. */
		xCallCount = 0;
8000324c:	af808087 	sw	zero,-32633(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1037

		/* If no errors have been detected then increment the count of test
		cycles. */
		if( xISRTestError == pdFALSE )
80003250:	8f82808b 	lw	v0,-32629(gp)
80003254:	14400004 	bnez	v0,80003268 <vPeriodicEventGroupsProcessing+0x16c>
80003258:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1039
		{
			ulISRCycles++;
8000325c:	8f828073 	lw	v0,-32653(gp)
80003260:	24420001 	addiu	v0,v0,1
80003264:	af828073 	sw	v0,-32653(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1046
	}
	else
	{
		/* Nothing else to do. */
	}
}
80003268:	03c0e825 	move	sp,s8
8000326c:	8fbf002c 	lw	ra,44(sp)
80003270:	8fbe0028 	lw	s8,40(sp)
80003274:	27bd0030 	addiu	sp,sp,48
80003278:	03e00008 	jr	ra
8000327c:	00000000 	nop

80003280 <xAreEventGroupTasksStillRunning>:
xAreEventGroupTasksStillRunning():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1051

/*-----------------------------------------------------------*/
/* This is called to check that all the created tasks are still running. */
BaseType_t xAreEventGroupTasksStillRunning( void )
{
80003280:	27bdfff0 	addiu	sp,sp,-16
80003284:	afbe000c 	sw	s8,12(sp)
80003288:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1053
static uint32_t ulPreviousWaitBitCycles = 0, ulPreviousSetBitCycles = 0, ulPreviousISRCycles = 0;
BaseType_t xStatus = pdPASS;
8000328c:	24020001 	li	v0,1
80003290:	afc20000 	sw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1056

	/* Check the tasks are still cycling without finding any errors. */
	if( ulPreviousSetBitCycles == ulTestMasterCycles )
80003294:	8f83808f 	lw	v1,-32625(gp)
80003298:	8f82806b 	lw	v0,-32661(gp)
8000329c:	14620002 	bne	v1,v0,800032a8 <xAreEventGroupTasksStillRunning+0x28>
800032a0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1058
	{
		xStatus = pdFAIL;
800032a4:	afc00000 	sw	zero,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1060
	}
	ulPreviousSetBitCycles = ulTestMasterCycles;
800032a8:	8f82806b 	lw	v0,-32661(gp)
800032ac:	af82808f 	sw	v0,-32625(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1062

	if( ulPreviousWaitBitCycles == ulTestSlaveCycles )
800032b0:	8f838093 	lw	v1,-32621(gp)
800032b4:	8f82806f 	lw	v0,-32657(gp)
800032b8:	14620002 	bne	v1,v0,800032c4 <xAreEventGroupTasksStillRunning+0x44>
800032bc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1064
	{
		xStatus = pdFAIL;
800032c0:	afc00000 	sw	zero,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1066
	}
	ulPreviousWaitBitCycles = ulTestSlaveCycles;
800032c4:	8f82806f 	lw	v0,-32657(gp)
800032c8:	af828093 	sw	v0,-32621(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1068

	if( ulPreviousISRCycles == ulISRCycles )
800032cc:	8f838097 	lw	v1,-32617(gp)
800032d0:	8f828073 	lw	v0,-32653(gp)
800032d4:	14620002 	bne	v1,v0,800032e0 <xAreEventGroupTasksStillRunning+0x60>
800032d8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1070
	{
		xStatus = pdFAIL;
800032dc:	afc00000 	sw	zero,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1072
	}
	ulPreviousISRCycles = ulISRCycles;
800032e0:	8f828073 	lw	v0,-32653(gp)
800032e4:	af828097 	sw	v0,-32617(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1074

	return xStatus;
800032e8:	8fc20000 	lw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../Common/Minimal/EventGroupsDemo.c:1075
}
800032ec:	03c0e825 	move	sp,s8
800032f0:	8fbe000c 	lw	s8,12(sp)
800032f4:	27bd0010 	addiu	sp,sp,16
800032f8:	03e00008 	jr	ra
800032fc:	00000000 	nop

80003300 <xTimerCreateTimerTask>:
xTimerCreateTimerTask():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:260
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
80003300:	27bdffd8 	addiu	sp,sp,-40
80003304:	afbf0024 	sw	ra,36(sp)
80003308:	afbe0020 	sw	s8,32(sp)
8000330c:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:261
BaseType_t xReturn = pdFAIL;
80003310:	afc00018 	sw	zero,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:267

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
80003314:	0c000fe1 	jal	80003f84 <prvCheckForValidListAndQueue>
80003318:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:269

	if( xTimerQueue != NULL )
8000331c:	8f8280a3 	lw	v0,-32605(gp)
80003320:	1040000e 	beqz	v0,8000335c <xTimerCreateTimerTask+0x5c>
80003324:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:293
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
80003328:	24020002 	li	v0,2
8000332c:	afa20010 	sw	v0,16(sp)
80003330:	278280a7 	addiu	v0,gp,-32601
80003334:	afa20014 	sw	v0,20(sp)
80003338:	3c028000 	lui	v0,0x8000
8000333c:	24443858 	addiu	a0,v0,14424
80003340:	3c028001 	lui	v0,0x8001
80003344:	2445bce4 	addiu	a1,v0,-17180
80003348:	2406017c 	li	a2,380
8000334c:	00003825 	move	a3,zero
80003350:	0c00133d 	jal	80004cf4 <xTaskCreate>
80003354:	00000000 	nop
80003358:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:307
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
8000335c:	8fc20018 	lw	v0,24(s8)
80003360:	14400006 	bnez	v0,8000337c <xTimerCreateTimerTask+0x7c>
80003364:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:307 (discriminator 1)
80003368:	3c028001 	lui	v0,0x8001
8000336c:	2444bcec 	addiu	a0,v0,-17172
80003370:	24050133 	li	a1,307
80003374:	0c000417 	jal	8000105c <vAssertCalled>
80003378:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:308
	return xReturn;
8000337c:	8fc20018 	lw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:309
}
80003380:	03c0e825 	move	sp,s8
80003384:	8fbf0024 	lw	ra,36(sp)
80003388:	8fbe0020 	lw	s8,32(sp)
8000338c:	27bd0028 	addiu	sp,sp,40
80003390:	03e00008 	jr	ra
80003394:	00000000 	nop

80003398 <xTimerCreate>:
xTimerCreate():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:319
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
80003398:	27bdffd8 	addiu	sp,sp,-40
8000339c:	afbf0024 	sw	ra,36(sp)
800033a0:	afbe0020 	sw	s8,32(sp)
800033a4:	03a0f025 	move	s8,sp
800033a8:	afc40028 	sw	a0,40(s8)
800033ac:	afc5002c 	sw	a1,44(s8)
800033b0:	afc60030 	sw	a2,48(s8)
800033b4:	afc70034 	sw	a3,52(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:322
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
800033b8:	24040028 	li	a0,40
800033bc:	0c002af0 	jal	8000abc0 <pvPortMalloc>
800033c0:	00000000 	nop
800033c4:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:324

		if( pxNewTimer != NULL )
800033c8:	8fc20018 	lw	v0,24(s8)
800033cc:	1040000b 	beqz	v0,800033fc <xTimerCreate+0x64>
800033d0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:326
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
800033d4:	8fc20038 	lw	v0,56(s8)
800033d8:	afa20010 	sw	v0,16(sp)
800033dc:	8fc20018 	lw	v0,24(s8)
800033e0:	afa20014 	sw	v0,20(sp)
800033e4:	8fc40028 	lw	a0,40(s8)
800033e8:	8fc5002c 	lw	a1,44(s8)
800033ec:	8fc60030 	lw	a2,48(s8)
800033f0:	8fc70034 	lw	a3,52(s8)
800033f4:	0c000d06 	jal	80003418 <prvInitialiseNewTimer>
800033f8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:338
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
800033fc:	8fc20018 	lw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:339
	}
80003400:	03c0e825 	move	sp,s8
80003404:	8fbf0024 	lw	ra,36(sp)
80003408:	8fbe0020 	lw	s8,32(sp)
8000340c:	27bd0028 	addiu	sp,sp,40
80003410:	03e00008 	jr	ra
80003414:	00000000 	nop

80003418 <prvInitialiseNewTimer>:
prvInitialiseNewTimer():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:394
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80003418:	27bdffe8 	addiu	sp,sp,-24
8000341c:	afbf0014 	sw	ra,20(sp)
80003420:	afbe0010 	sw	s8,16(sp)
80003424:	03a0f025 	move	s8,sp
80003428:	afc40018 	sw	a0,24(s8)
8000342c:	afc5001c 	sw	a1,28(s8)
80003430:	afc60020 	sw	a2,32(s8)
80003434:	afc70024 	sw	a3,36(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:396
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
80003438:	8fc2001c 	lw	v0,28(s8)
8000343c:	14400006 	bnez	v0,80003458 <prvInitialiseNewTimer+0x40>
80003440:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:396 (discriminator 1)
80003444:	3c028001 	lui	v0,0x8001
80003448:	2444bcec 	addiu	a0,v0,-17172
8000344c:	2405018c 	li	a1,396
80003450:	0c000417 	jal	8000105c <vAssertCalled>
80003454:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:398

	if( pxNewTimer != NULL )
80003458:	8fc2002c 	lw	v0,44(s8)
8000345c:	10400017 	beqz	v0,800034bc <prvInitialiseNewTimer+0xa4>
80003460:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:402
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
80003464:	0c000fe1 	jal	80003f84 <prvCheckForValidListAndQueue>
80003468:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:406

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
8000346c:	8fc2002c 	lw	v0,44(s8)
80003470:	8fc30018 	lw	v1,24(s8)
80003474:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:407
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
80003478:	8fc2002c 	lw	v0,44(s8)
8000347c:	8fc3001c 	lw	v1,28(s8)
80003480:	ac430018 	sw	v1,24(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:408
		pxNewTimer->uxAutoReload = uxAutoReload;
80003484:	8fc2002c 	lw	v0,44(s8)
80003488:	8fc30020 	lw	v1,32(s8)
8000348c:	ac43001c 	sw	v1,28(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:409
		pxNewTimer->pvTimerID = pvTimerID;
80003490:	8fc2002c 	lw	v0,44(s8)
80003494:	8fc30024 	lw	v1,36(s8)
80003498:	ac430020 	sw	v1,32(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:410
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
8000349c:	8fc2002c 	lw	v0,44(s8)
800034a0:	8fc30028 	lw	v1,40(s8)
800034a4:	ac430024 	sw	v1,36(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:411
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
800034a8:	8fc2002c 	lw	v0,44(s8)
800034ac:	24420004 	addiu	v0,v0,4
800034b0:	00402025 	move	a0,v0
800034b4:	0c002909 	jal	8000a424 <vListInitialiseItem>
800034b8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:414
		traceTIMER_CREATE( pxNewTimer );
	}
}
800034bc:	03c0e825 	move	sp,s8
800034c0:	8fbf0014 	lw	ra,20(sp)
800034c4:	8fbe0010 	lw	s8,16(sp)
800034c8:	27bd0018 	addiu	sp,sp,24
800034cc:	03e00008 	jr	ra
800034d0:	00000000 	nop

800034d4 <xTimerGenericCommand>:
xTimerGenericCommand():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:418
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
800034d4:	27bdffd0 	addiu	sp,sp,-48
800034d8:	afbf002c 	sw	ra,44(sp)
800034dc:	afbe0028 	sw	s8,40(sp)
800034e0:	03a0f025 	move	s8,sp
800034e4:	afc40030 	sw	a0,48(s8)
800034e8:	afc50034 	sw	a1,52(s8)
800034ec:	afc60038 	sw	a2,56(s8)
800034f0:	afc7003c 	sw	a3,60(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:419
BaseType_t xReturn = pdFAIL;
800034f4:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:422
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
800034f8:	8fc20030 	lw	v0,48(s8)
800034fc:	14400006 	bnez	v0,80003518 <xTimerGenericCommand+0x44>
80003500:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:422 (discriminator 1)
80003504:	3c028001 	lui	v0,0x8001
80003508:	2444bcec 	addiu	a0,v0,-17172
8000350c:	240501a6 	li	a1,422
80003510:	0c000417 	jal	8000105c <vAssertCalled>
80003514:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:426

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
80003518:	8f8280a3 	lw	v0,-32605(gp)
8000351c:	10400030 	beqz	v0,800035e0 <xTimerGenericCommand+0x10c>
80003520:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:429
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
80003524:	8fc20034 	lw	v0,52(s8)
80003528:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:430
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
8000352c:	8fc20038 	lw	v0,56(s8)
80003530:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:431
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
80003534:	8fc20030 	lw	v0,48(s8)
80003538:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:433

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
8000353c:	8fc20034 	lw	v0,52(s8)
80003540:	28420006 	slti	v0,v0,6
80003544:	1040001d 	beqz	v0,800035bc <xTimerGenericCommand+0xe8>
80003548:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:435
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
8000354c:	0c001cb8 	jal	800072e0 <xTaskGetSchedulerState>
80003550:	00000000 	nop
80003554:	00401825 	move	v1,v0
80003558:	24020002 	li	v0,2
8000355c:	1462000c 	bne	v1,v0,80003590 <xTimerGenericCommand+0xbc>
80003560:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:437
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
80003564:	8f8380a3 	lw	v1,-32605(gp)
80003568:	27c20014 	addiu	v0,s8,20
8000356c:	00602025 	move	a0,v1
80003570:	00402825 	move	a1,v0
80003574:	8fc60040 	lw	a2,64(s8)
80003578:	00003825 	move	a3,zero
8000357c:	0c002254 	jal	80008950 <xQueueGenericSend>
80003580:	00000000 	nop
80003584:	afc20010 	sw	v0,16(s8)
80003588:	10000015 	b	800035e0 <xTimerGenericCommand+0x10c>
8000358c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:441
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
80003590:	8f8380a3 	lw	v1,-32605(gp)
80003594:	27c20014 	addiu	v0,s8,20
80003598:	00602025 	move	a0,v1
8000359c:	00402825 	move	a1,v0
800035a0:	00003025 	move	a2,zero
800035a4:	00003825 	move	a3,zero
800035a8:	0c002254 	jal	80008950 <xQueueGenericSend>
800035ac:	00000000 	nop
800035b0:	afc20010 	sw	v0,16(s8)
800035b4:	1000000a 	b	800035e0 <xTimerGenericCommand+0x10c>
800035b8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:446
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
800035bc:	8f8380a3 	lw	v1,-32605(gp)
800035c0:	27c20014 	addiu	v0,s8,20
800035c4:	00602025 	move	a0,v1
800035c8:	00402825 	move	a1,v0
800035cc:	8fc6003c 	lw	a2,60(s8)
800035d0:	00003825 	move	a3,zero
800035d4:	0c002358 	jal	80008d60 <xQueueGenericSendFromISR>
800035d8:	00000000 	nop
800035dc:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:456
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
800035e0:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:457
}
800035e4:	03c0e825 	move	sp,s8
800035e8:	8fbf002c 	lw	ra,44(sp)
800035ec:	8fbe0028 	lw	s8,40(sp)
800035f0:	27bd0030 	addiu	sp,sp,48
800035f4:	03e00008 	jr	ra
800035f8:	00000000 	nop

800035fc <xTimerGetTimerDaemonTaskHandle>:
xTimerGetTimerDaemonTaskHandle():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:461
/*-----------------------------------------------------------*/

TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
{
800035fc:	27bdffe8 	addiu	sp,sp,-24
80003600:	afbf0014 	sw	ra,20(sp)
80003604:	afbe0010 	sw	s8,16(sp)
80003608:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:464
	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
	started, then xTimerTaskHandle will be NULL. */
	configASSERT( ( xTimerTaskHandle != NULL ) );
8000360c:	8f8280a7 	lw	v0,-32601(gp)
80003610:	14400006 	bnez	v0,8000362c <xTimerGetTimerDaemonTaskHandle+0x30>
80003614:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:464 (discriminator 1)
80003618:	3c028001 	lui	v0,0x8001
8000361c:	2444bcec 	addiu	a0,v0,-17172
80003620:	240501d0 	li	a1,464
80003624:	0c000417 	jal	8000105c <vAssertCalled>
80003628:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:465
	return xTimerTaskHandle;
8000362c:	8f8280a7 	lw	v0,-32601(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:466
}
80003630:	03c0e825 	move	sp,s8
80003634:	8fbf0014 	lw	ra,20(sp)
80003638:	8fbe0010 	lw	s8,16(sp)
8000363c:	27bd0018 	addiu	sp,sp,24
80003640:	03e00008 	jr	ra
80003644:	00000000 	nop

80003648 <xTimerGetPeriod>:
xTimerGetPeriod():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:470
/*-----------------------------------------------------------*/

TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
{
80003648:	27bdffe0 	addiu	sp,sp,-32
8000364c:	afbf001c 	sw	ra,28(sp)
80003650:	afbe0018 	sw	s8,24(sp)
80003654:	03a0f025 	move	s8,sp
80003658:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:471
Timer_t *pxTimer = ( Timer_t * ) xTimer;
8000365c:	8fc20020 	lw	v0,32(s8)
80003660:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:473

	configASSERT( xTimer );
80003664:	8fc20020 	lw	v0,32(s8)
80003668:	14400006 	bnez	v0,80003684 <xTimerGetPeriod+0x3c>
8000366c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:473 (discriminator 1)
80003670:	3c028001 	lui	v0,0x8001
80003674:	2444bcec 	addiu	a0,v0,-17172
80003678:	240501d9 	li	a1,473
8000367c:	0c000417 	jal	8000105c <vAssertCalled>
80003680:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:474
	return pxTimer->xTimerPeriodInTicks;
80003684:	8fc20010 	lw	v0,16(s8)
80003688:	8c420018 	lw	v0,24(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:475
}
8000368c:	03c0e825 	move	sp,s8
80003690:	8fbf001c 	lw	ra,28(sp)
80003694:	8fbe0018 	lw	s8,24(sp)
80003698:	27bd0020 	addiu	sp,sp,32
8000369c:	03e00008 	jr	ra
800036a0:	00000000 	nop

800036a4 <xTimerGetExpiryTime>:
xTimerGetExpiryTime():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:479
/*-----------------------------------------------------------*/

TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
{
800036a4:	27bdffe0 	addiu	sp,sp,-32
800036a8:	afbf001c 	sw	ra,28(sp)
800036ac:	afbe0018 	sw	s8,24(sp)
800036b0:	03a0f025 	move	s8,sp
800036b4:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:480
Timer_t * pxTimer = ( Timer_t * ) xTimer;
800036b8:	8fc20020 	lw	v0,32(s8)
800036bc:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:483
TickType_t xReturn;

	configASSERT( xTimer );
800036c0:	8fc20020 	lw	v0,32(s8)
800036c4:	14400006 	bnez	v0,800036e0 <xTimerGetExpiryTime+0x3c>
800036c8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:483 (discriminator 1)
800036cc:	3c028001 	lui	v0,0x8001
800036d0:	2444bcec 	addiu	a0,v0,-17172
800036d4:	240501e3 	li	a1,483
800036d8:	0c000417 	jal	8000105c <vAssertCalled>
800036dc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:484
	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
800036e0:	8fc20010 	lw	v0,16(s8)
800036e4:	8c420004 	lw	v0,4(v0)
800036e8:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:485
	return xReturn;
800036ec:	8fc20014 	lw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:486
}
800036f0:	03c0e825 	move	sp,s8
800036f4:	8fbf001c 	lw	ra,28(sp)
800036f8:	8fbe0018 	lw	s8,24(sp)
800036fc:	27bd0020 	addiu	sp,sp,32
80003700:	03e00008 	jr	ra
80003704:	00000000 	nop

80003708 <pcTimerGetName>:
pcTimerGetName():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:490
/*-----------------------------------------------------------*/

const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80003708:	27bdffe0 	addiu	sp,sp,-32
8000370c:	afbf001c 	sw	ra,28(sp)
80003710:	afbe0018 	sw	s8,24(sp)
80003714:	03a0f025 	move	s8,sp
80003718:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:491
Timer_t *pxTimer = ( Timer_t * ) xTimer;
8000371c:	8fc20020 	lw	v0,32(s8)
80003720:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:493

	configASSERT( xTimer );
80003724:	8fc20020 	lw	v0,32(s8)
80003728:	14400006 	bnez	v0,80003744 <pcTimerGetName+0x3c>
8000372c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:493 (discriminator 1)
80003730:	3c028001 	lui	v0,0x8001
80003734:	2444bcec 	addiu	a0,v0,-17172
80003738:	240501ed 	li	a1,493
8000373c:	0c000417 	jal	8000105c <vAssertCalled>
80003740:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:494
	return pxTimer->pcTimerName;
80003744:	8fc20010 	lw	v0,16(s8)
80003748:	8c420000 	lw	v0,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:495
}
8000374c:	03c0e825 	move	sp,s8
80003750:	8fbf001c 	lw	ra,28(sp)
80003754:	8fbe0018 	lw	s8,24(sp)
80003758:	27bd0020 	addiu	sp,sp,32
8000375c:	03e00008 	jr	ra
80003760:	00000000 	nop

80003764 <prvProcessExpiredTimer>:
prvProcessExpiredTimer():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:499
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
80003764:	27bdffd8 	addiu	sp,sp,-40
80003768:	afbf0024 	sw	ra,36(sp)
8000376c:	afbe0020 	sw	s8,32(sp)
80003770:	03a0f025 	move	s8,sp
80003774:	afc40028 	sw	a0,40(s8)
80003778:	afc5002c 	sw	a1,44(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:501
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
8000377c:	8f82809b 	lw	v0,-32613(gp)
80003780:	8c42000c 	lw	v0,12(v0)
80003784:	8c42000c 	lw	v0,12(v0)
80003788:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:505

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
8000378c:	8fc20018 	lw	v0,24(s8)
80003790:	24420004 	addiu	v0,v0,4
80003794:	00402025 	move	a0,v0
80003798:	0c002972 	jal	8000a5c8 <uxListRemove>
8000379c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:510
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
800037a0:	8fc20018 	lw	v0,24(s8)
800037a4:	8c43001c 	lw	v1,28(v0)
800037a8:	24020001 	li	v0,1
800037ac:	1462001f 	bne	v1,v0,8000382c <prvProcessExpiredTimer+0xc8>
800037b0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:515
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
800037b4:	8fc20018 	lw	v0,24(s8)
800037b8:	8c430018 	lw	v1,24(v0)
800037bc:	8fc20028 	lw	v0,40(s8)
800037c0:	00621021 	addu	v0,v1,v0
800037c4:	8fc40018 	lw	a0,24(s8)
800037c8:	00402825 	move	a1,v0
800037cc:	8fc6002c 	lw	a2,44(s8)
800037d0:	8fc70028 	lw	a3,40(s8)
800037d4:	0c000eae 	jal	80003ab8 <prvInsertTimerInActiveList>
800037d8:	00000000 	nop
800037dc:	10400013 	beqz	v0,8000382c <prvProcessExpiredTimer+0xc8>
800037e0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:519
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
800037e4:	afa00010 	sw	zero,16(sp)
800037e8:	8fc40018 	lw	a0,24(s8)
800037ec:	00002825 	move	a1,zero
800037f0:	8fc60028 	lw	a2,40(s8)
800037f4:	00003825 	move	a3,zero
800037f8:	0c000d35 	jal	800034d4 <xTimerGenericCommand>
800037fc:	00000000 	nop
80003800:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:520
			configASSERT( xResult );
80003804:	8fc2001c 	lw	v0,28(s8)
80003808:	14400008 	bnez	v0,8000382c <prvProcessExpiredTimer+0xc8>
8000380c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:520 (discriminator 1)
80003810:	3c028001 	lui	v0,0x8001
80003814:	2444bcec 	addiu	a0,v0,-17172
80003818:	24050208 	li	a1,520
8000381c:	0c000417 	jal	8000105c <vAssertCalled>
80003820:	00000000 	nop
80003824:	10000001 	b	8000382c <prvProcessExpiredTimer+0xc8>
80003828:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:534
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
8000382c:	8fc20018 	lw	v0,24(s8)
80003830:	8c420024 	lw	v0,36(v0)
80003834:	8fc40018 	lw	a0,24(s8)
80003838:	0040f809 	jalr	v0
8000383c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:535
}
80003840:	03c0e825 	move	sp,s8
80003844:	8fbf0024 	lw	ra,36(sp)
80003848:	8fbe0020 	lw	s8,32(sp)
8000384c:	27bd0028 	addiu	sp,sp,40
80003850:	03e00008 	jr	ra
80003854:	00000000 	nop

80003858 <prvTimerTask>:
prvTimerTask():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:539
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
80003858:	27bdffe0 	addiu	sp,sp,-32
8000385c:	afbf001c 	sw	ra,28(sp)
80003860:	afbe0018 	sw	s8,24(sp)
80003864:	03a0f025 	move	s8,sp
80003868:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:562 (discriminator 1)

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
8000386c:	27c20014 	addiu	v0,s8,20
80003870:	00402025 	move	a0,v0
80003874:	0c000e73 	jal	800039cc <prvGetNextExpireTime>
80003878:	00000000 	nop
8000387c:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:566 (discriminator 1)

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
80003880:	8fc20014 	lw	v0,20(s8)
80003884:	8fc40010 	lw	a0,16(s8)
80003888:	00402825 	move	a1,v0
8000388c:	0c000e29 	jal	800038a4 <prvProcessTimerOrBlockTask>
80003890:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:569 (discriminator 1)

		/* Empty the command queue. */
		prvProcessReceivedCommands();
80003894:	0c000ef3 	jal	80003bcc <prvProcessReceivedCommands>
80003898:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:570 (discriminator 1)
	}
8000389c:	1000fff3 	b	8000386c <prvTimerTask+0x14>
800038a0:	00000000 	nop

800038a4 <prvProcessTimerOrBlockTask>:
prvProcessTimerOrBlockTask():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:575
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
800038a4:	27bdffd0 	addiu	sp,sp,-48
800038a8:	afbf002c 	sw	ra,44(sp)
800038ac:	afbe0028 	sw	s8,40(sp)
800038b0:	afb00024 	sw	s0,36(sp)
800038b4:	03a0f025 	move	s8,sp
800038b8:	afc40030 	sw	a0,48(s8)
800038bc:	afc50034 	sw	a1,52(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:579
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
800038c0:	0c001876 	jal	800061d8 <vTaskSuspendAll>
800038c4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:586
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
800038c8:	27c20018 	addiu	v0,s8,24
800038cc:	00402025 	move	a0,v0
800038d0:	0c000e8f 	jal	80003a3c <prvSampleTimeNow>
800038d4:	00000000 	nop
800038d8:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:587
		if( xTimerListsWereSwitched == pdFALSE )
800038dc:	8fc20018 	lw	v0,24(s8)
800038e0:	14400031 	bnez	v0,800039a8 <prvProcessTimerOrBlockTask+0x104>
800038e4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:590
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
800038e8:	8fc20034 	lw	v0,52(s8)
800038ec:	1440000e 	bnez	v0,80003928 <prvProcessTimerOrBlockTask+0x84>
800038f0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:590 (discriminator 1)
800038f4:	8fc30030 	lw	v1,48(s8)
800038f8:	8fc20010 	lw	v0,16(s8)
800038fc:	0043102b 	sltu	v0,v0,v1
80003900:	14400009 	bnez	v0,80003928 <prvProcessTimerOrBlockTask+0x84>
80003904:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:592
			{
				( void ) xTaskResumeAll();
80003908:	0c001881 	jal	80006204 <xTaskResumeAll>
8000390c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:593
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
80003910:	8fc40030 	lw	a0,48(s8)
80003914:	8fc50010 	lw	a1,16(s8)
80003918:	0c000dd9 	jal	80003764 <prvProcessExpiredTimer>
8000391c:	00000000 	nop
80003920:	10000023 	b	800039b0 <prvProcessTimerOrBlockTask+0x10c>
80003924:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:603
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
80003928:	8fc20034 	lw	v0,52(s8)
8000392c:	10400006 	beqz	v0,80003948 <prvProcessTimerOrBlockTask+0xa4>
80003930:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:607
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
80003934:	8f82809f 	lw	v0,-32609(gp)
80003938:	8c420000 	lw	v0,0(v0)
8000393c:	2c420001 	sltiu	v0,v0,1
80003940:	304200ff 	andi	v0,v0,0xff
80003944:	afc20034 	sw	v0,52(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:610
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
80003948:	8f8480a3 	lw	a0,-32605(gp)
8000394c:	8fc30030 	lw	v1,48(s8)
80003950:	8fc20010 	lw	v0,16(s8)
80003954:	00621023 	subu	v0,v1,v0
80003958:	00402825 	move	a1,v0
8000395c:	8fc60034 	lw	a2,52(s8)
80003960:	0c0027ea 	jal	80009fa8 <vQueueWaitForMessageRestricted>
80003964:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:612

				if( xTaskResumeAll() == pdFALSE )
80003968:	0c001881 	jal	80006204 <xTaskResumeAll>
8000396c:	00000000 	nop
80003970:	1440000f 	bnez	v0,800039b0 <prvProcessTimerOrBlockTask+0x10c>
80003974:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:618
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
80003978:	40026800 	mfc0	v0,c0_cause
8000397c:	00408025 	move	s0,v0
80003980:	02001025 	move	v0,s0
80003984:	afc20014 	sw	v0,20(s8)
80003988:	8fc20014 	lw	v0,20(s8)
8000398c:	34420100 	ori	v0,v0,0x100
80003990:	afc20014 	sw	v0,20(s8)
80003994:	8fc20014 	lw	v0,20(s8)
80003998:	40826000 	mtc0	v0,c0_status
8000399c:	000000c0 	ehb
800039a0:	10000003 	b	800039b0 <prvProcessTimerOrBlockTask+0x10c>
800039a4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:628
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
800039a8:	0c001881 	jal	80006204 <xTaskResumeAll>
800039ac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:631
		}
	}
}
800039b0:	03c0e825 	move	sp,s8
800039b4:	8fbf002c 	lw	ra,44(sp)
800039b8:	8fbe0028 	lw	s8,40(sp)
800039bc:	8fb00024 	lw	s0,36(sp)
800039c0:	27bd0030 	addiu	sp,sp,48
800039c4:	03e00008 	jr	ra
800039c8:	00000000 	nop

800039cc <prvGetNextExpireTime>:
prvGetNextExpireTime():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:635
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
800039cc:	27bdfff0 	addiu	sp,sp,-16
800039d0:	afbe000c 	sw	s8,12(sp)
800039d4:	03a0f025 	move	s8,sp
800039d8:	afc40010 	sw	a0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:645
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
800039dc:	8f82809b 	lw	v0,-32613(gp)
800039e0:	8c420000 	lw	v0,0(v0)
800039e4:	2c420001 	sltiu	v0,v0,1
800039e8:	304200ff 	andi	v0,v0,0xff
800039ec:	00401825 	move	v1,v0
800039f0:	8fc20010 	lw	v0,16(s8)
800039f4:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:646
	if( *pxListWasEmpty == pdFALSE )
800039f8:	8fc20010 	lw	v0,16(s8)
800039fc:	8c420000 	lw	v0,0(v0)
80003a00:	14400007 	bnez	v0,80003a20 <prvGetNextExpireTime+0x54>
80003a04:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:648
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
80003a08:	8f82809b 	lw	v0,-32613(gp)
80003a0c:	8c42000c 	lw	v0,12(v0)
80003a10:	8c420000 	lw	v0,0(v0)
80003a14:	afc20000 	sw	v0,0(s8)
80003a18:	10000002 	b	80003a24 <prvGetNextExpireTime+0x58>
80003a1c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:653
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
80003a20:	afc00000 	sw	zero,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:656
	}

	return xNextExpireTime;
80003a24:	8fc20000 	lw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:657
}
80003a28:	03c0e825 	move	sp,s8
80003a2c:	8fbe000c 	lw	s8,12(sp)
80003a30:	27bd0010 	addiu	sp,sp,16
80003a34:	03e00008 	jr	ra
80003a38:	00000000 	nop

80003a3c <prvSampleTimeNow>:
prvSampleTimeNow():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:661
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
80003a3c:	27bdffe0 	addiu	sp,sp,-32
80003a40:	afbf001c 	sw	ra,28(sp)
80003a44:	afbe0018 	sw	s8,24(sp)
80003a48:	03a0f025 	move	s8,sp
80003a4c:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:665
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
80003a50:	0c0018fd 	jal	800063f4 <xTaskGetTickCount>
80003a54:	00000000 	nop
80003a58:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:667

	if( xTimeNow < xLastTime )
80003a5c:	8f8280ab 	lw	v0,-32597(gp)
80003a60:	8fc30010 	lw	v1,16(s8)
80003a64:	0062102b 	sltu	v0,v1,v0
80003a68:	10400008 	beqz	v0,80003a8c <prvSampleTimeNow+0x50>
80003a6c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:669
	{
		prvSwitchTimerLists();
80003a70:	0c000f8b 	jal	80003e2c <prvSwitchTimerLists>
80003a74:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:670
		*pxTimerListsWereSwitched = pdTRUE;
80003a78:	8fc20020 	lw	v0,32(s8)
80003a7c:	24030001 	li	v1,1
80003a80:	ac430000 	sw	v1,0(v0)
80003a84:	10000003 	b	80003a94 <prvSampleTimeNow+0x58>
80003a88:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:674
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
80003a8c:	8fc20020 	lw	v0,32(s8)
80003a90:	ac400000 	sw	zero,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:677
	}

	xLastTime = xTimeNow;
80003a94:	8fc20010 	lw	v0,16(s8)
80003a98:	af8280ab 	sw	v0,-32597(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:679

	return xTimeNow;
80003a9c:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:680
}
80003aa0:	03c0e825 	move	sp,s8
80003aa4:	8fbf001c 	lw	ra,28(sp)
80003aa8:	8fbe0018 	lw	s8,24(sp)
80003aac:	27bd0020 	addiu	sp,sp,32
80003ab0:	03e00008 	jr	ra
80003ab4:	00000000 	nop

80003ab8 <prvInsertTimerInActiveList>:
prvInsertTimerInActiveList():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:684
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
80003ab8:	27bdffe0 	addiu	sp,sp,-32
80003abc:	afbf001c 	sw	ra,28(sp)
80003ac0:	afbe0018 	sw	s8,24(sp)
80003ac4:	03a0f025 	move	s8,sp
80003ac8:	afc40020 	sw	a0,32(s8)
80003acc:	afc50024 	sw	a1,36(s8)
80003ad0:	afc60028 	sw	a2,40(s8)
80003ad4:	afc7002c 	sw	a3,44(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:685
BaseType_t xProcessTimerNow = pdFALSE;
80003ad8:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:687

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
80003adc:	8fc20020 	lw	v0,32(s8)
80003ae0:	8fc30024 	lw	v1,36(s8)
80003ae4:	ac430004 	sw	v1,4(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:688
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
80003ae8:	8fc20020 	lw	v0,32(s8)
80003aec:	8fc30020 	lw	v1,32(s8)
80003af0:	ac430010 	sw	v1,16(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:690

	if( xNextExpiryTime <= xTimeNow )
80003af4:	8fc30024 	lw	v1,36(s8)
80003af8:	8fc20028 	lw	v0,40(s8)
80003afc:	0043102b 	sltu	v0,v0,v1
80003b00:	14400016 	bnez	v0,80003b5c <prvInsertTimerInActiveList+0xa4>
80003b04:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:694
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80003b08:	8fc30028 	lw	v1,40(s8)
80003b0c:	8fc2002c 	lw	v0,44(s8)
80003b10:	00621823 	subu	v1,v1,v0
80003b14:	8fc20020 	lw	v0,32(s8)
80003b18:	8c420018 	lw	v0,24(v0)
80003b1c:	0062102b 	sltu	v0,v1,v0
80003b20:	14400005 	bnez	v0,80003b38 <prvInsertTimerInActiveList+0x80>
80003b24:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:698
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
80003b28:	24020001 	li	v0,1
80003b2c:	afc20010 	sw	v0,16(s8)
80003b30:	1000001f 	b	80003bb0 <prvInsertTimerInActiveList+0xf8>
80003b34:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:702
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
80003b38:	8f83809f 	lw	v1,-32609(gp)
80003b3c:	8fc20020 	lw	v0,32(s8)
80003b40:	24420004 	addiu	v0,v0,4
80003b44:	00602025 	move	a0,v1
80003b48:	00402825 	move	a1,v0
80003b4c:	0c002937 	jal	8000a4dc <vListInsert>
80003b50:	00000000 	nop
80003b54:	10000016 	b	80003bb0 <prvInsertTimerInActiveList+0xf8>
80003b58:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:707
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
80003b5c:	8fc30028 	lw	v1,40(s8)
80003b60:	8fc2002c 	lw	v0,44(s8)
80003b64:	0062102b 	sltu	v0,v1,v0
80003b68:	1040000a 	beqz	v0,80003b94 <prvInsertTimerInActiveList+0xdc>
80003b6c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:707 (discriminator 1)
80003b70:	8fc30024 	lw	v1,36(s8)
80003b74:	8fc2002c 	lw	v0,44(s8)
80003b78:	0062102b 	sltu	v0,v1,v0
80003b7c:	14400005 	bnez	v0,80003b94 <prvInsertTimerInActiveList+0xdc>
80003b80:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:712
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
80003b84:	24020001 	li	v0,1
80003b88:	afc20010 	sw	v0,16(s8)
80003b8c:	10000008 	b	80003bb0 <prvInsertTimerInActiveList+0xf8>
80003b90:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:716
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
80003b94:	8f83809b 	lw	v1,-32613(gp)
80003b98:	8fc20020 	lw	v0,32(s8)
80003b9c:	24420004 	addiu	v0,v0,4
80003ba0:	00602025 	move	a0,v1
80003ba4:	00402825 	move	a1,v0
80003ba8:	0c002937 	jal	8000a4dc <vListInsert>
80003bac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:720
		}
	}

	return xProcessTimerNow;
80003bb0:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:721
}
80003bb4:	03c0e825 	move	sp,s8
80003bb8:	8fbf001c 	lw	ra,28(sp)
80003bbc:	8fbe0018 	lw	s8,24(sp)
80003bc0:	27bd0020 	addiu	sp,sp,32
80003bc4:	03e00008 	jr	ra
80003bc8:	00000000 	nop

80003bcc <prvProcessReceivedCommands>:
prvProcessReceivedCommands():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:725
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
80003bcc:	27bdffb8 	addiu	sp,sp,-72
80003bd0:	afbf0044 	sw	ra,68(sp)
80003bd4:	afbe0040 	sw	s8,64(sp)
80003bd8:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:731
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
80003bdc:	10000083 	b	80003dec <prvProcessReceivedCommands+0x220>
80003be0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:737
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
80003be4:	8fc20028 	lw	v0,40(s8)
80003be8:	04410015 	bgez	v0,80003c40 <prvProcessReceivedCommands+0x74>
80003bec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:739
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
80003bf0:	27c20028 	addiu	v0,s8,40
80003bf4:	24420004 	addiu	v0,v0,4
80003bf8:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:743

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
80003bfc:	8fc20018 	lw	v0,24(s8)
80003c00:	14400006 	bnez	v0,80003c1c <prvProcessReceivedCommands+0x50>
80003c04:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:743 (discriminator 1)
80003c08:	3c028001 	lui	v0,0x8001
80003c0c:	2444bcec 	addiu	a0,v0,-17172
80003c10:	240502e7 	li	a1,743
80003c14:	0c000417 	jal	8000105c <vAssertCalled>
80003c18:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:746

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
80003c1c:	8fc20018 	lw	v0,24(s8)
80003c20:	8c420000 	lw	v0,0(v0)
80003c24:	8fc30018 	lw	v1,24(s8)
80003c28:	8c640004 	lw	a0,4(v1)
80003c2c:	8fc30018 	lw	v1,24(s8)
80003c30:	8c630008 	lw	v1,8(v1)
80003c34:	00602825 	move	a1,v1
80003c38:	0040f809 	jalr	v0
80003c3c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:757
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
80003c40:	8fc20028 	lw	v0,40(s8)
80003c44:	04400069 	bltz	v0,80003dec <prvProcessReceivedCommands+0x220>
80003c48:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:761
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
80003c4c:	8fc20030 	lw	v0,48(s8)
80003c50:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:763

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
80003c54:	8fc2001c 	lw	v0,28(s8)
80003c58:	8c420014 	lw	v0,20(v0)
80003c5c:	10400006 	beqz	v0,80003c78 <prvProcessReceivedCommands+0xac>
80003c60:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:766
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
80003c64:	8fc2001c 	lw	v0,28(s8)
80003c68:	24420004 	addiu	v0,v0,4
80003c6c:	00402025 	move	a0,v0
80003c70:	0c002972 	jal	8000a5c8 <uxListRemove>
80003c74:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:781
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
80003c78:	27c20038 	addiu	v0,s8,56
80003c7c:	00402025 	move	a0,v0
80003c80:	0c000e8f 	jal	80003a3c <prvSampleTimeNow>
80003c84:	00000000 	nop
80003c88:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:783

			switch( xMessage.xMessageID )
80003c8c:	8fc20028 	lw	v0,40(s8)
80003c90:	2c43000a 	sltiu	v1,v0,10
80003c94:	10600054 	beqz	v1,80003de8 <prvProcessReceivedCommands+0x21c>
80003c98:	00000000 	nop
80003c9c:	00021880 	sll	v1,v0,0x2
80003ca0:	3c028001 	lui	v0,0x8001
80003ca4:	2442bd04 	addiu	v0,v0,-17148
80003ca8:	00621021 	addu	v0,v1,v0
80003cac:	8c420000 	lw	v0,0(v0)
80003cb0:	00400008 	jr	v0
80003cb4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:791
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
80003cb8:	8fc3002c 	lw	v1,44(s8)
80003cbc:	8fc2001c 	lw	v0,28(s8)
80003cc0:	8c420018 	lw	v0,24(v0)
80003cc4:	00621821 	addu	v1,v1,v0
80003cc8:	8fc2002c 	lw	v0,44(s8)
80003ccc:	8fc4001c 	lw	a0,28(s8)
80003cd0:	00602825 	move	a1,v1
80003cd4:	8fc60020 	lw	a2,32(s8)
80003cd8:	00403825 	move	a3,v0
80003cdc:	0c000eae 	jal	80003ab8 <prvInsertTimerInActiveList>
80003ce0:	00000000 	nop
80003ce4:	10400021 	beqz	v0,80003d6c <prvProcessReceivedCommands+0x1a0>
80003ce8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:795
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
80003cec:	8fc2001c 	lw	v0,28(s8)
80003cf0:	8c420024 	lw	v0,36(v0)
80003cf4:	8fc4001c 	lw	a0,28(s8)
80003cf8:	0040f809 	jalr	v0
80003cfc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:798
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
80003d00:	8fc2001c 	lw	v0,28(s8)
80003d04:	8c43001c 	lw	v1,28(v0)
80003d08:	24020001 	li	v0,1
80003d0c:	14620017 	bne	v1,v0,80003d6c <prvProcessReceivedCommands+0x1a0>
80003d10:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:800
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
80003d14:	8fc3002c 	lw	v1,44(s8)
80003d18:	8fc2001c 	lw	v0,28(s8)
80003d1c:	8c420018 	lw	v0,24(v0)
80003d20:	00621021 	addu	v0,v1,v0
80003d24:	afa00010 	sw	zero,16(sp)
80003d28:	8fc4001c 	lw	a0,28(s8)
80003d2c:	00002825 	move	a1,zero
80003d30:	00403025 	move	a2,v0
80003d34:	00003825 	move	a3,zero
80003d38:	0c000d35 	jal	800034d4 <xTimerGenericCommand>
80003d3c:	00000000 	nop
80003d40:	afc20024 	sw	v0,36(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:801
							configASSERT( xResult );
80003d44:	8fc20024 	lw	v0,36(s8)
80003d48:	14400008 	bnez	v0,80003d6c <prvProcessReceivedCommands+0x1a0>
80003d4c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:801 (discriminator 1)
80003d50:	3c028001 	lui	v0,0x8001
80003d54:	2444bcec 	addiu	a0,v0,-17172
80003d58:	24050321 	li	a1,801
80003d5c:	0c000417 	jal	8000105c <vAssertCalled>
80003d60:	00000000 	nop
80003d64:	10000001 	b	80003d6c <prvProcessReceivedCommands+0x1a0>
80003d68:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:813 (discriminator 2)
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
80003d6c:	1000001f 	b	80003dec <prvProcessReceivedCommands+0x220>
80003d70:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:823
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
80003d74:	8fc3002c 	lw	v1,44(s8)
80003d78:	8fc2001c 	lw	v0,28(s8)
80003d7c:	ac430018 	sw	v1,24(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:824
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
80003d80:	8fc2001c 	lw	v0,28(s8)
80003d84:	8c420018 	lw	v0,24(v0)
80003d88:	14400006 	bnez	v0,80003da4 <prvProcessReceivedCommands+0x1d8>
80003d8c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:824 (discriminator 1)
80003d90:	3c028001 	lui	v0,0x8001
80003d94:	2444bcec 	addiu	a0,v0,-17172
80003d98:	24050338 	li	a1,824
80003d9c:	0c000417 	jal	8000105c <vAssertCalled>
80003da0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:832
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
80003da4:	8fc2001c 	lw	v0,28(s8)
80003da8:	8c430018 	lw	v1,24(v0)
80003dac:	8fc20020 	lw	v0,32(s8)
80003db0:	00621021 	addu	v0,v1,v0
80003db4:	8fc4001c 	lw	a0,28(s8)
80003db8:	00402825 	move	a1,v0
80003dbc:	8fc60020 	lw	a2,32(s8)
80003dc0:	8fc70020 	lw	a3,32(s8)
80003dc4:	0c000eae 	jal	80003ab8 <prvInsertTimerInActiveList>
80003dc8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:833
					break;
80003dcc:	10000007 	b	80003dec <prvProcessReceivedCommands+0x220>
80003dd0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:843
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
80003dd4:	8fc4001c 	lw	a0,28(s8)
80003dd8:	0c002b7a 	jal	8000ade8 <vPortFree>
80003ddc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:860
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
80003de0:	10000002 	b	80003dec <prvProcessReceivedCommands+0x220>
80003de4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:864

				default	:
					/* Don't expect to get here. */
					break;
80003de8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:731
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
80003dec:	8f8380a3 	lw	v1,-32605(gp)
80003df0:	27c20028 	addiu	v0,s8,40
80003df4:	00602025 	move	a0,v1
80003df8:	00402825 	move	a1,v0
80003dfc:	00003025 	move	a2,zero
80003e00:	00003825 	move	a3,zero
80003e04:	0c002461 	jal	80009184 <xQueueGenericReceive>
80003e08:	00000000 	nop
80003e0c:	1440ff75 	bnez	v0,80003be4 <prvProcessReceivedCommands+0x18>
80003e10:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:868
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
80003e14:	03c0e825 	move	sp,s8
80003e18:	8fbf0044 	lw	ra,68(sp)
80003e1c:	8fbe0040 	lw	s8,64(sp)
80003e20:	27bd0048 	addiu	sp,sp,72
80003e24:	03e00008 	jr	ra
80003e28:	00000000 	nop

80003e2c <prvSwitchTimerLists>:
prvSwitchTimerLists():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:872
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
80003e2c:	27bdffc8 	addiu	sp,sp,-56
80003e30:	afbf0034 	sw	ra,52(sp)
80003e34:	afbe0030 	sw	s8,48(sp)
80003e38:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:882

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
80003e3c:	10000041 	b	80003f44 <prvSwitchTimerLists+0x118>
80003e40:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:884
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
80003e44:	8f82809b 	lw	v0,-32613(gp)
80003e48:	8c42000c 	lw	v0,12(v0)
80003e4c:	8c420000 	lw	v0,0(v0)
80003e50:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:887

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
80003e54:	8f82809b 	lw	v0,-32613(gp)
80003e58:	8c42000c 	lw	v0,12(v0)
80003e5c:	8c42000c 	lw	v0,12(v0)
80003e60:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:888
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
80003e64:	8fc2001c 	lw	v0,28(s8)
80003e68:	24420004 	addiu	v0,v0,4
80003e6c:	00402025 	move	a0,v0
80003e70:	0c002972 	jal	8000a5c8 <uxListRemove>
80003e74:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:894
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
80003e78:	8fc2001c 	lw	v0,28(s8)
80003e7c:	8c420024 	lw	v0,36(v0)
80003e80:	8fc4001c 	lw	a0,28(s8)
80003e84:	0040f809 	jalr	v0
80003e88:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:896

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
80003e8c:	8fc2001c 	lw	v0,28(s8)
80003e90:	8c43001c 	lw	v1,28(v0)
80003e94:	24020001 	li	v0,1
80003e98:	1462002a 	bne	v1,v0,80003f44 <prvSwitchTimerLists+0x118>
80003e9c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:904
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
80003ea0:	8fc2001c 	lw	v0,28(s8)
80003ea4:	8c430018 	lw	v1,24(v0)
80003ea8:	8fc20018 	lw	v0,24(s8)
80003eac:	00621021 	addu	v0,v1,v0
80003eb0:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:905
			if( xReloadTime > xNextExpireTime )
80003eb4:	8fc30020 	lw	v1,32(s8)
80003eb8:	8fc20018 	lw	v0,24(s8)
80003ebc:	0043102b 	sltu	v0,v0,v1
80003ec0:	10400010 	beqz	v0,80003f04 <prvSwitchTimerLists+0xd8>
80003ec4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:907
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
80003ec8:	8fc2001c 	lw	v0,28(s8)
80003ecc:	8fc30020 	lw	v1,32(s8)
80003ed0:	ac430004 	sw	v1,4(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:908
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
80003ed4:	8fc2001c 	lw	v0,28(s8)
80003ed8:	8fc3001c 	lw	v1,28(s8)
80003edc:	ac430010 	sw	v1,16(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:909
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
80003ee0:	8f83809b 	lw	v1,-32613(gp)
80003ee4:	8fc2001c 	lw	v0,28(s8)
80003ee8:	24420004 	addiu	v0,v0,4
80003eec:	00602025 	move	a0,v1
80003ef0:	00402825 	move	a1,v0
80003ef4:	0c002937 	jal	8000a4dc <vListInsert>
80003ef8:	00000000 	nop
80003efc:	10000011 	b	80003f44 <prvSwitchTimerLists+0x118>
80003f00:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:913
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
80003f04:	afa00010 	sw	zero,16(sp)
80003f08:	8fc4001c 	lw	a0,28(s8)
80003f0c:	00002825 	move	a1,zero
80003f10:	8fc60018 	lw	a2,24(s8)
80003f14:	00003825 	move	a3,zero
80003f18:	0c000d35 	jal	800034d4 <xTimerGenericCommand>
80003f1c:	00000000 	nop
80003f20:	afc20024 	sw	v0,36(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:914
				configASSERT( xResult );
80003f24:	8fc20024 	lw	v0,36(s8)
80003f28:	14400006 	bnez	v0,80003f44 <prvSwitchTimerLists+0x118>
80003f2c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:914 (discriminator 1)
80003f30:	3c028001 	lui	v0,0x8001
80003f34:	2444bcec 	addiu	a0,v0,-17172
80003f38:	24050392 	li	a1,914
80003f3c:	0c000417 	jal	8000105c <vAssertCalled>
80003f40:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:882

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
80003f44:	8f82809b 	lw	v0,-32613(gp)
80003f48:	8c420000 	lw	v0,0(v0)
80003f4c:	1440ffbd 	bnez	v0,80003e44 <prvSwitchTimerLists+0x18>
80003f50:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:924
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
80003f54:	8f82809b 	lw	v0,-32613(gp)
80003f58:	afc20028 	sw	v0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:925
	pxCurrentTimerList = pxOverflowTimerList;
80003f5c:	8f82809f 	lw	v0,-32609(gp)
80003f60:	af82809b 	sw	v0,-32613(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:926
	pxOverflowTimerList = pxTemp;
80003f64:	8fc20028 	lw	v0,40(s8)
80003f68:	af82809f 	sw	v0,-32609(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:927
}
80003f6c:	03c0e825 	move	sp,s8
80003f70:	8fbf0034 	lw	ra,52(sp)
80003f74:	8fbe0030 	lw	s8,48(sp)
80003f78:	27bd0038 	addiu	sp,sp,56
80003f7c:	03e00008 	jr	ra
80003f80:	00000000 	nop

80003f84 <prvCheckForValidListAndQueue>:
prvCheckForValidListAndQueue():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:931
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
80003f84:	27bdffe8 	addiu	sp,sp,-24
80003f88:	afbf0014 	sw	ra,20(sp)
80003f8c:	afbe0010 	sw	s8,16(sp)
80003f90:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:935
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
80003f94:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80003f98:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:937
	{
		if( xTimerQueue == NULL )
80003f9c:	8f8280a3 	lw	v0,-32605(gp)
80003fa0:	14400015 	bnez	v0,80003ff8 <prvCheckForValidListAndQueue+0x74>
80003fa4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:939
		{
			vListInitialise( &xActiveTimerList1 );
80003fa8:	3c028001 	lui	v0,0x8001
80003fac:	2444c380 	addiu	a0,v0,-15488
80003fb0:	0c0028ef 	jal	8000a3bc <vListInitialise>
80003fb4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:940
			vListInitialise( &xActiveTimerList2 );
80003fb8:	3c028001 	lui	v0,0x8001
80003fbc:	2444c394 	addiu	a0,v0,-15468
80003fc0:	0c0028ef 	jal	8000a3bc <vListInitialise>
80003fc4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:941
			pxCurrentTimerList = &xActiveTimerList1;
80003fc8:	3c028001 	lui	v0,0x8001
80003fcc:	2442c380 	addiu	v0,v0,-15488
80003fd0:	af82809b 	sw	v0,-32613(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:942
			pxOverflowTimerList = &xActiveTimerList2;
80003fd4:	3c028001 	lui	v0,0x8001
80003fd8:	2442c394 	addiu	v0,v0,-15468
80003fdc:	af82809f 	sw	v0,-32609(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:955

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
80003fe0:	24040005 	li	a0,5
80003fe4:	24050010 	li	a1,16
80003fe8:	00003025 	move	a2,zero
80003fec:	0c00212f 	jal	800084bc <xQueueGenericCreate>
80003ff0:	00000000 	nop
80003ff4:	af8280a3 	sw	v0,-32605(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:977
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
80003ff8:	0c001de3 	jal	8000778c <vTaskExitCritical>
80003ffc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:978
}
80004000:	03c0e825 	move	sp,s8
80004004:	8fbf0014 	lw	ra,20(sp)
80004008:	8fbe0010 	lw	s8,16(sp)
8000400c:	27bd0018 	addiu	sp,sp,24
80004010:	03e00008 	jr	ra
80004014:	00000000 	nop

80004018 <xTimerIsTimerActive>:
xTimerIsTimerActive():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:982
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
80004018:	27bdffe0 	addiu	sp,sp,-32
8000401c:	afbf001c 	sw	ra,28(sp)
80004020:	afbe0018 	sw	s8,24(sp)
80004024:	03a0f025 	move	s8,sp
80004028:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:984
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
8000402c:	8fc20020 	lw	v0,32(s8)
80004030:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:986

	configASSERT( xTimer );
80004034:	8fc20020 	lw	v0,32(s8)
80004038:	14400006 	bnez	v0,80004054 <xTimerIsTimerActive+0x3c>
8000403c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:986 (discriminator 1)
80004040:	3c028001 	lui	v0,0x8001
80004044:	2444bcec 	addiu	a0,v0,-17172
80004048:	240503da 	li	a1,986
8000404c:	0c000417 	jal	8000105c <vAssertCalled>
80004050:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:989

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
80004054:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80004058:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:994
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
8000405c:	8fc20010 	lw	v0,16(s8)
80004060:	8c420014 	lw	v0,20(v0)
80004064:	0002102b 	sltu	v0,zero,v0
80004068:	304200ff 	andi	v0,v0,0xff
8000406c:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:996
	}
	taskEXIT_CRITICAL();
80004070:	0c001de3 	jal	8000778c <vTaskExitCritical>
80004074:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:998

	return xTimerIsInActiveList;
80004078:	8fc20014 	lw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:999
} /*lint !e818 Can't be pointer to const due to the typedef. */
8000407c:	03c0e825 	move	sp,s8
80004080:	8fbf001c 	lw	ra,28(sp)
80004084:	8fbe0018 	lw	s8,24(sp)
80004088:	27bd0020 	addiu	sp,sp,32
8000408c:	03e00008 	jr	ra
80004090:	00000000 	nop

80004094 <pvTimerGetTimerID>:
pvTimerGetTimerID():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1003
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
80004094:	27bdffe0 	addiu	sp,sp,-32
80004098:	afbf001c 	sw	ra,28(sp)
8000409c:	afbe0018 	sw	s8,24(sp)
800040a0:	03a0f025 	move	s8,sp
800040a4:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1004
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
800040a8:	8fc20020 	lw	v0,32(s8)
800040ac:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1007
void *pvReturn;

	configASSERT( xTimer );
800040b0:	8fc20020 	lw	v0,32(s8)
800040b4:	14400006 	bnez	v0,800040d0 <pvTimerGetTimerID+0x3c>
800040b8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1007 (discriminator 1)
800040bc:	3c028001 	lui	v0,0x8001
800040c0:	2444bcec 	addiu	a0,v0,-17172
800040c4:	240503ef 	li	a1,1007
800040c8:	0c000417 	jal	8000105c <vAssertCalled>
800040cc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1009

	taskENTER_CRITICAL();
800040d0:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
800040d4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1011
	{
		pvReturn = pxTimer->pvTimerID;
800040d8:	8fc20010 	lw	v0,16(s8)
800040dc:	8c420020 	lw	v0,32(v0)
800040e0:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1013
	}
	taskEXIT_CRITICAL();
800040e4:	0c001de3 	jal	8000778c <vTaskExitCritical>
800040e8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1015

	return pvReturn;
800040ec:	8fc20014 	lw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1016
}
800040f0:	03c0e825 	move	sp,s8
800040f4:	8fbf001c 	lw	ra,28(sp)
800040f8:	8fbe0018 	lw	s8,24(sp)
800040fc:	27bd0020 	addiu	sp,sp,32
80004100:	03e00008 	jr	ra
80004104:	00000000 	nop

80004108 <vTimerSetTimerID>:
vTimerSetTimerID():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1020
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
80004108:	27bdffe0 	addiu	sp,sp,-32
8000410c:	afbf001c 	sw	ra,28(sp)
80004110:	afbe0018 	sw	s8,24(sp)
80004114:	03a0f025 	move	s8,sp
80004118:	afc40020 	sw	a0,32(s8)
8000411c:	afc50024 	sw	a1,36(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1021
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
80004120:	8fc20020 	lw	v0,32(s8)
80004124:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1023

	configASSERT( xTimer );
80004128:	8fc20020 	lw	v0,32(s8)
8000412c:	14400006 	bnez	v0,80004148 <vTimerSetTimerID+0x40>
80004130:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1023 (discriminator 1)
80004134:	3c028001 	lui	v0,0x8001
80004138:	2444bcec 	addiu	a0,v0,-17172
8000413c:	240503ff 	li	a1,1023
80004140:	0c000417 	jal	8000105c <vAssertCalled>
80004144:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1025

	taskENTER_CRITICAL();
80004148:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
8000414c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1027
	{
		pxTimer->pvTimerID = pvNewID;
80004150:	8fc20010 	lw	v0,16(s8)
80004154:	8fc30024 	lw	v1,36(s8)
80004158:	ac430020 	sw	v1,32(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1029
	}
	taskEXIT_CRITICAL();
8000415c:	0c001de3 	jal	8000778c <vTaskExitCritical>
80004160:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1030
}
80004164:	03c0e825 	move	sp,s8
80004168:	8fbf001c 	lw	ra,28(sp)
8000416c:	8fbe0018 	lw	s8,24(sp)
80004170:	27bd0020 	addiu	sp,sp,32
80004174:	03e00008 	jr	ra
80004178:	00000000 	nop

8000417c <xTimerPendFunctionCallFromISR>:
xTimerPendFunctionCallFromISR():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1036
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
8000417c:	27bdffd0 	addiu	sp,sp,-48
80004180:	afbf002c 	sw	ra,44(sp)
80004184:	afbe0028 	sw	s8,40(sp)
80004188:	03a0f025 	move	s8,sp
8000418c:	afc40030 	sw	a0,48(s8)
80004190:	afc50034 	sw	a1,52(s8)
80004194:	afc60038 	sw	a2,56(s8)
80004198:	afc7003c 	sw	a3,60(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1042
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
8000419c:	2402fffe 	li	v0,-2
800041a0:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1043
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
800041a4:	8fc20030 	lw	v0,48(s8)
800041a8:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1044
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
800041ac:	8fc20034 	lw	v0,52(s8)
800041b0:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1045
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
800041b4:	8fc20038 	lw	v0,56(s8)
800041b8:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1047

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
800041bc:	8f8380a3 	lw	v1,-32605(gp)
800041c0:	27c20014 	addiu	v0,s8,20
800041c4:	00602025 	move	a0,v1
800041c8:	00402825 	move	a1,v0
800041cc:	8fc6003c 	lw	a2,60(s8)
800041d0:	00003825 	move	a3,zero
800041d4:	0c002358 	jal	80008d60 <xQueueGenericSendFromISR>
800041d8:	00000000 	nop
800041dc:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1051

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
800041e0:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1052
	}
800041e4:	03c0e825 	move	sp,s8
800041e8:	8fbf002c 	lw	ra,44(sp)
800041ec:	8fbe0028 	lw	s8,40(sp)
800041f0:	27bd0030 	addiu	sp,sp,48
800041f4:	03e00008 	jr	ra
800041f8:	00000000 	nop

800041fc <xTimerPendFunctionCall>:
xTimerPendFunctionCall():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1060
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, TickType_t xTicksToWait )
	{
800041fc:	27bdffd0 	addiu	sp,sp,-48
80004200:	afbf002c 	sw	ra,44(sp)
80004204:	afbe0028 	sw	s8,40(sp)
80004208:	03a0f025 	move	s8,sp
8000420c:	afc40030 	sw	a0,48(s8)
80004210:	afc50034 	sw	a1,52(s8)
80004214:	afc60038 	sw	a2,56(s8)
80004218:	afc7003c 	sw	a3,60(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1067
	BaseType_t xReturn;

		/* This function can only be called after a timer has been created or
		after the scheduler has been started because, until then, the timer
		queue does not exist. */
		configASSERT( xTimerQueue );
8000421c:	8f8280a3 	lw	v0,-32605(gp)
80004220:	14400006 	bnez	v0,8000423c <xTimerPendFunctionCall+0x40>
80004224:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1067 (discriminator 1)
80004228:	3c028001 	lui	v0,0x8001
8000422c:	2444bcec 	addiu	a0,v0,-17172
80004230:	2405042b 	li	a1,1067
80004234:	0c000417 	jal	8000105c <vAssertCalled>
80004238:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1071

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
8000423c:	2402ffff 	li	v0,-1
80004240:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1072
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
80004244:	8fc20030 	lw	v0,48(s8)
80004248:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1073
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
8000424c:	8fc20034 	lw	v0,52(s8)
80004250:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1074
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
80004254:	8fc20038 	lw	v0,56(s8)
80004258:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1076

		xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
8000425c:	8f8380a3 	lw	v1,-32605(gp)
80004260:	27c20014 	addiu	v0,s8,20
80004264:	00602025 	move	a0,v1
80004268:	00402825 	move	a1,v0
8000426c:	8fc6003c 	lw	a2,60(s8)
80004270:	00003825 	move	a3,zero
80004274:	0c002254 	jal	80008950 <xQueueGenericSend>
80004278:	00000000 	nop
8000427c:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1080

		tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
80004280:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/timers.c:1081
	}
80004284:	03c0e825 	move	sp,s8
80004288:	8fbf002c 	lw	ra,44(sp)
8000428c:	8fbe0028 	lw	s8,40(sp)
80004290:	27bd0030 	addiu	sp,sp,48
80004294:	03e00008 	jr	ra
80004298:	00000000 	nop

8000429c <xEventGroupCreate>:
xEventGroupCreate():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:175
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
8000429c:	27bdffe0 	addiu	sp,sp,-32
800042a0:	afbf001c 	sw	ra,28(sp)
800042a4:	afbe0018 	sw	s8,24(sp)
800042a8:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:179
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
800042ac:	24040018 	li	a0,24
800042b0:	0c002af0 	jal	8000abc0 <pvPortMalloc>
800042b4:	00000000 	nop
800042b8:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:181

		if( pxEventBits != NULL )
800042bc:	8fc20010 	lw	v0,16(s8)
800042c0:	10400008 	beqz	v0,800042e4 <xEventGroupCreate+0x48>
800042c4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:183
		{
			pxEventBits->uxEventBits = 0;
800042c8:	8fc20010 	lw	v0,16(s8)
800042cc:	ac400000 	sw	zero,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:184
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
800042d0:	8fc20010 	lw	v0,16(s8)
800042d4:	24420004 	addiu	v0,v0,4
800042d8:	00402025 	move	a0,v0
800042dc:	0c0028ef 	jal	8000a3bc <vListInitialise>
800042e0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:202
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
800042e4:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:203
	}
800042e8:	03c0e825 	move	sp,s8
800042ec:	8fbf001c 	lw	ra,28(sp)
800042f0:	8fbe0018 	lw	s8,24(sp)
800042f4:	27bd0020 	addiu	sp,sp,32
800042f8:	03e00008 	jr	ra
800042fc:	00000000 	nop

80004300 <xEventGroupSync>:
xEventGroupSync():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:209

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
80004300:	27bdffd0 	addiu	sp,sp,-48
80004304:	afbf002c 	sw	ra,44(sp)
80004308:	afbe0028 	sw	s8,40(sp)
8000430c:	03a0f025 	move	s8,sp
80004310:	afc40030 	sw	a0,48(s8)
80004314:	afc50034 	sw	a1,52(s8)
80004318:	afc60038 	sw	a2,56(s8)
8000431c:	afc7003c 	sw	a3,60(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:211
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
80004320:	8fc20030 	lw	v0,48(s8)
80004324:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:213
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
80004328:	afc00018 	sw	zero,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:215

	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
8000432c:	8fc20038 	lw	v0,56(s8)
80004330:	7c02b804 	ins	v0,zero,0x0,0x18
80004334:	10400006 	beqz	v0,80004350 <xEventGroupSync+0x50>
80004338:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:215 (discriminator 1)
8000433c:	3c028001 	lui	v0,0x8001
80004340:	2444bd2c 	addiu	a0,v0,-17108
80004344:	240500d7 	li	a1,215
80004348:	0c000417 	jal	8000105c <vAssertCalled>
8000434c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:216
	configASSERT( uxBitsToWaitFor != 0 );
80004350:	8fc20038 	lw	v0,56(s8)
80004354:	14400006 	bnez	v0,80004370 <xEventGroupSync+0x70>
80004358:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:216 (discriminator 1)
8000435c:	3c028001 	lui	v0,0x8001
80004360:	2444bd2c 	addiu	a0,v0,-17108
80004364:	240500d8 	li	a1,216
80004368:	0c000417 	jal	8000105c <vAssertCalled>
8000436c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:219
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
80004370:	0c001cb8 	jal	800072e0 <xTaskGetSchedulerState>
80004374:	00000000 	nop
80004378:	14400004 	bnez	v0,8000438c <xEventGroupSync+0x8c>
8000437c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:219 (discriminator 2)
80004380:	8fc2003c 	lw	v0,60(s8)
80004384:	14400004 	bnez	v0,80004398 <xEventGroupSync+0x98>
80004388:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:219 (discriminator 3)
8000438c:	24020001 	li	v0,1
80004390:	10000002 	b	8000439c <xEventGroupSync+0x9c>
80004394:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:219 (discriminator 4)
80004398:	00001025 	move	v0,zero
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:219 (discriminator 6)
8000439c:	14400006 	bnez	v0,800043b8 <xEventGroupSync+0xb8>
800043a0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:219 (discriminator 7)
800043a4:	3c028001 	lui	v0,0x8001
800043a8:	2444bd2c 	addiu	a0,v0,-17108
800043ac:	240500db 	li	a1,219
800043b0:	0c000417 	jal	8000105c <vAssertCalled>
800043b4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:223
	}
	#endif

	vTaskSuspendAll();
800043b8:	0c001876 	jal	800061d8 <vTaskSuspendAll>
800043bc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:225
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
800043c0:	8fc20014 	lw	v0,20(s8)
800043c4:	8c420000 	lw	v0,0(v0)
800043c8:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:227

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
800043cc:	8fc40030 	lw	a0,48(s8)
800043d0:	8fc50034 	lw	a1,52(s8)
800043d4:	0c001250 	jal	80004940 <xEventGroupSetBits>
800043d8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:229

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
800043dc:	8fc3001c 	lw	v1,28(s8)
800043e0:	8fc20034 	lw	v0,52(s8)
800043e4:	00621825 	or	v1,v1,v0
800043e8:	8fc20038 	lw	v0,56(s8)
800043ec:	00621824 	and	v1,v1,v0
800043f0:	8fc20038 	lw	v0,56(s8)
800043f4:	1462000f 	bne	v1,v0,80004434 <xEventGroupSync+0x134>
800043f8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:232
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
800043fc:	8fc3001c 	lw	v1,28(s8)
80004400:	8fc20034 	lw	v0,52(s8)
80004404:	00621025 	or	v0,v1,v0
80004408:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:236

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
8000440c:	8fc20014 	lw	v0,20(s8)
80004410:	8c430000 	lw	v1,0(v0)
80004414:	8fc20038 	lw	v0,56(s8)
80004418:	00021027 	nor	v0,zero,v0
8000441c:	00621824 	and	v1,v1,v0
80004420:	8fc20014 	lw	v0,20(s8)
80004424:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:238

			xTicksToWait = 0;
80004428:	afc0003c 	sw	zero,60(s8)
8000442c:	10000013 	b	8000447c <xEventGroupSync+0x17c>
80004430:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:242
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
80004434:	8fc2003c 	lw	v0,60(s8)
80004438:	1040000d 	beqz	v0,80004470 <xEventGroupSync+0x170>
8000443c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:249
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
80004440:	8fc20014 	lw	v0,20(s8)
80004444:	24440004 	addiu	a0,v0,4
80004448:	8fc30038 	lw	v1,56(s8)
8000444c:	3c020500 	lui	v0,0x500
80004450:	00621025 	or	v0,v1,v0
80004454:	00402825 	move	a1,v0
80004458:	8fc6003c 	lw	a2,60(s8)
8000445c:	0c001a5a 	jal	80006968 <vTaskPlaceOnUnorderedEventList>
80004460:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:255

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
80004464:	afc00010 	sw	zero,16(s8)
80004468:	10000004 	b	8000447c <xEventGroupSync+0x17c>
8000446c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:261
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
80004470:	8fc20014 	lw	v0,20(s8)
80004474:	8c420000 	lw	v0,0(v0)
80004478:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:265
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
8000447c:	0c001881 	jal	80006204 <xTaskResumeAll>
80004480:	00000000 	nop
80004484:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:267

	if( xTicksToWait != ( TickType_t ) 0 )
80004488:	8fc2003c 	lw	v0,60(s8)
8000448c:	1040002f 	beqz	v0,8000454c <xEventGroupSync+0x24c>
80004490:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:269
	{
		if( xAlreadyYielded == pdFALSE )
80004494:	8fc20020 	lw	v0,32(s8)
80004498:	1440000b 	bnez	v0,800044c8 <xEventGroupSync+0x1c8>
8000449c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:271
		{
			portYIELD_WITHIN_API();
800044a0:	40026800 	mfc0	v0,c0_cause
800044a4:	0040f825 	move	ra,v0
800044a8:	03e01025 	move	v0,ra
800044ac:	afc20024 	sw	v0,36(s8)
800044b0:	8fc20024 	lw	v0,36(s8)
800044b4:	34420100 	ori	v0,v0,0x100
800044b8:	afc20024 	sw	v0,36(s8)
800044bc:	8fc20024 	lw	v0,36(s8)
800044c0:	40826000 	mtc0	v0,c0_status
800044c4:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:282

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
800044c8:	0c001e06 	jal	80007818 <uxTaskResetEventItemValue>
800044cc:	00000000 	nop
800044d0:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:284

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
800044d4:	8fc30010 	lw	v1,16(s8)
800044d8:	3c020200 	lui	v0,0x200
800044dc:	00621024 	and	v0,v1,v0
800044e0:	14400017 	bnez	v0,80004540 <xEventGroupSync+0x240>
800044e4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:287
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
800044e8:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
800044ec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:289
			{
				uxReturn = pxEventBits->uxEventBits;
800044f0:	8fc20014 	lw	v0,20(s8)
800044f4:	8c420000 	lw	v0,0(v0)
800044f8:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:295

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
800044fc:	8fc30010 	lw	v1,16(s8)
80004500:	8fc20038 	lw	v0,56(s8)
80004504:	00621824 	and	v1,v1,v0
80004508:	8fc20038 	lw	v0,56(s8)
8000450c:	14620008 	bne	v1,v0,80004530 <xEventGroupSync+0x230>
80004510:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:297
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
80004514:	8fc20014 	lw	v0,20(s8)
80004518:	8c430000 	lw	v1,0(v0)
8000451c:	8fc20038 	lw	v0,56(s8)
80004520:	00021027 	nor	v0,zero,v0
80004524:	00621824 	and	v1,v1,v0
80004528:	8fc20014 	lw	v0,20(s8)
8000452c:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:304
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
80004530:	0c001de3 	jal	8000778c <vTaskExitCritical>
80004534:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:306

			xTimeoutOccurred = pdTRUE;
80004538:	24020001 	li	v0,1
8000453c:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:315
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
80004540:	8fc20010 	lw	v0,16(s8)
80004544:	7c42b800 	ext	v0,v0,0x0,0x18
80004548:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:320
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
8000454c:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:321
}
80004550:	03c0e825 	move	sp,s8
80004554:	8fbf002c 	lw	ra,44(sp)
80004558:	8fbe0028 	lw	s8,40(sp)
8000455c:	27bd0030 	addiu	sp,sp,48
80004560:	03e00008 	jr	ra
80004564:	00000000 	nop

80004568 <xEventGroupWaitBits>:
xEventGroupWaitBits():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:325
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
80004568:	27bdffc8 	addiu	sp,sp,-56
8000456c:	afbf0034 	sw	ra,52(sp)
80004570:	afbe0030 	sw	s8,48(sp)
80004574:	03a0f025 	move	s8,sp
80004578:	afc40038 	sw	a0,56(s8)
8000457c:	afc5003c 	sw	a1,60(s8)
80004580:	afc60040 	sw	a2,64(s8)
80004584:	afc70044 	sw	a3,68(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:326
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
80004588:	8fc20038 	lw	v0,56(s8)
8000458c:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:327
EventBits_t uxReturn, uxControlBits = 0;
80004590:	afc00014 	sw	zero,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:329
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
80004594:	afc0001c 	sw	zero,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:333

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
80004598:	8fc20038 	lw	v0,56(s8)
8000459c:	14400006 	bnez	v0,800045b8 <xEventGroupWaitBits+0x50>
800045a0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:333 (discriminator 1)
800045a4:	3c028001 	lui	v0,0x8001
800045a8:	2444bd2c 	addiu	a0,v0,-17108
800045ac:	2405014d 	li	a1,333
800045b0:	0c000417 	jal	8000105c <vAssertCalled>
800045b4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:334
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
800045b8:	8fc2003c 	lw	v0,60(s8)
800045bc:	7c02b804 	ins	v0,zero,0x0,0x18
800045c0:	10400006 	beqz	v0,800045dc <xEventGroupWaitBits+0x74>
800045c4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:334 (discriminator 1)
800045c8:	3c028001 	lui	v0,0x8001
800045cc:	2444bd2c 	addiu	a0,v0,-17108
800045d0:	2405014e 	li	a1,334
800045d4:	0c000417 	jal	8000105c <vAssertCalled>
800045d8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:335
	configASSERT( uxBitsToWaitFor != 0 );
800045dc:	8fc2003c 	lw	v0,60(s8)
800045e0:	14400006 	bnez	v0,800045fc <xEventGroupWaitBits+0x94>
800045e4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:335 (discriminator 1)
800045e8:	3c028001 	lui	v0,0x8001
800045ec:	2444bd2c 	addiu	a0,v0,-17108
800045f0:	2405014f 	li	a1,335
800045f4:	0c000417 	jal	8000105c <vAssertCalled>
800045f8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:338
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
800045fc:	0c001cb8 	jal	800072e0 <xTaskGetSchedulerState>
80004600:	00000000 	nop
80004604:	14400004 	bnez	v0,80004618 <xEventGroupWaitBits+0xb0>
80004608:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:338 (discriminator 2)
8000460c:	8fc20048 	lw	v0,72(s8)
80004610:	14400004 	bnez	v0,80004624 <xEventGroupWaitBits+0xbc>
80004614:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:338 (discriminator 3)
80004618:	24020001 	li	v0,1
8000461c:	10000002 	b	80004628 <xEventGroupWaitBits+0xc0>
80004620:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:338 (discriminator 4)
80004624:	00001025 	move	v0,zero
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:338 (discriminator 6)
80004628:	14400006 	bnez	v0,80004644 <xEventGroupWaitBits+0xdc>
8000462c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:338 (discriminator 7)
80004630:	3c028001 	lui	v0,0x8001
80004634:	2444bd2c 	addiu	a0,v0,-17108
80004638:	24050152 	li	a1,338
8000463c:	0c000417 	jal	8000105c <vAssertCalled>
80004640:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:342
	}
	#endif

	vTaskSuspendAll();
80004644:	0c001876 	jal	800061d8 <vTaskSuspendAll>
80004648:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:344
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
8000464c:	8fc20018 	lw	v0,24(s8)
80004650:	8c420000 	lw	v0,0(v0)
80004654:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:347

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
80004658:	8fc40020 	lw	a0,32(s8)
8000465c:	8fc5003c 	lw	a1,60(s8)
80004660:	8fc60044 	lw	a2,68(s8)
80004664:	0c00131c 	jal	80004c70 <prvTestWaitCondition>
80004668:	00000000 	nop
8000466c:	afc20024 	sw	v0,36(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:349

		if( xWaitConditionMet != pdFALSE )
80004670:	8fc20024 	lw	v0,36(s8)
80004674:	10400010 	beqz	v0,800046b8 <xEventGroupWaitBits+0x150>
80004678:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:353
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
8000467c:	8fc20020 	lw	v0,32(s8)
80004680:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:354
			xTicksToWait = ( TickType_t ) 0;
80004684:	afc00048 	sw	zero,72(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:357

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
80004688:	8fc20040 	lw	v0,64(s8)
8000468c:	10400029 	beqz	v0,80004734 <xEventGroupWaitBits+0x1cc>
80004690:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:359
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
80004694:	8fc20018 	lw	v0,24(s8)
80004698:	8c430000 	lw	v1,0(v0)
8000469c:	8fc2003c 	lw	v0,60(s8)
800046a0:	00021027 	nor	v0,zero,v0
800046a4:	00621824 	and	v1,v1,v0
800046a8:	8fc20018 	lw	v0,24(s8)
800046ac:	ac430000 	sw	v1,0(v0)
800046b0:	10000020 	b	80004734 <xEventGroupWaitBits+0x1cc>
800046b4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:366
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
800046b8:	8fc20048 	lw	v0,72(s8)
800046bc:	14400005 	bnez	v0,800046d4 <xEventGroupWaitBits+0x16c>
800046c0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:370
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
800046c4:	8fc20020 	lw	v0,32(s8)
800046c8:	afc20010 	sw	v0,16(s8)
800046cc:	10000019 	b	80004734 <xEventGroupWaitBits+0x1cc>
800046d0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:378
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
800046d4:	8fc20040 	lw	v0,64(s8)
800046d8:	10400005 	beqz	v0,800046f0 <xEventGroupWaitBits+0x188>
800046dc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:380
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
800046e0:	8fc30014 	lw	v1,20(s8)
800046e4:	3c020100 	lui	v0,0x100
800046e8:	00621025 	or	v0,v1,v0
800046ec:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:387
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
800046f0:	8fc20044 	lw	v0,68(s8)
800046f4:	10400005 	beqz	v0,8000470c <xEventGroupWaitBits+0x1a4>
800046f8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:389
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
800046fc:	8fc30014 	lw	v1,20(s8)
80004700:	3c020400 	lui	v0,0x400
80004704:	00621025 	or	v0,v1,v0
80004708:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:399
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
8000470c:	8fc20018 	lw	v0,24(s8)
80004710:	24440004 	addiu	a0,v0,4
80004714:	8fc3003c 	lw	v1,60(s8)
80004718:	8fc20014 	lw	v0,20(s8)
8000471c:	00621025 	or	v0,v1,v0
80004720:	00402825 	move	a1,v0
80004724:	8fc60048 	lw	a2,72(s8)
80004728:	0c001a5a 	jal	80006968 <vTaskPlaceOnUnorderedEventList>
8000472c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:404

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
80004730:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:409

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
80004734:	0c001881 	jal	80006204 <xTaskResumeAll>
80004738:	00000000 	nop
8000473c:	afc20028 	sw	v0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:411

	if( xTicksToWait != ( TickType_t ) 0 )
80004740:	8fc20048 	lw	v0,72(s8)
80004744:	10400032 	beqz	v0,80004810 <xEventGroupWaitBits+0x2a8>
80004748:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:413
	{
		if( xAlreadyYielded == pdFALSE )
8000474c:	8fc20028 	lw	v0,40(s8)
80004750:	1440000b 	bnez	v0,80004780 <xEventGroupWaitBits+0x218>
80004754:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:415
		{
			portYIELD_WITHIN_API();
80004758:	40026800 	mfc0	v0,c0_cause
8000475c:	0040f825 	move	ra,v0
80004760:	03e01025 	move	v0,ra
80004764:	afc2002c 	sw	v0,44(s8)
80004768:	8fc2002c 	lw	v0,44(s8)
8000476c:	34420100 	ori	v0,v0,0x100
80004770:	afc2002c 	sw	v0,44(s8)
80004774:	8fc2002c 	lw	v0,44(s8)
80004778:	40826000 	mtc0	v0,c0_status
8000477c:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:426

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
80004780:	0c001e06 	jal	80007818 <uxTaskResetEventItemValue>
80004784:	00000000 	nop
80004788:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:428

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
8000478c:	8fc30010 	lw	v1,16(s8)
80004790:	3c020200 	lui	v0,0x200
80004794:	00621024 	and	v0,v1,v0
80004798:	1440001a 	bnez	v0,80004804 <xEventGroupWaitBits+0x29c>
8000479c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:430
		{
			taskENTER_CRITICAL();
800047a0:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
800047a4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:433
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
800047a8:	8fc20018 	lw	v0,24(s8)
800047ac:	8c420000 	lw	v0,0(v0)
800047b0:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:437

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
800047b4:	8fc40010 	lw	a0,16(s8)
800047b8:	8fc5003c 	lw	a1,60(s8)
800047bc:	8fc60044 	lw	a2,68(s8)
800047c0:	0c00131c 	jal	80004c70 <prvTestWaitCondition>
800047c4:	00000000 	nop
800047c8:	1040000b 	beqz	v0,800047f8 <xEventGroupWaitBits+0x290>
800047cc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:439
				{
					if( xClearOnExit != pdFALSE )
800047d0:	8fc20040 	lw	v0,64(s8)
800047d4:	10400008 	beqz	v0,800047f8 <xEventGroupWaitBits+0x290>
800047d8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:441
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
800047dc:	8fc20018 	lw	v0,24(s8)
800047e0:	8c430000 	lw	v1,0(v0)
800047e4:	8fc2003c 	lw	v0,60(s8)
800047e8:	00021027 	nor	v0,zero,v0
800047ec:	00621824 	and	v1,v1,v0
800047f0:	8fc20018 	lw	v0,24(s8)
800047f4:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:453
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
800047f8:	0c001de3 	jal	8000778c <vTaskExitCritical>
800047fc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:456

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
80004800:	afc0001c 	sw	zero,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:464
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
80004804:	8fc20010 	lw	v0,16(s8)
80004808:	7c42b800 	ext	v0,v0,0x0,0x18
8000480c:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:468
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
80004810:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:469
}
80004814:	03c0e825 	move	sp,s8
80004818:	8fbf0034 	lw	ra,52(sp)
8000481c:	8fbe0030 	lw	s8,48(sp)
80004820:	27bd0038 	addiu	sp,sp,56
80004824:	03e00008 	jr	ra
80004828:	00000000 	nop

8000482c <xEventGroupClearBits>:
xEventGroupClearBits():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:473
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
8000482c:	27bdffe0 	addiu	sp,sp,-32
80004830:	afbf001c 	sw	ra,28(sp)
80004834:	afbe0018 	sw	s8,24(sp)
80004838:	03a0f025 	move	s8,sp
8000483c:	afc40020 	sw	a0,32(s8)
80004840:	afc50024 	sw	a1,36(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:474
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
80004844:	8fc20020 	lw	v0,32(s8)
80004848:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:479
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
8000484c:	8fc20020 	lw	v0,32(s8)
80004850:	14400006 	bnez	v0,8000486c <xEventGroupClearBits+0x40>
80004854:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:479 (discriminator 1)
80004858:	3c028001 	lui	v0,0x8001
8000485c:	2444bd2c 	addiu	a0,v0,-17108
80004860:	240501df 	li	a1,479
80004864:	0c000417 	jal	8000105c <vAssertCalled>
80004868:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:480
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
8000486c:	8fc20024 	lw	v0,36(s8)
80004870:	7c02b804 	ins	v0,zero,0x0,0x18
80004874:	10400006 	beqz	v0,80004890 <xEventGroupClearBits+0x64>
80004878:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:480 (discriminator 1)
8000487c:	3c028001 	lui	v0,0x8001
80004880:	2444bd2c 	addiu	a0,v0,-17108
80004884:	240501e0 	li	a1,480
80004888:	0c000417 	jal	8000105c <vAssertCalled>
8000488c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:482

	taskENTER_CRITICAL();
80004890:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80004894:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:488
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
80004898:	8fc20010 	lw	v0,16(s8)
8000489c:	8c420000 	lw	v0,0(v0)
800048a0:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:491

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
800048a4:	8fc20010 	lw	v0,16(s8)
800048a8:	8c430000 	lw	v1,0(v0)
800048ac:	8fc20024 	lw	v0,36(s8)
800048b0:	00021027 	nor	v0,zero,v0
800048b4:	00621824 	and	v1,v1,v0
800048b8:	8fc20010 	lw	v0,16(s8)
800048bc:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:493
	}
	taskEXIT_CRITICAL();
800048c0:	0c001de3 	jal	8000778c <vTaskExitCritical>
800048c4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:495

	return uxReturn;
800048c8:	8fc20014 	lw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:496
}
800048cc:	03c0e825 	move	sp,s8
800048d0:	8fbf001c 	lw	ra,28(sp)
800048d4:	8fbe0018 	lw	s8,24(sp)
800048d8:	27bd0020 	addiu	sp,sp,32
800048dc:	03e00008 	jr	ra
800048e0:	00000000 	nop

800048e4 <xEventGroupGetBitsFromISR>:
xEventGroupGetBitsFromISR():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:515

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
800048e4:	27bdffd8 	addiu	sp,sp,-40
800048e8:	afbf0024 	sw	ra,36(sp)
800048ec:	afbe0020 	sw	s8,32(sp)
800048f0:	03a0f025 	move	s8,sp
800048f4:	afc40028 	sw	a0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:517
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
800048f8:	8fc20028 	lw	v0,40(s8)
800048fc:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:520
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
80004900:	0c002a23 	jal	8000a88c <uxPortSetInterruptMaskFromISR>
80004904:	00000000 	nop
80004908:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:522
	{
		uxReturn = pxEventBits->uxEventBits;
8000490c:	8fc20010 	lw	v0,16(s8)
80004910:	8c420000 	lw	v0,0(v0)
80004914:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:524
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
80004918:	8fc40014 	lw	a0,20(s8)
8000491c:	0c0029da 	jal	8000a768 <vPortClearInterruptMaskFromISR>
80004920:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:526

	return uxReturn;
80004924:	8fc20018 	lw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:527
}
80004928:	03c0e825 	move	sp,s8
8000492c:	8fbf0024 	lw	ra,36(sp)
80004930:	8fbe0020 	lw	s8,32(sp)
80004934:	27bd0028 	addiu	sp,sp,40
80004938:	03e00008 	jr	ra
8000493c:	00000000 	nop

80004940 <xEventGroupSetBits>:
xEventGroupSetBits():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:531
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
80004940:	27bdffc0 	addiu	sp,sp,-64
80004944:	afbf003c 	sw	ra,60(sp)
80004948:	afbe0038 	sw	s8,56(sp)
8000494c:	03a0f025 	move	s8,sp
80004950:	afc40040 	sw	a0,64(s8)
80004954:	afc50044 	sw	a1,68(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:535
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
80004958:	afc00014 	sw	zero,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:536
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
8000495c:	8fc20040 	lw	v0,64(s8)
80004960:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:537
BaseType_t xMatchFound = pdFALSE;
80004964:	afc00018 	sw	zero,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:541

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
80004968:	8fc20040 	lw	v0,64(s8)
8000496c:	14400006 	bnez	v0,80004988 <xEventGroupSetBits+0x48>
80004970:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:541 (discriminator 1)
80004974:	3c028001 	lui	v0,0x8001
80004978:	2444bd2c 	addiu	a0,v0,-17108
8000497c:	2405021d 	li	a1,541
80004980:	0c000417 	jal	8000105c <vAssertCalled>
80004984:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:542
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
80004988:	8fc20044 	lw	v0,68(s8)
8000498c:	7c02b804 	ins	v0,zero,0x0,0x18
80004990:	10400006 	beqz	v0,800049ac <xEventGroupSetBits+0x6c>
80004994:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:542 (discriminator 1)
80004998:	3c028001 	lui	v0,0x8001
8000499c:	2444bd2c 	addiu	a0,v0,-17108
800049a0:	2405021e 	li	a1,542
800049a4:	0c000417 	jal	8000105c <vAssertCalled>
800049a8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:544

	pxList = &( pxEventBits->xTasksWaitingForBits );
800049ac:	8fc2001c 	lw	v0,28(s8)
800049b0:	24420004 	addiu	v0,v0,4
800049b4:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:545
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
800049b8:	8fc20020 	lw	v0,32(s8)
800049bc:	24420008 	addiu	v0,v0,8
800049c0:	afc20024 	sw	v0,36(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:546
	vTaskSuspendAll();
800049c4:	0c001876 	jal	800061d8 <vTaskSuspendAll>
800049c8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:550
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
800049cc:	8fc20020 	lw	v0,32(s8)
800049d0:	8c42000c 	lw	v0,12(v0)
800049d4:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:553

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
800049d8:	8fc2001c 	lw	v0,28(s8)
800049dc:	8c430000 	lw	v1,0(v0)
800049e0:	8fc20044 	lw	v0,68(s8)
800049e4:	00621825 	or	v1,v1,v0
800049e8:	8fc2001c 	lw	v0,28(s8)
800049ec:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:556

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
800049f0:	1000003c 	b	80004ae4 <xEventGroupSetBits+0x1a4>
800049f4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:558
		{
			pxNext = listGET_NEXT( pxListItem );
800049f8:	8fc20010 	lw	v0,16(s8)
800049fc:	8c420004 	lw	v0,4(v0)
80004a00:	afc20028 	sw	v0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:559
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
80004a04:	8fc20010 	lw	v0,16(s8)
80004a08:	8c420000 	lw	v0,0(v0)
80004a0c:	afc2002c 	sw	v0,44(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:560
			xMatchFound = pdFALSE;
80004a10:	afc00018 	sw	zero,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:563

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
80004a14:	8fc2002c 	lw	v0,44(s8)
80004a18:	7c02b804 	ins	v0,zero,0x0,0x18
80004a1c:	afc20030 	sw	v0,48(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:564
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
80004a20:	8fc2002c 	lw	v0,44(s8)
80004a24:	7c42b800 	ext	v0,v0,0x0,0x18
80004a28:	afc2002c 	sw	v0,44(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:566

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
80004a2c:	8fc30030 	lw	v1,48(s8)
80004a30:	3c020400 	lui	v0,0x400
80004a34:	00621024 	and	v0,v1,v0
80004a38:	1440000b 	bnez	v0,80004a68 <xEventGroupSetBits+0x128>
80004a3c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:569
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
80004a40:	8fc2001c 	lw	v0,28(s8)
80004a44:	8c430000 	lw	v1,0(v0)
80004a48:	8fc2002c 	lw	v0,44(s8)
80004a4c:	00621024 	and	v0,v1,v0
80004a50:	1040000e 	beqz	v0,80004a8c <xEventGroupSetBits+0x14c>
80004a54:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:571
				{
					xMatchFound = pdTRUE;
80004a58:	24020001 	li	v0,1
80004a5c:	afc20018 	sw	v0,24(s8)
80004a60:	1000000a 	b	80004a8c <xEventGroupSetBits+0x14c>
80004a64:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:578
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
80004a68:	8fc2001c 	lw	v0,28(s8)
80004a6c:	8c430000 	lw	v1,0(v0)
80004a70:	8fc2002c 	lw	v0,44(s8)
80004a74:	00621824 	and	v1,v1,v0
80004a78:	8fc2002c 	lw	v0,44(s8)
80004a7c:	14620003 	bne	v1,v0,80004a8c <xEventGroupSetBits+0x14c>
80004a80:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:581
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
80004a84:	24020001 	li	v0,1
80004a88:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:588
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
80004a8c:	8fc20018 	lw	v0,24(s8)
80004a90:	10400012 	beqz	v0,80004adc <xEventGroupSetBits+0x19c>
80004a94:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:591
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
80004a98:	8fc30030 	lw	v1,48(s8)
80004a9c:	3c020100 	lui	v0,0x100
80004aa0:	00621024 	and	v0,v1,v0
80004aa4:	10400005 	beqz	v0,80004abc <xEventGroupSetBits+0x17c>
80004aa8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:593
				{
					uxBitsToClear |= uxBitsWaitedFor;
80004aac:	8fc30014 	lw	v1,20(s8)
80004ab0:	8fc2002c 	lw	v0,44(s8)
80004ab4:	00621025 	or	v0,v1,v0
80004ab8:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:605
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
80004abc:	8fc2001c 	lw	v0,28(s8)
80004ac0:	8c430000 	lw	v1,0(v0)
80004ac4:	3c020200 	lui	v0,0x200
80004ac8:	00621025 	or	v0,v1,v0
80004acc:	8fc40010 	lw	a0,16(s8)
80004ad0:	00402825 	move	a1,v0
80004ad4:	0c001afc 	jal	80006bf0 <xTaskRemoveFromUnorderedEventList>
80004ad8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:611
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
80004adc:	8fc20028 	lw	v0,40(s8)
80004ae0:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:556

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
80004ae4:	8fc30010 	lw	v1,16(s8)
80004ae8:	8fc20024 	lw	v0,36(s8)
80004aec:	1462ffc2 	bne	v1,v0,800049f8 <xEventGroupSetBits+0xb8>
80004af0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:616
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
80004af4:	8fc2001c 	lw	v0,28(s8)
80004af8:	8c430000 	lw	v1,0(v0)
80004afc:	8fc20014 	lw	v0,20(s8)
80004b00:	00021027 	nor	v0,zero,v0
80004b04:	00621824 	and	v1,v1,v0
80004b08:	8fc2001c 	lw	v0,28(s8)
80004b0c:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:618
	}
	( void ) xTaskResumeAll();
80004b10:	0c001881 	jal	80006204 <xTaskResumeAll>
80004b14:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:620

	return pxEventBits->uxEventBits;
80004b18:	8fc2001c 	lw	v0,28(s8)
80004b1c:	8c420000 	lw	v0,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:621
}
80004b20:	03c0e825 	move	sp,s8
80004b24:	8fbf003c 	lw	ra,60(sp)
80004b28:	8fbe0038 	lw	s8,56(sp)
80004b2c:	27bd0040 	addiu	sp,sp,64
80004b30:	03e00008 	jr	ra
80004b34:	00000000 	nop

80004b38 <vEventGroupDelete>:
vEventGroupDelete():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:625
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
80004b38:	27bdffe0 	addiu	sp,sp,-32
80004b3c:	afbf001c 	sw	ra,28(sp)
80004b40:	afbe0018 	sw	s8,24(sp)
80004b44:	03a0f025 	move	s8,sp
80004b48:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:626
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
80004b4c:	8fc20020 	lw	v0,32(s8)
80004b50:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:627
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
80004b54:	8fc20010 	lw	v0,16(s8)
80004b58:	24420004 	addiu	v0,v0,4
80004b5c:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:629

	vTaskSuspendAll();
80004b60:	0c001876 	jal	800061d8 <vTaskSuspendAll>
80004b64:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:633
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
80004b68:	10000012 	b	80004bb4 <vEventGroupDelete+0x7c>
80004b6c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:637
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
80004b70:	8fc20014 	lw	v0,20(s8)
80004b74:	8c43000c 	lw	v1,12(v0)
80004b78:	8fc20014 	lw	v0,20(s8)
80004b7c:	24420008 	addiu	v0,v0,8
80004b80:	14620006 	bne	v1,v0,80004b9c <vEventGroupDelete+0x64>
80004b84:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:637 (discriminator 1)
80004b88:	3c028001 	lui	v0,0x8001
80004b8c:	2444bd2c 	addiu	a0,v0,-17108
80004b90:	2405027d 	li	a1,637
80004b94:	0c000417 	jal	8000105c <vAssertCalled>
80004b98:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:638
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
80004b9c:	8fc20014 	lw	v0,20(s8)
80004ba0:	8c42000c 	lw	v0,12(v0)
80004ba4:	00402025 	move	a0,v0
80004ba8:	3c050200 	lui	a1,0x200
80004bac:	0c001afc 	jal	80006bf0 <xTaskRemoveFromUnorderedEventList>
80004bb0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:633

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
80004bb4:	8fc20014 	lw	v0,20(s8)
80004bb8:	8c420000 	lw	v0,0(v0)
80004bbc:	1440ffec 	bnez	v0,80004b70 <vEventGroupDelete+0x38>
80004bc0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:645

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
80004bc4:	8fc40010 	lw	a0,16(s8)
80004bc8:	0c002b7a 	jal	8000ade8 <vPortFree>
80004bcc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:662
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
80004bd0:	0c001881 	jal	80006204 <xTaskResumeAll>
80004bd4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:663
}
80004bd8:	03c0e825 	move	sp,s8
80004bdc:	8fbf001c 	lw	ra,28(sp)
80004be0:	8fbe0018 	lw	s8,24(sp)
80004be4:	27bd0020 	addiu	sp,sp,32
80004be8:	03e00008 	jr	ra
80004bec:	00000000 	nop

80004bf0 <vEventGroupSetBitsCallback>:
vEventGroupSetBitsCallback():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:669
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
80004bf0:	27bdffe8 	addiu	sp,sp,-24
80004bf4:	afbf0014 	sw	ra,20(sp)
80004bf8:	afbe0010 	sw	s8,16(sp)
80004bfc:	03a0f025 	move	s8,sp
80004c00:	afc40018 	sw	a0,24(s8)
80004c04:	afc5001c 	sw	a1,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:670
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
80004c08:	8fc40018 	lw	a0,24(s8)
80004c0c:	8fc5001c 	lw	a1,28(s8)
80004c10:	0c001250 	jal	80004940 <xEventGroupSetBits>
80004c14:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:671
}
80004c18:	03c0e825 	move	sp,s8
80004c1c:	8fbf0014 	lw	ra,20(sp)
80004c20:	8fbe0010 	lw	s8,16(sp)
80004c24:	27bd0018 	addiu	sp,sp,24
80004c28:	03e00008 	jr	ra
80004c2c:	00000000 	nop

80004c30 <vEventGroupClearBitsCallback>:
vEventGroupClearBitsCallback():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:677
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
80004c30:	27bdffe8 	addiu	sp,sp,-24
80004c34:	afbf0014 	sw	ra,20(sp)
80004c38:	afbe0010 	sw	s8,16(sp)
80004c3c:	03a0f025 	move	s8,sp
80004c40:	afc40018 	sw	a0,24(s8)
80004c44:	afc5001c 	sw	a1,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:678
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
80004c48:	8fc40018 	lw	a0,24(s8)
80004c4c:	8fc5001c 	lw	a1,28(s8)
80004c50:	0c00120b 	jal	8000482c <xEventGroupClearBits>
80004c54:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:679
}
80004c58:	03c0e825 	move	sp,s8
80004c5c:	8fbf0014 	lw	ra,20(sp)
80004c60:	8fbe0010 	lw	s8,16(sp)
80004c64:	27bd0018 	addiu	sp,sp,24
80004c68:	03e00008 	jr	ra
80004c6c:	00000000 	nop

80004c70 <prvTestWaitCondition>:
prvTestWaitCondition():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:683
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
80004c70:	27bdfff0 	addiu	sp,sp,-16
80004c74:	afbe000c 	sw	s8,12(sp)
80004c78:	03a0f025 	move	s8,sp
80004c7c:	afc40010 	sw	a0,16(s8)
80004c80:	afc50014 	sw	a1,20(s8)
80004c84:	afc60018 	sw	a2,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:684
BaseType_t xWaitConditionMet = pdFALSE;
80004c88:	afc00000 	sw	zero,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:686

	if( xWaitForAllBits == pdFALSE )
80004c8c:	8fc20018 	lw	v0,24(s8)
80004c90:	1440000a 	bnez	v0,80004cbc <prvTestWaitCondition+0x4c>
80004c94:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:690
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
80004c98:	8fc30010 	lw	v1,16(s8)
80004c9c:	8fc20014 	lw	v0,20(s8)
80004ca0:	00621024 	and	v0,v1,v0
80004ca4:	1040000d 	beqz	v0,80004cdc <prvTestWaitCondition+0x6c>
80004ca8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:692
		{
			xWaitConditionMet = pdTRUE;
80004cac:	24020001 	li	v0,1
80004cb0:	afc20000 	sw	v0,0(s8)
80004cb4:	10000009 	b	80004cdc <prvTestWaitCondition+0x6c>
80004cb8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:703
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
80004cbc:	8fc30010 	lw	v1,16(s8)
80004cc0:	8fc20014 	lw	v0,20(s8)
80004cc4:	00621824 	and	v1,v1,v0
80004cc8:	8fc20014 	lw	v0,20(s8)
80004ccc:	14620003 	bne	v1,v0,80004cdc <prvTestWaitCondition+0x6c>
80004cd0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:705
		{
			xWaitConditionMet = pdTRUE;
80004cd4:	24020001 	li	v0,1
80004cd8:	afc20000 	sw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:713
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
80004cdc:	8fc20000 	lw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/event_groups.c:714
}
80004ce0:	03c0e825 	move	sp,s8
80004ce4:	8fbe000c 	lw	s8,12(sp)
80004ce8:	27bd0010 	addiu	sp,sp,16
80004cec:	03e00008 	jr	ra
80004cf0:	00000000 	nop

80004cf4 <xTaskCreate>:
xTaskCreate():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:685
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
80004cf4:	27bdffc8 	addiu	sp,sp,-56
80004cf8:	afbf0034 	sw	ra,52(sp)
80004cfc:	afbe0030 	sw	s8,48(sp)
80004d00:	03a0f025 	move	s8,sp
80004d04:	afc40038 	sw	a0,56(s8)
80004d08:	afc5003c 	sw	a1,60(s8)
80004d0c:	00c01025 	move	v0,a2
80004d10:	afc70044 	sw	a3,68(s8)
80004d14:	a7c20040 	sh	v0,64(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:689
        TCB_t *pxNewTCB;
        BaseType_t xReturn;

        *IO_LEDR = (1 << 8) | (*IO_LEDR & 0x00FF);
80004d18:	8f828003 	lw	v0,-32765(gp)
80004d1c:	8f838003 	lw	v1,-32765(gp)
80004d20:	8c630000 	lw	v1,0(v1)
80004d24:	306300ff 	andi	v1,v1,0xff
80004d28:	34630100 	ori	v1,v1,0x100
80004d2c:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:730
		}
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

            *IO_LEDR = (6 << 8) | (*IO_LEDR & 0x00FF);
80004d30:	8f828003 	lw	v0,-32765(gp)
80004d34:	8f838003 	lw	v1,-32765(gp)
80004d38:	8c630000 	lw	v1,0(v1)
80004d3c:	306300ff 	andi	v1,v1,0xff
80004d40:	34630600 	ori	v1,v1,0x600
80004d44:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:735


			/* Allocate space for the stack used by the task being created. */
            /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) );
80004d48:	97c20040 	lhu	v0,64(s8)
80004d4c:	00021080 	sll	v0,v0,0x2
80004d50:	00402025 	move	a0,v0
80004d54:	0c002af0 	jal	8000abc0 <pvPortMalloc>
80004d58:	00000000 	nop
80004d5c:	afc20028 	sw	v0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:737

            *IO_LEDR = (7 << 8) | (*IO_LEDR & 0x00FF);
80004d60:	8f828003 	lw	v0,-32765(gp)
80004d64:	8f838003 	lw	v1,-32765(gp)
80004d68:	8c630000 	lw	v1,0(v1)
80004d6c:	306300ff 	andi	v1,v1,0xff
80004d70:	34630700 	ori	v1,v1,0x700
80004d74:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:739

			if( pxStack != NULL )
80004d78:	8fc20028 	lw	v0,40(s8)
80004d7c:	10400012 	beqz	v0,80004dc8 <xTaskCreate+0xd4>
80004d80:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:743
			{
				/* Allocate space for the TCB. */
                /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
80004d84:	24040050 	li	a0,80
80004d88:	0c002af0 	jal	8000abc0 <pvPortMalloc>
80004d8c:	00000000 	nop
80004d90:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:746


				if( pxNewTCB != NULL )
80004d94:	8fc20020 	lw	v0,32(s8)
80004d98:	10400006 	beqz	v0,80004db4 <xTaskCreate+0xc0>
80004d9c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:749
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
80004da0:	8fc20020 	lw	v0,32(s8)
80004da4:	8fc30028 	lw	v1,40(s8)
80004da8:	ac430030 	sw	v1,48(v0)
80004dac:	10000007 	b	80004dcc <xTaskCreate+0xd8>
80004db0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:755
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
80004db4:	8fc40028 	lw	a0,40(s8)
80004db8:	0c002b7a 	jal	8000ade8 <vPortFree>
80004dbc:	00000000 	nop
80004dc0:	10000002 	b	80004dcc <xTaskCreate+0xd8>
80004dc4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:761
				}

			}
			else
			{
				pxNewTCB = NULL;
80004dc8:	afc00020 	sw	zero,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:763
			}
            *IO_LEDR = (8 << 8) | (*IO_LEDR & 0x00FF);
80004dcc:	8f828003 	lw	v0,-32765(gp)
80004dd0:	8f838003 	lw	v1,-32765(gp)
80004dd4:	8c630000 	lw	v1,0(v1)
80004dd8:	306300ff 	andi	v1,v1,0xff
80004ddc:	34630800 	ori	v1,v1,0x800
80004de0:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:769
		}
		#endif /* portSTACK_GROWTH */



		if( pxNewTCB != NULL )
80004de4:	8fc20020 	lw	v0,32(s8)
80004de8:	1040002e 	beqz	v0,80004ea4 <xTaskCreate+0x1b0>
80004dec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:771
		{
            *IO_LEDR = (9 << 8) | (*IO_LEDR & 0x00FF);
80004df0:	8f828003 	lw	v0,-32765(gp)
80004df4:	8f838003 	lw	v1,-32765(gp)
80004df8:	8c630000 	lw	v1,0(v1)
80004dfc:	306300ff 	andi	v1,v1,0xff
80004e00:	34630900 	ori	v1,v1,0x900
80004e04:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:780
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

            *IO_LEDR = (10 << 8) | (*IO_LEDR & 0x00FF);
80004e08:	8f828003 	lw	v0,-32765(gp)
80004e0c:	8f838003 	lw	v1,-32765(gp)
80004e10:	8c630000 	lw	v1,0(v1)
80004e14:	306300ff 	andi	v1,v1,0xff
80004e18:	34630a00 	ori	v1,v1,0xa00
80004e1c:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:781
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
80004e20:	97c30040 	lhu	v1,64(s8)
80004e24:	8fc20048 	lw	v0,72(s8)
80004e28:	afa20010 	sw	v0,16(sp)
80004e2c:	8fc2004c 	lw	v0,76(s8)
80004e30:	afa20014 	sw	v0,20(sp)
80004e34:	8fc20020 	lw	v0,32(s8)
80004e38:	afa20018 	sw	v0,24(sp)
80004e3c:	afa0001c 	sw	zero,28(sp)
80004e40:	8fc40038 	lw	a0,56(s8)
80004e44:	8fc5003c 	lw	a1,60(s8)
80004e48:	00603025 	move	a2,v1
80004e4c:	8fc70044 	lw	a3,68(s8)
80004e50:	0c0013b5 	jal	80004ed4 <prvInitialiseNewTask>
80004e54:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:782
            *IO_LEDR = (11 << 8) | (*IO_LEDR & 0x00FF);
80004e58:	8f828003 	lw	v0,-32765(gp)
80004e5c:	8f838003 	lw	v1,-32765(gp)
80004e60:	8c630000 	lw	v1,0(v1)
80004e64:	306300ff 	andi	v1,v1,0xff
80004e68:	34630b00 	ori	v1,v1,0xb00
80004e6c:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:784
			//prvAddNewTaskToReadyList( pxNewTCB );// EVIDENCE
			prvAddNewTaskToReadyList( pxNewTCB );
80004e70:	8fc40020 	lw	a0,32(s8)
80004e74:	0c001434 	jal	800050d0 <prvAddNewTaskToReadyList>
80004e78:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:785
            *IO_LEDR = (12 << 8) | (*IO_LEDR & 0x00FF);
80004e7c:	8f828003 	lw	v0,-32765(gp)
80004e80:	8f838003 	lw	v1,-32765(gp)
80004e84:	8c630000 	lw	v1,0(v1)
80004e88:	306300ff 	andi	v1,v1,0xff
80004e8c:	34630c00 	ori	v1,v1,0xc00
80004e90:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:786
			xReturn = pdPASS;
80004e94:	24020001 	li	v0,1
80004e98:	afc20024 	sw	v0,36(s8)
80004e9c:	10000003 	b	80004eac <xTaskCreate+0x1b8>
80004ea0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:790
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
80004ea4:	2402ffff 	li	v0,-1
80004ea8:	afc20024 	sw	v0,36(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:793
		}

        *IO_LEDR = (15 << 8) /*| (*IO_LEDR & 0x00FF)*/;
80004eac:	8f828003 	lw	v0,-32765(gp)
80004eb0:	24030f00 	li	v1,3840
80004eb4:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:796
        //return 1; // EVIDENCE

		return xReturn;
80004eb8:	8fc20024 	lw	v0,36(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:797
	}
80004ebc:	03c0e825 	move	sp,s8
80004ec0:	8fbf0034 	lw	ra,52(sp)
80004ec4:	8fbe0030 	lw	s8,48(sp)
80004ec8:	27bd0038 	addiu	sp,sp,56
80004ecc:	03e00008 	jr	ra
80004ed0:	00000000 	nop

80004ed4 <prvInitialiseNewTask>:
prvInitialiseNewTask():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:810
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80004ed4:	27bdffe0 	addiu	sp,sp,-32
80004ed8:	afbf001c 	sw	ra,28(sp)
80004edc:	afbe0018 	sw	s8,24(sp)
80004ee0:	03a0f025 	move	s8,sp
80004ee4:	afc40020 	sw	a0,32(s8)
80004ee8:	afc50024 	sw	a1,36(s8)
80004eec:	afc60028 	sw	a2,40(s8)
80004ef0:	afc7002c 	sw	a3,44(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:832

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
80004ef4:	8fc20038 	lw	v0,56(s8)
80004ef8:	8c430030 	lw	v1,48(v0)
80004efc:	8fc20028 	lw	v0,40(s8)
80004f00:	00021080 	sll	v0,v0,0x2
80004f04:	00602025 	move	a0,v1
80004f08:	240500a5 	li	a1,165
80004f0c:	00403025 	move	a2,v0
80004f10:	0c002cfd 	jal	8000b3f4 <memset>
80004f14:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:842
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
80004f18:	8fc20038 	lw	v0,56(s8)
80004f1c:	8c430030 	lw	v1,48(v0)
80004f20:	8fc40028 	lw	a0,40(s8)
80004f24:	3c023fff 	lui	v0,0x3fff
80004f28:	3442ffff 	ori	v0,v0,0xffff
80004f2c:	00821021 	addu	v0,a0,v0
80004f30:	00021080 	sll	v0,v0,0x2
80004f34:	00621021 	addu	v0,v1,v0
80004f38:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:843
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
80004f3c:	8fc20014 	lw	v0,20(s8)
80004f40:	7c021004 	ins	v0,zero,0x0,0x3
80004f44:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:846

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
80004f48:	8fc20014 	lw	v0,20(s8)
80004f4c:	30420007 	andi	v0,v0,0x7
80004f50:	10400006 	beqz	v0,80004f6c <prvInitialiseNewTask+0x98>
80004f54:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:846 (discriminator 1)
80004f58:	3c028001 	lui	v0,0x8001
80004f5c:	2444bd48 	addiu	a0,v0,-17080
80004f60:	2405034e 	li	a1,846
80004f64:	0c000417 	jal	8000105c <vAssertCalled>
80004f68:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:862
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
80004f6c:	afc00010 	sw	zero,16(s8)
80004f70:	10000014 	b	80004fc4 <prvInitialiseNewTask+0xf0>
80004f74:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:864
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
80004f78:	8fc30024 	lw	v1,36(s8)
80004f7c:	8fc20010 	lw	v0,16(s8)
80004f80:	00621021 	addu	v0,v1,v0
80004f84:	90430000 	lbu	v1,0(v0)
80004f88:	8fc40038 	lw	a0,56(s8)
80004f8c:	8fc20010 	lw	v0,16(s8)
80004f90:	00821021 	addu	v0,a0,v0
80004f94:	a0430034 	sb	v1,52(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:869

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
80004f98:	8fc30024 	lw	v1,36(s8)
80004f9c:	8fc20010 	lw	v0,16(s8)
80004fa0:	00621021 	addu	v0,v1,v0
80004fa4:	90420000 	lbu	v0,0(v0)
80004fa8:	14400003 	bnez	v0,80004fb8 <prvInitialiseNewTask+0xe4>
80004fac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:871
		{
			break;
80004fb0:	10000008 	b	80004fd4 <prvInitialiseNewTask+0x100>
80004fb4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:862 (discriminator 2)
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
80004fb8:	8fc20010 	lw	v0,16(s8)
80004fbc:	24420001 	addiu	v0,v0,1
80004fc0:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:862 (discriminator 1)
80004fc4:	8fc20010 	lw	v0,16(s8)
80004fc8:	2c420008 	sltiu	v0,v0,8
80004fcc:	1440ffea 	bnez	v0,80004f78 <prvInitialiseNewTask+0xa4>
80004fd0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:881
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
80004fd4:	8fc20038 	lw	v0,56(s8)
80004fd8:	a040003b 	sb	zero,59(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:885

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
80004fdc:	8fc20030 	lw	v0,48(s8)
80004fe0:	2c420005 	sltiu	v0,v0,5
80004fe4:	14400003 	bnez	v0,80004ff4 <prvInitialiseNewTask+0x120>
80004fe8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:887
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
80004fec:	24020004 	li	v0,4
80004ff0:	afc20030 	sw	v0,48(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:894
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
80004ff4:	8fc20038 	lw	v0,56(s8)
80004ff8:	8fc30030 	lw	v1,48(s8)
80004ffc:	ac43002c 	sw	v1,44(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:897
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
80005000:	8fc20038 	lw	v0,56(s8)
80005004:	8fc30030 	lw	v1,48(s8)
80005008:	ac430040 	sw	v1,64(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:898
		pxNewTCB->uxMutexesHeld = 0;
8000500c:	8fc20038 	lw	v0,56(s8)
80005010:	ac400044 	sw	zero,68(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:902
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
80005014:	8fc20038 	lw	v0,56(s8)
80005018:	24420004 	addiu	v0,v0,4
8000501c:	00402025 	move	a0,v0
80005020:	0c002909 	jal	8000a424 <vListInitialiseItem>
80005024:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:903
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
80005028:	8fc20038 	lw	v0,56(s8)
8000502c:	24420018 	addiu	v0,v0,24
80005030:	00402025 	move	a0,v0
80005034:	0c002909 	jal	8000a424 <vListInitialiseItem>
80005038:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:907

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
8000503c:	8fc20038 	lw	v0,56(s8)
80005040:	8fc30038 	lw	v1,56(s8)
80005044:	ac430010 	sw	v1,16(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:910

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80005048:	24030005 	li	v1,5
8000504c:	8fc20030 	lw	v0,48(s8)
80005050:	00621823 	subu	v1,v1,v0
80005054:	8fc20038 	lw	v0,56(s8)
80005058:	ac430018 	sw	v1,24(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:911
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
8000505c:	8fc20038 	lw	v0,56(s8)
80005060:	8fc30038 	lw	v1,56(s8)
80005064:	ac430024 	sw	v1,36(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:915

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
80005068:	8fc20038 	lw	v0,56(s8)
8000506c:	ac40003c 	sw	zero,60(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:953
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
80005070:	8fc20038 	lw	v0,56(s8)
80005074:	ac400048 	sw	zero,72(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:954
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
80005078:	8fc20038 	lw	v0,56(s8)
8000507c:	a040004c 	sb	zero,76(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:981
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
80005080:	8fc40014 	lw	a0,20(s8)
80005084:	8fc50020 	lw	a1,32(s8)
80005088:	8fc6002c 	lw	a2,44(s8)
8000508c:	0c002a39 	jal	8000a8e4 <pxPortInitialiseStack>
80005090:	00000000 	nop
80005094:	00401825 	move	v1,v0
80005098:	8fc20038 	lw	v0,56(s8)
8000509c:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:985
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
800050a0:	8fc20034 	lw	v0,52(s8)
800050a4:	10400004 	beqz	v0,800050b8 <prvInitialiseNewTask+0x1e4>
800050a8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:989
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
800050ac:	8fc20034 	lw	v0,52(s8)
800050b0:	8fc30038 	lw	v1,56(s8)
800050b4:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:995
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
800050b8:	03c0e825 	move	sp,s8
800050bc:	8fbf001c 	lw	ra,28(sp)
800050c0:	8fbe0018 	lw	s8,24(sp)
800050c4:	27bd0020 	addiu	sp,sp,32
800050c8:	03e00008 	jr	ra
800050cc:	00000000 	nop

800050d0 <prvAddNewTaskToReadyList>:
prvAddNewTaskToReadyList():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:999
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
800050d0:	27bdffd8 	addiu	sp,sp,-40
800050d4:	afbf0024 	sw	ra,36(sp)
800050d8:	afbe0020 	sw	s8,32(sp)
800050dc:	afb0001c 	sw	s0,28(sp)
800050e0:	03a0f025 	move	s8,sp
800050e4:	afc40028 	sw	a0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1002
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
800050e8:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
800050ec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1004
	{
		uxCurrentNumberOfTasks++;
800050f0:	8f8280bf 	lw	v0,-32577(gp)
800050f4:	24420001 	addiu	v0,v0,1
800050f8:	af8280bf 	sw	v0,-32577(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1005
		if( pxCurrentTCB == NULL )
800050fc:	8f8280af 	lw	v0,-32593(gp)
80005100:	1440000b 	bnez	v0,80005130 <prvAddNewTaskToReadyList+0x60>
80005104:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1009
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
80005108:	8fc20028 	lw	v0,40(s8)
8000510c:	af8280af 	sw	v0,-32593(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1011

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
80005110:	8f8380bf 	lw	v1,-32577(gp)
80005114:	24020001 	li	v0,1
80005118:	14620011 	bne	v1,v0,80005160 <prvAddNewTaskToReadyList+0x90>
8000511c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1016
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
80005120:	0c001bdc 	jal	80006f70 <prvInitialiseTaskLists>
80005124:	00000000 	nop
80005128:	1000000d 	b	80005160 <prvAddNewTaskToReadyList+0x90>
8000512c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1028
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
80005130:	8f8280cb 	lw	v0,-32565(gp)
80005134:	1440000a 	bnez	v0,80005160 <prvAddNewTaskToReadyList+0x90>
80005138:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1030
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
8000513c:	8f8280af 	lw	v0,-32593(gp)
80005140:	8c43002c 	lw	v1,44(v0)
80005144:	8fc20028 	lw	v0,40(s8)
80005148:	8c42002c 	lw	v0,44(v0)
8000514c:	0043102b 	sltu	v0,v0,v1
80005150:	14400003 	bnez	v0,80005160 <prvAddNewTaskToReadyList+0x90>
80005154:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1032
				{
					pxCurrentTCB = pxNewTCB;
80005158:	8fc20028 	lw	v0,40(s8)
8000515c:	af8280af 	sw	v0,-32593(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1045
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
80005160:	8f8280db 	lw	v0,-32549(gp)
80005164:	24420001 	addiu	v0,v0,1
80005168:	af8280db 	sw	v0,-32549(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1055
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
8000516c:	8fc20028 	lw	v0,40(s8)
80005170:	8c42002c 	lw	v0,44(v0)
80005174:	00401825 	move	v1,v0
80005178:	24020001 	li	v0,1
8000517c:	00621804 	sllv	v1,v0,v1
80005180:	8f8280c7 	lw	v0,-32569(gp)
80005184:	00621025 	or	v0,v1,v0
80005188:	af8280c7 	sw	v0,-32569(gp)
8000518c:	8fc20028 	lw	v0,40(s8)
80005190:	8c42002c 	lw	v0,44(v0)
80005194:	00021080 	sll	v0,v0,0x2
80005198:	00021880 	sll	v1,v0,0x2
8000519c:	00431021 	addu	v0,v0,v1
800051a0:	3c038001 	lui	v1,0x8001
800051a4:	2463c3a8 	addiu	v1,v1,-15448
800051a8:	00431821 	addu	v1,v0,v1
800051ac:	8fc20028 	lw	v0,40(s8)
800051b0:	24420004 	addiu	v0,v0,4
800051b4:	00602025 	move	a0,v1
800051b8:	00402825 	move	a1,v0
800051bc:	0c002914 	jal	8000a450 <vListInsertEnd>
800051c0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1059

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
800051c4:	0c001de3 	jal	8000778c <vTaskExitCritical>
800051c8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1061

	if( xSchedulerRunning != pdFALSE )
800051cc:	8f8280cb 	lw	v0,-32565(gp)
800051d0:	10400012 	beqz	v0,8000521c <prvAddNewTaskToReadyList+0x14c>
800051d4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1065
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
800051d8:	8f8280af 	lw	v0,-32593(gp)
800051dc:	8c43002c 	lw	v1,44(v0)
800051e0:	8fc20028 	lw	v0,40(s8)
800051e4:	8c42002c 	lw	v0,44(v0)
800051e8:	0062102b 	sltu	v0,v1,v0
800051ec:	1040000b 	beqz	v0,8000521c <prvAddNewTaskToReadyList+0x14c>
800051f0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1067
		{
			taskYIELD_IF_USING_PREEMPTION();
800051f4:	40026800 	mfc0	v0,c0_cause
800051f8:	00408025 	move	s0,v0
800051fc:	02001025 	move	v0,s0
80005200:	afc20010 	sw	v0,16(s8)
80005204:	8fc20010 	lw	v0,16(s8)
80005208:	34420100 	ori	v0,v0,0x100
8000520c:	afc20010 	sw	v0,16(s8)
80005210:	8fc20010 	lw	v0,16(s8)
80005214:	40826000 	mtc0	v0,c0_status
80005218:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1078
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
8000521c:	03c0e825 	move	sp,s8
80005220:	8fbf0024 	lw	ra,36(sp)
80005224:	8fbe0020 	lw	s8,32(sp)
80005228:	8fb0001c 	lw	s0,28(sp)
8000522c:	27bd0028 	addiu	sp,sp,40
80005230:	03e00008 	jr	ra
80005234:	00000000 	nop

80005238 <vTaskDelete>:
vTaskDelete():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1084
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
80005238:	27bdffd8 	addiu	sp,sp,-40
8000523c:	afbf0024 	sw	ra,36(sp)
80005240:	afbe0020 	sw	s8,32(sp)
80005244:	afb0001c 	sw	s0,28(sp)
80005248:	03a0f025 	move	s8,sp
8000524c:	afc40028 	sw	a0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1087
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
80005250:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80005254:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1091
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
80005258:	8fc20028 	lw	v0,40(s8)
8000525c:	14400004 	bnez	v0,80005270 <vTaskDelete+0x38>
80005260:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1091 (discriminator 1)
80005264:	8f8280af 	lw	v0,-32593(gp)
80005268:	10000002 	b	80005274 <vTaskDelete+0x3c>
8000526c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1091 (discriminator 2)
80005270:	8fc20028 	lw	v0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1091 (discriminator 4)
80005274:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1094 (discriminator 4)

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
80005278:	8fc20010 	lw	v0,16(s8)
8000527c:	24420004 	addiu	v0,v0,4
80005280:	00402025 	move	a0,v0
80005284:	0c002972 	jal	8000a5c8 <uxListRemove>
80005288:	00000000 	nop
8000528c:	14400015 	bnez	v0,800052e4 <vTaskDelete+0xac>
80005290:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1096
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
80005294:	8fc20010 	lw	v0,16(s8)
80005298:	8c42002c 	lw	v0,44(v0)
8000529c:	3c038001 	lui	v1,0x8001
800052a0:	00021080 	sll	v0,v0,0x2
800052a4:	00022080 	sll	a0,v0,0x2
800052a8:	00441021 	addu	v0,v0,a0
800052ac:	2463c3a8 	addiu	v1,v1,-15448
800052b0:	00431021 	addu	v0,v0,v1
800052b4:	8c420000 	lw	v0,0(v0)
800052b8:	1440000a 	bnez	v0,800052e4 <vTaskDelete+0xac>
800052bc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1096 (discriminator 1)
800052c0:	8fc20010 	lw	v0,16(s8)
800052c4:	8c42002c 	lw	v0,44(v0)
800052c8:	00401825 	move	v1,v0
800052cc:	24020001 	li	v0,1
800052d0:	00621004 	sllv	v0,v0,v1
800052d4:	00021827 	nor	v1,zero,v0
800052d8:	8f8280c7 	lw	v0,-32569(gp)
800052dc:	00621024 	and	v0,v1,v0
800052e0:	af8280c7 	sw	v0,-32569(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1104
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
800052e4:	8fc20010 	lw	v0,16(s8)
800052e8:	8c420028 	lw	v0,40(v0)
800052ec:	10400006 	beqz	v0,80005308 <vTaskDelete+0xd0>
800052f0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1106
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
800052f4:	8fc20010 	lw	v0,16(s8)
800052f8:	24420018 	addiu	v0,v0,24
800052fc:	00402025 	move	a0,v0
80005300:	0c002972 	jal	8000a5c8 <uxListRemove>
80005304:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1117

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
80005308:	8f8280db 	lw	v0,-32549(gp)
8000530c:	24420001 	addiu	v0,v0,1
80005310:	af8280db 	sw	v0,-32549(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1119

			if( pxTCB == pxCurrentTCB )
80005314:	8f8280af 	lw	v0,-32593(gp)
80005318:	8fc30010 	lw	v1,16(s8)
8000531c:	1462000d 	bne	v1,v0,80005354 <vTaskDelete+0x11c>
80005320:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1126
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
80005324:	8fc20010 	lw	v0,16(s8)
80005328:	24430004 	addiu	v1,v0,4
8000532c:	3c028001 	lui	v0,0x8001
80005330:	2444c448 	addiu	a0,v0,-15288
80005334:	00602825 	move	a1,v1
80005338:	0c002914 	jal	8000a450 <vListInsertEnd>
8000533c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1131

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
80005340:	8f8280bb 	lw	v0,-32581(gp)
80005344:	24420001 	addiu	v0,v0,1
80005348:	af8280bb 	sw	v0,-32581(gp)
8000534c:	10000009 	b	80005374 <vTaskDelete+0x13c>
80005350:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1142
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
80005354:	8f8280bf 	lw	v0,-32577(gp)
80005358:	2442ffff 	addiu	v0,v0,-1
8000535c:	af8280bf 	sw	v0,-32577(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1143
				prvDeleteTCB( pxTCB );
80005360:	8fc40010 	lw	a0,16(s8)
80005364:	0c001c7d 	jal	800071f4 <prvDeleteTCB>
80005368:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1147

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
8000536c:	0c001c90 	jal	80007240 <prvResetNextTaskUnblockTime>
80005370:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1152
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
80005374:	0c001de3 	jal	8000778c <vTaskExitCritical>
80005378:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1156

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
8000537c:	8f8280cb 	lw	v0,-32565(gp)
80005380:	10400017 	beqz	v0,800053e0 <vTaskDelete+0x1a8>
80005384:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1158
		{
			if( pxTCB == pxCurrentTCB )
80005388:	8f8280af 	lw	v0,-32593(gp)
8000538c:	8fc30010 	lw	v1,16(s8)
80005390:	14620013 	bne	v1,v0,800053e0 <vTaskDelete+0x1a8>
80005394:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1160
			{
				configASSERT( uxSchedulerSuspended == 0 );
80005398:	8f8280e7 	lw	v0,-32537(gp)
8000539c:	10400006 	beqz	v0,800053b8 <vTaskDelete+0x180>
800053a0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1160 (discriminator 1)
800053a4:	3c028001 	lui	v0,0x8001
800053a8:	2444bd48 	addiu	a0,v0,-17080
800053ac:	24050488 	li	a1,1160
800053b0:	0c000417 	jal	8000105c <vAssertCalled>
800053b4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1161
				portYIELD_WITHIN_API();
800053b8:	40026800 	mfc0	v0,c0_cause
800053bc:	00408025 	move	s0,v0
800053c0:	02001025 	move	v0,s0
800053c4:	afc20014 	sw	v0,20(s8)
800053c8:	8fc20014 	lw	v0,20(s8)
800053cc:	34420100 	ori	v0,v0,0x100
800053d0:	afc20014 	sw	v0,20(s8)
800053d4:	8fc20014 	lw	v0,20(s8)
800053d8:	40826000 	mtc0	v0,c0_status
800053dc:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1168
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
800053e0:	03c0e825 	move	sp,s8
800053e4:	8fbf0024 	lw	ra,36(sp)
800053e8:	8fbe0020 	lw	s8,32(sp)
800053ec:	8fb0001c 	lw	s0,28(sp)
800053f0:	27bd0028 	addiu	sp,sp,40
800053f4:	03e00008 	jr	ra
800053f8:	00000000 	nop

800053fc <vTaskDelayUntil>:
vTaskDelayUntil():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1176
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
800053fc:	27bdffc8 	addiu	sp,sp,-56
80005400:	afbf0034 	sw	ra,52(sp)
80005404:	afbe0030 	sw	s8,48(sp)
80005408:	afb0002c 	sw	s0,44(sp)
8000540c:	03a0f025 	move	s8,sp
80005410:	afc40038 	sw	a0,56(s8)
80005414:	afc5003c 	sw	a1,60(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1178
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
80005418:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1180

		configASSERT( pxPreviousWakeTime );
8000541c:	8fc20038 	lw	v0,56(s8)
80005420:	14400006 	bnez	v0,8000543c <vTaskDelayUntil+0x40>
80005424:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1180 (discriminator 1)
80005428:	3c028001 	lui	v0,0x8001
8000542c:	2444bd48 	addiu	a0,v0,-17080
80005430:	2405049c 	li	a1,1180
80005434:	0c000417 	jal	8000105c <vAssertCalled>
80005438:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1181
		configASSERT( ( xTimeIncrement > 0U ) );
8000543c:	8fc2003c 	lw	v0,60(s8)
80005440:	14400006 	bnez	v0,8000545c <vTaskDelayUntil+0x60>
80005444:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1181 (discriminator 1)
80005448:	3c028001 	lui	v0,0x8001
8000544c:	2444bd48 	addiu	a0,v0,-17080
80005450:	2405049d 	li	a1,1181
80005454:	0c000417 	jal	8000105c <vAssertCalled>
80005458:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1182
		configASSERT( uxSchedulerSuspended == 0 );
8000545c:	8f8280e7 	lw	v0,-32537(gp)
80005460:	10400006 	beqz	v0,8000547c <vTaskDelayUntil+0x80>
80005464:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1182 (discriminator 1)
80005468:	3c028001 	lui	v0,0x8001
8000546c:	2444bd48 	addiu	a0,v0,-17080
80005470:	2405049e 	li	a1,1182
80005474:	0c000417 	jal	8000105c <vAssertCalled>
80005478:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1184

		vTaskSuspendAll();
8000547c:	0c001876 	jal	800061d8 <vTaskSuspendAll>
80005480:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1188
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
80005484:	8f8280c3 	lw	v0,-32573(gp)
80005488:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1191

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
8000548c:	8fc20038 	lw	v0,56(s8)
80005490:	8c430000 	lw	v1,0(v0)
80005494:	8fc2003c 	lw	v0,60(s8)
80005498:	00621021 	addu	v0,v1,v0
8000549c:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1193

			if( xConstTickCount < *pxPreviousWakeTime )
800054a0:	8fc20038 	lw	v0,56(s8)
800054a4:	8c430000 	lw	v1,0(v0)
800054a8:	8fc20014 	lw	v0,20(s8)
800054ac:	0043102b 	sltu	v0,v0,v1
800054b0:	10400010 	beqz	v0,800054f4 <vTaskDelayUntil+0xf8>
800054b4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1200
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
800054b8:	8fc20038 	lw	v0,56(s8)
800054bc:	8c430000 	lw	v1,0(v0)
800054c0:	8fc20018 	lw	v0,24(s8)
800054c4:	0043102b 	sltu	v0,v0,v1
800054c8:	10400017 	beqz	v0,80005528 <vTaskDelayUntil+0x12c>
800054cc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1200 (discriminator 1)
800054d0:	8fc30018 	lw	v1,24(s8)
800054d4:	8fc20014 	lw	v0,20(s8)
800054d8:	0043102b 	sltu	v0,v0,v1
800054dc:	10400012 	beqz	v0,80005528 <vTaskDelayUntil+0x12c>
800054e0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1202
				{
					xShouldDelay = pdTRUE;
800054e4:	24020001 	li	v0,1
800054e8:	afc20010 	sw	v0,16(s8)
800054ec:	1000000e 	b	80005528 <vTaskDelayUntil+0x12c>
800054f0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1214
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
800054f4:	8fc20038 	lw	v0,56(s8)
800054f8:	8c430000 	lw	v1,0(v0)
800054fc:	8fc20018 	lw	v0,24(s8)
80005500:	0043102b 	sltu	v0,v0,v1
80005504:	14400006 	bnez	v0,80005520 <vTaskDelayUntil+0x124>
80005508:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1214 (discriminator 1)
8000550c:	8fc30018 	lw	v1,24(s8)
80005510:	8fc20014 	lw	v0,20(s8)
80005514:	0043102b 	sltu	v0,v0,v1
80005518:	10400003 	beqz	v0,80005528 <vTaskDelayUntil+0x12c>
8000551c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1216
				{
					xShouldDelay = pdTRUE;
80005520:	24020001 	li	v0,1
80005524:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1225
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
80005528:	8fc20038 	lw	v0,56(s8)
8000552c:	8fc30018 	lw	v1,24(s8)
80005530:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1227

			if( xShouldDelay != pdFALSE )
80005534:	8fc20010 	lw	v0,16(s8)
80005538:	10400008 	beqz	v0,8000555c <vTaskDelayUntil+0x160>
8000553c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1233
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
80005540:	8fc30018 	lw	v1,24(s8)
80005544:	8fc20014 	lw	v0,20(s8)
80005548:	00621023 	subu	v0,v1,v0
8000554c:	00402025 	move	a0,v0
80005550:	00002825 	move	a1,zero
80005554:	0c00207c 	jal	800081f0 <prvAddCurrentTaskToDelayedList>
80005558:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1240
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
8000555c:	0c001881 	jal	80006204 <xTaskResumeAll>
80005560:	00000000 	nop
80005564:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1244

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
80005568:	8fc2001c 	lw	v0,28(s8)
8000556c:	1440000b 	bnez	v0,8000559c <vTaskDelayUntil+0x1a0>
80005570:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1246
		{
			portYIELD_WITHIN_API();
80005574:	40026800 	mfc0	v0,c0_cause
80005578:	00408025 	move	s0,v0
8000557c:	02001025 	move	v0,s0
80005580:	afc20020 	sw	v0,32(s8)
80005584:	8fc20020 	lw	v0,32(s8)
80005588:	34420100 	ori	v0,v0,0x100
8000558c:	afc20020 	sw	v0,32(s8)
80005590:	8fc20020 	lw	v0,32(s8)
80005594:	40826000 	mtc0	v0,c0_status
80005598:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1252
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
8000559c:	03c0e825 	move	sp,s8
800055a0:	8fbf0034 	lw	ra,52(sp)
800055a4:	8fbe0030 	lw	s8,48(sp)
800055a8:	8fb0002c 	lw	s0,44(sp)
800055ac:	27bd0038 	addiu	sp,sp,56
800055b0:	03e00008 	jr	ra
800055b4:	00000000 	nop

800055b8 <vTaskDelay>:
vTaskDelay():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1260
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
800055b8:	27bdffd8 	addiu	sp,sp,-40
800055bc:	afbf0024 	sw	ra,36(sp)
800055c0:	afbe0020 	sw	s8,32(sp)
800055c4:	afb0001c 	sw	s0,28(sp)
800055c8:	03a0f025 	move	s8,sp
800055cc:	afc40028 	sw	a0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1261
	BaseType_t xAlreadyYielded = pdFALSE;
800055d0:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1264

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
800055d4:	8fc20028 	lw	v0,40(s8)
800055d8:	10400012 	beqz	v0,80005624 <vTaskDelay+0x6c>
800055dc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1266
		{
			configASSERT( uxSchedulerSuspended == 0 );
800055e0:	8f8280e7 	lw	v0,-32537(gp)
800055e4:	10400006 	beqz	v0,80005600 <vTaskDelay+0x48>
800055e8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1266 (discriminator 1)
800055ec:	3c028001 	lui	v0,0x8001
800055f0:	2444bd48 	addiu	a0,v0,-17080
800055f4:	240504f2 	li	a1,1266
800055f8:	0c000417 	jal	8000105c <vAssertCalled>
800055fc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1267
			vTaskSuspendAll();
80005600:	0c001876 	jal	800061d8 <vTaskSuspendAll>
80005604:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1278
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
80005608:	8fc40028 	lw	a0,40(s8)
8000560c:	00002825 	move	a1,zero
80005610:	0c00207c 	jal	800081f0 <prvAddCurrentTaskToDelayedList>
80005614:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1280
			}
			xAlreadyYielded = xTaskResumeAll();
80005618:	0c001881 	jal	80006204 <xTaskResumeAll>
8000561c:	00000000 	nop
80005620:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1289
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
80005624:	8fc20010 	lw	v0,16(s8)
80005628:	1440000b 	bnez	v0,80005658 <vTaskDelay+0xa0>
8000562c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1291
		{
			portYIELD_WITHIN_API();
80005630:	40026800 	mfc0	v0,c0_cause
80005634:	00408025 	move	s0,v0
80005638:	02001025 	move	v0,s0
8000563c:	afc20014 	sw	v0,20(s8)
80005640:	8fc20014 	lw	v0,20(s8)
80005644:	34420100 	ori	v0,v0,0x100
80005648:	afc20014 	sw	v0,20(s8)
8000564c:	8fc20014 	lw	v0,20(s8)
80005650:	40826000 	mtc0	v0,c0_status
80005654:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1297
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80005658:	03c0e825 	move	sp,s8
8000565c:	8fbf0024 	lw	ra,36(sp)
80005660:	8fbe0020 	lw	s8,32(sp)
80005664:	8fb0001c 	lw	s0,28(sp)
80005668:	27bd0028 	addiu	sp,sp,40
8000566c:	03e00008 	jr	ra
80005670:	00000000 	nop

80005674 <eTaskGetState>:
eTaskGetState():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1305
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
80005674:	27bdffd8 	addiu	sp,sp,-40
80005678:	afbf0024 	sw	ra,36(sp)
8000567c:	afbe0020 	sw	s8,32(sp)
80005680:	03a0f025 	move	s8,sp
80005684:	afc40028 	sw	a0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1308
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
80005688:	8fc20028 	lw	v0,40(s8)
8000568c:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1310

		configASSERT( pxTCB );
80005690:	8fc20014 	lw	v0,20(s8)
80005694:	14400006 	bnez	v0,800056b0 <eTaskGetState+0x3c>
80005698:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1310 (discriminator 1)
8000569c:	3c028001 	lui	v0,0x8001
800056a0:	2444bd48 	addiu	a0,v0,-17080
800056a4:	2405051e 	li	a1,1310
800056a8:	0c000417 	jal	8000105c <vAssertCalled>
800056ac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1312

		if( pxTCB == pxCurrentTCB )
800056b0:	8f8280af 	lw	v0,-32593(gp)
800056b4:	8fc30014 	lw	v1,20(s8)
800056b8:	14620004 	bne	v1,v0,800056cc <eTaskGetState+0x58>
800056bc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1315
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
800056c0:	afc00010 	sw	zero,16(s8)
800056c4:	10000033 	b	80005794 <eTaskGetState+0x120>
800056c8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1319
		}
		else
		{
			taskENTER_CRITICAL();
800056cc:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
800056d0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1321
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
800056d4:	8fc20014 	lw	v0,20(s8)
800056d8:	8c420014 	lw	v0,20(v0)
800056dc:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1323
			}
			taskEXIT_CRITICAL();
800056e0:	0c001de3 	jal	8000778c <vTaskExitCritical>
800056e4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1325

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
800056e8:	8f8280b3 	lw	v0,-32589(gp)
800056ec:	8fc30018 	lw	v1,24(s8)
800056f0:	10620005 	beq	v1,v0,80005708 <eTaskGetState+0x94>
800056f4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1325 (discriminator 1)
800056f8:	8f8280b7 	lw	v0,-32585(gp)
800056fc:	8fc30018 	lw	v1,24(s8)
80005700:	14620005 	bne	v1,v0,80005718 <eTaskGetState+0xa4>
80005704:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1329
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
80005708:	24020002 	li	v0,2
8000570c:	afc20010 	sw	v0,16(s8)
80005710:	10000020 	b	80005794 <eTaskGetState+0x120>
80005714:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1333
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
80005718:	8fc30018 	lw	v1,24(s8)
8000571c:	3c028001 	lui	v0,0x8001
80005720:	2442c45c 	addiu	v0,v0,-15268
80005724:	1462000d 	bne	v1,v0,8000575c <eTaskGetState+0xe8>
80005728:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1338
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
8000572c:	8fc20014 	lw	v0,20(s8)
80005730:	8c420028 	lw	v0,40(v0)
80005734:	14400005 	bnez	v0,8000574c <eTaskGetState+0xd8>
80005738:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1340
					{
						eReturn = eSuspended;
8000573c:	24020003 	li	v0,3
80005740:	afc20010 	sw	v0,16(s8)
80005744:	10000013 	b	80005794 <eTaskGetState+0x120>
80005748:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1344
					}
					else
					{
						eReturn = eBlocked;
8000574c:	24020002 	li	v0,2
80005750:	afc20010 	sw	v0,16(s8)
80005754:	1000000f 	b	80005794 <eTaskGetState+0x120>
80005758:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1350
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
8000575c:	8fc30018 	lw	v1,24(s8)
80005760:	3c028001 	lui	v0,0x8001
80005764:	2442c448 	addiu	v0,v0,-15288
80005768:	10620004 	beq	v1,v0,8000577c <eTaskGetState+0x108>
8000576c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1350 (discriminator 1)
80005770:	8fc20018 	lw	v0,24(s8)
80005774:	14400005 	bnez	v0,8000578c <eTaskGetState+0x118>
80005778:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1355
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
8000577c:	24020004 	li	v0,4
80005780:	afc20010 	sw	v0,16(s8)
80005784:	10000003 	b	80005794 <eTaskGetState+0x120>
80005788:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1363

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
8000578c:	24020001 	li	v0,1
80005790:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1367
			}
		}

		return eReturn;
80005794:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1368
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
80005798:	03c0e825 	move	sp,s8
8000579c:	8fbf0024 	lw	ra,36(sp)
800057a0:	8fbe0020 	lw	s8,32(sp)
800057a4:	27bd0028 	addiu	sp,sp,40
800057a8:	03e00008 	jr	ra
800057ac:	00000000 	nop

800057b0 <uxTaskPriorityGet>:
uxTaskPriorityGet():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1376
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
800057b0:	27bdffe0 	addiu	sp,sp,-32
800057b4:	afbf001c 	sw	ra,28(sp)
800057b8:	afbe0018 	sw	s8,24(sp)
800057bc:	03a0f025 	move	s8,sp
800057c0:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1380
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
800057c4:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
800057c8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1384
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
800057cc:	8fc20020 	lw	v0,32(s8)
800057d0:	14400004 	bnez	v0,800057e4 <uxTaskPriorityGet+0x34>
800057d4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1384 (discriminator 1)
800057d8:	8f8280af 	lw	v0,-32593(gp)
800057dc:	10000002 	b	800057e8 <uxTaskPriorityGet+0x38>
800057e0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1384 (discriminator 2)
800057e4:	8fc20020 	lw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1384 (discriminator 4)
800057e8:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1385 (discriminator 4)
			uxReturn = pxTCB->uxPriority;
800057ec:	8fc20010 	lw	v0,16(s8)
800057f0:	8c42002c 	lw	v0,44(v0)
800057f4:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1387 (discriminator 4)
		}
		taskEXIT_CRITICAL();
800057f8:	0c001de3 	jal	8000778c <vTaskExitCritical>
800057fc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1389 (discriminator 4)

		return uxReturn;
80005800:	8fc20014 	lw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1390 (discriminator 4)
	}
80005804:	03c0e825 	move	sp,s8
80005808:	8fbf001c 	lw	ra,28(sp)
8000580c:	8fbe0018 	lw	s8,24(sp)
80005810:	27bd0020 	addiu	sp,sp,32
80005814:	03e00008 	jr	ra
80005818:	00000000 	nop

8000581c <uxTaskPriorityGetFromISR>:
uxTaskPriorityGetFromISR():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1398
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
	{
8000581c:	27bdffd8 	addiu	sp,sp,-40
80005820:	afbf0024 	sw	ra,36(sp)
80005824:	afbe0020 	sw	s8,32(sp)
80005828:	03a0f025 	move	s8,sp
8000582c:	afc40028 	sw	a0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1420
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
80005830:	0c002a23 	jal	8000a88c <uxPortSetInterruptMaskFromISR>
80005834:	00000000 	nop
80005838:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1424
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
8000583c:	8fc20028 	lw	v0,40(s8)
80005840:	14400004 	bnez	v0,80005854 <uxTaskPriorityGetFromISR+0x38>
80005844:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1424 (discriminator 1)
80005848:	8f8280af 	lw	v0,-32593(gp)
8000584c:	10000002 	b	80005858 <uxTaskPriorityGetFromISR+0x3c>
80005850:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1424 (discriminator 2)
80005854:	8fc20028 	lw	v0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1424 (discriminator 4)
80005858:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1425 (discriminator 4)
			uxReturn = pxTCB->uxPriority;
8000585c:	8fc20014 	lw	v0,20(s8)
80005860:	8c42002c 	lw	v0,44(v0)
80005864:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1427 (discriminator 4)
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
80005868:	8fc40010 	lw	a0,16(s8)
8000586c:	0c0029da 	jal	8000a768 <vPortClearInterruptMaskFromISR>
80005870:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1429 (discriminator 4)

		return uxReturn;
80005874:	8fc20018 	lw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1430 (discriminator 4)
	}
80005878:	03c0e825 	move	sp,s8
8000587c:	8fbf0024 	lw	ra,36(sp)
80005880:	8fbe0020 	lw	s8,32(sp)
80005884:	27bd0028 	addiu	sp,sp,40
80005888:	03e00008 	jr	ra
8000588c:	00000000 	nop

80005890 <vTaskPrioritySet>:
vTaskPrioritySet():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1438
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
80005890:	27bdffd0 	addiu	sp,sp,-48
80005894:	afbf002c 	sw	ra,44(sp)
80005898:	afbe0028 	sw	s8,40(sp)
8000589c:	03a0f025 	move	s8,sp
800058a0:	afc40030 	sw	a0,48(s8)
800058a4:	afc50034 	sw	a1,52(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1441
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
800058a8:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1443

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
800058ac:	8fc20034 	lw	v0,52(s8)
800058b0:	2c420005 	sltiu	v0,v0,5
800058b4:	14400006 	bnez	v0,800058d0 <vTaskPrioritySet+0x40>
800058b8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1443 (discriminator 1)
800058bc:	3c028001 	lui	v0,0x8001
800058c0:	2444bd48 	addiu	a0,v0,-17080
800058c4:	240505a3 	li	a1,1443
800058c8:	0c000417 	jal	8000105c <vAssertCalled>
800058cc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1446

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
800058d0:	8fc20034 	lw	v0,52(s8)
800058d4:	2c420005 	sltiu	v0,v0,5
800058d8:	14400003 	bnez	v0,800058e8 <vTaskPrioritySet+0x58>
800058dc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1448
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
800058e0:	24020004 	li	v0,4
800058e4:	afc20034 	sw	v0,52(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1455
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
800058e8:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
800058ec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1459
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
800058f0:	8fc20030 	lw	v0,48(s8)
800058f4:	14400004 	bnez	v0,80005908 <vTaskPrioritySet+0x78>
800058f8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1459 (discriminator 1)
800058fc:	8f8280af 	lw	v0,-32593(gp)
80005900:	10000002 	b	8000590c <vTaskPrioritySet+0x7c>
80005904:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1459 (discriminator 2)
80005908:	8fc20030 	lw	v0,48(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1459 (discriminator 4)
8000590c:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1465 (discriminator 4)

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
80005910:	8fc20014 	lw	v0,20(s8)
80005914:	8c420040 	lw	v0,64(v0)
80005918:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1473 (discriminator 4)
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
8000591c:	8fc30018 	lw	v1,24(s8)
80005920:	8fc20034 	lw	v0,52(s8)
80005924:	10620074 	beq	v1,v0,80005af8 <vTaskPrioritySet+0x268>
80005928:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1477
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
8000592c:	8fc30034 	lw	v1,52(s8)
80005930:	8fc20018 	lw	v0,24(s8)
80005934:	0043102b 	sltu	v0,v0,v1
80005938:	1040000f 	beqz	v0,80005978 <vTaskPrioritySet+0xe8>
8000593c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1479
				{
					if( pxTCB != pxCurrentTCB )
80005940:	8f8280af 	lw	v0,-32593(gp)
80005944:	8fc30014 	lw	v1,20(s8)
80005948:	10620011 	beq	v1,v0,80005990 <vTaskPrioritySet+0x100>
8000594c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1484
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
80005950:	8f8280af 	lw	v0,-32593(gp)
80005954:	8c43002c 	lw	v1,44(v0)
80005958:	8fc20034 	lw	v0,52(s8)
8000595c:	0043102b 	sltu	v0,v0,v1
80005960:	1440000b 	bnez	v0,80005990 <vTaskPrioritySet+0x100>
80005964:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1486
						{
							xYieldRequired = pdTRUE;
80005968:	24020001 	li	v0,1
8000596c:	afc20010 	sw	v0,16(s8)
80005970:	10000007 	b	80005990 <vTaskPrioritySet+0x100>
80005974:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1500
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
80005978:	8f8280af 	lw	v0,-32593(gp)
8000597c:	8fc30014 	lw	v1,20(s8)
80005980:	14620003 	bne	v1,v0,80005990 <vTaskPrioritySet+0x100>
80005984:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1505
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
80005988:	24020001 	li	v0,1
8000598c:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1517
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
80005990:	8fc20014 	lw	v0,20(s8)
80005994:	8c42002c 	lw	v0,44(v0)
80005998:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1523

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
8000599c:	8fc20014 	lw	v0,20(s8)
800059a0:	8c430040 	lw	v1,64(v0)
800059a4:	8fc20014 	lw	v0,20(s8)
800059a8:	8c42002c 	lw	v0,44(v0)
800059ac:	14620004 	bne	v1,v0,800059c0 <vTaskPrioritySet+0x130>
800059b0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1525
					{
						pxTCB->uxPriority = uxNewPriority;
800059b4:	8fc20014 	lw	v0,20(s8)
800059b8:	8fc30034 	lw	v1,52(s8)
800059bc:	ac43002c 	sw	v1,44(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1533
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
800059c0:	8fc20014 	lw	v0,20(s8)
800059c4:	8fc30034 	lw	v1,52(s8)
800059c8:	ac430040 	sw	v1,64(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1543
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
800059cc:	8fc20014 	lw	v0,20(s8)
800059d0:	8c420018 	lw	v0,24(v0)
800059d4:	04400006 	bltz	v0,800059f0 <vTaskPrioritySet+0x160>
800059d8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1545
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
800059dc:	24030005 	li	v1,5
800059e0:	8fc20034 	lw	v0,52(s8)
800059e4:	00621823 	subu	v1,v1,v0
800059e8:	8fc20014 	lw	v0,20(s8)
800059ec:	ac430018 	sw	v1,24(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1556

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
800059f0:	8fc20014 	lw	v0,20(s8)
800059f4:	8c430014 	lw	v1,20(v0)
800059f8:	8fc2001c 	lw	v0,28(s8)
800059fc:	00021080 	sll	v0,v0,0x2
80005a00:	00022080 	sll	a0,v0,0x2
80005a04:	00441021 	addu	v0,v0,a0
80005a08:	3c048001 	lui	a0,0x8001
80005a0c:	2484c3a8 	addiu	a0,a0,-15448
80005a10:	00441021 	addu	v0,v0,a0
80005a14:	14620004 	bne	v1,v0,80005a28 <vTaskPrioritySet+0x198>
80005a18:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1556 (discriminator 1)
80005a1c:	24020001 	li	v0,1
80005a20:	10000002 	b	80005a2c <vTaskPrioritySet+0x19c>
80005a24:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1556 (discriminator 2)
80005a28:	00001025 	move	v0,zero
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1556 (discriminator 4)
80005a2c:	10400025 	beqz	v0,80005ac4 <vTaskPrioritySet+0x234>
80005a30:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1561
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
80005a34:	8fc20014 	lw	v0,20(s8)
80005a38:	24420004 	addiu	v0,v0,4
80005a3c:	00402025 	move	a0,v0
80005a40:	0c002972 	jal	8000a5c8 <uxListRemove>
80005a44:	00000000 	nop
80005a48:	14400008 	bnez	v0,80005a6c <vTaskPrioritySet+0x1dc>
80005a4c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1566
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
80005a50:	8fc2001c 	lw	v0,28(s8)
80005a54:	24030001 	li	v1,1
80005a58:	00431004 	sllv	v0,v1,v0
80005a5c:	00021827 	nor	v1,zero,v0
80005a60:	8f8280c7 	lw	v0,-32569(gp)
80005a64:	00621024 	and	v0,v1,v0
80005a68:	af8280c7 	sw	v0,-32569(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1572
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
80005a6c:	8fc20014 	lw	v0,20(s8)
80005a70:	8c42002c 	lw	v0,44(v0)
80005a74:	00401825 	move	v1,v0
80005a78:	24020001 	li	v0,1
80005a7c:	00621804 	sllv	v1,v0,v1
80005a80:	8f8280c7 	lw	v0,-32569(gp)
80005a84:	00621025 	or	v0,v1,v0
80005a88:	af8280c7 	sw	v0,-32569(gp)
80005a8c:	8fc20014 	lw	v0,20(s8)
80005a90:	8c42002c 	lw	v0,44(v0)
80005a94:	00021080 	sll	v0,v0,0x2
80005a98:	00021880 	sll	v1,v0,0x2
80005a9c:	00431021 	addu	v0,v0,v1
80005aa0:	3c038001 	lui	v1,0x8001
80005aa4:	2463c3a8 	addiu	v1,v1,-15448
80005aa8:	00431821 	addu	v1,v0,v1
80005aac:	8fc20014 	lw	v0,20(s8)
80005ab0:	24420004 	addiu	v0,v0,4
80005ab4:	00602025 	move	a0,v1
80005ab8:	00402825 	move	a1,v0
80005abc:	0c002914 	jal	8000a450 <vListInsertEnd>
80005ac0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1579
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
80005ac4:	8fc20010 	lw	v0,16(s8)
80005ac8:	1040000b 	beqz	v0,80005af8 <vTaskPrioritySet+0x268>
80005acc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1581
				{
					taskYIELD_IF_USING_PREEMPTION();
80005ad0:	40026800 	mfc0	v0,c0_cause
80005ad4:	0040f825 	move	ra,v0
80005ad8:	03e01025 	move	v0,ra
80005adc:	afc20020 	sw	v0,32(s8)
80005ae0:	8fc20020 	lw	v0,32(s8)
80005ae4:	34420100 	ori	v0,v0,0x100
80005ae8:	afc20020 	sw	v0,32(s8)
80005aec:	8fc20020 	lw	v0,32(s8)
80005af0:	40826000 	mtc0	v0,c0_status
80005af4:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1593
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
80005af8:	0c001de3 	jal	8000778c <vTaskExitCritical>
80005afc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1594
	}
80005b00:	03c0e825 	move	sp,s8
80005b04:	8fbf002c 	lw	ra,44(sp)
80005b08:	8fbe0028 	lw	s8,40(sp)
80005b0c:	27bd0030 	addiu	sp,sp,48
80005b10:	03e00008 	jr	ra
80005b14:	00000000 	nop

80005b18 <vTaskSuspend>:
vTaskSuspend():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1602
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
80005b18:	27bdffd8 	addiu	sp,sp,-40
80005b1c:	afbf0024 	sw	ra,36(sp)
80005b20:	afbe0020 	sw	s8,32(sp)
80005b24:	afb0001c 	sw	s0,28(sp)
80005b28:	03a0f025 	move	s8,sp
80005b2c:	afc40028 	sw	a0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1605
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
80005b30:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80005b34:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1609
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
80005b38:	8fc20028 	lw	v0,40(s8)
80005b3c:	14400004 	bnez	v0,80005b50 <vTaskSuspend+0x38>
80005b40:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1609 (discriminator 1)
80005b44:	8f8280af 	lw	v0,-32593(gp)
80005b48:	10000002 	b	80005b54 <vTaskSuspend+0x3c>
80005b4c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1609 (discriminator 2)
80005b50:	8fc20028 	lw	v0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1609 (discriminator 4)
80005b54:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1615 (discriminator 4)

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
80005b58:	8fc20010 	lw	v0,16(s8)
80005b5c:	24420004 	addiu	v0,v0,4
80005b60:	00402025 	move	a0,v0
80005b64:	0c002972 	jal	8000a5c8 <uxListRemove>
80005b68:	00000000 	nop
80005b6c:	14400015 	bnez	v0,80005bc4 <vTaskSuspend+0xac>
80005b70:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1617
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
80005b74:	8fc20010 	lw	v0,16(s8)
80005b78:	8c42002c 	lw	v0,44(v0)
80005b7c:	3c038001 	lui	v1,0x8001
80005b80:	00021080 	sll	v0,v0,0x2
80005b84:	00022080 	sll	a0,v0,0x2
80005b88:	00441021 	addu	v0,v0,a0
80005b8c:	2463c3a8 	addiu	v1,v1,-15448
80005b90:	00431021 	addu	v0,v0,v1
80005b94:	8c420000 	lw	v0,0(v0)
80005b98:	1440000a 	bnez	v0,80005bc4 <vTaskSuspend+0xac>
80005b9c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1617 (discriminator 1)
80005ba0:	8fc20010 	lw	v0,16(s8)
80005ba4:	8c42002c 	lw	v0,44(v0)
80005ba8:	00401825 	move	v1,v0
80005bac:	24020001 	li	v0,1
80005bb0:	00621004 	sllv	v0,v0,v1
80005bb4:	00021827 	nor	v1,zero,v0
80005bb8:	8f8280c7 	lw	v0,-32569(gp)
80005bbc:	00621024 	and	v0,v1,v0
80005bc0:	af8280c7 	sw	v0,-32569(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1625
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
80005bc4:	8fc20010 	lw	v0,16(s8)
80005bc8:	8c420028 	lw	v0,40(v0)
80005bcc:	10400006 	beqz	v0,80005be8 <vTaskSuspend+0xd0>
80005bd0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1627
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80005bd4:	8fc20010 	lw	v0,16(s8)
80005bd8:	24420018 	addiu	v0,v0,24
80005bdc:	00402025 	move	a0,v0
80005be0:	0c002972 	jal	8000a5c8 <uxListRemove>
80005be4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1634
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
80005be8:	8fc20010 	lw	v0,16(s8)
80005bec:	24430004 	addiu	v1,v0,4
80005bf0:	3c028001 	lui	v0,0x8001
80005bf4:	2444c45c 	addiu	a0,v0,-15268
80005bf8:	00602825 	move	a1,v1
80005bfc:	0c002914 	jal	8000a450 <vListInsertEnd>
80005c00:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1636
		}
		taskEXIT_CRITICAL();
80005c04:	0c001de3 	jal	8000778c <vTaskExitCritical>
80005c08:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1638

		if( xSchedulerRunning != pdFALSE )
80005c0c:	8f8280cb 	lw	v0,-32565(gp)
80005c10:	10400007 	beqz	v0,80005c30 <vTaskSuspend+0x118>
80005c14:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1642
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
80005c18:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80005c1c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1644
			{
				prvResetNextTaskUnblockTime();
80005c20:	0c001c90 	jal	80007240 <prvResetNextTaskUnblockTime>
80005c24:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1646
			}
			taskEXIT_CRITICAL();
80005c28:	0c001de3 	jal	8000778c <vTaskExitCritical>
80005c2c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1653
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
80005c30:	8f8280af 	lw	v0,-32593(gp)
80005c34:	8fc30010 	lw	v1,16(s8)
80005c38:	14620022 	bne	v1,v0,80005cc4 <vTaskSuspend+0x1ac>
80005c3c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1655
		{
			if( xSchedulerRunning != pdFALSE )
80005c40:	8f8280cb 	lw	v0,-32565(gp)
80005c44:	10400015 	beqz	v0,80005c9c <vTaskSuspend+0x184>
80005c48:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1658
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
80005c4c:	8f8280e7 	lw	v0,-32537(gp)
80005c50:	10400006 	beqz	v0,80005c6c <vTaskSuspend+0x154>
80005c54:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1658 (discriminator 1)
80005c58:	3c028001 	lui	v0,0x8001
80005c5c:	2444bd48 	addiu	a0,v0,-17080
80005c60:	2405067a 	li	a1,1658
80005c64:	0c000417 	jal	8000105c <vAssertCalled>
80005c68:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1659
				portYIELD_WITHIN_API();
80005c6c:	40026800 	mfc0	v0,c0_cause
80005c70:	00408025 	move	s0,v0
80005c74:	02001025 	move	v0,s0
80005c78:	afc20014 	sw	v0,20(s8)
80005c7c:	8fc20014 	lw	v0,20(s8)
80005c80:	34420100 	ori	v0,v0,0x100
80005c84:	afc20014 	sw	v0,20(s8)
80005c88:	8fc20014 	lw	v0,20(s8)
80005c8c:	40826000 	mtc0	v0,c0_status
80005c90:	000000c0 	ehb
80005c94:	1000000b 	b	80005cc4 <vTaskSuspend+0x1ac>
80005c98:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1666
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
80005c9c:	3c028001 	lui	v0,0x8001
80005ca0:	8c43c45c 	lw	v1,-15268(v0)
80005ca4:	8f8280bf 	lw	v0,-32577(gp)
80005ca8:	14620004 	bne	v1,v0,80005cbc <vTaskSuspend+0x1a4>
80005cac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1672
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
80005cb0:	af8080af 	sw	zero,-32593(gp)
80005cb4:	10000003 	b	80005cc4 <vTaskSuspend+0x1ac>
80005cb8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1676
				}
				else
				{
					vTaskSwitchContext();
80005cbc:	0c0019d6 	jal	80006758 <vTaskSwitchContext>
80005cc0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1684
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80005cc4:	03c0e825 	move	sp,s8
80005cc8:	8fbf0024 	lw	ra,36(sp)
80005ccc:	8fbe0020 	lw	s8,32(sp)
80005cd0:	8fb0001c 	lw	s0,28(sp)
80005cd4:	27bd0028 	addiu	sp,sp,40
80005cd8:	03e00008 	jr	ra
80005cdc:	00000000 	nop

80005ce0 <prvTaskIsTaskSuspended>:
prvTaskIsTaskSuspended():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1692
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
80005ce0:	27bdffe0 	addiu	sp,sp,-32
80005ce4:	afbf001c 	sw	ra,28(sp)
80005ce8:	afbe0018 	sw	s8,24(sp)
80005cec:	03a0f025 	move	s8,sp
80005cf0:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1693
	BaseType_t xReturn = pdFALSE;
80005cf4:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1694
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
80005cf8:	8fc20020 	lw	v0,32(s8)
80005cfc:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1700

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
80005d00:	8fc20020 	lw	v0,32(s8)
80005d04:	14400006 	bnez	v0,80005d20 <prvTaskIsTaskSuspended+0x40>
80005d08:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1700 (discriminator 1)
80005d0c:	3c028001 	lui	v0,0x8001
80005d10:	2444bd48 	addiu	a0,v0,-17080
80005d14:	240506a4 	li	a1,1700
80005d18:	0c000417 	jal	8000105c <vAssertCalled>
80005d1c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1703

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
80005d20:	8fc20014 	lw	v0,20(s8)
80005d24:	8c430014 	lw	v1,20(v0)
80005d28:	3c028001 	lui	v0,0x8001
80005d2c:	2442c45c 	addiu	v0,v0,-15268
80005d30:	14620004 	bne	v1,v0,80005d44 <prvTaskIsTaskSuspended+0x64>
80005d34:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1703 (discriminator 1)
80005d38:	24020001 	li	v0,1
80005d3c:	10000002 	b	80005d48 <prvTaskIsTaskSuspended+0x68>
80005d40:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1703 (discriminator 2)
80005d44:	00001025 	move	v0,zero
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1703 (discriminator 4)
80005d48:	10400013 	beqz	v0,80005d98 <prvTaskIsTaskSuspended+0xb8>
80005d4c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1706
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
80005d50:	8fc20014 	lw	v0,20(s8)
80005d54:	8c430028 	lw	v1,40(v0)
80005d58:	3c028001 	lui	v0,0x8001
80005d5c:	2442c434 	addiu	v0,v0,-15308
80005d60:	1062000d 	beq	v1,v0,80005d98 <prvTaskIsTaskSuspended+0xb8>
80005d64:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1710
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
80005d68:	8fc20014 	lw	v0,20(s8)
80005d6c:	8c420028 	lw	v0,40(v0)
80005d70:	14400004 	bnez	v0,80005d84 <prvTaskIsTaskSuspended+0xa4>
80005d74:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1710 (discriminator 1)
80005d78:	24020001 	li	v0,1
80005d7c:	10000002 	b	80005d88 <prvTaskIsTaskSuspended+0xa8>
80005d80:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1710 (discriminator 2)
80005d84:	00001025 	move	v0,zero
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1710 (discriminator 4)
80005d88:	10400003 	beqz	v0,80005d98 <prvTaskIsTaskSuspended+0xb8>
80005d8c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1712
				{
					xReturn = pdTRUE;
80005d90:	24020001 	li	v0,1
80005d94:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1729
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
80005d98:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1730
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
80005d9c:	03c0e825 	move	sp,s8
80005da0:	8fbf001c 	lw	ra,28(sp)
80005da4:	8fbe0018 	lw	s8,24(sp)
80005da8:	27bd0020 	addiu	sp,sp,32
80005dac:	03e00008 	jr	ra
80005db0:	00000000 	nop

80005db4 <vTaskResume>:
vTaskResume():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1738
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
80005db4:	27bdffe0 	addiu	sp,sp,-32
80005db8:	afbf001c 	sw	ra,28(sp)
80005dbc:	afbe0018 	sw	s8,24(sp)
80005dc0:	03a0f025 	move	s8,sp
80005dc4:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1739
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
80005dc8:	8fc20020 	lw	v0,32(s8)
80005dcc:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1742

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
80005dd0:	8fc20020 	lw	v0,32(s8)
80005dd4:	14400006 	bnez	v0,80005df0 <vTaskResume+0x3c>
80005dd8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1742 (discriminator 1)
80005ddc:	3c028001 	lui	v0,0x8001
80005de0:	2444bd48 	addiu	a0,v0,-17080
80005de4:	240506ce 	li	a1,1742
80005de8:	0c000417 	jal	8000105c <vAssertCalled>
80005dec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1746

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
80005df0:	8fc20010 	lw	v0,16(s8)
80005df4:	1040003a 	beqz	v0,80005ee0 <vTaskResume+0x12c>
80005df8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1746 (discriminator 1)
80005dfc:	8f8280af 	lw	v0,-32593(gp)
80005e00:	8fc30010 	lw	v1,16(s8)
80005e04:	10620036 	beq	v1,v0,80005ee0 <vTaskResume+0x12c>
80005e08:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1748
		{
			taskENTER_CRITICAL();
80005e0c:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80005e10:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1750
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
80005e14:	8fc40010 	lw	a0,16(s8)
80005e18:	0c001738 	jal	80005ce0 <prvTaskIsTaskSuspended>
80005e1c:	00000000 	nop
80005e20:	1040002d 	beqz	v0,80005ed8 <vTaskResume+0x124>
80005e24:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1756
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
80005e28:	8fc20010 	lw	v0,16(s8)
80005e2c:	24420004 	addiu	v0,v0,4
80005e30:	00402025 	move	a0,v0
80005e34:	0c002972 	jal	8000a5c8 <uxListRemove>
80005e38:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1757
					prvAddTaskToReadyList( pxTCB );
80005e3c:	8fc20010 	lw	v0,16(s8)
80005e40:	8c42002c 	lw	v0,44(v0)
80005e44:	00401825 	move	v1,v0
80005e48:	24020001 	li	v0,1
80005e4c:	00621804 	sllv	v1,v0,v1
80005e50:	8f8280c7 	lw	v0,-32569(gp)
80005e54:	00621025 	or	v0,v1,v0
80005e58:	af8280c7 	sw	v0,-32569(gp)
80005e5c:	8fc20010 	lw	v0,16(s8)
80005e60:	8c42002c 	lw	v0,44(v0)
80005e64:	00021080 	sll	v0,v0,0x2
80005e68:	00021880 	sll	v1,v0,0x2
80005e6c:	00431021 	addu	v0,v0,v1
80005e70:	3c038001 	lui	v1,0x8001
80005e74:	2463c3a8 	addiu	v1,v1,-15448
80005e78:	00431821 	addu	v1,v0,v1
80005e7c:	8fc20010 	lw	v0,16(s8)
80005e80:	24420004 	addiu	v0,v0,4
80005e84:	00602025 	move	a0,v1
80005e88:	00402825 	move	a1,v0
80005e8c:	0c002914 	jal	8000a450 <vListInsertEnd>
80005e90:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1760

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80005e94:	8fc20010 	lw	v0,16(s8)
80005e98:	8c43002c 	lw	v1,44(v0)
80005e9c:	8f8280af 	lw	v0,-32593(gp)
80005ea0:	8c42002c 	lw	v0,44(v0)
80005ea4:	0062102b 	sltu	v0,v1,v0
80005ea8:	1440000b 	bnez	v0,80005ed8 <vTaskResume+0x124>
80005eac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1765
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
80005eb0:	40026800 	mfc0	v0,c0_cause
80005eb4:	0040f825 	move	ra,v0
80005eb8:	03e01025 	move	v0,ra
80005ebc:	afc20014 	sw	v0,20(s8)
80005ec0:	8fc20014 	lw	v0,20(s8)
80005ec4:	34420100 	ori	v0,v0,0x100
80005ec8:	afc20014 	sw	v0,20(s8)
80005ecc:	8fc20014 	lw	v0,20(s8)
80005ed0:	40826000 	mtc0	v0,c0_status
80005ed4:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1777
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
80005ed8:	0c001de3 	jal	8000778c <vTaskExitCritical>
80005edc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1783
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80005ee0:	03c0e825 	move	sp,s8
80005ee4:	8fbf001c 	lw	ra,28(sp)
80005ee8:	8fbe0018 	lw	s8,24(sp)
80005eec:	27bd0020 	addiu	sp,sp,32
80005ef0:	03e00008 	jr	ra
80005ef4:	00000000 	nop

80005ef8 <xTaskResumeFromISR>:
xTaskResumeFromISR():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1792
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
80005ef8:	27bdffd8 	addiu	sp,sp,-40
80005efc:	afbf0024 	sw	ra,36(sp)
80005f00:	afbe0020 	sw	s8,32(sp)
80005f04:	03a0f025 	move	s8,sp
80005f08:	afc40028 	sw	a0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1793
	BaseType_t xYieldRequired = pdFALSE;
80005f0c:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1794
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
80005f10:	8fc20028 	lw	v0,40(s8)
80005f14:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1797
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
80005f18:	8fc20028 	lw	v0,40(s8)
80005f1c:	14400006 	bnez	v0,80005f38 <xTaskResumeFromISR+0x40>
80005f20:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1797 (discriminator 1)
80005f24:	3c028001 	lui	v0,0x8001
80005f28:	2444bd48 	addiu	a0,v0,-17080
80005f2c:	24050705 	li	a1,1797
80005f30:	0c000417 	jal	8000105c <vAssertCalled>
80005f34:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1817
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
80005f38:	0c002a23 	jal	8000a88c <uxPortSetInterruptMaskFromISR>
80005f3c:	00000000 	nop
80005f40:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1819
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
80005f44:	8fc40014 	lw	a0,20(s8)
80005f48:	0c001738 	jal	80005ce0 <prvTaskIsTaskSuspended>
80005f4c:	00000000 	nop
80005f50:	10400031 	beqz	v0,80006018 <xTaskResumeFromISR+0x120>
80005f54:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1824
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80005f58:	8f8280e7 	lw	v0,-32537(gp)
80005f5c:	14400027 	bnez	v0,80005ffc <xTaskResumeFromISR+0x104>
80005f60:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1828
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80005f64:	8fc20014 	lw	v0,20(s8)
80005f68:	8c43002c 	lw	v1,44(v0)
80005f6c:	8f8280af 	lw	v0,-32593(gp)
80005f70:	8c42002c 	lw	v0,44(v0)
80005f74:	0062102b 	sltu	v0,v1,v0
80005f78:	14400003 	bnez	v0,80005f88 <xTaskResumeFromISR+0x90>
80005f7c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1830
					{
						xYieldRequired = pdTRUE;
80005f80:	24020001 	li	v0,1
80005f84:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1837
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
80005f88:	8fc20014 	lw	v0,20(s8)
80005f8c:	24420004 	addiu	v0,v0,4
80005f90:	00402025 	move	a0,v0
80005f94:	0c002972 	jal	8000a5c8 <uxListRemove>
80005f98:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1838
					prvAddTaskToReadyList( pxTCB );
80005f9c:	8fc20014 	lw	v0,20(s8)
80005fa0:	8c42002c 	lw	v0,44(v0)
80005fa4:	00401825 	move	v1,v0
80005fa8:	24020001 	li	v0,1
80005fac:	00621804 	sllv	v1,v0,v1
80005fb0:	8f8280c7 	lw	v0,-32569(gp)
80005fb4:	00621025 	or	v0,v1,v0
80005fb8:	af8280c7 	sw	v0,-32569(gp)
80005fbc:	8fc20014 	lw	v0,20(s8)
80005fc0:	8c42002c 	lw	v0,44(v0)
80005fc4:	00021080 	sll	v0,v0,0x2
80005fc8:	00021880 	sll	v1,v0,0x2
80005fcc:	00431021 	addu	v0,v0,v1
80005fd0:	3c038001 	lui	v1,0x8001
80005fd4:	2463c3a8 	addiu	v1,v1,-15448
80005fd8:	00431821 	addu	v1,v0,v1
80005fdc:	8fc20014 	lw	v0,20(s8)
80005fe0:	24420004 	addiu	v0,v0,4
80005fe4:	00602025 	move	a0,v1
80005fe8:	00402825 	move	a1,v0
80005fec:	0c002914 	jal	8000a450 <vListInsertEnd>
80005ff0:	00000000 	nop
80005ff4:	10000008 	b	80006018 <xTaskResumeFromISR+0x120>
80005ff8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1845
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
80005ffc:	8fc20014 	lw	v0,20(s8)
80006000:	24430018 	addiu	v1,v0,24
80006004:	3c028001 	lui	v0,0x8001
80006008:	2444c434 	addiu	a0,v0,-15308
8000600c:	00602825 	move	a1,v1
80006010:	0c002914 	jal	8000a450 <vListInsertEnd>
80006014:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1853
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
80006018:	8fc40018 	lw	a0,24(s8)
8000601c:	0c0029da 	jal	8000a768 <vPortClearInterruptMaskFromISR>
80006020:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1855

		return xYieldRequired;
80006024:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1856
	}
80006028:	03c0e825 	move	sp,s8
8000602c:	8fbf0024 	lw	ra,36(sp)
80006030:	8fbe0020 	lw	s8,32(sp)
80006034:	27bd0028 	addiu	sp,sp,40
80006038:	03e00008 	jr	ra
8000603c:	00000000 	nop

80006040 <vTaskStartScheduler>:
vTaskStartScheduler():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1862

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
80006040:	27bdffd8 	addiu	sp,sp,-40
80006044:	afbf0024 	sw	ra,36(sp)
80006048:	afbe0020 	sw	s8,32(sp)
8000604c:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1895
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
80006050:	afa00010 	sw	zero,16(sp)
80006054:	278280e3 	addiu	v0,gp,-32541
80006058:	afa20014 	sw	v0,20(sp)
8000605c:	3c028000 	lui	v0,0x8000
80006060:	24446f10 	addiu	a0,v0,28432
80006064:	3c028001 	lui	v0,0x8001
80006068:	2445bd60 	addiu	a1,v0,-17056
8000606c:	240600be 	li	a2,190
80006070:	00003825 	move	a3,zero
80006074:	0c00133d 	jal	80004cf4 <xTaskCreate>
80006078:	00000000 	nop
8000607c:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1905
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
80006080:	8fc30018 	lw	v1,24(s8)
80006084:	24020001 	li	v0,1
80006088:	14620004 	bne	v1,v0,8000609c <vTaskStartScheduler+0x5c>
8000608c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1907
		{
			xReturn = xTimerCreateTimerTask();
80006090:	0c000cc0 	jal	80003300 <xTimerCreateTimerTask>
80006094:	00000000 	nop
80006098:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1916
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
8000609c:	8fc30018 	lw	v1,24(s8)
800060a0:	24020001 	li	v0,1
800060a4:	1462001d 	bne	v1,v0,8000611c <vTaskStartScheduler+0xdc>
800060a8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1923
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
800060ac:	40026000 	mfc0	v0,c0_status
800060b0:	0040f825 	move	ra,v0
800060b4:	03e01025 	move	v0,ra
800060b8:	afc2001c 	sw	v0,28(s8)
800060bc:	8fc3001c 	lw	v1,28(s8)
800060c0:	3c020001 	lui	v0,0x1
800060c4:	3442fc00 	ori	v0,v0,0xfc00
800060c8:	00621024 	and	v0,v1,v0
800060cc:	00021282 	srl	v0,v0,0xa
800060d0:	2c420003 	sltiu	v0,v0,3
800060d4:	10400008 	beqz	v0,800060f8 <vTaskStartScheduler+0xb8>
800060d8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1923 (discriminator 1)
800060dc:	8fc2001c 	lw	v0,28(s8)
800060e0:	7c028284 	ins	v0,zero,0xa,0x7
800060e4:	afc2001c 	sw	v0,28(s8)
800060e8:	8fc2001c 	lw	v0,28(s8)
800060ec:	34420c00 	ori	v0,v0,0xc00
800060f0:	40826000 	mtc0	v0,c0_status
800060f4:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1933
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
800060f8:	2402ffff 	li	v0,-1
800060fc:	af8280df 	sw	v0,-32545(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1934
		xSchedulerRunning = pdTRUE;
80006100:	24020001 	li	v0,1
80006104:	af8280cb 	sw	v0,-32565(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1935
		xTickCount = ( TickType_t ) 0U;
80006108:	af8080c3 	sw	zero,-32573(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1944
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
8000610c:	0c002a05 	jal	8000a814 <xPortStartScheduler>
80006110:	00000000 	nop
80006114:	1000000a 	b	80006140 <vTaskStartScheduler+0x100>
80006118:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1959
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
8000611c:	8fc30018 	lw	v1,24(s8)
80006120:	2402ffff 	li	v0,-1
80006124:	14620006 	bne	v1,v0,80006140 <vTaskStartScheduler+0x100>
80006128:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1959 (discriminator 1)
8000612c:	3c028001 	lui	v0,0x8001
80006130:	2444bd48 	addiu	a0,v0,-17080
80006134:	240507a7 	li	a1,1959
80006138:	0c000417 	jal	8000105c <vAssertCalled>
8000613c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1965
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
80006140:	03c0e825 	move	sp,s8
80006144:	8fbf0024 	lw	ra,36(sp)
80006148:	8fbe0020 	lw	s8,32(sp)
8000614c:	27bd0028 	addiu	sp,sp,40
80006150:	03e00008 	jr	ra
80006154:	00000000 	nop

80006158 <vTaskEndScheduler>:
vTaskEndScheduler():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1969
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
80006158:	27bdffe0 	addiu	sp,sp,-32
8000615c:	afbf001c 	sw	ra,28(sp)
80006160:	afbe0018 	sw	s8,24(sp)
80006164:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1973
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
80006168:	40026000 	mfc0	v0,c0_status
8000616c:	0040f825 	move	ra,v0
80006170:	03e01025 	move	v0,ra
80006174:	afc20010 	sw	v0,16(s8)
80006178:	8fc30010 	lw	v1,16(s8)
8000617c:	3c020001 	lui	v0,0x1
80006180:	3442fc00 	ori	v0,v0,0xfc00
80006184:	00621024 	and	v0,v1,v0
80006188:	00021282 	srl	v0,v0,0xa
8000618c:	2c420003 	sltiu	v0,v0,3
80006190:	10400008 	beqz	v0,800061b4 <vTaskEndScheduler+0x5c>
80006194:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1973 (discriminator 1)
80006198:	8fc20010 	lw	v0,16(s8)
8000619c:	7c028284 	ins	v0,zero,0xa,0x7
800061a0:	afc20010 	sw	v0,16(s8)
800061a4:	8fc20010 	lw	v0,16(s8)
800061a8:	34420c00 	ori	v0,v0,0xc00
800061ac:	40826000 	mtc0	v0,c0_status
800061b0:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1974
	xSchedulerRunning = pdFALSE;
800061b4:	af8080cb 	sw	zero,-32565(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1975
	vPortEndScheduler();
800061b8:	0c0029e6 	jal	8000a798 <vPortEndScheduler>
800061bc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1976
}
800061c0:	03c0e825 	move	sp,s8
800061c4:	8fbf001c 	lw	ra,28(sp)
800061c8:	8fbe0018 	lw	s8,24(sp)
800061cc:	27bd0020 	addiu	sp,sp,32
800061d0:	03e00008 	jr	ra
800061d4:	00000000 	nop

800061d8 <vTaskSuspendAll>:
vTaskSuspendAll():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1980
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
800061d8:	27bdfff8 	addiu	sp,sp,-8
800061dc:	afbe0004 	sw	s8,4(sp)
800061e0:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1985
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
800061e4:	8f8280e7 	lw	v0,-32537(gp)
800061e8:	24420001 	addiu	v0,v0,1
800061ec:	af8280e7 	sw	v0,-32537(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:1986
}
800061f0:	03c0e825 	move	sp,s8
800061f4:	8fbe0004 	lw	s8,4(sp)
800061f8:	27bd0008 	addiu	sp,sp,8
800061fc:	03e00008 	jr	ra
80006200:	00000000 	nop

80006204 <xTaskResumeAll>:
xTaskResumeAll():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2053

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
80006204:	27bdffd8 	addiu	sp,sp,-40
80006208:	afbf0024 	sw	ra,36(sp)
8000620c:	afbe0020 	sw	s8,32(sp)
80006210:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2054
TCB_t *pxTCB = NULL;
80006214:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2055
BaseType_t xAlreadyYielded = pdFALSE;
80006218:	afc00014 	sw	zero,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2059

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
8000621c:	8f8280e7 	lw	v0,-32537(gp)
80006220:	14400006 	bnez	v0,8000623c <xTaskResumeAll+0x38>
80006224:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2059 (discriminator 1)
80006228:	3c028001 	lui	v0,0x8001
8000622c:	2444bd48 	addiu	a0,v0,-17080
80006230:	2405080b 	li	a1,2059
80006234:	0c000417 	jal	8000105c <vAssertCalled>
80006238:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2066
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
8000623c:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80006240:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2068
	{
		--uxSchedulerSuspended;
80006244:	8f8280e7 	lw	v0,-32537(gp)
80006248:	2442ffff 	addiu	v0,v0,-1
8000624c:	af8280e7 	sw	v0,-32537(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2070

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80006250:	8f8280e7 	lw	v0,-32537(gp)
80006254:	1440005e 	bnez	v0,800063d0 <xTaskResumeAll+0x1cc>
80006258:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2072
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
8000625c:	8f8280bf 	lw	v0,-32577(gp)
80006260:	1040005b 	beqz	v0,800063d0 <xTaskResumeAll+0x1cc>
80006264:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2076
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80006268:	1000002f 	b	80006328 <xTaskResumeAll+0x124>
8000626c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2078
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
80006270:	3c028001 	lui	v0,0x8001
80006274:	2442c434 	addiu	v0,v0,-15308
80006278:	8c42000c 	lw	v0,12(v0)
8000627c:	8c42000c 	lw	v0,12(v0)
80006280:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2079
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80006284:	8fc20010 	lw	v0,16(s8)
80006288:	24420018 	addiu	v0,v0,24
8000628c:	00402025 	move	a0,v0
80006290:	0c002972 	jal	8000a5c8 <uxListRemove>
80006294:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2080
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
80006298:	8fc20010 	lw	v0,16(s8)
8000629c:	24420004 	addiu	v0,v0,4
800062a0:	00402025 	move	a0,v0
800062a4:	0c002972 	jal	8000a5c8 <uxListRemove>
800062a8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2081
					prvAddTaskToReadyList( pxTCB );
800062ac:	8fc20010 	lw	v0,16(s8)
800062b0:	8c42002c 	lw	v0,44(v0)
800062b4:	00401825 	move	v1,v0
800062b8:	24020001 	li	v0,1
800062bc:	00621804 	sllv	v1,v0,v1
800062c0:	8f8280c7 	lw	v0,-32569(gp)
800062c4:	00621025 	or	v0,v1,v0
800062c8:	af8280c7 	sw	v0,-32569(gp)
800062cc:	8fc20010 	lw	v0,16(s8)
800062d0:	8c42002c 	lw	v0,44(v0)
800062d4:	00021080 	sll	v0,v0,0x2
800062d8:	00021880 	sll	v1,v0,0x2
800062dc:	00431021 	addu	v0,v0,v1
800062e0:	3c038001 	lui	v1,0x8001
800062e4:	2463c3a8 	addiu	v1,v1,-15448
800062e8:	00431821 	addu	v1,v0,v1
800062ec:	8fc20010 	lw	v0,16(s8)
800062f0:	24420004 	addiu	v0,v0,4
800062f4:	00602025 	move	a0,v1
800062f8:	00402825 	move	a1,v0
800062fc:	0c002914 	jal	8000a450 <vListInsertEnd>
80006300:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2085

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80006304:	8fc20010 	lw	v0,16(s8)
80006308:	8c43002c 	lw	v1,44(v0)
8000630c:	8f8280af 	lw	v0,-32593(gp)
80006310:	8c42002c 	lw	v0,44(v0)
80006314:	0062102b 	sltu	v0,v1,v0
80006318:	14400003 	bnez	v0,80006328 <xTaskResumeAll+0x124>
8000631c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2087
					{
						xYieldPending = pdTRUE;
80006320:	24020001 	li	v0,1
80006324:	af8280d3 	sw	v0,-32557(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2076
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80006328:	3c028001 	lui	v0,0x8001
8000632c:	8c42c434 	lw	v0,-15308(v0)
80006330:	1440ffcf 	bnez	v0,80006270 <xTaskResumeAll+0x6c>
80006334:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2095
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
80006338:	8fc20010 	lw	v0,16(s8)
8000633c:	10400003 	beqz	v0,8000634c <xTaskResumeAll+0x148>
80006340:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2103
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
80006344:	0c001c90 	jal	80007240 <prvResetNextTaskUnblockTime>
80006348:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2111
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
8000634c:	8f8280cf 	lw	v0,-32561(gp)
80006350:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2113

					if( uxPendedCounts > ( UBaseType_t ) 0U )
80006354:	8fc20018 	lw	v0,24(s8)
80006358:	1040000e 	beqz	v0,80006394 <xTaskResumeAll+0x190>
8000635c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2117
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
80006360:	0c00193a 	jal	800064e8 <xTaskIncrementTick>
80006364:	00000000 	nop
80006368:	10400003 	beqz	v0,80006378 <xTaskResumeAll+0x174>
8000636c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2119
							{
								xYieldPending = pdTRUE;
80006370:	24020001 	li	v0,1
80006374:	af8280d3 	sw	v0,-32557(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2125
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
80006378:	8fc20018 	lw	v0,24(s8)
8000637c:	2442ffff 	addiu	v0,v0,-1
80006380:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2126
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
80006384:	8fc20018 	lw	v0,24(s8)
80006388:	1440fff5 	bnez	v0,80006360 <xTaskResumeAll+0x15c>
8000638c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2128

						uxPendedTicks = 0;
80006390:	af8080cf 	sw	zero,-32561(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2136
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
80006394:	8f8280d3 	lw	v0,-32557(gp)
80006398:	1040000d 	beqz	v0,800063d0 <xTaskResumeAll+0x1cc>
8000639c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2140
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
800063a0:	24020001 	li	v0,1
800063a4:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2143
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
800063a8:	40026800 	mfc0	v0,c0_cause
800063ac:	0040f825 	move	ra,v0
800063b0:	03e01025 	move	v0,ra
800063b4:	afc2001c 	sw	v0,28(s8)
800063b8:	8fc2001c 	lw	v0,28(s8)
800063bc:	34420100 	ori	v0,v0,0x100
800063c0:	afc2001c 	sw	v0,28(s8)
800063c4:	8fc2001c 	lw	v0,28(s8)
800063c8:	40826000 	mtc0	v0,c0_status
800063cc:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2156
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
800063d0:	0c001de3 	jal	8000778c <vTaskExitCritical>
800063d4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2158

	return xAlreadyYielded;
800063d8:	8fc20014 	lw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2159
}
800063dc:	03c0e825 	move	sp,s8
800063e0:	8fbf0024 	lw	ra,36(sp)
800063e4:	8fbe0020 	lw	s8,32(sp)
800063e8:	27bd0028 	addiu	sp,sp,40
800063ec:	03e00008 	jr	ra
800063f0:	00000000 	nop

800063f4 <xTaskGetTickCount>:
xTaskGetTickCount():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2163
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
800063f4:	27bdfff0 	addiu	sp,sp,-16
800063f8:	afbe000c 	sw	s8,12(sp)
800063fc:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2169
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
80006400:	8f8280c3 	lw	v0,-32573(gp)
80006404:	afc20000 	sw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2173
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
80006408:	8fc20000 	lw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2174
}
8000640c:	03c0e825 	move	sp,s8
80006410:	8fbe000c 	lw	s8,12(sp)
80006414:	27bd0010 	addiu	sp,sp,16
80006418:	03e00008 	jr	ra
8000641c:	00000000 	nop

80006420 <xTaskGetTickCountFromISR>:
xTaskGetTickCountFromISR():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2178
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
80006420:	27bdfff0 	addiu	sp,sp,-16
80006424:	afbe000c 	sw	s8,12(sp)
80006428:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2198
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
8000642c:	afc00000 	sw	zero,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2200
	{
		xReturn = xTickCount;
80006430:	8f8280c3 	lw	v0,-32573(gp)
80006434:	afc20004 	sw	v0,4(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2204
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
80006438:	8fc20004 	lw	v0,4(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2205
}
8000643c:	03c0e825 	move	sp,s8
80006440:	8fbe000c 	lw	s8,12(sp)
80006444:	27bd0010 	addiu	sp,sp,16
80006448:	03e00008 	jr	ra
8000644c:	00000000 	nop

80006450 <uxTaskGetNumberOfTasks>:
uxTaskGetNumberOfTasks():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2209
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
80006450:	27bdfff8 	addiu	sp,sp,-8
80006454:	afbe0004 	sw	s8,4(sp)
80006458:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2212
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
8000645c:	8f8280bf 	lw	v0,-32577(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2213
}
80006460:	03c0e825 	move	sp,s8
80006464:	8fbe0004 	lw	s8,4(sp)
80006468:	27bd0008 	addiu	sp,sp,8
8000646c:	03e00008 	jr	ra
80006470:	00000000 	nop

80006474 <pcTaskGetName>:
pcTaskGetName():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2217
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80006474:	27bdffe0 	addiu	sp,sp,-32
80006478:	afbf001c 	sw	ra,28(sp)
8000647c:	afbe0018 	sw	s8,24(sp)
80006480:	03a0f025 	move	s8,sp
80006484:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2222
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
80006488:	8fc20020 	lw	v0,32(s8)
8000648c:	14400004 	bnez	v0,800064a0 <pcTaskGetName+0x2c>
80006490:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2222 (discriminator 1)
80006494:	8f8280af 	lw	v0,-32593(gp)
80006498:	10000002 	b	800064a4 <pcTaskGetName+0x30>
8000649c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2222 (discriminator 2)
800064a0:	8fc20020 	lw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2222 (discriminator 4)
800064a4:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2223 (discriminator 4)
	configASSERT( pxTCB );
800064a8:	8fc20010 	lw	v0,16(s8)
800064ac:	14400006 	bnez	v0,800064c8 <pcTaskGetName+0x54>
800064b0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2223 (discriminator 1)
800064b4:	3c028001 	lui	v0,0x8001
800064b8:	2444bd48 	addiu	a0,v0,-17080
800064bc:	240508af 	li	a1,2223
800064c0:	0c000417 	jal	8000105c <vAssertCalled>
800064c4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2224
	return &( pxTCB->pcTaskName[ 0 ] );
800064c8:	8fc20010 	lw	v0,16(s8)
800064cc:	24420034 	addiu	v0,v0,52
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2225
}
800064d0:	03c0e825 	move	sp,s8
800064d4:	8fbf001c 	lw	ra,28(sp)
800064d8:	8fbe0018 	lw	s8,24(sp)
800064dc:	27bd0020 	addiu	sp,sp,32
800064e0:	03e00008 	jr	ra
800064e4:	00000000 	nop

800064e8 <xTaskIncrementTick>:
xTaskIncrementTick():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2535

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
800064e8:	27bdffd0 	addiu	sp,sp,-48
800064ec:	afbf002c 	sw	ra,44(sp)
800064f0:	afbe0028 	sw	s8,40(sp)
800064f4:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2538
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
800064f8:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2544

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
800064fc:	8f8280e7 	lw	v0,-32537(gp)
80006500:	14400084 	bnez	v0,80006714 <xTaskIncrementTick+0x22c>
80006504:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2548
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
80006508:	8f8280c3 	lw	v0,-32573(gp)
8000650c:	24420001 	addiu	v0,v0,1
80006510:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2552

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
80006514:	8fc20014 	lw	v0,20(s8)
80006518:	af8280c3 	sw	v0,-32573(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2554

		if( xConstTickCount == ( TickType_t ) 0U )
8000651c:	8fc20014 	lw	v0,20(s8)
80006520:	14400015 	bnez	v0,80006578 <xTaskIncrementTick+0x90>
80006524:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2556
		{
			taskSWITCH_DELAYED_LISTS();
80006528:	8f8280b3 	lw	v0,-32589(gp)
8000652c:	8c420000 	lw	v0,0(v0)
80006530:	10400006 	beqz	v0,8000654c <xTaskIncrementTick+0x64>
80006534:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2556 (discriminator 1)
80006538:	3c028001 	lui	v0,0x8001
8000653c:	2444bd48 	addiu	a0,v0,-17080
80006540:	240509fc 	li	a1,2556
80006544:	0c000417 	jal	8000105c <vAssertCalled>
80006548:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2556 (discriminator 3)
8000654c:	8f8280b3 	lw	v0,-32589(gp)
80006550:	afc20018 	sw	v0,24(s8)
80006554:	8f8280b7 	lw	v0,-32585(gp)
80006558:	af8280b3 	sw	v0,-32589(gp)
8000655c:	8fc20018 	lw	v0,24(s8)
80006560:	af8280b7 	sw	v0,-32585(gp)
80006564:	8f8280d7 	lw	v0,-32553(gp)
80006568:	24420001 	addiu	v0,v0,1
8000656c:	af8280d7 	sw	v0,-32553(gp)
80006570:	0c001c90 	jal	80007240 <prvResetNextTaskUnblockTime>
80006574:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2567

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
80006578:	8f8280df 	lw	v0,-32545(gp)
8000657c:	8fc30014 	lw	v1,20(s8)
80006580:	0062102b 	sltu	v0,v1,v0
80006584:	1440004e 	bnez	v0,800066c0 <xTaskIncrementTick+0x1d8>
80006588:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2571
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
8000658c:	8f8280b3 	lw	v0,-32589(gp)
80006590:	8c420000 	lw	v0,0(v0)
80006594:	14400004 	bnez	v0,800065a8 <xTaskIncrementTick+0xc0>
80006598:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2571 (discriminator 1)
8000659c:	24020001 	li	v0,1
800065a0:	10000002 	b	800065ac <xTaskIncrementTick+0xc4>
800065a4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2571 (discriminator 2)
800065a8:	00001025 	move	v0,zero
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2571 (discriminator 4)
800065ac:	10400005 	beqz	v0,800065c4 <xTaskIncrementTick+0xdc>
800065b0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2578
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
800065b4:	2402ffff 	li	v0,-1
800065b8:	af8280df 	sw	v0,-32545(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2579
					break;
800065bc:	10000040 	b	800066c0 <xTaskIncrementTick+0x1d8>
800065c0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2587
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
800065c4:	8f8280b3 	lw	v0,-32589(gp)
800065c8:	8c42000c 	lw	v0,12(v0)
800065cc:	8c42000c 	lw	v0,12(v0)
800065d0:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2588
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
800065d4:	8fc2001c 	lw	v0,28(s8)
800065d8:	8c420004 	lw	v0,4(v0)
800065dc:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2590

					if( xConstTickCount < xItemValue )
800065e0:	8fc30014 	lw	v1,20(s8)
800065e4:	8fc20020 	lw	v0,32(s8)
800065e8:	0062102b 	sltu	v0,v1,v0
800065ec:	10400005 	beqz	v0,80006604 <xTaskIncrementTick+0x11c>
800065f0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2597
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
800065f4:	8fc20020 	lw	v0,32(s8)
800065f8:	af8280df 	sw	v0,-32545(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2598
						break;
800065fc:	10000030 	b	800066c0 <xTaskIncrementTick+0x1d8>
80006600:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2606
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
80006604:	8fc2001c 	lw	v0,28(s8)
80006608:	24420004 	addiu	v0,v0,4
8000660c:	00402025 	move	a0,v0
80006610:	0c002972 	jal	8000a5c8 <uxListRemove>
80006614:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2610

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
80006618:	8fc2001c 	lw	v0,28(s8)
8000661c:	8c420028 	lw	v0,40(v0)
80006620:	10400006 	beqz	v0,8000663c <xTaskIncrementTick+0x154>
80006624:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2612
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80006628:	8fc2001c 	lw	v0,28(s8)
8000662c:	24420018 	addiu	v0,v0,24
80006630:	00402025 	move	a0,v0
80006634:	0c002972 	jal	8000a5c8 <uxListRemove>
80006638:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2621
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
8000663c:	8fc2001c 	lw	v0,28(s8)
80006640:	8c42002c 	lw	v0,44(v0)
80006644:	00401825 	move	v1,v0
80006648:	24020001 	li	v0,1
8000664c:	00621804 	sllv	v1,v0,v1
80006650:	8f8280c7 	lw	v0,-32569(gp)
80006654:	00621025 	or	v0,v1,v0
80006658:	af8280c7 	sw	v0,-32569(gp)
8000665c:	8fc2001c 	lw	v0,28(s8)
80006660:	8c42002c 	lw	v0,44(v0)
80006664:	00021080 	sll	v0,v0,0x2
80006668:	00021880 	sll	v1,v0,0x2
8000666c:	00431021 	addu	v0,v0,v1
80006670:	3c038001 	lui	v1,0x8001
80006674:	2463c3a8 	addiu	v1,v1,-15448
80006678:	00431821 	addu	v1,v0,v1
8000667c:	8fc2001c 	lw	v0,28(s8)
80006680:	24420004 	addiu	v0,v0,4
80006684:	00602025 	move	a0,v1
80006688:	00402825 	move	a1,v0
8000668c:	0c002914 	jal	8000a450 <vListInsertEnd>
80006690:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2631
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80006694:	8fc2001c 	lw	v0,28(s8)
80006698:	8c43002c 	lw	v1,44(v0)
8000669c:	8f8280af 	lw	v0,-32593(gp)
800066a0:	8c42002c 	lw	v0,44(v0)
800066a4:	0062102b 	sltu	v0,v1,v0
800066a8:	14400003 	bnez	v0,800066b8 <xTaskIncrementTick+0x1d0>
800066ac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2633
						{
							xSwitchRequired = pdTRUE;
800066b0:	24020001 	li	v0,1
800066b4:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2642
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
800066b8:	1000ffb4 	b	8000658c <xTaskIncrementTick+0xa4>
800066bc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2650
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
800066c0:	8f8280af 	lw	v0,-32593(gp)
800066c4:	8c42002c 	lw	v0,44(v0)
800066c8:	3c038001 	lui	v1,0x8001
800066cc:	00021080 	sll	v0,v0,0x2
800066d0:	00022080 	sll	a0,v0,0x2
800066d4:	00441021 	addu	v0,v0,a0
800066d8:	2463c3a8 	addiu	v1,v1,-15448
800066dc:	00431021 	addu	v0,v0,v1
800066e0:	8c420000 	lw	v0,0(v0)
800066e4:	2c420002 	sltiu	v0,v0,2
800066e8:	14400003 	bnez	v0,800066f8 <xTaskIncrementTick+0x210>
800066ec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2652
			{
				xSwitchRequired = pdTRUE;
800066f0:	24020001 	li	v0,1
800066f4:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2665

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
800066f8:	8f8280cf 	lw	v0,-32561(gp)
800066fc:	14400003 	bnez	v0,8000670c <xTaskIncrementTick+0x224>
80006700:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2667
			{
				vApplicationTickHook();
80006704:	0c000407 	jal	8000101c <vApplicationTickHook>
80006708:	00000000 	nop
8000670c:	10000006 	b	80006728 <xTaskIncrementTick+0x240>
80006710:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2678
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
80006714:	8f8280cf 	lw	v0,-32561(gp)
80006718:	24420001 	addiu	v0,v0,1
8000671c:	af8280cf 	sw	v0,-32561(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2684

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
80006720:	0c000407 	jal	8000101c <vApplicationTickHook>
80006724:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2691
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
80006728:	8f8280d3 	lw	v0,-32557(gp)
8000672c:	10400003 	beqz	v0,8000673c <xTaskIncrementTick+0x254>
80006730:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2693
		{
			xSwitchRequired = pdTRUE;
80006734:	24020001 	li	v0,1
80006738:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2702
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
8000673c:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2703
}
80006740:	03c0e825 	move	sp,s8
80006744:	8fbf002c 	lw	ra,44(sp)
80006748:	8fbe0028 	lw	s8,40(sp)
8000674c:	27bd0030 	addiu	sp,sp,48
80006750:	03e00008 	jr	ra
80006754:	00000000 	nop

80006758 <vTaskSwitchContext>:
vTaskSwitchContext():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2797

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
80006758:	27bdffd8 	addiu	sp,sp,-40
8000675c:	afbf0024 	sw	ra,36(sp)
80006760:	afbe0020 	sw	s8,32(sp)
80006764:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2798
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
80006768:	8f8280e7 	lw	v0,-32537(gp)
8000676c:	10400005 	beqz	v0,80006784 <vTaskSwitchContext+0x2c>
80006770:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2802
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
80006774:	24020001 	li	v0,1
80006778:	af8280d3 	sw	v0,-32557(gp)
8000677c:	10000056 	b	800068d8 <vTaskSwitchContext+0x180>
80006780:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2806
	}
	else
	{
		xYieldPending = pdFALSE;
80006784:	af8080d3 	sw	zero,-32557(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2837
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
80006788:	8f8280af 	lw	v0,-32593(gp)
8000678c:	8c420030 	lw	v0,48(v0)
80006790:	afc20010 	sw	v0,16(s8)
80006794:	3c02a5a5 	lui	v0,0xa5a5
80006798:	3442a5a5 	ori	v0,v0,0xa5a5
8000679c:	afc20014 	sw	v0,20(s8)
800067a0:	8fc20010 	lw	v0,16(s8)
800067a4:	8c430000 	lw	v1,0(v0)
800067a8:	8fc20014 	lw	v0,20(s8)
800067ac:	14620013 	bne	v1,v0,800067fc <vTaskSwitchContext+0xa4>
800067b0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2837 (discriminator 2)
800067b4:	8fc20010 	lw	v0,16(s8)
800067b8:	24420004 	addiu	v0,v0,4
800067bc:	8c430000 	lw	v1,0(v0)
800067c0:	8fc20014 	lw	v0,20(s8)
800067c4:	1462000d 	bne	v1,v0,800067fc <vTaskSwitchContext+0xa4>
800067c8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2837 (discriminator 4)
800067cc:	8fc20010 	lw	v0,16(s8)
800067d0:	24420008 	addiu	v0,v0,8
800067d4:	8c430000 	lw	v1,0(v0)
800067d8:	8fc20014 	lw	v0,20(s8)
800067dc:	14620007 	bne	v1,v0,800067fc <vTaskSwitchContext+0xa4>
800067e0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2837 (discriminator 6)
800067e4:	8fc20010 	lw	v0,16(s8)
800067e8:	2442000c 	addiu	v0,v0,12
800067ec:	8c430000 	lw	v1,0(v0)
800067f0:	8fc20014 	lw	v0,20(s8)
800067f4:	10620008 	beq	v1,v0,80006818 <vTaskSwitchContext+0xc0>
800067f8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2837 (discriminator 7)
800067fc:	8f8380af 	lw	v1,-32593(gp)
80006800:	8f8280af 	lw	v0,-32593(gp)
80006804:	24420034 	addiu	v0,v0,52
80006808:	00602025 	move	a0,v1
8000680c:	00402825 	move	a1,v0
80006810:	0c0003ec 	jal	80000fb0 <vApplicationStackOverflowHook>
80006814:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2841

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
80006818:	8f8280c7 	lw	v0,-32569(gp)
8000681c:	70421020 	clz	v0,v0
80006820:	2403001f 	li	v1,31
80006824:	00621023 	subu	v0,v1,v0
80006828:	afc20018 	sw	v0,24(s8)
8000682c:	3c038001 	lui	v1,0x8001
80006830:	8fc20018 	lw	v0,24(s8)
80006834:	00021080 	sll	v0,v0,0x2
80006838:	00022080 	sll	a0,v0,0x2
8000683c:	00441021 	addu	v0,v0,a0
80006840:	2463c3a8 	addiu	v1,v1,-15448
80006844:	00431021 	addu	v0,v0,v1
80006848:	8c420000 	lw	v0,0(v0)
8000684c:	14400006 	bnez	v0,80006868 <vTaskSwitchContext+0x110>
80006850:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2841 (discriminator 1)
80006854:	3c028001 	lui	v0,0x8001
80006858:	2444bd48 	addiu	a0,v0,-17080
8000685c:	24050b19 	li	a1,2841
80006860:	0c000417 	jal	8000105c <vAssertCalled>
80006864:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2841 (discriminator 3)
80006868:	8fc20018 	lw	v0,24(s8)
8000686c:	00021080 	sll	v0,v0,0x2
80006870:	00021880 	sll	v1,v0,0x2
80006874:	00431021 	addu	v0,v0,v1
80006878:	3c038001 	lui	v1,0x8001
8000687c:	2463c3a8 	addiu	v1,v1,-15448
80006880:	00431021 	addu	v0,v0,v1
80006884:	afc2001c 	sw	v0,28(s8)
80006888:	8fc2001c 	lw	v0,28(s8)
8000688c:	8c420004 	lw	v0,4(v0)
80006890:	8c430004 	lw	v1,4(v0)
80006894:	8fc2001c 	lw	v0,28(s8)
80006898:	ac430004 	sw	v1,4(v0)
8000689c:	8fc2001c 	lw	v0,28(s8)
800068a0:	8c430004 	lw	v1,4(v0)
800068a4:	8fc2001c 	lw	v0,28(s8)
800068a8:	24420008 	addiu	v0,v0,8
800068ac:	14620006 	bne	v1,v0,800068c8 <vTaskSwitchContext+0x170>
800068b0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2841 (discriminator 4)
800068b4:	8fc2001c 	lw	v0,28(s8)
800068b8:	8c420004 	lw	v0,4(v0)
800068bc:	8c430004 	lw	v1,4(v0)
800068c0:	8fc2001c 	lw	v0,28(s8)
800068c4:	ac430004 	sw	v1,4(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2841 (discriminator 6)
800068c8:	8fc2001c 	lw	v0,28(s8)
800068cc:	8c420004 	lw	v0,4(v0)
800068d0:	8c42000c 	lw	v0,12(v0)
800068d4:	af8280af 	sw	v0,-32593(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2852
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
800068d8:	03c0e825 	move	sp,s8
800068dc:	8fbf0024 	lw	ra,36(sp)
800068e0:	8fbe0020 	lw	s8,32(sp)
800068e4:	27bd0028 	addiu	sp,sp,40
800068e8:	03e00008 	jr	ra
800068ec:	00000000 	nop

800068f0 <vTaskPlaceOnEventList>:
vTaskPlaceOnEventList():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2856
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
800068f0:	27bdffe8 	addiu	sp,sp,-24
800068f4:	afbf0014 	sw	ra,20(sp)
800068f8:	afbe0010 	sw	s8,16(sp)
800068fc:	03a0f025 	move	s8,sp
80006900:	afc40018 	sw	a0,24(s8)
80006904:	afc5001c 	sw	a1,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2857
	configASSERT( pxEventList );
80006908:	8fc20018 	lw	v0,24(s8)
8000690c:	14400006 	bnez	v0,80006928 <vTaskPlaceOnEventList+0x38>
80006910:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2857 (discriminator 1)
80006914:	3c028001 	lui	v0,0x8001
80006918:	2444bd48 	addiu	a0,v0,-17080
8000691c:	24050b29 	li	a1,2857
80006920:	0c000417 	jal	8000105c <vAssertCalled>
80006924:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2866

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
80006928:	8f8280af 	lw	v0,-32593(gp)
8000692c:	24420018 	addiu	v0,v0,24
80006930:	8fc40018 	lw	a0,24(s8)
80006934:	00402825 	move	a1,v0
80006938:	0c002937 	jal	8000a4dc <vListInsert>
8000693c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2868

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
80006940:	8fc4001c 	lw	a0,28(s8)
80006944:	24050001 	li	a1,1
80006948:	0c00207c 	jal	800081f0 <prvAddCurrentTaskToDelayedList>
8000694c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2869
}
80006950:	03c0e825 	move	sp,s8
80006954:	8fbf0014 	lw	ra,20(sp)
80006958:	8fbe0010 	lw	s8,16(sp)
8000695c:	27bd0018 	addiu	sp,sp,24
80006960:	03e00008 	jr	ra
80006964:	00000000 	nop

80006968 <vTaskPlaceOnUnorderedEventList>:
vTaskPlaceOnUnorderedEventList():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2873
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
80006968:	27bdffe8 	addiu	sp,sp,-24
8000696c:	afbf0014 	sw	ra,20(sp)
80006970:	afbe0010 	sw	s8,16(sp)
80006974:	03a0f025 	move	s8,sp
80006978:	afc40018 	sw	a0,24(s8)
8000697c:	afc5001c 	sw	a1,28(s8)
80006980:	afc60020 	sw	a2,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2874
	configASSERT( pxEventList );
80006984:	8fc20018 	lw	v0,24(s8)
80006988:	14400006 	bnez	v0,800069a4 <vTaskPlaceOnUnorderedEventList+0x3c>
8000698c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2874 (discriminator 1)
80006990:	3c028001 	lui	v0,0x8001
80006994:	2444bd48 	addiu	a0,v0,-17080
80006998:	24050b3a 	li	a1,2874
8000699c:	0c000417 	jal	8000105c <vAssertCalled>
800069a0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2878

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
800069a4:	8f8280e7 	lw	v0,-32537(gp)
800069a8:	14400006 	bnez	v0,800069c4 <vTaskPlaceOnUnorderedEventList+0x5c>
800069ac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2878 (discriminator 1)
800069b0:	3c028001 	lui	v0,0x8001
800069b4:	2444bd48 	addiu	a0,v0,-17080
800069b8:	24050b3e 	li	a1,2878
800069bc:	0c000417 	jal	8000105c <vAssertCalled>
800069c0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2883

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
800069c4:	8f8280af 	lw	v0,-32593(gp)
800069c8:	8fc4001c 	lw	a0,28(s8)
800069cc:	3c038000 	lui	v1,0x8000
800069d0:	00831825 	or	v1,a0,v1
800069d4:	ac430018 	sw	v1,24(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2890
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
800069d8:	8f8280af 	lw	v0,-32593(gp)
800069dc:	24420018 	addiu	v0,v0,24
800069e0:	8fc40018 	lw	a0,24(s8)
800069e4:	00402825 	move	a1,v0
800069e8:	0c002914 	jal	8000a450 <vListInsertEnd>
800069ec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2892

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
800069f0:	8fc40020 	lw	a0,32(s8)
800069f4:	24050001 	li	a1,1
800069f8:	0c00207c 	jal	800081f0 <prvAddCurrentTaskToDelayedList>
800069fc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2893
}
80006a00:	03c0e825 	move	sp,s8
80006a04:	8fbf0014 	lw	ra,20(sp)
80006a08:	8fbe0010 	lw	s8,16(sp)
80006a0c:	27bd0018 	addiu	sp,sp,24
80006a10:	03e00008 	jr	ra
80006a14:	00000000 	nop

80006a18 <vTaskPlaceOnEventListRestricted>:
vTaskPlaceOnEventListRestricted():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2899
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
80006a18:	27bdffe8 	addiu	sp,sp,-24
80006a1c:	afbf0014 	sw	ra,20(sp)
80006a20:	afbe0010 	sw	s8,16(sp)
80006a24:	03a0f025 	move	s8,sp
80006a28:	afc40018 	sw	a0,24(s8)
80006a2c:	afc5001c 	sw	a1,28(s8)
80006a30:	afc60020 	sw	a2,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2900
		configASSERT( pxEventList );
80006a34:	8fc20018 	lw	v0,24(s8)
80006a38:	14400006 	bnez	v0,80006a54 <vTaskPlaceOnEventListRestricted+0x3c>
80006a3c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2900 (discriminator 1)
80006a40:	3c028001 	lui	v0,0x8001
80006a44:	2444bd48 	addiu	a0,v0,-17080
80006a48:	24050b54 	li	a1,2900
80006a4c:	0c000417 	jal	8000105c <vAssertCalled>
80006a50:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2912

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
80006a54:	8f8280af 	lw	v0,-32593(gp)
80006a58:	24420018 	addiu	v0,v0,24
80006a5c:	8fc40018 	lw	a0,24(s8)
80006a60:	00402825 	move	a1,v0
80006a64:	0c002914 	jal	8000a450 <vListInsertEnd>
80006a68:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2917

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
80006a6c:	8fc20020 	lw	v0,32(s8)
80006a70:	10400003 	beqz	v0,80006a80 <vTaskPlaceOnEventListRestricted+0x68>
80006a74:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2919
		{
			xTicksToWait = portMAX_DELAY;
80006a78:	2402ffff 	li	v0,-1
80006a7c:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2923
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
80006a80:	8fc4001c 	lw	a0,28(s8)
80006a84:	8fc50020 	lw	a1,32(s8)
80006a88:	0c00207c 	jal	800081f0 <prvAddCurrentTaskToDelayedList>
80006a8c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2924
	}
80006a90:	03c0e825 	move	sp,s8
80006a94:	8fbf0014 	lw	ra,20(sp)
80006a98:	8fbe0010 	lw	s8,16(sp)
80006a9c:	27bd0018 	addiu	sp,sp,24
80006aa0:	03e00008 	jr	ra
80006aa4:	00000000 	nop

80006aa8 <xTaskRemoveFromEventList>:
xTaskRemoveFromEventList():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2930

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
80006aa8:	27bdffe0 	addiu	sp,sp,-32
80006aac:	afbf001c 	sw	ra,28(sp)
80006ab0:	afbe0018 	sw	s8,24(sp)
80006ab4:	03a0f025 	move	s8,sp
80006ab8:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2947
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
80006abc:	8fc20020 	lw	v0,32(s8)
80006ac0:	8c42000c 	lw	v0,12(v0)
80006ac4:	8c42000c 	lw	v0,12(v0)
80006ac8:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2948
	configASSERT( pxUnblockedTCB );
80006acc:	8fc20014 	lw	v0,20(s8)
80006ad0:	14400006 	bnez	v0,80006aec <xTaskRemoveFromEventList+0x44>
80006ad4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2948 (discriminator 1)
80006ad8:	3c028001 	lui	v0,0x8001
80006adc:	2444bd48 	addiu	a0,v0,-17080
80006ae0:	24050b84 	li	a1,2948
80006ae4:	0c000417 	jal	8000105c <vAssertCalled>
80006ae8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2949
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
80006aec:	8fc20014 	lw	v0,20(s8)
80006af0:	24420018 	addiu	v0,v0,24
80006af4:	00402025 	move	a0,v0
80006af8:	0c002972 	jal	8000a5c8 <uxListRemove>
80006afc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2951

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80006b00:	8f8280e7 	lw	v0,-32537(gp)
80006b04:	1440001e 	bnez	v0,80006b80 <xTaskRemoveFromEventList+0xd8>
80006b08:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2953
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
80006b0c:	8fc20014 	lw	v0,20(s8)
80006b10:	24420004 	addiu	v0,v0,4
80006b14:	00402025 	move	a0,v0
80006b18:	0c002972 	jal	8000a5c8 <uxListRemove>
80006b1c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2954
		prvAddTaskToReadyList( pxUnblockedTCB );
80006b20:	8fc20014 	lw	v0,20(s8)
80006b24:	8c42002c 	lw	v0,44(v0)
80006b28:	00401825 	move	v1,v0
80006b2c:	24020001 	li	v0,1
80006b30:	00621804 	sllv	v1,v0,v1
80006b34:	8f8280c7 	lw	v0,-32569(gp)
80006b38:	00621025 	or	v0,v1,v0
80006b3c:	af8280c7 	sw	v0,-32569(gp)
80006b40:	8fc20014 	lw	v0,20(s8)
80006b44:	8c42002c 	lw	v0,44(v0)
80006b48:	00021080 	sll	v0,v0,0x2
80006b4c:	00021880 	sll	v1,v0,0x2
80006b50:	00431021 	addu	v0,v0,v1
80006b54:	3c038001 	lui	v1,0x8001
80006b58:	2463c3a8 	addiu	v1,v1,-15448
80006b5c:	00431821 	addu	v1,v0,v1
80006b60:	8fc20014 	lw	v0,20(s8)
80006b64:	24420004 	addiu	v0,v0,4
80006b68:	00602025 	move	a0,v1
80006b6c:	00402825 	move	a1,v0
80006b70:	0c002914 	jal	8000a450 <vListInsertEnd>
80006b74:	00000000 	nop
80006b78:	10000008 	b	80006b9c <xTaskRemoveFromEventList+0xf4>
80006b7c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2960
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
80006b80:	8fc20014 	lw	v0,20(s8)
80006b84:	24430018 	addiu	v1,v0,24
80006b88:	3c028001 	lui	v0,0x8001
80006b8c:	2444c434 	addiu	a0,v0,-15308
80006b90:	00602825 	move	a1,v1
80006b94:	0c002914 	jal	8000a450 <vListInsertEnd>
80006b98:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2963
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
80006b9c:	8fc20014 	lw	v0,20(s8)
80006ba0:	8c43002c 	lw	v1,44(v0)
80006ba4:	8f8280af 	lw	v0,-32593(gp)
80006ba8:	8c42002c 	lw	v0,44(v0)
80006bac:	0043102b 	sltu	v0,v0,v1
80006bb0:	10400007 	beqz	v0,80006bd0 <xTaskRemoveFromEventList+0x128>
80006bb4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2968
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
80006bb8:	24020001 	li	v0,1
80006bbc:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2972

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
80006bc0:	24020001 	li	v0,1
80006bc4:	af8280d3 	sw	v0,-32557(gp)
80006bc8:	10000002 	b	80006bd4 <xTaskRemoveFromEventList+0x12c>
80006bcc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2976
	}
	else
	{
		xReturn = pdFALSE;
80006bd0:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2993
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
80006bd4:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2994
}
80006bd8:	03c0e825 	move	sp,s8
80006bdc:	8fbf001c 	lw	ra,28(sp)
80006be0:	8fbe0018 	lw	s8,24(sp)
80006be4:	27bd0020 	addiu	sp,sp,32
80006be8:	03e00008 	jr	ra
80006bec:	00000000 	nop

80006bf0 <xTaskRemoveFromUnorderedEventList>:
xTaskRemoveFromUnorderedEventList():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:2998
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
80006bf0:	27bdffe0 	addiu	sp,sp,-32
80006bf4:	afbf001c 	sw	ra,28(sp)
80006bf8:	afbe0018 	sw	s8,24(sp)
80006bfc:	03a0f025 	move	s8,sp
80006c00:	afc40020 	sw	a0,32(s8)
80006c04:	afc50024 	sw	a1,36(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3004
TCB_t *pxUnblockedTCB;
BaseType_t xReturn;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
80006c08:	8f8280e7 	lw	v0,-32537(gp)
80006c0c:	14400006 	bnez	v0,80006c28 <xTaskRemoveFromUnorderedEventList+0x38>
80006c10:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3004 (discriminator 1)
80006c14:	3c028001 	lui	v0,0x8001
80006c18:	2444bd48 	addiu	a0,v0,-17080
80006c1c:	24050bbc 	li	a1,3004
80006c20:	0c000417 	jal	8000105c <vAssertCalled>
80006c24:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3007

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
80006c28:	8fc30024 	lw	v1,36(s8)
80006c2c:	3c028000 	lui	v0,0x8000
80006c30:	00621825 	or	v1,v1,v0
80006c34:	8fc20020 	lw	v0,32(s8)
80006c38:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3011

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
80006c3c:	8fc20020 	lw	v0,32(s8)
80006c40:	8c42000c 	lw	v0,12(v0)
80006c44:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3012
	configASSERT( pxUnblockedTCB );
80006c48:	8fc20014 	lw	v0,20(s8)
80006c4c:	14400006 	bnez	v0,80006c68 <xTaskRemoveFromUnorderedEventList+0x78>
80006c50:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3012 (discriminator 1)
80006c54:	3c028001 	lui	v0,0x8001
80006c58:	2444bd48 	addiu	a0,v0,-17080
80006c5c:	24050bc4 	li	a1,3012
80006c60:	0c000417 	jal	8000105c <vAssertCalled>
80006c64:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3013
	( void ) uxListRemove( pxEventListItem );
80006c68:	8fc40020 	lw	a0,32(s8)
80006c6c:	0c002972 	jal	8000a5c8 <uxListRemove>
80006c70:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3018

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
80006c74:	8fc20014 	lw	v0,20(s8)
80006c78:	24420004 	addiu	v0,v0,4
80006c7c:	00402025 	move	a0,v0
80006c80:	0c002972 	jal	8000a5c8 <uxListRemove>
80006c84:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3019
	prvAddTaskToReadyList( pxUnblockedTCB );
80006c88:	8fc20014 	lw	v0,20(s8)
80006c8c:	8c42002c 	lw	v0,44(v0)
80006c90:	00401825 	move	v1,v0
80006c94:	24020001 	li	v0,1
80006c98:	00621804 	sllv	v1,v0,v1
80006c9c:	8f8280c7 	lw	v0,-32569(gp)
80006ca0:	00621025 	or	v0,v1,v0
80006ca4:	af8280c7 	sw	v0,-32569(gp)
80006ca8:	8fc20014 	lw	v0,20(s8)
80006cac:	8c42002c 	lw	v0,44(v0)
80006cb0:	00021080 	sll	v0,v0,0x2
80006cb4:	00021880 	sll	v1,v0,0x2
80006cb8:	00431021 	addu	v0,v0,v1
80006cbc:	3c038001 	lui	v1,0x8001
80006cc0:	2463c3a8 	addiu	v1,v1,-15448
80006cc4:	00431821 	addu	v1,v0,v1
80006cc8:	8fc20014 	lw	v0,20(s8)
80006ccc:	24420004 	addiu	v0,v0,4
80006cd0:	00602025 	move	a0,v1
80006cd4:	00402825 	move	a1,v0
80006cd8:	0c002914 	jal	8000a450 <vListInsertEnd>
80006cdc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3021

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
80006ce0:	8fc20014 	lw	v0,20(s8)
80006ce4:	8c43002c 	lw	v1,44(v0)
80006ce8:	8f8280af 	lw	v0,-32593(gp)
80006cec:	8c42002c 	lw	v0,44(v0)
80006cf0:	0043102b 	sltu	v0,v0,v1
80006cf4:	10400007 	beqz	v0,80006d14 <xTaskRemoveFromUnorderedEventList+0x124>
80006cf8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3027
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
80006cfc:	24020001 	li	v0,1
80006d00:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3031

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
80006d04:	24020001 	li	v0,1
80006d08:	af8280d3 	sw	v0,-32557(gp)
80006d0c:	10000002 	b	80006d18 <xTaskRemoveFromUnorderedEventList+0x128>
80006d10:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3035
	}
	else
	{
		xReturn = pdFALSE;
80006d14:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3038
	}

	return xReturn;
80006d18:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3039
}
80006d1c:	03c0e825 	move	sp,s8
80006d20:	8fbf001c 	lw	ra,28(sp)
80006d24:	8fbe0018 	lw	s8,24(sp)
80006d28:	27bd0020 	addiu	sp,sp,32
80006d2c:	03e00008 	jr	ra
80006d30:	00000000 	nop

80006d34 <vTaskSetTimeOutState>:
vTaskSetTimeOutState():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3043
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
80006d34:	27bdffe8 	addiu	sp,sp,-24
80006d38:	afbf0014 	sw	ra,20(sp)
80006d3c:	afbe0010 	sw	s8,16(sp)
80006d40:	03a0f025 	move	s8,sp
80006d44:	afc40018 	sw	a0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3044
	configASSERT( pxTimeOut );
80006d48:	8fc20018 	lw	v0,24(s8)
80006d4c:	14400006 	bnez	v0,80006d68 <vTaskSetTimeOutState+0x34>
80006d50:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3044 (discriminator 1)
80006d54:	3c028001 	lui	v0,0x8001
80006d58:	2444bd48 	addiu	a0,v0,-17080
80006d5c:	24050be4 	li	a1,3044
80006d60:	0c000417 	jal	8000105c <vAssertCalled>
80006d64:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3045
	pxTimeOut->xOverflowCount = xNumOfOverflows;
80006d68:	8f8380d7 	lw	v1,-32553(gp)
80006d6c:	8fc20018 	lw	v0,24(s8)
80006d70:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3046
	pxTimeOut->xTimeOnEntering = xTickCount;
80006d74:	8f8380c3 	lw	v1,-32573(gp)
80006d78:	8fc20018 	lw	v0,24(s8)
80006d7c:	ac430004 	sw	v1,4(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3047
}
80006d80:	03c0e825 	move	sp,s8
80006d84:	8fbf0014 	lw	ra,20(sp)
80006d88:	8fbe0010 	lw	s8,16(sp)
80006d8c:	27bd0018 	addiu	sp,sp,24
80006d90:	03e00008 	jr	ra
80006d94:	00000000 	nop

80006d98 <xTaskCheckForTimeOut>:
xTaskCheckForTimeOut():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3051
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
80006d98:	27bdffe0 	addiu	sp,sp,-32
80006d9c:	afbf001c 	sw	ra,28(sp)
80006da0:	afbe0018 	sw	s8,24(sp)
80006da4:	03a0f025 	move	s8,sp
80006da8:	afc40020 	sw	a0,32(s8)
80006dac:	afc50024 	sw	a1,36(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3054
BaseType_t xReturn;

	configASSERT( pxTimeOut );
80006db0:	8fc20020 	lw	v0,32(s8)
80006db4:	14400006 	bnez	v0,80006dd0 <xTaskCheckForTimeOut+0x38>
80006db8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3054 (discriminator 1)
80006dbc:	3c028001 	lui	v0,0x8001
80006dc0:	2444bd48 	addiu	a0,v0,-17080
80006dc4:	24050bee 	li	a1,3054
80006dc8:	0c000417 	jal	8000105c <vAssertCalled>
80006dcc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3055
	configASSERT( pxTicksToWait );
80006dd0:	8fc20024 	lw	v0,36(s8)
80006dd4:	14400006 	bnez	v0,80006df0 <xTaskCheckForTimeOut+0x58>
80006dd8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3055 (discriminator 1)
80006ddc:	3c028001 	lui	v0,0x8001
80006de0:	2444bd48 	addiu	a0,v0,-17080
80006de4:	24050bef 	li	a1,3055
80006de8:	0c000417 	jal	8000105c <vAssertCalled>
80006dec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3057

	taskENTER_CRITICAL();
80006df0:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80006df4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3060
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
80006df8:	8f8280c3 	lw	v0,-32573(gp)
80006dfc:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3074
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
80006e00:	8fc20024 	lw	v0,36(s8)
80006e04:	8c430000 	lw	v1,0(v0)
80006e08:	2402ffff 	li	v0,-1
80006e0c:	14620004 	bne	v1,v0,80006e20 <xTaskCheckForTimeOut+0x88>
80006e10:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3079
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
80006e14:	afc00010 	sw	zero,16(s8)
80006e18:	1000002a 	b	80006ec4 <xTaskCheckForTimeOut+0x12c>
80006e1c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3084
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
80006e20:	8fc20020 	lw	v0,32(s8)
80006e24:	8c430000 	lw	v1,0(v0)
80006e28:	8f8280d7 	lw	v0,-32553(gp)
80006e2c:	1062000b 	beq	v1,v0,80006e5c <xTaskCheckForTimeOut+0xc4>
80006e30:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3084 (discriminator 1)
80006e34:	8fc20020 	lw	v0,32(s8)
80006e38:	8c430004 	lw	v1,4(v0)
80006e3c:	8fc20014 	lw	v0,20(s8)
80006e40:	0043102b 	sltu	v0,v0,v1
80006e44:	14400005 	bnez	v0,80006e5c <xTaskCheckForTimeOut+0xc4>
80006e48:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3091
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
80006e4c:	24020001 	li	v0,1
80006e50:	afc20010 	sw	v0,16(s8)
80006e54:	1000001b 	b	80006ec4 <xTaskCheckForTimeOut+0x12c>
80006e58:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3093
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
80006e5c:	8fc20020 	lw	v0,32(s8)
80006e60:	8c420004 	lw	v0,4(v0)
80006e64:	8fc30014 	lw	v1,20(s8)
80006e68:	00621823 	subu	v1,v1,v0
80006e6c:	8fc20024 	lw	v0,36(s8)
80006e70:	8c420000 	lw	v0,0(v0)
80006e74:	0062102b 	sltu	v0,v1,v0
80006e78:	10400010 	beqz	v0,80006ebc <xTaskCheckForTimeOut+0x124>
80006e7c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3096
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
80006e80:	8fc20024 	lw	v0,36(s8)
80006e84:	8c430000 	lw	v1,0(v0)
80006e88:	8fc20020 	lw	v0,32(s8)
80006e8c:	8c440004 	lw	a0,4(v0)
80006e90:	8fc20014 	lw	v0,20(s8)
80006e94:	00821023 	subu	v0,a0,v0
80006e98:	00621821 	addu	v1,v1,v0
80006e9c:	8fc20024 	lw	v0,36(s8)
80006ea0:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3097
			vTaskSetTimeOutState( pxTimeOut );
80006ea4:	8fc40020 	lw	a0,32(s8)
80006ea8:	0c001b4d 	jal	80006d34 <vTaskSetTimeOutState>
80006eac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3098
			xReturn = pdFALSE;
80006eb0:	afc00010 	sw	zero,16(s8)
80006eb4:	10000003 	b	80006ec4 <xTaskCheckForTimeOut+0x12c>
80006eb8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3102
		}
		else
		{
			xReturn = pdTRUE;
80006ebc:	24020001 	li	v0,1
80006ec0:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3105
		}
	}
	taskEXIT_CRITICAL();
80006ec4:	0c001de3 	jal	8000778c <vTaskExitCritical>
80006ec8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3107

	return xReturn;
80006ecc:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3108
}
80006ed0:	03c0e825 	move	sp,s8
80006ed4:	8fbf001c 	lw	ra,28(sp)
80006ed8:	8fbe0018 	lw	s8,24(sp)
80006edc:	27bd0020 	addiu	sp,sp,32
80006ee0:	03e00008 	jr	ra
80006ee4:	00000000 	nop

80006ee8 <vTaskMissedYield>:
vTaskMissedYield():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3112
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
80006ee8:	27bdfff8 	addiu	sp,sp,-8
80006eec:	afbe0004 	sw	s8,4(sp)
80006ef0:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3113
	xYieldPending = pdTRUE;
80006ef4:	24020001 	li	v0,1
80006ef8:	af8280d3 	sw	v0,-32557(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3114
}
80006efc:	03c0e825 	move	sp,s8
80006f00:	8fbe0004 	lw	s8,4(sp)
80006f04:	27bd0008 	addiu	sp,sp,8
80006f08:	03e00008 	jr	ra
80006f0c:	00000000 	nop

80006f10 <prvIdleTask>:
prvIdleTask():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3167
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
80006f10:	27bdffe0 	addiu	sp,sp,-32
80006f14:	afbf001c 	sw	ra,28(sp)
80006f18:	afbe0018 	sw	s8,24(sp)
80006f1c:	03a0f025 	move	s8,sp
80006f20:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3178

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
80006f24:	0c001c14 	jal	80007050 <prvCheckTasksWaitingTermination>
80006f28:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3201

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
80006f2c:	3c028001 	lui	v0,0x8001
80006f30:	8c42c3a8 	lw	v0,-15448(v0)
80006f34:	2c420002 	sltiu	v0,v0,2
80006f38:	1440000b 	bnez	v0,80006f68 <prvIdleTask+0x58>
80006f3c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3203
			{
				taskYIELD();
80006f40:	40026800 	mfc0	v0,c0_cause
80006f44:	0040f825 	move	ra,v0
80006f48:	03e01025 	move	v0,ra
80006f4c:	afc20010 	sw	v0,16(s8)
80006f50:	8fc20010 	lw	v0,16(s8)
80006f54:	34420100 	ori	v0,v0,0x100
80006f58:	afc20010 	sw	v0,16(s8)
80006f5c:	8fc20010 	lw	v0,16(s8)
80006f60:	40826000 	mtc0	v0,c0_status
80006f64:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3269
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
80006f68:	1000ffee 	b	80006f24 <prvIdleTask+0x14>
80006f6c:	00000000 	nop

80006f70 <prvInitialiseTaskLists>:
prvInitialiseTaskLists():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3369

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
80006f70:	27bdffe0 	addiu	sp,sp,-32
80006f74:	afbf001c 	sw	ra,28(sp)
80006f78:	afbe0018 	sw	s8,24(sp)
80006f7c:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3372
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
80006f80:	afc00010 	sw	zero,16(s8)
80006f84:	1000000e 	b	80006fc0 <prvInitialiseTaskLists+0x50>
80006f88:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3374 (discriminator 3)
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
80006f8c:	8fc20010 	lw	v0,16(s8)
80006f90:	00021080 	sll	v0,v0,0x2
80006f94:	00021880 	sll	v1,v0,0x2
80006f98:	00431021 	addu	v0,v0,v1
80006f9c:	3c038001 	lui	v1,0x8001
80006fa0:	2463c3a8 	addiu	v1,v1,-15448
80006fa4:	00431021 	addu	v0,v0,v1
80006fa8:	00402025 	move	a0,v0
80006fac:	0c0028ef 	jal	8000a3bc <vListInitialise>
80006fb0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3372 (discriminator 3)

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
80006fb4:	8fc20010 	lw	v0,16(s8)
80006fb8:	24420001 	addiu	v0,v0,1
80006fbc:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3372 (discriminator 1)
80006fc0:	8fc20010 	lw	v0,16(s8)
80006fc4:	2c420005 	sltiu	v0,v0,5
80006fc8:	1440fff0 	bnez	v0,80006f8c <prvInitialiseTaskLists+0x1c>
80006fcc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3377
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
80006fd0:	3c028001 	lui	v0,0x8001
80006fd4:	2444c40c 	addiu	a0,v0,-15348
80006fd8:	0c0028ef 	jal	8000a3bc <vListInitialise>
80006fdc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3378
	vListInitialise( &xDelayedTaskList2 );
80006fe0:	3c028001 	lui	v0,0x8001
80006fe4:	2444c420 	addiu	a0,v0,-15328
80006fe8:	0c0028ef 	jal	8000a3bc <vListInitialise>
80006fec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3379
	vListInitialise( &xPendingReadyList );
80006ff0:	3c028001 	lui	v0,0x8001
80006ff4:	2444c434 	addiu	a0,v0,-15308
80006ff8:	0c0028ef 	jal	8000a3bc <vListInitialise>
80006ffc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3383

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
80007000:	3c028001 	lui	v0,0x8001
80007004:	2444c448 	addiu	a0,v0,-15288
80007008:	0c0028ef 	jal	8000a3bc <vListInitialise>
8000700c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3389
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
80007010:	3c028001 	lui	v0,0x8001
80007014:	2444c45c 	addiu	a0,v0,-15268
80007018:	0c0028ef 	jal	8000a3bc <vListInitialise>
8000701c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3395
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
80007020:	3c028001 	lui	v0,0x8001
80007024:	2442c40c 	addiu	v0,v0,-15348
80007028:	af8280b3 	sw	v0,-32589(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3396
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
8000702c:	3c028001 	lui	v0,0x8001
80007030:	2442c420 	addiu	v0,v0,-15328
80007034:	af8280b7 	sw	v0,-32585(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3397
}
80007038:	03c0e825 	move	sp,s8
8000703c:	8fbf001c 	lw	ra,28(sp)
80007040:	8fbe0018 	lw	s8,24(sp)
80007044:	27bd0020 	addiu	sp,sp,32
80007048:	03e00008 	jr	ra
8000704c:	00000000 	nop

80007050 <prvCheckTasksWaitingTermination>:
prvCheckTasksWaitingTermination():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3401
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
80007050:	27bdffe0 	addiu	sp,sp,-32
80007054:	afbf001c 	sw	ra,28(sp)
80007058:	afbe0018 	sw	s8,24(sp)
8000705c:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3411
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
80007060:	10000024 	b	800070f4 <prvCheckTasksWaitingTermination+0xa4>
80007064:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3413
		{
			vTaskSuspendAll();
80007068:	0c001876 	jal	800061d8 <vTaskSuspendAll>
8000706c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3415
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
80007070:	3c028001 	lui	v0,0x8001
80007074:	8c42c448 	lw	v0,-15288(v0)
80007078:	2c420001 	sltiu	v0,v0,1
8000707c:	304200ff 	andi	v0,v0,0xff
80007080:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3417
			}
			( void ) xTaskResumeAll();
80007084:	0c001881 	jal	80006204 <xTaskResumeAll>
80007088:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3419

			if( xListIsEmpty == pdFALSE )
8000708c:	8fc20010 	lw	v0,16(s8)
80007090:	14400018 	bnez	v0,800070f4 <prvCheckTasksWaitingTermination+0xa4>
80007094:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3423
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
80007098:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
8000709c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3425
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
800070a0:	3c028001 	lui	v0,0x8001
800070a4:	2442c448 	addiu	v0,v0,-15288
800070a8:	8c42000c 	lw	v0,12(v0)
800070ac:	8c42000c 	lw	v0,12(v0)
800070b0:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3426
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
800070b4:	8fc20014 	lw	v0,20(s8)
800070b8:	24420004 	addiu	v0,v0,4
800070bc:	00402025 	move	a0,v0
800070c0:	0c002972 	jal	8000a5c8 <uxListRemove>
800070c4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3427
					--uxCurrentNumberOfTasks;
800070c8:	8f8280bf 	lw	v0,-32577(gp)
800070cc:	2442ffff 	addiu	v0,v0,-1
800070d0:	af8280bf 	sw	v0,-32577(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3428
					--uxDeletedTasksWaitingCleanUp;
800070d4:	8f8280bb 	lw	v0,-32581(gp)
800070d8:	2442ffff 	addiu	v0,v0,-1
800070dc:	af8280bb 	sw	v0,-32581(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3430
				}
				taskEXIT_CRITICAL();
800070e0:	0c001de3 	jal	8000778c <vTaskExitCritical>
800070e4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3432

				prvDeleteTCB( pxTCB );
800070e8:	8fc40014 	lw	a0,20(s8)
800070ec:	0c001c7d 	jal	800071f4 <prvDeleteTCB>
800070f0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3411
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
800070f4:	8f8280bb 	lw	v0,-32581(gp)
800070f8:	1440ffdb 	bnez	v0,80007068 <prvCheckTasksWaitingTermination+0x18>
800070fc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3441
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
80007100:	03c0e825 	move	sp,s8
80007104:	8fbf001c 	lw	ra,28(sp)
80007108:	8fbe0018 	lw	s8,24(sp)
8000710c:	27bd0020 	addiu	sp,sp,32
80007110:	03e00008 	jr	ra
80007114:	00000000 	nop

80007118 <prvTaskCheckFreeStackSpace>:
prvTaskCheckFreeStackSpace():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3569
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
80007118:	27bdfff0 	addiu	sp,sp,-16
8000711c:	afbe000c 	sw	s8,12(sp)
80007120:	03a0f025 	move	s8,sp
80007124:	afc40010 	sw	a0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3570
	uint32_t ulCount = 0U;
80007128:	afc00000 	sw	zero,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3572

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
8000712c:	10000007 	b	8000714c <prvTaskCheckFreeStackSpace+0x34>
80007130:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3574
		{
			pucStackByte -= portSTACK_GROWTH;
80007134:	8fc20010 	lw	v0,16(s8)
80007138:	24420001 	addiu	v0,v0,1
8000713c:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3575
			ulCount++;
80007140:	8fc20000 	lw	v0,0(s8)
80007144:	24420001 	addiu	v0,v0,1
80007148:	afc20000 	sw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3572

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
8000714c:	8fc20010 	lw	v0,16(s8)
80007150:	90430000 	lbu	v1,0(v0)
80007154:	240200a5 	li	v0,165
80007158:	1062fff6 	beq	v1,v0,80007134 <prvTaskCheckFreeStackSpace+0x1c>
8000715c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3578
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
80007160:	8fc20000 	lw	v0,0(s8)
80007164:	00021082 	srl	v0,v0,0x2
80007168:	afc20000 	sw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3580

		return ( uint16_t ) ulCount;
8000716c:	8fc20000 	lw	v0,0(s8)
80007170:	3042ffff 	andi	v0,v0,0xffff
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3581
	}
80007174:	03c0e825 	move	sp,s8
80007178:	8fbe000c 	lw	s8,12(sp)
8000717c:	27bd0010 	addiu	sp,sp,16
80007180:	03e00008 	jr	ra
80007184:	00000000 	nop

80007188 <uxTaskGetStackHighWaterMark>:
uxTaskGetStackHighWaterMark():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3589
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
80007188:	27bdffd8 	addiu	sp,sp,-40
8000718c:	afbf0024 	sw	ra,36(sp)
80007190:	afbe0020 	sw	s8,32(sp)
80007194:	03a0f025 	move	s8,sp
80007198:	afc40028 	sw	a0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3594
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
8000719c:	8fc20028 	lw	v0,40(s8)
800071a0:	14400004 	bnez	v0,800071b4 <uxTaskGetStackHighWaterMark+0x2c>
800071a4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3594 (discriminator 1)
800071a8:	8f8280af 	lw	v0,-32593(gp)
800071ac:	10000002 	b	800071b8 <uxTaskGetStackHighWaterMark+0x30>
800071b0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3594 (discriminator 2)
800071b4:	8fc20028 	lw	v0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3594 (discriminator 4)
800071b8:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3598 (discriminator 4)

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
800071bc:	8fc20010 	lw	v0,16(s8)
800071c0:	8c420030 	lw	v0,48(v0)
800071c4:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3606 (discriminator 4)
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
800071c8:	8fc40014 	lw	a0,20(s8)
800071cc:	0c001c46 	jal	80007118 <prvTaskCheckFreeStackSpace>
800071d0:	00000000 	nop
800071d4:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3608 (discriminator 4)

		return uxReturn;
800071d8:	8fc20018 	lw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3609 (discriminator 4)
	}
800071dc:	03c0e825 	move	sp,s8
800071e0:	8fbf0024 	lw	ra,36(sp)
800071e4:	8fbe0020 	lw	s8,32(sp)
800071e8:	27bd0028 	addiu	sp,sp,40
800071ec:	03e00008 	jr	ra
800071f0:	00000000 	nop

800071f4 <prvDeleteTCB>:
prvDeleteTCB():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3617
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
800071f4:	27bdffe8 	addiu	sp,sp,-24
800071f8:	afbf0014 	sw	ra,20(sp)
800071fc:	afbe0010 	sw	s8,16(sp)
80007200:	03a0f025 	move	s8,sp
80007204:	afc40018 	sw	a0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3635

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
80007208:	8fc20018 	lw	v0,24(s8)
8000720c:	8c420030 	lw	v0,48(v0)
80007210:	00402025 	move	a0,v0
80007214:	0c002b7a 	jal	8000ade8 <vPortFree>
80007218:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3636
			vPortFree( pxTCB );
8000721c:	8fc40018 	lw	a0,24(s8)
80007220:	0c002b7a 	jal	8000ade8 <vPortFree>
80007224:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3665
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
80007228:	03c0e825 	move	sp,s8
8000722c:	8fbf0014 	lw	ra,20(sp)
80007230:	8fbe0010 	lw	s8,16(sp)
80007234:	27bd0018 	addiu	sp,sp,24
80007238:	03e00008 	jr	ra
8000723c:	00000000 	nop

80007240 <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3671

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
80007240:	27bdfff0 	addiu	sp,sp,-16
80007244:	afbe000c 	sw	s8,12(sp)
80007248:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3674
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
8000724c:	8f8280b3 	lw	v0,-32589(gp)
80007250:	8c420000 	lw	v0,0(v0)
80007254:	14400004 	bnez	v0,80007268 <prvResetNextTaskUnblockTime+0x28>
80007258:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3674 (discriminator 1)
8000725c:	24020001 	li	v0,1
80007260:	10000002 	b	8000726c <prvResetNextTaskUnblockTime+0x2c>
80007264:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3674 (discriminator 2)
80007268:	00001025 	move	v0,zero
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3674 (discriminator 4)
8000726c:	10400005 	beqz	v0,80007284 <prvResetNextTaskUnblockTime+0x44>
80007270:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3680
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
80007274:	2402ffff 	li	v0,-1
80007278:	af8280df 	sw	v0,-32545(gp)
8000727c:	10000008 	b	800072a0 <prvResetNextTaskUnblockTime+0x60>
80007280:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3688
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80007284:	8f8280b3 	lw	v0,-32589(gp)
80007288:	8c42000c 	lw	v0,12(v0)
8000728c:	8c42000c 	lw	v0,12(v0)
80007290:	afc20000 	sw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3689
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
80007294:	8fc20000 	lw	v0,0(s8)
80007298:	8c420004 	lw	v0,4(v0)
8000729c:	af8280df 	sw	v0,-32545(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3691
	}
}
800072a0:	03c0e825 	move	sp,s8
800072a4:	8fbe000c 	lw	s8,12(sp)
800072a8:	27bd0010 	addiu	sp,sp,16
800072ac:	03e00008 	jr	ra
800072b0:	00000000 	nop

800072b4 <xTaskGetCurrentTaskHandle>:
xTaskGetCurrentTaskHandle():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3697
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
800072b4:	27bdfff0 	addiu	sp,sp,-16
800072b8:	afbe000c 	sw	s8,12(sp)
800072bc:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3703
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
800072c0:	8f8280af 	lw	v0,-32593(gp)
800072c4:	afc20000 	sw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3705

		return xReturn;
800072c8:	8fc20000 	lw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3706
	}
800072cc:	03c0e825 	move	sp,s8
800072d0:	8fbe000c 	lw	s8,12(sp)
800072d4:	27bd0010 	addiu	sp,sp,16
800072d8:	03e00008 	jr	ra
800072dc:	00000000 	nop

800072e0 <xTaskGetSchedulerState>:
xTaskGetSchedulerState():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3714
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
800072e0:	27bdfff0 	addiu	sp,sp,-16
800072e4:	afbe000c 	sw	s8,12(sp)
800072e8:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3717
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
800072ec:	8f8280cb 	lw	v0,-32565(gp)
800072f0:	14400005 	bnez	v0,80007308 <xTaskGetSchedulerState+0x28>
800072f4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3719
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
800072f8:	24020001 	li	v0,1
800072fc:	afc20000 	sw	v0,0(s8)
80007300:	10000009 	b	80007328 <xTaskGetSchedulerState+0x48>
80007304:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3723
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80007308:	8f8280e7 	lw	v0,-32537(gp)
8000730c:	14400005 	bnez	v0,80007324 <xTaskGetSchedulerState+0x44>
80007310:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3725
			{
				xReturn = taskSCHEDULER_RUNNING;
80007314:	24020002 	li	v0,2
80007318:	afc20000 	sw	v0,0(s8)
8000731c:	10000002 	b	80007328 <xTaskGetSchedulerState+0x48>
80007320:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3729
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
80007324:	afc00000 	sw	zero,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3733
			}
		}

		return xReturn;
80007328:	8fc20000 	lw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3734
	}
8000732c:	03c0e825 	move	sp,s8
80007330:	8fbe000c 	lw	s8,12(sp)
80007334:	27bd0010 	addiu	sp,sp,16
80007338:	03e00008 	jr	ra
8000733c:	00000000 	nop

80007340 <vTaskPriorityInherit>:
vTaskPriorityInherit():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3742
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
80007340:	27bdffe0 	addiu	sp,sp,-32
80007344:	afbf001c 	sw	ra,28(sp)
80007348:	afbe0018 	sw	s8,24(sp)
8000734c:	03a0f025 	move	s8,sp
80007350:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3743
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
80007354:	8fc20020 	lw	v0,32(s8)
80007358:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3747

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
8000735c:	8fc20020 	lw	v0,32(s8)
80007360:	1040005f 	beqz	v0,800074e0 <vTaskPriorityInherit+0x1a0>
80007364:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3752
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
80007368:	8fc20010 	lw	v0,16(s8)
8000736c:	8c43002c 	lw	v1,44(v0)
80007370:	8f8280af 	lw	v0,-32593(gp)
80007374:	8c42002c 	lw	v0,44(v0)
80007378:	0062102b 	sltu	v0,v1,v0
8000737c:	10400058 	beqz	v0,800074e0 <vTaskPriorityInherit+0x1a0>
80007380:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3757
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
80007384:	8fc20010 	lw	v0,16(s8)
80007388:	8c420018 	lw	v0,24(v0)
8000738c:	04400007 	bltz	v0,800073ac <vTaskPriorityInherit+0x6c>
80007390:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3759
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80007394:	8f8280af 	lw	v0,-32593(gp)
80007398:	8c42002c 	lw	v0,44(v0)
8000739c:	24030005 	li	v1,5
800073a0:	00621823 	subu	v1,v1,v0
800073a4:	8fc20010 	lw	v0,16(s8)
800073a8:	ac430018 	sw	v1,24(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3768
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
800073ac:	8fc20010 	lw	v0,16(s8)
800073b0:	8c430014 	lw	v1,20(v0)
800073b4:	8fc20010 	lw	v0,16(s8)
800073b8:	8c42002c 	lw	v0,44(v0)
800073bc:	00021080 	sll	v0,v0,0x2
800073c0:	00022080 	sll	a0,v0,0x2
800073c4:	00441021 	addu	v0,v0,a0
800073c8:	3c048001 	lui	a0,0x8001
800073cc:	2484c3a8 	addiu	a0,a0,-15448
800073d0:	00441021 	addu	v0,v0,a0
800073d4:	14620004 	bne	v1,v0,800073e8 <vTaskPriorityInherit+0xa8>
800073d8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3768 (discriminator 1)
800073dc:	24020001 	li	v0,1
800073e0:	10000002 	b	800073ec <vTaskPriorityInherit+0xac>
800073e4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3768 (discriminator 2)
800073e8:	00001025 	move	v0,zero
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3768 (discriminator 4)
800073ec:	10400038 	beqz	v0,800074d0 <vTaskPriorityInherit+0x190>
800073f0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3770
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
800073f4:	8fc20010 	lw	v0,16(s8)
800073f8:	24420004 	addiu	v0,v0,4
800073fc:	00402025 	move	a0,v0
80007400:	0c002972 	jal	8000a5c8 <uxListRemove>
80007404:	00000000 	nop
80007408:	14400015 	bnez	v0,80007460 <vTaskPriorityInherit+0x120>
8000740c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3772
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
80007410:	8fc20010 	lw	v0,16(s8)
80007414:	8c42002c 	lw	v0,44(v0)
80007418:	3c038001 	lui	v1,0x8001
8000741c:	00021080 	sll	v0,v0,0x2
80007420:	00022080 	sll	a0,v0,0x2
80007424:	00441021 	addu	v0,v0,a0
80007428:	2463c3a8 	addiu	v1,v1,-15448
8000742c:	00431021 	addu	v0,v0,v1
80007430:	8c420000 	lw	v0,0(v0)
80007434:	1440000a 	bnez	v0,80007460 <vTaskPriorityInherit+0x120>
80007438:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3772 (discriminator 1)
8000743c:	8fc20010 	lw	v0,16(s8)
80007440:	8c42002c 	lw	v0,44(v0)
80007444:	00401825 	move	v1,v0
80007448:	24020001 	li	v0,1
8000744c:	00621004 	sllv	v0,v0,v1
80007450:	00021827 	nor	v1,zero,v0
80007454:	8f8280c7 	lw	v0,-32569(gp)
80007458:	00621024 	and	v0,v1,v0
8000745c:	af8280c7 	sw	v0,-32569(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3780
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
80007460:	8f8280af 	lw	v0,-32593(gp)
80007464:	8c43002c 	lw	v1,44(v0)
80007468:	8fc20010 	lw	v0,16(s8)
8000746c:	ac43002c 	sw	v1,44(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3781
					prvAddTaskToReadyList( pxTCB );
80007470:	8fc20010 	lw	v0,16(s8)
80007474:	8c42002c 	lw	v0,44(v0)
80007478:	00401825 	move	v1,v0
8000747c:	24020001 	li	v0,1
80007480:	00621804 	sllv	v1,v0,v1
80007484:	8f8280c7 	lw	v0,-32569(gp)
80007488:	00621025 	or	v0,v1,v0
8000748c:	af8280c7 	sw	v0,-32569(gp)
80007490:	8fc20010 	lw	v0,16(s8)
80007494:	8c42002c 	lw	v0,44(v0)
80007498:	00021080 	sll	v0,v0,0x2
8000749c:	00021880 	sll	v1,v0,0x2
800074a0:	00431021 	addu	v0,v0,v1
800074a4:	3c038001 	lui	v1,0x8001
800074a8:	2463c3a8 	addiu	v1,v1,-15448
800074ac:	00431821 	addu	v1,v0,v1
800074b0:	8fc20010 	lw	v0,16(s8)
800074b4:	24420004 	addiu	v0,v0,4
800074b8:	00602025 	move	a0,v1
800074bc:	00402825 	move	a1,v0
800074c0:	0c002914 	jal	8000a450 <vListInsertEnd>
800074c4:	00000000 	nop
800074c8:	10000005 	b	800074e0 <vTaskPriorityInherit+0x1a0>
800074cc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3786
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
800074d0:	8f8280af 	lw	v0,-32593(gp)
800074d4:	8c43002c 	lw	v1,44(v0)
800074d8:	8fc20010 	lw	v0,16(s8)
800074dc:	ac43002c 	sw	v1,44(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3800
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
800074e0:	03c0e825 	move	sp,s8
800074e4:	8fbf001c 	lw	ra,28(sp)
800074e8:	8fbe0018 	lw	s8,24(sp)
800074ec:	27bd0020 	addiu	sp,sp,32
800074f0:	03e00008 	jr	ra
800074f4:	00000000 	nop

800074f8 <xTaskPriorityDisinherit>:
xTaskPriorityDisinherit():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3808
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
800074f8:	27bdffe0 	addiu	sp,sp,-32
800074fc:	afbf001c 	sw	ra,28(sp)
80007500:	afbe0018 	sw	s8,24(sp)
80007504:	03a0f025 	move	s8,sp
80007508:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3809
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
8000750c:	8fc20020 	lw	v0,32(s8)
80007510:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3810
	BaseType_t xReturn = pdFALSE;
80007514:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3812

		if( pxMutexHolder != NULL )
80007518:	8fc20020 	lw	v0,32(s8)
8000751c:	1040005f 	beqz	v0,8000769c <xTaskPriorityDisinherit+0x1a4>
80007520:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3818
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
80007524:	8f8280af 	lw	v0,-32593(gp)
80007528:	8fc30014 	lw	v1,20(s8)
8000752c:	10620006 	beq	v1,v0,80007548 <xTaskPriorityDisinherit+0x50>
80007530:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3818 (discriminator 1)
80007534:	3c028001 	lui	v0,0x8001
80007538:	2444bd48 	addiu	a0,v0,-17080
8000753c:	24050eea 	li	a1,3818
80007540:	0c000417 	jal	8000105c <vAssertCalled>
80007544:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3820

			configASSERT( pxTCB->uxMutexesHeld );
80007548:	8fc20014 	lw	v0,20(s8)
8000754c:	8c420044 	lw	v0,68(v0)
80007550:	14400006 	bnez	v0,8000756c <xTaskPriorityDisinherit+0x74>
80007554:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3820 (discriminator 1)
80007558:	3c028001 	lui	v0,0x8001
8000755c:	2444bd48 	addiu	a0,v0,-17080
80007560:	24050eec 	li	a1,3820
80007564:	0c000417 	jal	8000105c <vAssertCalled>
80007568:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3821
			( pxTCB->uxMutexesHeld )--;
8000756c:	8fc20014 	lw	v0,20(s8)
80007570:	8c420044 	lw	v0,68(v0)
80007574:	2443ffff 	addiu	v1,v0,-1
80007578:	8fc20014 	lw	v0,20(s8)
8000757c:	ac430044 	sw	v1,68(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3825

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
80007580:	8fc20014 	lw	v0,20(s8)
80007584:	8c43002c 	lw	v1,44(v0)
80007588:	8fc20014 	lw	v0,20(s8)
8000758c:	8c420040 	lw	v0,64(v0)
80007590:	10620042 	beq	v1,v0,8000769c <xTaskPriorityDisinherit+0x1a4>
80007594:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3828
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
80007598:	8fc20014 	lw	v0,20(s8)
8000759c:	8c420044 	lw	v0,68(v0)
800075a0:	1440003e 	bnez	v0,8000769c <xTaskPriorityDisinherit+0x1a4>
800075a4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3835
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
800075a8:	8fc20014 	lw	v0,20(s8)
800075ac:	24420004 	addiu	v0,v0,4
800075b0:	00402025 	move	a0,v0
800075b4:	0c002972 	jal	8000a5c8 <uxListRemove>
800075b8:	00000000 	nop
800075bc:	14400015 	bnez	v0,80007614 <xTaskPriorityDisinherit+0x11c>
800075c0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3837
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
800075c4:	8fc20014 	lw	v0,20(s8)
800075c8:	8c42002c 	lw	v0,44(v0)
800075cc:	3c038001 	lui	v1,0x8001
800075d0:	00021080 	sll	v0,v0,0x2
800075d4:	00022080 	sll	a0,v0,0x2
800075d8:	00441021 	addu	v0,v0,a0
800075dc:	2463c3a8 	addiu	v1,v1,-15448
800075e0:	00431021 	addu	v0,v0,v1
800075e4:	8c420000 	lw	v0,0(v0)
800075e8:	1440000a 	bnez	v0,80007614 <xTaskPriorityDisinherit+0x11c>
800075ec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3837 (discriminator 1)
800075f0:	8fc20014 	lw	v0,20(s8)
800075f4:	8c42002c 	lw	v0,44(v0)
800075f8:	00401825 	move	v1,v0
800075fc:	24020001 	li	v0,1
80007600:	00621004 	sllv	v0,v0,v1
80007604:	00021827 	nor	v1,zero,v0
80007608:	8f8280c7 	lw	v0,-32569(gp)
8000760c:	00621024 	and	v0,v1,v0
80007610:	af8280c7 	sw	v0,-32569(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3847
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
80007614:	8fc20014 	lw	v0,20(s8)
80007618:	8c430040 	lw	v1,64(v0)
8000761c:	8fc20014 	lw	v0,20(s8)
80007620:	ac43002c 	sw	v1,44(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3852

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80007624:	8fc20014 	lw	v0,20(s8)
80007628:	8c42002c 	lw	v0,44(v0)
8000762c:	24030005 	li	v1,5
80007630:	00621823 	subu	v1,v1,v0
80007634:	8fc20014 	lw	v0,20(s8)
80007638:	ac430018 	sw	v1,24(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3853
					prvAddTaskToReadyList( pxTCB );
8000763c:	8fc20014 	lw	v0,20(s8)
80007640:	8c42002c 	lw	v0,44(v0)
80007644:	00401825 	move	v1,v0
80007648:	24020001 	li	v0,1
8000764c:	00621804 	sllv	v1,v0,v1
80007650:	8f8280c7 	lw	v0,-32569(gp)
80007654:	00621025 	or	v0,v1,v0
80007658:	af8280c7 	sw	v0,-32569(gp)
8000765c:	8fc20014 	lw	v0,20(s8)
80007660:	8c42002c 	lw	v0,44(v0)
80007664:	00021080 	sll	v0,v0,0x2
80007668:	00021880 	sll	v1,v0,0x2
8000766c:	00431021 	addu	v0,v0,v1
80007670:	3c038001 	lui	v1,0x8001
80007674:	2463c3a8 	addiu	v1,v1,-15448
80007678:	00431821 	addu	v1,v0,v1
8000767c:	8fc20014 	lw	v0,20(s8)
80007680:	24420004 	addiu	v0,v0,4
80007684:	00602025 	move	a0,v1
80007688:	00402825 	move	a1,v0
8000768c:	0c002914 	jal	8000a450 <vListInsertEnd>
80007690:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3863
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
80007694:	24020001 	li	v0,1
80007698:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3880
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
8000769c:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3881
	}
800076a0:	03c0e825 	move	sp,s8
800076a4:	8fbf001c 	lw	ra,28(sp)
800076a8:	8fbe0018 	lw	s8,24(sp)
800076ac:	27bd0020 	addiu	sp,sp,32
800076b0:	03e00008 	jr	ra
800076b4:	00000000 	nop

800076b8 <vTaskEnterCritical>:
vTaskEnterCritical():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3889
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
800076b8:	27bdffd8 	addiu	sp,sp,-40
800076bc:	afbf0024 	sw	ra,36(sp)
800076c0:	afbe0020 	sw	s8,32(sp)
800076c4:	afb0001c 	sw	s0,28(sp)
800076c8:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3890
		portDISABLE_INTERRUPTS();
800076cc:	40026000 	mfc0	v0,c0_status
800076d0:	00408025 	move	s0,v0
800076d4:	02001025 	move	v0,s0
800076d8:	afc20010 	sw	v0,16(s8)
800076dc:	8fc30010 	lw	v1,16(s8)
800076e0:	3c020001 	lui	v0,0x1
800076e4:	3442fc00 	ori	v0,v0,0xfc00
800076e8:	00621024 	and	v0,v1,v0
800076ec:	00021282 	srl	v0,v0,0xa
800076f0:	2c420003 	sltiu	v0,v0,3
800076f4:	10400008 	beqz	v0,80007718 <vTaskEnterCritical+0x60>
800076f8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3890 (discriminator 1)
800076fc:	8fc20010 	lw	v0,16(s8)
80007700:	7c028284 	ins	v0,zero,0xa,0x7
80007704:	afc20010 	sw	v0,16(s8)
80007708:	8fc20010 	lw	v0,16(s8)
8000770c:	34420c00 	ori	v0,v0,0xc00
80007710:	40826000 	mtc0	v0,c0_status
80007714:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3892

		if( xSchedulerRunning != pdFALSE )
80007718:	8f8280cb 	lw	v0,-32565(gp)
8000771c:	10400014 	beqz	v0,80007770 <vTaskEnterCritical+0xb8>
80007720:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3894
		{
			( pxCurrentTCB->uxCriticalNesting )++;
80007724:	8f8280af 	lw	v0,-32593(gp)
80007728:	8c43003c 	lw	v1,60(v0)
8000772c:	24630001 	addiu	v1,v1,1
80007730:	ac43003c 	sw	v1,60(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3902
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
80007734:	8f8280af 	lw	v0,-32593(gp)
80007738:	8c43003c 	lw	v1,60(v0)
8000773c:	24020001 	li	v0,1
80007740:	1462000b 	bne	v1,v0,80007770 <vTaskEnterCritical+0xb8>
80007744:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3904
			{
				portASSERT_IF_IN_ISR();
80007748:	8f82801b 	lw	v0,-32741(gp)
8000774c:	10400008 	beqz	v0,80007770 <vTaskEnterCritical+0xb8>
80007750:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3904 (discriminator 1)
80007754:	3c028001 	lui	v0,0x8001
80007758:	2444bd48 	addiu	a0,v0,-17080
8000775c:	24050f40 	li	a1,3904
80007760:	0c000417 	jal	8000105c <vAssertCalled>
80007764:	00000000 	nop
80007768:	10000001 	b	80007770 <vTaskEnterCritical+0xb8>
8000776c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3911
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80007770:	03c0e825 	move	sp,s8
80007774:	8fbf0024 	lw	ra,36(sp)
80007778:	8fbe0020 	lw	s8,32(sp)
8000777c:	8fb0001c 	lw	s0,28(sp)
80007780:	27bd0028 	addiu	sp,sp,40
80007784:	03e00008 	jr	ra
80007788:	00000000 	nop

8000778c <vTaskExitCritical>:
vTaskExitCritical():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3919
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
8000778c:	27bdfff0 	addiu	sp,sp,-16
80007790:	afbe000c 	sw	s8,12(sp)
80007794:	afb00008 	sw	s0,8(sp)
80007798:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3920
		if( xSchedulerRunning != pdFALSE )
8000779c:	8f8280cb 	lw	v0,-32565(gp)
800077a0:	10400017 	beqz	v0,80007800 <vTaskExitCritical+0x74>
800077a4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3922
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
800077a8:	8f8280af 	lw	v0,-32593(gp)
800077ac:	8c42003c 	lw	v0,60(v0)
800077b0:	10400013 	beqz	v0,80007800 <vTaskExitCritical+0x74>
800077b4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3924
			{
				( pxCurrentTCB->uxCriticalNesting )--;
800077b8:	8f8280af 	lw	v0,-32593(gp)
800077bc:	8c43003c 	lw	v1,60(v0)
800077c0:	2463ffff 	addiu	v1,v1,-1
800077c4:	ac43003c 	sw	v1,60(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3926

				if( pxCurrentTCB->uxCriticalNesting == 0U )
800077c8:	8f8280af 	lw	v0,-32593(gp)
800077cc:	8c42003c 	lw	v0,60(v0)
800077d0:	1440000b 	bnez	v0,80007800 <vTaskExitCritical+0x74>
800077d4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3928
				{
					portENABLE_INTERRUPTS();
800077d8:	40026000 	mfc0	v0,c0_status
800077dc:	00408025 	move	s0,v0
800077e0:	02001025 	move	v0,s0
800077e4:	afc20000 	sw	v0,0(s8)
800077e8:	8fc20000 	lw	v0,0(s8)
800077ec:	7c028284 	ins	v0,zero,0xa,0x7
800077f0:	afc20000 	sw	v0,0(s8)
800077f4:	8fc20000 	lw	v0,0(s8)
800077f8:	40826000 	mtc0	v0,c0_status
800077fc:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:3944
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80007800:	03c0e825 	move	sp,s8
80007804:	8fbe000c 	lw	s8,12(sp)
80007808:	8fb00008 	lw	s0,8(sp)
8000780c:	27bd0010 	addiu	sp,sp,16
80007810:	03e00008 	jr	ra
80007814:	00000000 	nop

80007818 <uxTaskResetEventItemValue>:
uxTaskResetEventItemValue():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4198

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
80007818:	27bdfff0 	addiu	sp,sp,-16
8000781c:	afbe000c 	sw	s8,12(sp)
80007820:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4201
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
80007824:	8f8280af 	lw	v0,-32593(gp)
80007828:	8c420018 	lw	v0,24(v0)
8000782c:	afc20000 	sw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4205

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80007830:	8f8280af 	lw	v0,-32593(gp)
80007834:	8f8380af 	lw	v1,-32593(gp)
80007838:	8c63002c 	lw	v1,44(v1)
8000783c:	24040005 	li	a0,5
80007840:	00831823 	subu	v1,a0,v1
80007844:	ac430018 	sw	v1,24(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4207

	return uxReturn;
80007848:	8fc20000 	lw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4208
}
8000784c:	03c0e825 	move	sp,s8
80007850:	8fbe000c 	lw	s8,12(sp)
80007854:	27bd0010 	addiu	sp,sp,16
80007858:	03e00008 	jr	ra
8000785c:	00000000 	nop

80007860 <pvTaskIncrementMutexHeldCount>:
pvTaskIncrementMutexHeldCount():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4214
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
80007860:	27bdfff8 	addiu	sp,sp,-8
80007864:	afbe0004 	sw	s8,4(sp)
80007868:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4217
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
8000786c:	8f8280af 	lw	v0,-32593(gp)
80007870:	10400005 	beqz	v0,80007888 <pvTaskIncrementMutexHeldCount+0x28>
80007874:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4219
		{
			( pxCurrentTCB->uxMutexesHeld )++;
80007878:	8f8280af 	lw	v0,-32593(gp)
8000787c:	8c430044 	lw	v1,68(v0)
80007880:	24630001 	addiu	v1,v1,1
80007884:	ac430044 	sw	v1,68(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4222
		}

		return pxCurrentTCB;
80007888:	8f8280af 	lw	v0,-32593(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4223
	}
8000788c:	03c0e825 	move	sp,s8
80007890:	8fbe0004 	lw	s8,4(sp)
80007894:	27bd0008 	addiu	sp,sp,8
80007898:	03e00008 	jr	ra
8000789c:	00000000 	nop

800078a0 <ulTaskNotifyTake>:
ulTaskNotifyTake():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4231
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
800078a0:	27bdffe0 	addiu	sp,sp,-32
800078a4:	afbf001c 	sw	ra,28(sp)
800078a8:	afbe0018 	sw	s8,24(sp)
800078ac:	03a0f025 	move	s8,sp
800078b0:	afc40020 	sw	a0,32(s8)
800078b4:	afc50024 	sw	a1,36(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4234
	uint32_t ulReturn;

		taskENTER_CRITICAL();
800078b8:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
800078bc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4237
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
800078c0:	8f8280af 	lw	v0,-32593(gp)
800078c4:	8c420048 	lw	v0,72(v0)
800078c8:	14400015 	bnez	v0,80007920 <ulTaskNotifyTake+0x80>
800078cc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4240
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
800078d0:	8f8280af 	lw	v0,-32593(gp)
800078d4:	24030001 	li	v1,1
800078d8:	a043004c 	sb	v1,76(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4242

				if( xTicksToWait > ( TickType_t ) 0 )
800078dc:	8fc20024 	lw	v0,36(s8)
800078e0:	1040000f 	beqz	v0,80007920 <ulTaskNotifyTake+0x80>
800078e4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4244
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
800078e8:	8fc40024 	lw	a0,36(s8)
800078ec:	24050001 	li	a1,1
800078f0:	0c00207c 	jal	800081f0 <prvAddCurrentTaskToDelayedList>
800078f4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4251

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
800078f8:	40026800 	mfc0	v0,c0_cause
800078fc:	0040f825 	move	ra,v0
80007900:	03e01025 	move	v0,ra
80007904:	afc20010 	sw	v0,16(s8)
80007908:	8fc20010 	lw	v0,16(s8)
8000790c:	34420100 	ori	v0,v0,0x100
80007910:	afc20010 	sw	v0,16(s8)
80007914:	8fc20010 	lw	v0,16(s8)
80007918:	40826000 	mtc0	v0,c0_status
8000791c:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4263
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
80007920:	0c001de3 	jal	8000778c <vTaskExitCritical>
80007924:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4265

		taskENTER_CRITICAL();
80007928:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
8000792c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4268
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
80007930:	8f8280af 	lw	v0,-32593(gp)
80007934:	8c420048 	lw	v0,72(v0)
80007938:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4270

			if( ulReturn != 0UL )
8000793c:	8fc20014 	lw	v0,20(s8)
80007940:	1040000c 	beqz	v0,80007974 <ulTaskNotifyTake+0xd4>
80007944:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4272
			{
				if( xClearCountOnExit != pdFALSE )
80007948:	8fc20020 	lw	v0,32(s8)
8000794c:	10400005 	beqz	v0,80007964 <ulTaskNotifyTake+0xc4>
80007950:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4274
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
80007954:	8f8280af 	lw	v0,-32593(gp)
80007958:	ac400048 	sw	zero,72(v0)
8000795c:	10000005 	b	80007974 <ulTaskNotifyTake+0xd4>
80007960:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4278
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
80007964:	8f8280af 	lw	v0,-32593(gp)
80007968:	8fc30014 	lw	v1,20(s8)
8000796c:	2463ffff 	addiu	v1,v1,-1
80007970:	ac430048 	sw	v1,72(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4286
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
80007974:	8f8280af 	lw	v0,-32593(gp)
80007978:	a040004c 	sb	zero,76(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4288
		}
		taskEXIT_CRITICAL();
8000797c:	0c001de3 	jal	8000778c <vTaskExitCritical>
80007980:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4290

		return ulReturn;
80007984:	8fc20014 	lw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4291
	}
80007988:	03c0e825 	move	sp,s8
8000798c:	8fbf001c 	lw	ra,28(sp)
80007990:	8fbe0018 	lw	s8,24(sp)
80007994:	27bd0020 	addiu	sp,sp,32
80007998:	03e00008 	jr	ra
8000799c:	00000000 	nop

800079a0 <xTaskNotifyWait>:
xTaskNotifyWait():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4299
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
800079a0:	27bdffe0 	addiu	sp,sp,-32
800079a4:	afbf001c 	sw	ra,28(sp)
800079a8:	afbe0018 	sw	s8,24(sp)
800079ac:	03a0f025 	move	s8,sp
800079b0:	afc40020 	sw	a0,32(s8)
800079b4:	afc50024 	sw	a1,36(s8)
800079b8:	afc60028 	sw	a2,40(s8)
800079bc:	afc7002c 	sw	a3,44(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4302
	BaseType_t xReturn;

		taskENTER_CRITICAL();
800079c0:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
800079c4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4305
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
800079c8:	8f8280af 	lw	v0,-32593(gp)
800079cc:	9042004c 	lbu	v0,76(v0)
800079d0:	304300ff 	andi	v1,v0,0xff
800079d4:	24020002 	li	v0,2
800079d8:	1062001b 	beq	v1,v0,80007a48 <xTaskNotifyWait+0xa8>
800079dc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4310
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
800079e0:	8f8280af 	lw	v0,-32593(gp)
800079e4:	8c440048 	lw	a0,72(v0)
800079e8:	8fc30020 	lw	v1,32(s8)
800079ec:	00031827 	nor	v1,zero,v1
800079f0:	00831824 	and	v1,a0,v1
800079f4:	ac430048 	sw	v1,72(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4313

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
800079f8:	8f8280af 	lw	v0,-32593(gp)
800079fc:	24030001 	li	v1,1
80007a00:	a043004c 	sb	v1,76(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4315

				if( xTicksToWait > ( TickType_t ) 0 )
80007a04:	8fc2002c 	lw	v0,44(s8)
80007a08:	1040000f 	beqz	v0,80007a48 <xTaskNotifyWait+0xa8>
80007a0c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4317
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
80007a10:	8fc4002c 	lw	a0,44(s8)
80007a14:	24050001 	li	a1,1
80007a18:	0c00207c 	jal	800081f0 <prvAddCurrentTaskToDelayedList>
80007a1c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4324

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
80007a20:	40026800 	mfc0	v0,c0_cause
80007a24:	0040f825 	move	ra,v0
80007a28:	03e01025 	move	v0,ra
80007a2c:	afc20014 	sw	v0,20(s8)
80007a30:	8fc20014 	lw	v0,20(s8)
80007a34:	34420100 	ori	v0,v0,0x100
80007a38:	afc20014 	sw	v0,20(s8)
80007a3c:	8fc20014 	lw	v0,20(s8)
80007a40:	40826000 	mtc0	v0,c0_status
80007a44:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4336
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
80007a48:	0c001de3 	jal	8000778c <vTaskExitCritical>
80007a4c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4338

		taskENTER_CRITICAL();
80007a50:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80007a54:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4342
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
80007a58:	8fc20028 	lw	v0,40(s8)
80007a5c:	10400005 	beqz	v0,80007a74 <xTaskNotifyWait+0xd4>
80007a60:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4346
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
80007a64:	8f8280af 	lw	v0,-32593(gp)
80007a68:	8c430048 	lw	v1,72(v0)
80007a6c:	8fc20028 	lw	v0,40(s8)
80007a70:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4353

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
80007a74:	8f8280af 	lw	v0,-32593(gp)
80007a78:	9042004c 	lbu	v0,76(v0)
80007a7c:	304300ff 	andi	v1,v0,0xff
80007a80:	24020001 	li	v0,1
80007a84:	14620004 	bne	v1,v0,80007a98 <xTaskNotifyWait+0xf8>
80007a88:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4356
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
80007a8c:	afc00010 	sw	zero,16(s8)
80007a90:	10000009 	b	80007ab8 <xTaskNotifyWait+0x118>
80007a94:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4362
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
80007a98:	8f8280af 	lw	v0,-32593(gp)
80007a9c:	8c440048 	lw	a0,72(v0)
80007aa0:	8fc30024 	lw	v1,36(s8)
80007aa4:	00031827 	nor	v1,zero,v1
80007aa8:	00831824 	and	v1,a0,v1
80007aac:	ac430048 	sw	v1,72(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4363
				xReturn = pdTRUE;
80007ab0:	24020001 	li	v0,1
80007ab4:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4366
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
80007ab8:	8f8280af 	lw	v0,-32593(gp)
80007abc:	a040004c 	sb	zero,76(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4368
		}
		taskEXIT_CRITICAL();
80007ac0:	0c001de3 	jal	8000778c <vTaskExitCritical>
80007ac4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4370

		return xReturn;
80007ac8:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4371
	}
80007acc:	03c0e825 	move	sp,s8
80007ad0:	8fbf001c 	lw	ra,28(sp)
80007ad4:	8fbe0018 	lw	s8,24(sp)
80007ad8:	27bd0020 	addiu	sp,sp,32
80007adc:	03e00008 	jr	ra
80007ae0:	00000000 	nop

80007ae4 <xTaskGenericNotify>:
xTaskGenericNotify():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4379
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
80007ae4:	27bdffd8 	addiu	sp,sp,-40
80007ae8:	afbf0024 	sw	ra,36(sp)
80007aec:	afbe0020 	sw	s8,32(sp)
80007af0:	03a0f025 	move	s8,sp
80007af4:	afc40028 	sw	a0,40(s8)
80007af8:	afc5002c 	sw	a1,44(s8)
80007afc:	afc60030 	sw	a2,48(s8)
80007b00:	afc70034 	sw	a3,52(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4381
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
80007b04:	24020001 	li	v0,1
80007b08:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4384
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
80007b0c:	8fc20028 	lw	v0,40(s8)
80007b10:	14400006 	bnez	v0,80007b2c <xTaskGenericNotify+0x48>
80007b14:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4384 (discriminator 1)
80007b18:	3c028001 	lui	v0,0x8001
80007b1c:	2444bd48 	addiu	a0,v0,-17080
80007b20:	24051120 	li	a1,4384
80007b24:	0c000417 	jal	8000105c <vAssertCalled>
80007b28:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4385
		pxTCB = ( TCB_t * ) xTaskToNotify;
80007b2c:	8fc20028 	lw	v0,40(s8)
80007b30:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4387

		taskENTER_CRITICAL();
80007b34:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80007b38:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4389
		{
			if( pulPreviousNotificationValue != NULL )
80007b3c:	8fc20034 	lw	v0,52(s8)
80007b40:	10400005 	beqz	v0,80007b58 <xTaskGenericNotify+0x74>
80007b44:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4391
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
80007b48:	8fc20014 	lw	v0,20(s8)
80007b4c:	8c430048 	lw	v1,72(v0)
80007b50:	8fc20034 	lw	v0,52(s8)
80007b54:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4394
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
80007b58:	8fc20014 	lw	v0,20(s8)
80007b5c:	9042004c 	lbu	v0,76(v0)
80007b60:	a3c20018 	sb	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4396

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
80007b64:	8fc20014 	lw	v0,20(s8)
80007b68:	24030002 	li	v1,2
80007b6c:	a043004c 	sb	v1,76(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4398

			switch( eAction )
80007b70:	8fc20030 	lw	v0,48(s8)
80007b74:	2c420005 	sltiu	v0,v0,5
80007b78:	1040002a 	beqz	v0,80007c24 <xTaskGenericNotify+0x140>
80007b7c:	00000000 	nop
80007b80:	8fc20030 	lw	v0,48(s8)
80007b84:	00021880 	sll	v1,v0,0x2
80007b88:	3c028001 	lui	v0,0x8001
80007b8c:	2442bd68 	addiu	v0,v0,-17048
80007b90:	00621021 	addu	v0,v1,v0
80007b94:	8c420000 	lw	v0,0(v0)
80007b98:	00400008 	jr	v0
80007b9c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4401
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
80007ba0:	8fc20014 	lw	v0,20(s8)
80007ba4:	8c430048 	lw	v1,72(v0)
80007ba8:	8fc2002c 	lw	v0,44(s8)
80007bac:	00621825 	or	v1,v1,v0
80007bb0:	8fc20014 	lw	v0,20(s8)
80007bb4:	ac430048 	sw	v1,72(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4402
					break;
80007bb8:	1000001a 	b	80007c24 <xTaskGenericNotify+0x140>
80007bbc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4405

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
80007bc0:	8fc20014 	lw	v0,20(s8)
80007bc4:	8c420048 	lw	v0,72(v0)
80007bc8:	24430001 	addiu	v1,v0,1
80007bcc:	8fc20014 	lw	v0,20(s8)
80007bd0:	ac430048 	sw	v1,72(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4406
					break;
80007bd4:	10000013 	b	80007c24 <xTaskGenericNotify+0x140>
80007bd8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4409

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
80007bdc:	8fc20014 	lw	v0,20(s8)
80007be0:	8fc3002c 	lw	v1,44(s8)
80007be4:	ac430048 	sw	v1,72(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4410
					break;
80007be8:	1000000e 	b	80007c24 <xTaskGenericNotify+0x140>
80007bec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4413

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
80007bf0:	93c30018 	lbu	v1,24(s8)
80007bf4:	24020002 	li	v0,2
80007bf8:	10620006 	beq	v1,v0,80007c14 <xTaskGenericNotify+0x130>
80007bfc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4415
					{
						pxTCB->ulNotifiedValue = ulValue;
80007c00:	8fc20014 	lw	v0,20(s8)
80007c04:	8fc3002c 	lw	v1,44(s8)
80007c08:	ac430048 	sw	v1,72(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4422
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
80007c0c:	10000005 	b	80007c24 <xTaskGenericNotify+0x140>
80007c10:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4420
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
80007c14:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4422
					}
					break;
80007c18:	10000002 	b	80007c24 <xTaskGenericNotify+0x140>
80007c1c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4427

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
80007c20:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4434

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
80007c24:	93c30018 	lbu	v1,24(s8)
80007c28:	24020001 	li	v0,1
80007c2c:	14620036 	bne	v1,v0,80007d08 <xTaskGenericNotify+0x224>
80007c30:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4436
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
80007c34:	8fc20014 	lw	v0,20(s8)
80007c38:	24420004 	addiu	v0,v0,4
80007c3c:	00402025 	move	a0,v0
80007c40:	0c002972 	jal	8000a5c8 <uxListRemove>
80007c44:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4437
				prvAddTaskToReadyList( pxTCB );
80007c48:	8fc20014 	lw	v0,20(s8)
80007c4c:	8c42002c 	lw	v0,44(v0)
80007c50:	00401825 	move	v1,v0
80007c54:	24020001 	li	v0,1
80007c58:	00621804 	sllv	v1,v0,v1
80007c5c:	8f8280c7 	lw	v0,-32569(gp)
80007c60:	00621025 	or	v0,v1,v0
80007c64:	af8280c7 	sw	v0,-32569(gp)
80007c68:	8fc20014 	lw	v0,20(s8)
80007c6c:	8c42002c 	lw	v0,44(v0)
80007c70:	00021080 	sll	v0,v0,0x2
80007c74:	00021880 	sll	v1,v0,0x2
80007c78:	00431021 	addu	v0,v0,v1
80007c7c:	3c038001 	lui	v1,0x8001
80007c80:	2463c3a8 	addiu	v1,v1,-15448
80007c84:	00431821 	addu	v1,v0,v1
80007c88:	8fc20014 	lw	v0,20(s8)
80007c8c:	24420004 	addiu	v0,v0,4
80007c90:	00602025 	move	a0,v1
80007c94:	00402825 	move	a1,v0
80007c98:	0c002914 	jal	8000a450 <vListInsertEnd>
80007c9c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4440

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
80007ca0:	8fc20014 	lw	v0,20(s8)
80007ca4:	8c420028 	lw	v0,40(v0)
80007ca8:	10400006 	beqz	v0,80007cc4 <xTaskGenericNotify+0x1e0>
80007cac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4440 (discriminator 1)
80007cb0:	3c028001 	lui	v0,0x8001
80007cb4:	2444bd48 	addiu	a0,v0,-17080
80007cb8:	24051158 	li	a1,4440
80007cbc:	0c000417 	jal	8000105c <vAssertCalled>
80007cc0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4458
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
80007cc4:	8fc20014 	lw	v0,20(s8)
80007cc8:	8c43002c 	lw	v1,44(v0)
80007ccc:	8f8280af 	lw	v0,-32593(gp)
80007cd0:	8c42002c 	lw	v0,44(v0)
80007cd4:	0043102b 	sltu	v0,v0,v1
80007cd8:	1040000b 	beqz	v0,80007d08 <xTaskGenericNotify+0x224>
80007cdc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4462
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
80007ce0:	40026800 	mfc0	v0,c0_cause
80007ce4:	0040f825 	move	ra,v0
80007ce8:	03e01025 	move	v0,ra
80007cec:	afc2001c 	sw	v0,28(s8)
80007cf0:	8fc2001c 	lw	v0,28(s8)
80007cf4:	34420100 	ori	v0,v0,0x100
80007cf8:	afc2001c 	sw	v0,28(s8)
80007cfc:	8fc2001c 	lw	v0,28(s8)
80007d00:	40826000 	mtc0	v0,c0_status
80007d04:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4474
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
80007d08:	0c001de3 	jal	8000778c <vTaskExitCritical>
80007d0c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4476

		return xReturn;
80007d10:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4477
	}
80007d14:	03c0e825 	move	sp,s8
80007d18:	8fbf0024 	lw	ra,36(sp)
80007d1c:	8fbe0020 	lw	s8,32(sp)
80007d20:	27bd0028 	addiu	sp,sp,40
80007d24:	03e00008 	jr	ra
80007d28:	00000000 	nop

80007d2c <xTaskGenericNotifyFromISR>:
xTaskGenericNotifyFromISR():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4485
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
80007d2c:	27bdffd8 	addiu	sp,sp,-40
80007d30:	afbf0024 	sw	ra,36(sp)
80007d34:	afbe0020 	sw	s8,32(sp)
80007d38:	03a0f025 	move	s8,sp
80007d3c:	afc40028 	sw	a0,40(s8)
80007d40:	afc5002c 	sw	a1,44(s8)
80007d44:	afc60030 	sw	a2,48(s8)
80007d48:	afc70034 	sw	a3,52(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4488
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
80007d4c:	24020001 	li	v0,1
80007d50:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4491
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
80007d54:	8fc20028 	lw	v0,40(s8)
80007d58:	14400006 	bnez	v0,80007d74 <xTaskGenericNotifyFromISR+0x48>
80007d5c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4491 (discriminator 1)
80007d60:	3c028001 	lui	v0,0x8001
80007d64:	2444bd48 	addiu	a0,v0,-17080
80007d68:	2405118b 	li	a1,4491
80007d6c:	0c000417 	jal	8000105c <vAssertCalled>
80007d70:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4511
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
80007d74:	8fc20028 	lw	v0,40(s8)
80007d78:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4513

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
80007d7c:	0c002a23 	jal	8000a88c <uxPortSetInterruptMaskFromISR>
80007d80:	00000000 	nop
80007d84:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4515
		{
			if( pulPreviousNotificationValue != NULL )
80007d88:	8fc20034 	lw	v0,52(s8)
80007d8c:	10400005 	beqz	v0,80007da4 <xTaskGenericNotifyFromISR+0x78>
80007d90:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4517
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
80007d94:	8fc20014 	lw	v0,20(s8)
80007d98:	8c430048 	lw	v1,72(v0)
80007d9c:	8fc20034 	lw	v0,52(s8)
80007da0:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4520
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
80007da4:	8fc20014 	lw	v0,20(s8)
80007da8:	9042004c 	lbu	v0,76(v0)
80007dac:	a3c2001c 	sb	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4521
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
80007db0:	8fc20014 	lw	v0,20(s8)
80007db4:	24030002 	li	v1,2
80007db8:	a043004c 	sb	v1,76(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4523

			switch( eAction )
80007dbc:	8fc20030 	lw	v0,48(s8)
80007dc0:	2c420005 	sltiu	v0,v0,5
80007dc4:	1040002a 	beqz	v0,80007e70 <xTaskGenericNotifyFromISR+0x144>
80007dc8:	00000000 	nop
80007dcc:	8fc20030 	lw	v0,48(s8)
80007dd0:	00021880 	sll	v1,v0,0x2
80007dd4:	3c028001 	lui	v0,0x8001
80007dd8:	2442bd7c 	addiu	v0,v0,-17028
80007ddc:	00621021 	addu	v0,v1,v0
80007de0:	8c420000 	lw	v0,0(v0)
80007de4:	00400008 	jr	v0
80007de8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4526
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
80007dec:	8fc20014 	lw	v0,20(s8)
80007df0:	8c430048 	lw	v1,72(v0)
80007df4:	8fc2002c 	lw	v0,44(s8)
80007df8:	00621825 	or	v1,v1,v0
80007dfc:	8fc20014 	lw	v0,20(s8)
80007e00:	ac430048 	sw	v1,72(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4527
					break;
80007e04:	1000001a 	b	80007e70 <xTaskGenericNotifyFromISR+0x144>
80007e08:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4530

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
80007e0c:	8fc20014 	lw	v0,20(s8)
80007e10:	8c420048 	lw	v0,72(v0)
80007e14:	24430001 	addiu	v1,v0,1
80007e18:	8fc20014 	lw	v0,20(s8)
80007e1c:	ac430048 	sw	v1,72(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4531
					break;
80007e20:	10000013 	b	80007e70 <xTaskGenericNotifyFromISR+0x144>
80007e24:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4534

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
80007e28:	8fc20014 	lw	v0,20(s8)
80007e2c:	8fc3002c 	lw	v1,44(s8)
80007e30:	ac430048 	sw	v1,72(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4535
					break;
80007e34:	1000000e 	b	80007e70 <xTaskGenericNotifyFromISR+0x144>
80007e38:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4538

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
80007e3c:	93c3001c 	lbu	v1,28(s8)
80007e40:	24020002 	li	v0,2
80007e44:	10620006 	beq	v1,v0,80007e60 <xTaskGenericNotifyFromISR+0x134>
80007e48:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4540
					{
						pxTCB->ulNotifiedValue = ulValue;
80007e4c:	8fc20014 	lw	v0,20(s8)
80007e50:	8fc3002c 	lw	v1,44(s8)
80007e54:	ac430048 	sw	v1,72(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4547
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
80007e58:	10000005 	b	80007e70 <xTaskGenericNotifyFromISR+0x144>
80007e5c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4545
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
80007e60:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4547
					}
					break;
80007e64:	10000002 	b	80007e70 <xTaskGenericNotifyFromISR+0x144>
80007e68:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4552

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
80007e6c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4559

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
80007e70:	93c3001c 	lbu	v1,28(s8)
80007e74:	24020001 	li	v0,1
80007e78:	14620042 	bne	v1,v0,80007f84 <xTaskGenericNotifyFromISR+0x258>
80007e7c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4562
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
80007e80:	8fc20014 	lw	v0,20(s8)
80007e84:	8c420028 	lw	v0,40(v0)
80007e88:	10400006 	beqz	v0,80007ea4 <xTaskGenericNotifyFromISR+0x178>
80007e8c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4562 (discriminator 1)
80007e90:	3c028001 	lui	v0,0x8001
80007e94:	2444bd48 	addiu	a0,v0,-17080
80007e98:	240511d2 	li	a1,4562
80007e9c:	0c000417 	jal	8000105c <vAssertCalled>
80007ea0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4564

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80007ea4:	8f8280e7 	lw	v0,-32537(gp)
80007ea8:	1440001e 	bnez	v0,80007f24 <xTaskGenericNotifyFromISR+0x1f8>
80007eac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4566
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
80007eb0:	8fc20014 	lw	v0,20(s8)
80007eb4:	24420004 	addiu	v0,v0,4
80007eb8:	00402025 	move	a0,v0
80007ebc:	0c002972 	jal	8000a5c8 <uxListRemove>
80007ec0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4567
					prvAddTaskToReadyList( pxTCB );
80007ec4:	8fc20014 	lw	v0,20(s8)
80007ec8:	8c42002c 	lw	v0,44(v0)
80007ecc:	00401825 	move	v1,v0
80007ed0:	24020001 	li	v0,1
80007ed4:	00621804 	sllv	v1,v0,v1
80007ed8:	8f8280c7 	lw	v0,-32569(gp)
80007edc:	00621025 	or	v0,v1,v0
80007ee0:	af8280c7 	sw	v0,-32569(gp)
80007ee4:	8fc20014 	lw	v0,20(s8)
80007ee8:	8c42002c 	lw	v0,44(v0)
80007eec:	00021080 	sll	v0,v0,0x2
80007ef0:	00021880 	sll	v1,v0,0x2
80007ef4:	00431021 	addu	v0,v0,v1
80007ef8:	3c038001 	lui	v1,0x8001
80007efc:	2463c3a8 	addiu	v1,v1,-15448
80007f00:	00431821 	addu	v1,v0,v1
80007f04:	8fc20014 	lw	v0,20(s8)
80007f08:	24420004 	addiu	v0,v0,4
80007f0c:	00602025 	move	a0,v1
80007f10:	00402825 	move	a1,v0
80007f14:	0c002914 	jal	8000a450 <vListInsertEnd>
80007f18:	00000000 	nop
80007f1c:	10000008 	b	80007f40 <xTaskGenericNotifyFromISR+0x214>
80007f20:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4573
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
80007f24:	8fc20014 	lw	v0,20(s8)
80007f28:	24430018 	addiu	v1,v0,24
80007f2c:	3c028001 	lui	v0,0x8001
80007f30:	2444c434 	addiu	a0,v0,-15308
80007f34:	00602825 	move	a1,v1
80007f38:	0c002914 	jal	8000a450 <vListInsertEnd>
80007f3c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4576
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
80007f40:	8fc20014 	lw	v0,20(s8)
80007f44:	8c43002c 	lw	v1,44(v0)
80007f48:	8f8280af 	lw	v0,-32593(gp)
80007f4c:	8c42002c 	lw	v0,44(v0)
80007f50:	0043102b 	sltu	v0,v0,v1
80007f54:	1040000b 	beqz	v0,80007f84 <xTaskGenericNotifyFromISR+0x258>
80007f58:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4580
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
80007f5c:	8fc20038 	lw	v0,56(s8)
80007f60:	10400006 	beqz	v0,80007f7c <xTaskGenericNotifyFromISR+0x250>
80007f64:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4582
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
80007f68:	8fc20038 	lw	v0,56(s8)
80007f6c:	24030001 	li	v1,1
80007f70:	ac430000 	sw	v1,0(v0)
80007f74:	10000003 	b	80007f84 <xTaskGenericNotifyFromISR+0x258>
80007f78:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4589
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
80007f7c:	24020001 	li	v0,1
80007f80:	af8280d3 	sw	v0,-32557(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4598
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
80007f84:	8fc40018 	lw	a0,24(s8)
80007f88:	0c0029da 	jal	8000a768 <vPortClearInterruptMaskFromISR>
80007f8c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4600

		return xReturn;
80007f90:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4601
	}
80007f94:	03c0e825 	move	sp,s8
80007f98:	8fbf0024 	lw	ra,36(sp)
80007f9c:	8fbe0020 	lw	s8,32(sp)
80007fa0:	27bd0028 	addiu	sp,sp,40
80007fa4:	03e00008 	jr	ra
80007fa8:	00000000 	nop

80007fac <vTaskNotifyGiveFromISR>:
vTaskNotifyGiveFromISR():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4609
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
80007fac:	27bdffd8 	addiu	sp,sp,-40
80007fb0:	afbf0024 	sw	ra,36(sp)
80007fb4:	afbe0020 	sw	s8,32(sp)
80007fb8:	03a0f025 	move	s8,sp
80007fbc:	afc40028 	sw	a0,40(s8)
80007fc0:	afc5002c 	sw	a1,44(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4614
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
80007fc4:	8fc20028 	lw	v0,40(s8)
80007fc8:	14400006 	bnez	v0,80007fe4 <vTaskNotifyGiveFromISR+0x38>
80007fcc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4614 (discriminator 1)
80007fd0:	3c028001 	lui	v0,0x8001
80007fd4:	2444bd48 	addiu	a0,v0,-17080
80007fd8:	24051206 	li	a1,4614
80007fdc:	0c000417 	jal	8000105c <vAssertCalled>
80007fe0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4634
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
80007fe4:	8fc20028 	lw	v0,40(s8)
80007fe8:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4636

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
80007fec:	0c002a23 	jal	8000a88c <uxPortSetInterruptMaskFromISR>
80007ff0:	00000000 	nop
80007ff4:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4638
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
80007ff8:	8fc20010 	lw	v0,16(s8)
80007ffc:	9042004c 	lbu	v0,76(v0)
80008000:	a3c20018 	sb	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4639
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
80008004:	8fc20010 	lw	v0,16(s8)
80008008:	24030002 	li	v1,2
8000800c:	a043004c 	sb	v1,76(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4643

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
80008010:	8fc20010 	lw	v0,16(s8)
80008014:	8c420048 	lw	v0,72(v0)
80008018:	24430001 	addiu	v1,v0,1
8000801c:	8fc20010 	lw	v0,16(s8)
80008020:	ac430048 	sw	v1,72(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4649

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
80008024:	93c30018 	lbu	v1,24(s8)
80008028:	24020001 	li	v0,1
8000802c:	14620042 	bne	v1,v0,80008138 <vTaskNotifyGiveFromISR+0x18c>
80008030:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4652
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
80008034:	8fc20010 	lw	v0,16(s8)
80008038:	8c420028 	lw	v0,40(v0)
8000803c:	10400006 	beqz	v0,80008058 <vTaskNotifyGiveFromISR+0xac>
80008040:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4652 (discriminator 1)
80008044:	3c028001 	lui	v0,0x8001
80008048:	2444bd48 	addiu	a0,v0,-17080
8000804c:	2405122c 	li	a1,4652
80008050:	0c000417 	jal	8000105c <vAssertCalled>
80008054:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4654

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80008058:	8f8280e7 	lw	v0,-32537(gp)
8000805c:	1440001e 	bnez	v0,800080d8 <vTaskNotifyGiveFromISR+0x12c>
80008060:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4656
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
80008064:	8fc20010 	lw	v0,16(s8)
80008068:	24420004 	addiu	v0,v0,4
8000806c:	00402025 	move	a0,v0
80008070:	0c002972 	jal	8000a5c8 <uxListRemove>
80008074:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4657
					prvAddTaskToReadyList( pxTCB );
80008078:	8fc20010 	lw	v0,16(s8)
8000807c:	8c42002c 	lw	v0,44(v0)
80008080:	00401825 	move	v1,v0
80008084:	24020001 	li	v0,1
80008088:	00621804 	sllv	v1,v0,v1
8000808c:	8f8280c7 	lw	v0,-32569(gp)
80008090:	00621025 	or	v0,v1,v0
80008094:	af8280c7 	sw	v0,-32569(gp)
80008098:	8fc20010 	lw	v0,16(s8)
8000809c:	8c42002c 	lw	v0,44(v0)
800080a0:	00021080 	sll	v0,v0,0x2
800080a4:	00021880 	sll	v1,v0,0x2
800080a8:	00431021 	addu	v0,v0,v1
800080ac:	3c038001 	lui	v1,0x8001
800080b0:	2463c3a8 	addiu	v1,v1,-15448
800080b4:	00431821 	addu	v1,v0,v1
800080b8:	8fc20010 	lw	v0,16(s8)
800080bc:	24420004 	addiu	v0,v0,4
800080c0:	00602025 	move	a0,v1
800080c4:	00402825 	move	a1,v0
800080c8:	0c002914 	jal	8000a450 <vListInsertEnd>
800080cc:	00000000 	nop
800080d0:	10000008 	b	800080f4 <vTaskNotifyGiveFromISR+0x148>
800080d4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4663
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
800080d8:	8fc20010 	lw	v0,16(s8)
800080dc:	24430018 	addiu	v1,v0,24
800080e0:	3c028001 	lui	v0,0x8001
800080e4:	2444c434 	addiu	a0,v0,-15308
800080e8:	00602825 	move	a1,v1
800080ec:	0c002914 	jal	8000a450 <vListInsertEnd>
800080f0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4666
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
800080f4:	8fc20010 	lw	v0,16(s8)
800080f8:	8c43002c 	lw	v1,44(v0)
800080fc:	8f8280af 	lw	v0,-32593(gp)
80008100:	8c42002c 	lw	v0,44(v0)
80008104:	0043102b 	sltu	v0,v0,v1
80008108:	1040000b 	beqz	v0,80008138 <vTaskNotifyGiveFromISR+0x18c>
8000810c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4670
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
80008110:	8fc2002c 	lw	v0,44(s8)
80008114:	10400006 	beqz	v0,80008130 <vTaskNotifyGiveFromISR+0x184>
80008118:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4672
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
8000811c:	8fc2002c 	lw	v0,44(s8)
80008120:	24030001 	li	v1,1
80008124:	ac430000 	sw	v1,0(v0)
80008128:	10000003 	b	80008138 <vTaskNotifyGiveFromISR+0x18c>
8000812c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4679
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
80008130:	24020001 	li	v0,1
80008134:	af8280d3 	sw	v0,-32557(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4688
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
80008138:	8fc40014 	lw	a0,20(s8)
8000813c:	0c0029da 	jal	8000a768 <vPortClearInterruptMaskFromISR>
80008140:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4689
	}
80008144:	03c0e825 	move	sp,s8
80008148:	8fbf0024 	lw	ra,36(sp)
8000814c:	8fbe0020 	lw	s8,32(sp)
80008150:	27bd0028 	addiu	sp,sp,40
80008154:	03e00008 	jr	ra
80008158:	00000000 	nop

8000815c <xTaskNotifyStateClear>:
xTaskNotifyStateClear():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4698
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
8000815c:	27bdffe0 	addiu	sp,sp,-32
80008160:	afbf001c 	sw	ra,28(sp)
80008164:	afbe0018 	sw	s8,24(sp)
80008168:	03a0f025 	move	s8,sp
8000816c:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4704
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
80008170:	8fc20020 	lw	v0,32(s8)
80008174:	14400004 	bnez	v0,80008188 <xTaskNotifyStateClear+0x2c>
80008178:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4704 (discriminator 1)
8000817c:	8f8280af 	lw	v0,-32593(gp)
80008180:	10000002 	b	8000818c <xTaskNotifyStateClear+0x30>
80008184:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4704 (discriminator 2)
80008188:	8fc20020 	lw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4704 (discriminator 4)
8000818c:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4706 (discriminator 4)

		taskENTER_CRITICAL();
80008190:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80008194:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4708 (discriminator 4)
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
80008198:	8fc20014 	lw	v0,20(s8)
8000819c:	9042004c 	lbu	v0,76(v0)
800081a0:	304300ff 	andi	v1,v0,0xff
800081a4:	24020002 	li	v0,2
800081a8:	14620007 	bne	v1,v0,800081c8 <xTaskNotifyStateClear+0x6c>
800081ac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4710
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
800081b0:	8fc20014 	lw	v0,20(s8)
800081b4:	a040004c 	sb	zero,76(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4711
				xReturn = pdPASS;
800081b8:	24020001 	li	v0,1
800081bc:	afc20010 	sw	v0,16(s8)
800081c0:	10000002 	b	800081cc <xTaskNotifyStateClear+0x70>
800081c4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4715
			}
			else
			{
				xReturn = pdFAIL;
800081c8:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4718
			}
		}
		taskEXIT_CRITICAL();
800081cc:	0c001de3 	jal	8000778c <vTaskExitCritical>
800081d0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4720

		return xReturn;
800081d4:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4721
	}
800081d8:	03c0e825 	move	sp,s8
800081dc:	8fbf001c 	lw	ra,28(sp)
800081e0:	8fbe0018 	lw	s8,24(sp)
800081e4:	27bd0020 	addiu	sp,sp,32
800081e8:	03e00008 	jr	ra
800081ec:	00000000 	nop

800081f0 <prvAddCurrentTaskToDelayedList>:
prvAddCurrentTaskToDelayedList():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4728
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
800081f0:	27bdffe0 	addiu	sp,sp,-32
800081f4:	afbf001c 	sw	ra,28(sp)
800081f8:	afbe0018 	sw	s8,24(sp)
800081fc:	03a0f025 	move	s8,sp
80008200:	afc40020 	sw	a0,32(s8)
80008204:	afc50024 	sw	a1,36(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4730
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
80008208:	8f8280c3 	lw	v0,-32573(gp)
8000820c:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4743
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
80008210:	8f8280af 	lw	v0,-32593(gp)
80008214:	24420004 	addiu	v0,v0,4
80008218:	00402025 	move	a0,v0
8000821c:	0c002972 	jal	8000a5c8 <uxListRemove>
80008220:	00000000 	nop
80008224:	1440000a 	bnez	v0,80008250 <prvAddCurrentTaskToDelayedList+0x60>
80008228:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4747
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
8000822c:	8f8280af 	lw	v0,-32593(gp)
80008230:	8c42002c 	lw	v0,44(v0)
80008234:	00401825 	move	v1,v0
80008238:	24020001 	li	v0,1
8000823c:	00621004 	sllv	v0,v0,v1
80008240:	00021827 	nor	v1,zero,v0
80008244:	8f8280c7 	lw	v0,-32569(gp)
80008248:	00621024 	and	v0,v1,v0
8000824c:	af8280c7 	sw	v0,-32569(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4756
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
80008250:	8fc30020 	lw	v1,32(s8)
80008254:	2402ffff 	li	v0,-1
80008258:	1462000d 	bne	v1,v0,80008290 <prvAddCurrentTaskToDelayedList+0xa0>
8000825c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4756 (discriminator 1)
80008260:	8fc20024 	lw	v0,36(s8)
80008264:	1040000a 	beqz	v0,80008290 <prvAddCurrentTaskToDelayedList+0xa0>
80008268:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4761
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
8000826c:	8f8280af 	lw	v0,-32593(gp)
80008270:	24430004 	addiu	v1,v0,4
80008274:	3c028001 	lui	v0,0x8001
80008278:	2444c45c 	addiu	a0,v0,-15268
8000827c:	00602825 	move	a1,v1
80008280:	0c002914 	jal	8000a450 <vListInsertEnd>
80008284:	00000000 	nop
80008288:	10000024 	b	8000831c <prvAddCurrentTaskToDelayedList+0x12c>
8000828c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4768
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
80008290:	8fc30010 	lw	v1,16(s8)
80008294:	8fc20020 	lw	v0,32(s8)
80008298:	00621021 	addu	v0,v1,v0
8000829c:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4771

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
800082a0:	8f8280af 	lw	v0,-32593(gp)
800082a4:	8fc30014 	lw	v1,20(s8)
800082a8:	ac430004 	sw	v1,4(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4773

			if( xTimeToWake < xConstTickCount )
800082ac:	8fc30014 	lw	v1,20(s8)
800082b0:	8fc20010 	lw	v0,16(s8)
800082b4:	0062102b 	sltu	v0,v1,v0
800082b8:	1040000a 	beqz	v0,800082e4 <prvAddCurrentTaskToDelayedList+0xf4>
800082bc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4777
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
800082c0:	8f8380b7 	lw	v1,-32585(gp)
800082c4:	8f8280af 	lw	v0,-32593(gp)
800082c8:	24420004 	addiu	v0,v0,4
800082cc:	00602025 	move	a0,v1
800082d0:	00402825 	move	a1,v0
800082d4:	0c002937 	jal	8000a4dc <vListInsert>
800082d8:	00000000 	nop
800082dc:	1000000f 	b	8000831c <prvAddCurrentTaskToDelayedList+0x12c>
800082e0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4783
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
800082e4:	8f8380b3 	lw	v1,-32589(gp)
800082e8:	8f8280af 	lw	v0,-32593(gp)
800082ec:	24420004 	addiu	v0,v0,4
800082f0:	00602025 	move	a0,v1
800082f4:	00402825 	move	a1,v0
800082f8:	0c002937 	jal	8000a4dc <vListInsert>
800082fc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4788

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
80008300:	8f8280df 	lw	v0,-32545(gp)
80008304:	8fc30014 	lw	v1,20(s8)
80008308:	0062102b 	sltu	v0,v1,v0
8000830c:	10400003 	beqz	v0,8000831c <prvAddCurrentTaskToDelayedList+0x12c>
80008310:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4790
				{
					xNextTaskUnblockTime = xTimeToWake;
80008314:	8fc20014 	lw	v0,20(s8)
80008318:	af8280df 	sw	v0,-32545(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/tasks.c:4836

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
8000831c:	03c0e825 	move	sp,s8
80008320:	8fbf001c 	lw	ra,28(sp)
80008324:	8fbe0018 	lw	s8,24(sp)
80008328:	27bd0020 	addiu	sp,sp,32
8000832c:	03e00008 	jr	ra
80008330:	00000000 	nop

80008334 <xQueueGenericReset>:
xQueueGenericReset():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:280
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
80008334:	27bdffe0 	addiu	sp,sp,-32
80008338:	afbf001c 	sw	ra,28(sp)
8000833c:	afbe0018 	sw	s8,24(sp)
80008340:	03a0f025 	move	s8,sp
80008344:	afc40020 	sw	a0,32(s8)
80008348:	afc50024 	sw	a1,36(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:281
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
8000834c:	8fc20020 	lw	v0,32(s8)
80008350:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:283

	configASSERT( pxQueue );
80008354:	8fc20010 	lw	v0,16(s8)
80008358:	14400006 	bnez	v0,80008374 <xQueueGenericReset+0x40>
8000835c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:283 (discriminator 1)
80008360:	3c028001 	lui	v0,0x8001
80008364:	2444bd90 	addiu	a0,v0,-17008
80008368:	2405011b 	li	a1,283
8000836c:	0c000417 	jal	8000105c <vAssertCalled>
80008370:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:285

	taskENTER_CRITICAL();
80008374:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80008378:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:287
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
8000837c:	8fc20010 	lw	v0,16(s8)
80008380:	8c420000 	lw	v0,0(v0)
80008384:	8fc30010 	lw	v1,16(s8)
80008388:	8c64003c 	lw	a0,60(v1)
8000838c:	8fc30010 	lw	v1,16(s8)
80008390:	8c630040 	lw	v1,64(v1)
80008394:	00830018 	mult	a0,v1
80008398:	00001812 	mflo	v1
8000839c:	00431821 	addu	v1,v0,v1
800083a0:	8fc20010 	lw	v0,16(s8)
800083a4:	ac430004 	sw	v1,4(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:288
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
800083a8:	8fc20010 	lw	v0,16(s8)
800083ac:	ac400038 	sw	zero,56(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:289
		pxQueue->pcWriteTo = pxQueue->pcHead;
800083b0:	8fc20010 	lw	v0,16(s8)
800083b4:	8c430000 	lw	v1,0(v0)
800083b8:	8fc20010 	lw	v0,16(s8)
800083bc:	ac430008 	sw	v1,8(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:290
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
800083c0:	8fc20010 	lw	v0,16(s8)
800083c4:	8c420000 	lw	v0,0(v0)
800083c8:	8fc30010 	lw	v1,16(s8)
800083cc:	8c63003c 	lw	v1,60(v1)
800083d0:	2464ffff 	addiu	a0,v1,-1
800083d4:	8fc30010 	lw	v1,16(s8)
800083d8:	8c630040 	lw	v1,64(v1)
800083dc:	00830018 	mult	a0,v1
800083e0:	00001812 	mflo	v1
800083e4:	00431821 	addu	v1,v0,v1
800083e8:	8fc20010 	lw	v0,16(s8)
800083ec:	ac43000c 	sw	v1,12(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:291
		pxQueue->cRxLock = queueUNLOCKED;
800083f0:	8fc20010 	lw	v0,16(s8)
800083f4:	2403ffff 	li	v1,-1
800083f8:	a0430044 	sb	v1,68(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:292
		pxQueue->cTxLock = queueUNLOCKED;
800083fc:	8fc20010 	lw	v0,16(s8)
80008400:	2403ffff 	li	v1,-1
80008404:	a0430045 	sb	v1,69(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:294

		if( xNewQueue == pdFALSE )
80008408:	8fc20024 	lw	v0,36(s8)
8000840c:	14400018 	bnez	v0,80008470 <xQueueGenericReset+0x13c>
80008410:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:301
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
80008414:	8fc20010 	lw	v0,16(s8)
80008418:	8c420010 	lw	v0,16(v0)
8000841c:	1040001e 	beqz	v0,80008498 <xQueueGenericReset+0x164>
80008420:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:303
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
80008424:	8fc20010 	lw	v0,16(s8)
80008428:	24420010 	addiu	v0,v0,16
8000842c:	00402025 	move	a0,v0
80008430:	0c001aaa 	jal	80006aa8 <xTaskRemoveFromEventList>
80008434:	00000000 	nop
80008438:	10400017 	beqz	v0,80008498 <xQueueGenericReset+0x164>
8000843c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:305
				{
					queueYIELD_IF_USING_PREEMPTION();
80008440:	40026800 	mfc0	v0,c0_cause
80008444:	0040f825 	move	ra,v0
80008448:	03e01025 	move	v0,ra
8000844c:	afc20014 	sw	v0,20(s8)
80008450:	8fc20014 	lw	v0,20(s8)
80008454:	34420100 	ori	v0,v0,0x100
80008458:	afc20014 	sw	v0,20(s8)
8000845c:	8fc20014 	lw	v0,20(s8)
80008460:	40826000 	mtc0	v0,c0_status
80008464:	000000c0 	ehb
80008468:	1000000b 	b	80008498 <xQueueGenericReset+0x164>
8000846c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:320
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
80008470:	8fc20010 	lw	v0,16(s8)
80008474:	24420010 	addiu	v0,v0,16
80008478:	00402025 	move	a0,v0
8000847c:	0c0028ef 	jal	8000a3bc <vListInitialise>
80008480:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:321
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
80008484:	8fc20010 	lw	v0,16(s8)
80008488:	24420024 	addiu	v0,v0,36
8000848c:	00402025 	move	a0,v0
80008490:	0c0028ef 	jal	8000a3bc <vListInitialise>
80008494:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:324
		}
	}
	taskEXIT_CRITICAL();
80008498:	0c001de3 	jal	8000778c <vTaskExitCritical>
8000849c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:328

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
800084a0:	24020001 	li	v0,1
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:329
}
800084a4:	03c0e825 	move	sp,s8
800084a8:	8fbf001c 	lw	ra,28(sp)
800084ac:	8fbe0018 	lw	s8,24(sp)
800084b0:	27bd0020 	addiu	sp,sp,32
800084b4:	03e00008 	jr	ra
800084b8:	00000000 	nop

800084bc <xQueueGenericCreate>:
xQueueGenericCreate():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:387
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
800084bc:	27bdffd0 	addiu	sp,sp,-48
800084c0:	afbf002c 	sw	ra,44(sp)
800084c4:	afbe0028 	sw	s8,40(sp)
800084c8:	03a0f025 	move	s8,sp
800084cc:	afc40030 	sw	a0,48(s8)
800084d0:	afc50034 	sw	a1,52(s8)
800084d4:	00c01025 	move	v0,a2
800084d8:	a3c20038 	sb	v0,56(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:392
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
800084dc:	8fc20030 	lw	v0,48(s8)
800084e0:	14400006 	bnez	v0,800084fc <xQueueGenericCreate+0x40>
800084e4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:392 (discriminator 1)
800084e8:	3c028001 	lui	v0,0x8001
800084ec:	2444bd90 	addiu	a0,v0,-17008
800084f0:	24050188 	li	a1,392
800084f4:	0c000417 	jal	8000105c <vAssertCalled>
800084f8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:394

		if( uxItemSize == ( UBaseType_t ) 0 )
800084fc:	8fc20034 	lw	v0,52(s8)
80008500:	14400004 	bnez	v0,80008514 <xQueueGenericCreate+0x58>
80008504:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:397
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
80008508:	afc00018 	sw	zero,24(s8)
8000850c:	10000006 	b	80008528 <xQueueGenericCreate+0x6c>
80008510:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:403
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80008514:	8fc30030 	lw	v1,48(s8)
80008518:	8fc20034 	lw	v0,52(s8)
8000851c:	00620018 	mult	v1,v0
80008520:	00001012 	mflo	v0
80008524:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:406
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
80008528:	8fc20018 	lw	v0,24(s8)
8000852c:	2442004c 	addiu	v0,v0,76
80008530:	00402025 	move	a0,v0
80008534:	0c002af0 	jal	8000abc0 <pvPortMalloc>
80008538:	00000000 	nop
8000853c:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:408

		if( pxNewQueue != NULL )
80008540:	8fc2001c 	lw	v0,28(s8)
80008544:	1040000d 	beqz	v0,8000857c <xQueueGenericCreate+0xc0>
80008548:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:412
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
8000854c:	8fc2001c 	lw	v0,28(s8)
80008550:	2442004c 	addiu	v0,v0,76
80008554:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:423
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
80008558:	93c30038 	lbu	v1,56(s8)
8000855c:	8fc2001c 	lw	v0,28(s8)
80008560:	afa20010 	sw	v0,16(sp)
80008564:	8fc40030 	lw	a0,48(s8)
80008568:	8fc50034 	lw	a1,52(s8)
8000856c:	8fc60020 	lw	a2,32(s8)
80008570:	00603825 	move	a3,v1
80008574:	0c002166 	jal	80008598 <prvInitialiseNewQueue>
80008578:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:426
		}

		return pxNewQueue;
8000857c:	8fc2001c 	lw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:427
	}
80008580:	03c0e825 	move	sp,s8
80008584:	8fbf002c 	lw	ra,44(sp)
80008588:	8fbe0028 	lw	s8,40(sp)
8000858c:	27bd0030 	addiu	sp,sp,48
80008590:	03e00008 	jr	ra
80008594:	00000000 	nop

80008598 <prvInitialiseNewQueue>:
prvInitialiseNewQueue():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:433

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
80008598:	27bdffe8 	addiu	sp,sp,-24
8000859c:	afbf0014 	sw	ra,20(sp)
800085a0:	afbe0010 	sw	s8,16(sp)
800085a4:	03a0f025 	move	s8,sp
800085a8:	afc40018 	sw	a0,24(s8)
800085ac:	afc5001c 	sw	a1,28(s8)
800085b0:	afc60020 	sw	a2,32(s8)
800085b4:	00e01025 	move	v0,a3
800085b8:	a3c20024 	sb	v0,36(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:438
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
800085bc:	8fc2001c 	lw	v0,28(s8)
800085c0:	14400006 	bnez	v0,800085dc <prvInitialiseNewQueue+0x44>
800085c4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:444
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
800085c8:	8fc20028 	lw	v0,40(s8)
800085cc:	8fc30028 	lw	v1,40(s8)
800085d0:	ac430000 	sw	v1,0(v0)
800085d4:	10000004 	b	800085e8 <prvInitialiseNewQueue+0x50>
800085d8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:449
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
800085dc:	8fc20028 	lw	v0,40(s8)
800085e0:	8fc30020 	lw	v1,32(s8)
800085e4:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:454
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
800085e8:	8fc20028 	lw	v0,40(s8)
800085ec:	8fc30018 	lw	v1,24(s8)
800085f0:	ac43003c 	sw	v1,60(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:455
	pxNewQueue->uxItemSize = uxItemSize;
800085f4:	8fc20028 	lw	v0,40(s8)
800085f8:	8fc3001c 	lw	v1,28(s8)
800085fc:	ac430040 	sw	v1,64(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:456
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
80008600:	8fc40028 	lw	a0,40(s8)
80008604:	24050001 	li	a1,1
80008608:	0c0020cd 	jal	80008334 <xQueueGenericReset>
8000860c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:466
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
80008610:	8fc20028 	lw	v0,40(s8)
80008614:	ac400048 	sw	zero,72(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:471
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
80008618:	03c0e825 	move	sp,s8
8000861c:	8fbf0014 	lw	ra,20(sp)
80008620:	8fbe0010 	lw	s8,16(sp)
80008624:	27bd0018 	addiu	sp,sp,24
80008628:	03e00008 	jr	ra
8000862c:	00000000 	nop

80008630 <prvInitialiseMutex>:
prvInitialiseMutex():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:477
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
80008630:	27bdffe8 	addiu	sp,sp,-24
80008634:	afbf0014 	sw	ra,20(sp)
80008638:	afbe0010 	sw	s8,16(sp)
8000863c:	03a0f025 	move	s8,sp
80008640:	afc40018 	sw	a0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:478
		if( pxNewQueue != NULL )
80008644:	8fc20018 	lw	v0,24(s8)
80008648:	1040000d 	beqz	v0,80008680 <prvInitialiseMutex+0x50>
8000864c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:484
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
80008650:	8fc20018 	lw	v0,24(s8)
80008654:	ac400004 	sw	zero,4(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:485
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
80008658:	8fc20018 	lw	v0,24(s8)
8000865c:	ac400000 	sw	zero,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:488

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
80008660:	8fc20018 	lw	v0,24(s8)
80008664:	ac40000c 	sw	zero,12(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:493

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
80008668:	8fc40018 	lw	a0,24(s8)
8000866c:	00002825 	move	a1,zero
80008670:	00003025 	move	a2,zero
80008674:	00003825 	move	a3,zero
80008678:	0c002254 	jal	80008950 <xQueueGenericSend>
8000867c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:499
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
80008680:	03c0e825 	move	sp,s8
80008684:	8fbf0014 	lw	ra,20(sp)
80008688:	8fbe0010 	lw	s8,16(sp)
8000868c:	27bd0018 	addiu	sp,sp,24
80008690:	03e00008 	jr	ra
80008694:	00000000 	nop

80008698 <xQueueCreateMutex>:
xQueueCreateMutex():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:507
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
80008698:	27bdffd8 	addiu	sp,sp,-40
8000869c:	afbf0024 	sw	ra,36(sp)
800086a0:	afbe0020 	sw	s8,32(sp)
800086a4:	03a0f025 	move	s8,sp
800086a8:	00801025 	move	v0,a0
800086ac:	a3c20028 	sb	v0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:509
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
800086b0:	24020001 	li	v0,1
800086b4:	afc20010 	sw	v0,16(s8)
800086b8:	afc00014 	sw	zero,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:511

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
800086bc:	93c20028 	lbu	v0,40(s8)
800086c0:	8fc40010 	lw	a0,16(s8)
800086c4:	8fc50014 	lw	a1,20(s8)
800086c8:	00403025 	move	a2,v0
800086cc:	0c00212f 	jal	800084bc <xQueueGenericCreate>
800086d0:	00000000 	nop
800086d4:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:512
		prvInitialiseMutex( pxNewQueue );
800086d8:	8fc40018 	lw	a0,24(s8)
800086dc:	0c00218c 	jal	80008630 <prvInitialiseMutex>
800086e0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:514

		return pxNewQueue;
800086e4:	8fc20018 	lw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:515
	}
800086e8:	03c0e825 	move	sp,s8
800086ec:	8fbf0024 	lw	ra,36(sp)
800086f0:	8fbe0020 	lw	s8,32(sp)
800086f4:	27bd0028 	addiu	sp,sp,40
800086f8:	03e00008 	jr	ra
800086fc:	00000000 	nop

80008700 <xQueueGiveMutexRecursive>:
xQueueGiveMutexRecursive():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:573
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
80008700:	27bdffd8 	addiu	sp,sp,-40
80008704:	afbf0024 	sw	ra,36(sp)
80008708:	afbe0020 	sw	s8,32(sp)
8000870c:	afb0001c 	sw	s0,28(sp)
80008710:	03a0f025 	move	s8,sp
80008714:	afc40028 	sw	a0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:575
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
80008718:	8fc20028 	lw	v0,40(s8)
8000871c:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:577

		configASSERT( pxMutex );
80008720:	8fc20014 	lw	v0,20(s8)
80008724:	14400006 	bnez	v0,80008740 <xQueueGiveMutexRecursive+0x40>
80008728:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:577 (discriminator 1)
8000872c:	3c028001 	lui	v0,0x8001
80008730:	2444bd90 	addiu	a0,v0,-17008
80008734:	24050241 	li	a1,577
80008738:	0c000417 	jal	8000105c <vAssertCalled>
8000873c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:585
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
80008740:	8fc20014 	lw	v0,20(s8)
80008744:	8c500004 	lw	s0,4(v0)
80008748:	0c001cad 	jal	800072b4 <xTaskGetCurrentTaskHandle>
8000874c:	00000000 	nop
80008750:	16020014 	bne	s0,v0,800087a4 <xQueueGiveMutexRecursive+0xa4>
80008754:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:594
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
80008758:	8fc20014 	lw	v0,20(s8)
8000875c:	8c42000c 	lw	v0,12(v0)
80008760:	2443ffff 	addiu	v1,v0,-1
80008764:	8fc20014 	lw	v0,20(s8)
80008768:	ac43000c 	sw	v1,12(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:597

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
8000876c:	8fc20014 	lw	v0,20(s8)
80008770:	8c42000c 	lw	v0,12(v0)
80008774:	14400007 	bnez	v0,80008794 <xQueueGiveMutexRecursive+0x94>
80008778:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:601
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
8000877c:	8fc40014 	lw	a0,20(s8)
80008780:	00002825 	move	a1,zero
80008784:	00003025 	move	a2,zero
80008788:	00003825 	move	a3,zero
8000878c:	0c002254 	jal	80008950 <xQueueGenericSend>
80008790:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:608
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
80008794:	24020001 	li	v0,1
80008798:	afc20010 	sw	v0,16(s8)
8000879c:	10000002 	b	800087a8 <xQueueGiveMutexRecursive+0xa8>
800087a0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:614
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
800087a4:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:619

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
800087a8:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:620
	}
800087ac:	03c0e825 	move	sp,s8
800087b0:	8fbf0024 	lw	ra,36(sp)
800087b4:	8fbe0020 	lw	s8,32(sp)
800087b8:	8fb0001c 	lw	s0,28(sp)
800087bc:	27bd0028 	addiu	sp,sp,40
800087c0:	03e00008 	jr	ra
800087c4:	00000000 	nop

800087c8 <xQueueTakeMutexRecursive>:
xQueueTakeMutexRecursive():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:628
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
800087c8:	27bdffd8 	addiu	sp,sp,-40
800087cc:	afbf0024 	sw	ra,36(sp)
800087d0:	afbe0020 	sw	s8,32(sp)
800087d4:	afb0001c 	sw	s0,28(sp)
800087d8:	03a0f025 	move	s8,sp
800087dc:	afc40028 	sw	a0,40(s8)
800087e0:	afc5002c 	sw	a1,44(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:630
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
800087e4:	8fc20028 	lw	v0,40(s8)
800087e8:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:632

		configASSERT( pxMutex );
800087ec:	8fc20014 	lw	v0,20(s8)
800087f0:	14400006 	bnez	v0,8000880c <xQueueTakeMutexRecursive+0x44>
800087f4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:632 (discriminator 1)
800087f8:	3c028001 	lui	v0,0x8001
800087fc:	2444bd90 	addiu	a0,v0,-17008
80008800:	24050278 	li	a1,632
80008804:	0c000417 	jal	8000105c <vAssertCalled>
80008808:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:639
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
8000880c:	8fc20014 	lw	v0,20(s8)
80008810:	8c500004 	lw	s0,4(v0)
80008814:	0c001cad 	jal	800072b4 <xTaskGetCurrentTaskHandle>
80008818:	00000000 	nop
8000881c:	1602000a 	bne	s0,v0,80008848 <xQueueTakeMutexRecursive+0x80>
80008820:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:641
		{
			( pxMutex->u.uxRecursiveCallCount )++;
80008824:	8fc20014 	lw	v0,20(s8)
80008828:	8c42000c 	lw	v0,12(v0)
8000882c:	24430001 	addiu	v1,v0,1
80008830:	8fc20014 	lw	v0,20(s8)
80008834:	ac43000c 	sw	v1,12(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:642
			xReturn = pdPASS;
80008838:	24020001 	li	v0,1
8000883c:	afc20010 	sw	v0,16(s8)
80008840:	10000010 	b	80008884 <xQueueTakeMutexRecursive+0xbc>
80008844:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:646
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
80008848:	8fc40014 	lw	a0,20(s8)
8000884c:	00002825 	move	a1,zero
80008850:	8fc6002c 	lw	a2,44(s8)
80008854:	00003825 	move	a3,zero
80008858:	0c002461 	jal	80009184 <xQueueGenericReceive>
8000885c:	00000000 	nop
80008860:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:651

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
80008864:	8fc20010 	lw	v0,16(s8)
80008868:	10400006 	beqz	v0,80008884 <xQueueTakeMutexRecursive+0xbc>
8000886c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:653
			{
				( pxMutex->u.uxRecursiveCallCount )++;
80008870:	8fc20014 	lw	v0,20(s8)
80008874:	8c42000c 	lw	v0,12(v0)
80008878:	24430001 	addiu	v1,v0,1
8000887c:	8fc20014 	lw	v0,20(s8)
80008880:	ac43000c 	sw	v1,12(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:661
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
80008884:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:662
	}
80008888:	03c0e825 	move	sp,s8
8000888c:	8fbf0024 	lw	ra,36(sp)
80008890:	8fbe0020 	lw	s8,32(sp)
80008894:	8fb0001c 	lw	s0,28(sp)
80008898:	27bd0028 	addiu	sp,sp,40
8000889c:	03e00008 	jr	ra
800088a0:	00000000 	nop

800088a4 <xQueueCreateCountingSemaphore>:
xQueueCreateCountingSemaphore():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:698
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
800088a4:	27bdffe0 	addiu	sp,sp,-32
800088a8:	afbf001c 	sw	ra,28(sp)
800088ac:	afbe0018 	sw	s8,24(sp)
800088b0:	03a0f025 	move	s8,sp
800088b4:	afc40020 	sw	a0,32(s8)
800088b8:	afc50024 	sw	a1,36(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:701
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
800088bc:	8fc20020 	lw	v0,32(s8)
800088c0:	14400006 	bnez	v0,800088dc <xQueueCreateCountingSemaphore+0x38>
800088c4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:701 (discriminator 1)
800088c8:	3c028001 	lui	v0,0x8001
800088cc:	2444bd90 	addiu	a0,v0,-17008
800088d0:	240502bd 	li	a1,701
800088d4:	0c000417 	jal	8000105c <vAssertCalled>
800088d8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:702
		configASSERT( uxInitialCount <= uxMaxCount );
800088dc:	8fc30024 	lw	v1,36(s8)
800088e0:	8fc20020 	lw	v0,32(s8)
800088e4:	0043102b 	sltu	v0,v0,v1
800088e8:	10400006 	beqz	v0,80008904 <xQueueCreateCountingSemaphore+0x60>
800088ec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:702 (discriminator 1)
800088f0:	3c028001 	lui	v0,0x8001
800088f4:	2444bd90 	addiu	a0,v0,-17008
800088f8:	240502be 	li	a1,702
800088fc:	0c000417 	jal	8000105c <vAssertCalled>
80008900:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:704

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
80008904:	8fc40020 	lw	a0,32(s8)
80008908:	00002825 	move	a1,zero
8000890c:	24060002 	li	a2,2
80008910:	0c00212f 	jal	800084bc <xQueueGenericCreate>
80008914:	00000000 	nop
80008918:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:706

		if( xHandle != NULL )
8000891c:	8fc20010 	lw	v0,16(s8)
80008920:	10400004 	beqz	v0,80008934 <xQueueCreateCountingSemaphore+0x90>
80008924:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:708
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
80008928:	8fc20010 	lw	v0,16(s8)
8000892c:	8fc30024 	lw	v1,36(s8)
80008930:	ac430038 	sw	v1,56(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:717
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
80008934:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:718
	}
80008938:	03c0e825 	move	sp,s8
8000893c:	8fbf001c 	lw	ra,28(sp)
80008940:	8fbe0018 	lw	s8,24(sp)
80008944:	27bd0020 	addiu	sp,sp,32
80008948:	03e00008 	jr	ra
8000894c:	00000000 	nop

80008950 <xQueueGenericSend>:
xQueueGenericSend():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:724

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
80008950:	27bdffc0 	addiu	sp,sp,-64
80008954:	afbf003c 	sw	ra,60(sp)
80008958:	afbe0038 	sw	s8,56(sp)
8000895c:	03a0f025 	move	s8,sp
80008960:	afc40040 	sw	a0,64(s8)
80008964:	afc50044 	sw	a1,68(s8)
80008968:	afc60048 	sw	a2,72(s8)
8000896c:	afc7004c 	sw	a3,76(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:725
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
80008970:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:727
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
80008974:	8fc20040 	lw	v0,64(s8)
80008978:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:729

	configASSERT( pxQueue );
8000897c:	8fc20014 	lw	v0,20(s8)
80008980:	14400006 	bnez	v0,8000899c <xQueueGenericSend+0x4c>
80008984:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:729 (discriminator 1)
80008988:	3c028001 	lui	v0,0x8001
8000898c:	2444bd90 	addiu	a0,v0,-17008
80008990:	240502d9 	li	a1,729
80008994:	0c000417 	jal	8000105c <vAssertCalled>
80008998:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:730
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
8000899c:	8fc20044 	lw	v0,68(s8)
800089a0:	14400005 	bnez	v0,800089b8 <xQueueGenericSend+0x68>
800089a4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:730 (discriminator 2)
800089a8:	8fc20014 	lw	v0,20(s8)
800089ac:	8c420040 	lw	v0,64(v0)
800089b0:	14400004 	bnez	v0,800089c4 <xQueueGenericSend+0x74>
800089b4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:730 (discriminator 3)
800089b8:	24020001 	li	v0,1
800089bc:	10000002 	b	800089c8 <xQueueGenericSend+0x78>
800089c0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:730 (discriminator 4)
800089c4:	00001025 	move	v0,zero
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:730 (discriminator 6)
800089c8:	14400006 	bnez	v0,800089e4 <xQueueGenericSend+0x94>
800089cc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:730 (discriminator 7)
800089d0:	3c028001 	lui	v0,0x8001
800089d4:	2444bd90 	addiu	a0,v0,-17008
800089d8:	240502da 	li	a1,730
800089dc:	0c000417 	jal	8000105c <vAssertCalled>
800089e0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:731
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
800089e4:	8fc3004c 	lw	v1,76(s8)
800089e8:	24020002 	li	v0,2
800089ec:	14620006 	bne	v1,v0,80008a08 <xQueueGenericSend+0xb8>
800089f0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:731 (discriminator 2)
800089f4:	8fc20014 	lw	v0,20(s8)
800089f8:	8c43003c 	lw	v1,60(v0)
800089fc:	24020001 	li	v0,1
80008a00:	14620004 	bne	v1,v0,80008a14 <xQueueGenericSend+0xc4>
80008a04:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:731 (discriminator 3)
80008a08:	24020001 	li	v0,1
80008a0c:	10000002 	b	80008a18 <xQueueGenericSend+0xc8>
80008a10:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:731 (discriminator 4)
80008a14:	00001025 	move	v0,zero
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:731 (discriminator 6)
80008a18:	14400006 	bnez	v0,80008a34 <xQueueGenericSend+0xe4>
80008a1c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:731 (discriminator 7)
80008a20:	3c028001 	lui	v0,0x8001
80008a24:	2444bd90 	addiu	a0,v0,-17008
80008a28:	240502db 	li	a1,731
80008a2c:	0c000417 	jal	8000105c <vAssertCalled>
80008a30:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:734
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
80008a34:	0c001cb8 	jal	800072e0 <xTaskGetSchedulerState>
80008a38:	00000000 	nop
80008a3c:	14400004 	bnez	v0,80008a50 <xQueueGenericSend+0x100>
80008a40:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:734 (discriminator 2)
80008a44:	8fc20048 	lw	v0,72(s8)
80008a48:	14400004 	bnez	v0,80008a5c <xQueueGenericSend+0x10c>
80008a4c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:734 (discriminator 3)
80008a50:	24020001 	li	v0,1
80008a54:	10000002 	b	80008a60 <xQueueGenericSend+0x110>
80008a58:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:734 (discriminator 4)
80008a5c:	00001025 	move	v0,zero
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:734 (discriminator 6)
80008a60:	14400006 	bnez	v0,80008a7c <xQueueGenericSend+0x12c>
80008a64:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:734 (discriminator 7)
80008a68:	3c028001 	lui	v0,0x8001
80008a6c:	2444bd90 	addiu	a0,v0,-17008
80008a70:	240502de 	li	a1,734
80008a74:	0c000417 	jal	8000105c <vAssertCalled>
80008a78:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:744
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
80008a7c:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80008a80:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:750
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
80008a84:	8fc20014 	lw	v0,20(s8)
80008a88:	8c430038 	lw	v1,56(v0)
80008a8c:	8fc20014 	lw	v0,20(s8)
80008a90:	8c42003c 	lw	v0,60(v0)
80008a94:	0062102b 	sltu	v0,v1,v0
80008a98:	14400005 	bnez	v0,80008ab0 <xQueueGenericSend+0x160>
80008a9c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:750 (discriminator 1)
80008aa0:	8fc3004c 	lw	v1,76(s8)
80008aa4:	24020002 	li	v0,2
80008aa8:	14620046 	bne	v1,v0,80008bc4 <xQueueGenericSend+0x274>
80008aac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:753
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
80008ab0:	8fc40014 	lw	a0,20(s8)
80008ab4:	8fc50044 	lw	a1,68(s8)
80008ab8:	8fc6004c 	lw	a2,76(s8)
80008abc:	0c00267c 	jal	800099f0 <prvCopyDataToQueue>
80008ac0:	00000000 	nop
80008ac4:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:757

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
80008ac8:	8fc20014 	lw	v0,20(s8)
80008acc:	8c420048 	lw	v0,72(v0)
80008ad0:	10400013 	beqz	v0,80008b20 <xQueueGenericSend+0x1d0>
80008ad4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:759
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
80008ad8:	8fc40014 	lw	a0,20(s8)
80008adc:	8fc5004c 	lw	a1,76(s8)
80008ae0:	0c00289f 	jal	8000a27c <prvNotifyQueueSetContainer>
80008ae4:	00000000 	nop
80008ae8:	10400031 	beqz	v0,80008bb0 <xQueueGenericSend+0x260>
80008aec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:764
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
80008af0:	40026800 	mfc0	v0,c0_cause
80008af4:	0040f825 	move	ra,v0
80008af8:	03e01025 	move	v0,ra
80008afc:	afc20020 	sw	v0,32(s8)
80008b00:	8fc20020 	lw	v0,32(s8)
80008b04:	34420100 	ori	v0,v0,0x100
80008b08:	afc20020 	sw	v0,32(s8)
80008b0c:	8fc20020 	lw	v0,32(s8)
80008b10:	40826000 	mtc0	v0,c0_status
80008b14:	000000c0 	ehb
80008b18:	10000025 	b	80008bb0 <xQueueGenericSend+0x260>
80008b1c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:775
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
80008b20:	8fc20014 	lw	v0,20(s8)
80008b24:	8c420024 	lw	v0,36(v0)
80008b28:	10400014 	beqz	v0,80008b7c <xQueueGenericSend+0x22c>
80008b2c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:777
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
80008b30:	8fc20014 	lw	v0,20(s8)
80008b34:	24420024 	addiu	v0,v0,36
80008b38:	00402025 	move	a0,v0
80008b3c:	0c001aaa 	jal	80006aa8 <xTaskRemoveFromEventList>
80008b40:	00000000 	nop
80008b44:	1040001a 	beqz	v0,80008bb0 <xQueueGenericSend+0x260>
80008b48:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:783
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
80008b4c:	40026800 	mfc0	v0,c0_cause
80008b50:	0040f825 	move	ra,v0
80008b54:	03e01025 	move	v0,ra
80008b58:	afc20024 	sw	v0,36(s8)
80008b5c:	8fc20024 	lw	v0,36(s8)
80008b60:	34420100 	ori	v0,v0,0x100
80008b64:	afc20024 	sw	v0,36(s8)
80008b68:	8fc20024 	lw	v0,36(s8)
80008b6c:	40826000 	mtc0	v0,c0_status
80008b70:	000000c0 	ehb
80008b74:	1000000e 	b	80008bb0 <xQueueGenericSend+0x260>
80008b78:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:790
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
80008b7c:	8fc2001c 	lw	v0,28(s8)
80008b80:	1040000b 	beqz	v0,80008bb0 <xQueueGenericSend+0x260>
80008b84:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:796
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
80008b88:	40026800 	mfc0	v0,c0_cause
80008b8c:	0040f825 	move	ra,v0
80008b90:	03e01025 	move	v0,ra
80008b94:	afc20028 	sw	v0,40(s8)
80008b98:	8fc20028 	lw	v0,40(s8)
80008b9c:	34420100 	ori	v0,v0,0x100
80008ba0:	afc20028 	sw	v0,40(s8)
80008ba4:	8fc20028 	lw	v0,40(s8)
80008ba8:	40826000 	mtc0	v0,c0_status
80008bac:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:838
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
80008bb0:	0c001de3 	jal	8000778c <vTaskExitCritical>
80008bb4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:839
				return pdPASS;
80008bb8:	24020001 	li	v0,1
80008bbc:	10000062 	b	80008d48 <xQueueGenericSend+0x3f8>
80008bc0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:843
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
80008bc4:	8fc20048 	lw	v0,72(s8)
80008bc8:	14400006 	bnez	v0,80008be4 <xQueueGenericSend+0x294>
80008bcc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:847
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
80008bd0:	0c001de3 	jal	8000778c <vTaskExitCritical>
80008bd4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:852

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
80008bd8:	00001025 	move	v0,zero
80008bdc:	1000005a 	b	80008d48 <xQueueGenericSend+0x3f8>
80008be0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:854
				}
				else if( xEntryTimeSet == pdFALSE )
80008be4:	8fc20010 	lw	v0,16(s8)
80008be8:	14400007 	bnez	v0,80008c08 <xQueueGenericSend+0x2b8>
80008bec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:858
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
80008bf0:	27c2002c 	addiu	v0,s8,44
80008bf4:	00402025 	move	a0,v0
80008bf8:	0c001b4d 	jal	80006d34 <vTaskSetTimeOutState>
80008bfc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:859
					xEntryTimeSet = pdTRUE;
80008c00:	24020001 	li	v0,1
80008c04:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:868
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
80008c08:	0c001de3 	jal	8000778c <vTaskExitCritical>
80008c0c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:873

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
80008c10:	0c001876 	jal	800061d8 <vTaskSuspendAll>
80008c14:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:874
		prvLockQueue( pxQueue );
80008c18:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80008c1c:	00000000 	nop
80008c20:	8fc20014 	lw	v0,20(s8)
80008c24:	90420044 	lbu	v0,68(v0)
80008c28:	7c021c20 	seb	v1,v0
80008c2c:	2402ffff 	li	v0,-1
80008c30:	14620003 	bne	v1,v0,80008c40 <xQueueGenericSend+0x2f0>
80008c34:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:874 (discriminator 1)
80008c38:	8fc20014 	lw	v0,20(s8)
80008c3c:	a0400044 	sb	zero,68(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:874 (discriminator 3)
80008c40:	8fc20014 	lw	v0,20(s8)
80008c44:	90420045 	lbu	v0,69(v0)
80008c48:	7c021c20 	seb	v1,v0
80008c4c:	2402ffff 	li	v0,-1
80008c50:	14620003 	bne	v1,v0,80008c60 <xQueueGenericSend+0x310>
80008c54:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:874 (discriminator 4)
80008c58:	8fc20014 	lw	v0,20(s8)
80008c5c:	a0400045 	sb	zero,69(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:874 (discriminator 6)
80008c60:	0c001de3 	jal	8000778c <vTaskExitCritical>
80008c64:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:877 (discriminator 6)

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
80008c68:	27c3002c 	addiu	v1,s8,44
80008c6c:	27c20048 	addiu	v0,s8,72
80008c70:	00602025 	move	a0,v1
80008c74:	00402825 	move	a1,v0
80008c78:	0c001b66 	jal	80006d98 <xTaskCheckForTimeOut>
80008c7c:	00000000 	nop
80008c80:	14400027 	bnez	v0,80008d20 <xQueueGenericSend+0x3d0>
80008c84:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:879
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
80008c88:	8fc40014 	lw	a0,20(s8)
80008c8c:	0c0027b0 	jal	80009ec0 <prvIsQueueFull>
80008c90:	00000000 	nop
80008c94:	1040001b 	beqz	v0,80008d04 <xQueueGenericSend+0x3b4>
80008c98:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:882
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
80008c9c:	8fc20014 	lw	v0,20(s8)
80008ca0:	24430010 	addiu	v1,v0,16
80008ca4:	8fc20048 	lw	v0,72(s8)
80008ca8:	00602025 	move	a0,v1
80008cac:	00402825 	move	a1,v0
80008cb0:	0c001a3c 	jal	800068f0 <vTaskPlaceOnEventList>
80008cb4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:889
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
80008cb8:	8fc40014 	lw	a0,20(s8)
80008cbc:	0c002719 	jal	80009c64 <prvUnlockQueue>
80008cc0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:896
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
80008cc4:	0c001881 	jal	80006204 <xTaskResumeAll>
80008cc8:	00000000 	nop
80008ccc:	1440001c 	bnez	v0,80008d40 <xQueueGenericSend+0x3f0>
80008cd0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:898
				{
					portYIELD_WITHIN_API();
80008cd4:	40026800 	mfc0	v0,c0_cause
80008cd8:	0040f825 	move	ra,v0
80008cdc:	03e01025 	move	v0,ra
80008ce0:	afc20018 	sw	v0,24(s8)
80008ce4:	8fc20018 	lw	v0,24(s8)
80008ce8:	34420100 	ori	v0,v0,0x100
80008cec:	afc20018 	sw	v0,24(s8)
80008cf0:	8fc20018 	lw	v0,24(s8)
80008cf4:	40826000 	mtc0	v0,c0_status
80008cf8:	000000c0 	ehb
80008cfc:	10000010 	b	80008d40 <xQueueGenericSend+0x3f0>
80008d00:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:904
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
80008d04:	8fc40014 	lw	a0,20(s8)
80008d08:	0c002719 	jal	80009c64 <prvUnlockQueue>
80008d0c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:905
				( void ) xTaskResumeAll();
80008d10:	0c001881 	jal	80006204 <xTaskResumeAll>
80008d14:	00000000 	nop
80008d18:	1000ff58 	b	80008a7c <xQueueGenericSend+0x12c>
80008d1c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:911
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
80008d20:	8fc40014 	lw	a0,20(s8)
80008d24:	0c002719 	jal	80009c64 <prvUnlockQueue>
80008d28:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:912
			( void ) xTaskResumeAll();
80008d2c:	0c001881 	jal	80006204 <xTaskResumeAll>
80008d30:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:915

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
80008d34:	00001025 	move	v0,zero
80008d38:	10000003 	b	80008d48 <xQueueGenericSend+0x3f8>
80008d3c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:917 (discriminator 2)
		}
	}
80008d40:	1000ff4e 	b	80008a7c <xQueueGenericSend+0x12c>
80008d44:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:918 (discriminator 3)
}
80008d48:	03c0e825 	move	sp,s8
80008d4c:	8fbf003c 	lw	ra,60(sp)
80008d50:	8fbe0038 	lw	s8,56(sp)
80008d54:	27bd0040 	addiu	sp,sp,64
80008d58:	03e00008 	jr	ra
80008d5c:	00000000 	nop

80008d60 <xQueueGenericSendFromISR>:
xQueueGenericSendFromISR():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:922
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
80008d60:	27bdffd8 	addiu	sp,sp,-40
80008d64:	afbf0024 	sw	ra,36(sp)
80008d68:	afbe0020 	sw	s8,32(sp)
80008d6c:	03a0f025 	move	s8,sp
80008d70:	afc40028 	sw	a0,40(s8)
80008d74:	afc5002c 	sw	a1,44(s8)
80008d78:	afc60030 	sw	a2,48(s8)
80008d7c:	afc70034 	sw	a3,52(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:925
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
80008d80:	8fc20028 	lw	v0,40(s8)
80008d84:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:927

	configASSERT( pxQueue );
80008d88:	8fc20014 	lw	v0,20(s8)
80008d8c:	14400006 	bnez	v0,80008da8 <xQueueGenericSendFromISR+0x48>
80008d90:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:927 (discriminator 1)
80008d94:	3c028001 	lui	v0,0x8001
80008d98:	2444bd90 	addiu	a0,v0,-17008
80008d9c:	2405039f 	li	a1,927
80008da0:	0c000417 	jal	8000105c <vAssertCalled>
80008da4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:928
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
80008da8:	8fc2002c 	lw	v0,44(s8)
80008dac:	14400005 	bnez	v0,80008dc4 <xQueueGenericSendFromISR+0x64>
80008db0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:928 (discriminator 2)
80008db4:	8fc20014 	lw	v0,20(s8)
80008db8:	8c420040 	lw	v0,64(v0)
80008dbc:	14400004 	bnez	v0,80008dd0 <xQueueGenericSendFromISR+0x70>
80008dc0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:928 (discriminator 3)
80008dc4:	24020001 	li	v0,1
80008dc8:	10000002 	b	80008dd4 <xQueueGenericSendFromISR+0x74>
80008dcc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:928 (discriminator 4)
80008dd0:	00001025 	move	v0,zero
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:928 (discriminator 6)
80008dd4:	14400006 	bnez	v0,80008df0 <xQueueGenericSendFromISR+0x90>
80008dd8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:928 (discriminator 7)
80008ddc:	3c028001 	lui	v0,0x8001
80008de0:	2444bd90 	addiu	a0,v0,-17008
80008de4:	240503a0 	li	a1,928
80008de8:	0c000417 	jal	8000105c <vAssertCalled>
80008dec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:929
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
80008df0:	8fc30034 	lw	v1,52(s8)
80008df4:	24020002 	li	v0,2
80008df8:	14620006 	bne	v1,v0,80008e14 <xQueueGenericSendFromISR+0xb4>
80008dfc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:929 (discriminator 2)
80008e00:	8fc20014 	lw	v0,20(s8)
80008e04:	8c43003c 	lw	v1,60(v0)
80008e08:	24020001 	li	v0,1
80008e0c:	14620004 	bne	v1,v0,80008e20 <xQueueGenericSendFromISR+0xc0>
80008e10:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:929 (discriminator 3)
80008e14:	24020001 	li	v0,1
80008e18:	10000002 	b	80008e24 <xQueueGenericSendFromISR+0xc4>
80008e1c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:929 (discriminator 4)
80008e20:	00001025 	move	v0,zero
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:929 (discriminator 6)
80008e24:	14400006 	bnez	v0,80008e40 <xQueueGenericSendFromISR+0xe0>
80008e28:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:929 (discriminator 7)
80008e2c:	3c028001 	lui	v0,0x8001
80008e30:	2444bd90 	addiu	a0,v0,-17008
80008e34:	240503a1 	li	a1,929
80008e38:	0c000417 	jal	8000105c <vAssertCalled>
80008e3c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:952
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
80008e40:	0c002a23 	jal	8000a88c <uxPortSetInterruptMaskFromISR>
80008e44:	00000000 	nop
80008e48:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:954
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
80008e4c:	8fc20014 	lw	v0,20(s8)
80008e50:	8c430038 	lw	v1,56(v0)
80008e54:	8fc20014 	lw	v0,20(s8)
80008e58:	8c42003c 	lw	v0,60(v0)
80008e5c:	0062102b 	sltu	v0,v1,v0
80008e60:	14400005 	bnez	v0,80008e78 <xQueueGenericSendFromISR+0x118>
80008e64:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:954 (discriminator 1)
80008e68:	8fc30034 	lw	v1,52(s8)
80008e6c:	24020002 	li	v0,2
80008e70:	1462003c 	bne	v1,v0,80008f64 <xQueueGenericSendFromISR+0x204>
80008e74:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:956
		{
			const int8_t cTxLock = pxQueue->cTxLock;
80008e78:	8fc20014 	lw	v0,20(s8)
80008e7c:	90420045 	lbu	v0,69(v0)
80008e80:	a3c2001c 	sb	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:965
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
80008e84:	8fc40014 	lw	a0,20(s8)
80008e88:	8fc5002c 	lw	a1,44(s8)
80008e8c:	8fc60034 	lw	a2,52(s8)
80008e90:	0c00267c 	jal	800099f0 <prvCopyDataToQueue>
80008e94:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:969

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
80008e98:	83c3001c 	lb	v1,28(s8)
80008e9c:	2402ffff 	li	v0,-1
80008ea0:	14620026 	bne	v1,v0,80008f3c <xQueueGenericSendFromISR+0x1dc>
80008ea4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:973
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
80008ea8:	8fc20014 	lw	v0,20(s8)
80008eac:	8c420048 	lw	v0,72(v0)
80008eb0:	1040000f 	beqz	v0,80008ef0 <xQueueGenericSendFromISR+0x190>
80008eb4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:975
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
80008eb8:	8fc40014 	lw	a0,20(s8)
80008ebc:	8fc50034 	lw	a1,52(s8)
80008ec0:	0c00289f 	jal	8000a27c <prvNotifyQueueSetContainer>
80008ec4:	00000000 	nop
80008ec8:	10400022 	beqz	v0,80008f54 <xQueueGenericSendFromISR+0x1f4>
80008ecc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:980
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
80008ed0:	8fc20030 	lw	v0,48(s8)
80008ed4:	1040001f 	beqz	v0,80008f54 <xQueueGenericSendFromISR+0x1f4>
80008ed8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:982
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
80008edc:	8fc20030 	lw	v0,48(s8)
80008ee0:	24030001 	li	v1,1
80008ee4:	ac430000 	sw	v1,0(v0)
80008ee8:	1000001a 	b	80008f54 <xQueueGenericSendFromISR+0x1f4>
80008eec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:996
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
80008ef0:	8fc20014 	lw	v0,20(s8)
80008ef4:	8c420024 	lw	v0,36(v0)
80008ef8:	10400016 	beqz	v0,80008f54 <xQueueGenericSendFromISR+0x1f4>
80008efc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:998
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
80008f00:	8fc20014 	lw	v0,20(s8)
80008f04:	24420024 	addiu	v0,v0,36
80008f08:	00402025 	move	a0,v0
80008f0c:	0c001aaa 	jal	80006aa8 <xTaskRemoveFromEventList>
80008f10:	00000000 	nop
80008f14:	1040000f 	beqz	v0,80008f54 <xQueueGenericSendFromISR+0x1f4>
80008f18:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1002
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
80008f1c:	8fc20030 	lw	v0,48(s8)
80008f20:	1040000c 	beqz	v0,80008f54 <xQueueGenericSendFromISR+0x1f4>
80008f24:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1004
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
80008f28:	8fc20030 	lw	v0,48(s8)
80008f2c:	24030001 	li	v1,1
80008f30:	ac430000 	sw	v1,0(v0)
80008f34:	10000007 	b	80008f54 <xQueueGenericSendFromISR+0x1f4>
80008f38:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1055
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
80008f3c:	93c2001c 	lbu	v0,28(s8)
80008f40:	24420001 	addiu	v0,v0,1
80008f44:	304200ff 	andi	v0,v0,0xff
80008f48:	7c021c20 	seb	v1,v0
80008f4c:	8fc20014 	lw	v0,20(s8)
80008f50:	a0430045 	sb	v1,69(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1058
			}

			xReturn = pdPASS;
80008f54:	24020001 	li	v0,1
80008f58:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:955
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
80008f5c:	10000002 	b	80008f68 <xQueueGenericSendFromISR+0x208>
80008f60:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1063
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
80008f64:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1066
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
80008f68:	8fc40018 	lw	a0,24(s8)
80008f6c:	0c0029da 	jal	8000a768 <vPortClearInterruptMaskFromISR>
80008f70:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1068

	return xReturn;
80008f74:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1069
}
80008f78:	03c0e825 	move	sp,s8
80008f7c:	8fbf0024 	lw	ra,36(sp)
80008f80:	8fbe0020 	lw	s8,32(sp)
80008f84:	27bd0028 	addiu	sp,sp,40
80008f88:	03e00008 	jr	ra
80008f8c:	00000000 	nop

80008f90 <xQueueGiveFromISR>:
xQueueGiveFromISR():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1073
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
80008f90:	27bdffd0 	addiu	sp,sp,-48
80008f94:	afbf002c 	sw	ra,44(sp)
80008f98:	afbe0028 	sw	s8,40(sp)
80008f9c:	03a0f025 	move	s8,sp
80008fa0:	afc40030 	sw	a0,48(s8)
80008fa4:	afc50034 	sw	a1,52(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1076
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
80008fa8:	8fc20030 	lw	v0,48(s8)
80008fac:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1084
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
80008fb0:	8fc20014 	lw	v0,20(s8)
80008fb4:	14400006 	bnez	v0,80008fd0 <xQueueGiveFromISR+0x40>
80008fb8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1084 (discriminator 1)
80008fbc:	3c028001 	lui	v0,0x8001
80008fc0:	2444bd90 	addiu	a0,v0,-17008
80008fc4:	2405043c 	li	a1,1084
80008fc8:	0c000417 	jal	8000105c <vAssertCalled>
80008fcc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1088

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
80008fd0:	8fc20014 	lw	v0,20(s8)
80008fd4:	8c420040 	lw	v0,64(v0)
80008fd8:	10400006 	beqz	v0,80008ff4 <xQueueGiveFromISR+0x64>
80008fdc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1088 (discriminator 1)
80008fe0:	3c028001 	lui	v0,0x8001
80008fe4:	2444bd90 	addiu	a0,v0,-17008
80008fe8:	24050440 	li	a1,1088
80008fec:	0c000417 	jal	8000105c <vAssertCalled>
80008ff0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1093

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
80008ff4:	8fc20014 	lw	v0,20(s8)
80008ff8:	8c420000 	lw	v0,0(v0)
80008ffc:	14400005 	bnez	v0,80009014 <xQueueGiveFromISR+0x84>
80009000:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1093 (discriminator 2)
80009004:	8fc20014 	lw	v0,20(s8)
80009008:	8c420004 	lw	v0,4(v0)
8000900c:	14400004 	bnez	v0,80009020 <xQueueGiveFromISR+0x90>
80009010:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1093 (discriminator 3)
80009014:	24020001 	li	v0,1
80009018:	10000002 	b	80009024 <xQueueGiveFromISR+0x94>
8000901c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1093 (discriminator 4)
80009020:	00001025 	move	v0,zero
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1093 (discriminator 6)
80009024:	14400006 	bnez	v0,80009040 <xQueueGiveFromISR+0xb0>
80009028:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1093 (discriminator 7)
8000902c:	3c028001 	lui	v0,0x8001
80009030:	2444bd90 	addiu	a0,v0,-17008
80009034:	24050445 	li	a1,1093
80009038:	0c000417 	jal	8000105c <vAssertCalled>
8000903c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1111
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
80009040:	0c002a23 	jal	8000a88c <uxPortSetInterruptMaskFromISR>
80009044:	00000000 	nop
80009048:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1113
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
8000904c:	8fc20014 	lw	v0,20(s8)
80009050:	8c420038 	lw	v0,56(v0)
80009054:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1118

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
80009058:	8fc20014 	lw	v0,20(s8)
8000905c:	8c43003c 	lw	v1,60(v0)
80009060:	8fc2001c 	lw	v0,28(s8)
80009064:	0043102b 	sltu	v0,v0,v1
80009068:	1040003b 	beqz	v0,80009158 <xQueueGiveFromISR+0x1c8>
8000906c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1120
		{
			const int8_t cTxLock = pxQueue->cTxLock;
80009070:	8fc20014 	lw	v0,20(s8)
80009074:	90420045 	lbu	v0,69(v0)
80009078:	a3c20020 	sb	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1130
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
8000907c:	8fc2001c 	lw	v0,28(s8)
80009080:	24430001 	addiu	v1,v0,1
80009084:	8fc20014 	lw	v0,20(s8)
80009088:	ac430038 	sw	v1,56(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1134

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
8000908c:	83c30020 	lb	v1,32(s8)
80009090:	2402ffff 	li	v0,-1
80009094:	14620026 	bne	v1,v0,80009130 <xQueueGiveFromISR+0x1a0>
80009098:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1138
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
8000909c:	8fc20014 	lw	v0,20(s8)
800090a0:	8c420048 	lw	v0,72(v0)
800090a4:	1040000f 	beqz	v0,800090e4 <xQueueGiveFromISR+0x154>
800090a8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1140
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
800090ac:	8fc40014 	lw	a0,20(s8)
800090b0:	00002825 	move	a1,zero
800090b4:	0c00289f 	jal	8000a27c <prvNotifyQueueSetContainer>
800090b8:	00000000 	nop
800090bc:	10400022 	beqz	v0,80009148 <xQueueGiveFromISR+0x1b8>
800090c0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1145
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
800090c4:	8fc20034 	lw	v0,52(s8)
800090c8:	1040001f 	beqz	v0,80009148 <xQueueGiveFromISR+0x1b8>
800090cc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1147
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
800090d0:	8fc20034 	lw	v0,52(s8)
800090d4:	24030001 	li	v1,1
800090d8:	ac430000 	sw	v1,0(v0)
800090dc:	1000001a 	b	80009148 <xQueueGiveFromISR+0x1b8>
800090e0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1161
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
800090e4:	8fc20014 	lw	v0,20(s8)
800090e8:	8c420024 	lw	v0,36(v0)
800090ec:	10400016 	beqz	v0,80009148 <xQueueGiveFromISR+0x1b8>
800090f0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1163
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
800090f4:	8fc20014 	lw	v0,20(s8)
800090f8:	24420024 	addiu	v0,v0,36
800090fc:	00402025 	move	a0,v0
80009100:	0c001aaa 	jal	80006aa8 <xTaskRemoveFromEventList>
80009104:	00000000 	nop
80009108:	1040000f 	beqz	v0,80009148 <xQueueGiveFromISR+0x1b8>
8000910c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1167
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
80009110:	8fc20034 	lw	v0,52(s8)
80009114:	1040000c 	beqz	v0,80009148 <xQueueGiveFromISR+0x1b8>
80009118:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1169
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
8000911c:	8fc20034 	lw	v0,52(s8)
80009120:	24030001 	li	v1,1
80009124:	ac430000 	sw	v1,0(v0)
80009128:	10000007 	b	80009148 <xQueueGiveFromISR+0x1b8>
8000912c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1220
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
80009130:	93c20020 	lbu	v0,32(s8)
80009134:	24420001 	addiu	v0,v0,1
80009138:	304200ff 	andi	v0,v0,0xff
8000913c:	7c021c20 	seb	v1,v0
80009140:	8fc20014 	lw	v0,20(s8)
80009144:	a0430045 	sb	v1,69(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1223
			}

			xReturn = pdPASS;
80009148:	24020001 	li	v0,1
8000914c:	afc20010 	sw	v0,16(s8)
80009150:	10000002 	b	8000915c <xQueueGiveFromISR+0x1cc>
80009154:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1228
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
80009158:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1231
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
8000915c:	8fc40018 	lw	a0,24(s8)
80009160:	0c0029da 	jal	8000a768 <vPortClearInterruptMaskFromISR>
80009164:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1233

	return xReturn;
80009168:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1234
}
8000916c:	03c0e825 	move	sp,s8
80009170:	8fbf002c 	lw	ra,44(sp)
80009174:	8fbe0028 	lw	s8,40(sp)
80009178:	27bd0030 	addiu	sp,sp,48
8000917c:	03e00008 	jr	ra
80009180:	00000000 	nop

80009184 <xQueueGenericReceive>:
xQueueGenericReceive():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1238
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
80009184:	27bdffc0 	addiu	sp,sp,-64
80009188:	afbf003c 	sw	ra,60(sp)
8000918c:	afbe0038 	sw	s8,56(sp)
80009190:	03a0f025 	move	s8,sp
80009194:	afc40040 	sw	a0,64(s8)
80009198:	afc50044 	sw	a1,68(s8)
8000919c:	afc60048 	sw	a2,72(s8)
800091a0:	afc7004c 	sw	a3,76(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1239
BaseType_t xEntryTimeSet = pdFALSE;
800091a4:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1242
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
800091a8:	8fc20040 	lw	v0,64(s8)
800091ac:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1244

	configASSERT( pxQueue );
800091b0:	8fc20014 	lw	v0,20(s8)
800091b4:	14400006 	bnez	v0,800091d0 <xQueueGenericReceive+0x4c>
800091b8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1244 (discriminator 1)
800091bc:	3c028001 	lui	v0,0x8001
800091c0:	2444bd90 	addiu	a0,v0,-17008
800091c4:	240504dc 	li	a1,1244
800091c8:	0c000417 	jal	8000105c <vAssertCalled>
800091cc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1245
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
800091d0:	8fc20044 	lw	v0,68(s8)
800091d4:	14400005 	bnez	v0,800091ec <xQueueGenericReceive+0x68>
800091d8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1245 (discriminator 2)
800091dc:	8fc20014 	lw	v0,20(s8)
800091e0:	8c420040 	lw	v0,64(v0)
800091e4:	14400004 	bnez	v0,800091f8 <xQueueGenericReceive+0x74>
800091e8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1245 (discriminator 3)
800091ec:	24020001 	li	v0,1
800091f0:	10000002 	b	800091fc <xQueueGenericReceive+0x78>
800091f4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1245 (discriminator 4)
800091f8:	00001025 	move	v0,zero
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1245 (discriminator 6)
800091fc:	14400006 	bnez	v0,80009218 <xQueueGenericReceive+0x94>
80009200:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1245 (discriminator 7)
80009204:	3c028001 	lui	v0,0x8001
80009208:	2444bd90 	addiu	a0,v0,-17008
8000920c:	240504dd 	li	a1,1245
80009210:	0c000417 	jal	8000105c <vAssertCalled>
80009214:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1248
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
80009218:	0c001cb8 	jal	800072e0 <xTaskGetSchedulerState>
8000921c:	00000000 	nop
80009220:	14400004 	bnez	v0,80009234 <xQueueGenericReceive+0xb0>
80009224:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1248 (discriminator 2)
80009228:	8fc20048 	lw	v0,72(s8)
8000922c:	14400004 	bnez	v0,80009240 <xQueueGenericReceive+0xbc>
80009230:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1248 (discriminator 3)
80009234:	24020001 	li	v0,1
80009238:	10000002 	b	80009244 <xQueueGenericReceive+0xc0>
8000923c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1248 (discriminator 4)
80009240:	00001025 	move	v0,zero
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1248 (discriminator 6)
80009244:	14400006 	bnez	v0,80009260 <xQueueGenericReceive+0xdc>
80009248:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1248 (discriminator 7)
8000924c:	3c028001 	lui	v0,0x8001
80009250:	2444bd90 	addiu	a0,v0,-17008
80009254:	240504e0 	li	a1,1248
80009258:	0c000417 	jal	8000105c <vAssertCalled>
8000925c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1258
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
80009260:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80009264:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1260
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
80009268:	8fc20014 	lw	v0,20(s8)
8000926c:	8c420038 	lw	v0,56(v0)
80009270:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1264

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
80009274:	8fc20018 	lw	v0,24(s8)
80009278:	1040004c 	beqz	v0,800093ac <xQueueGenericReceive+0x228>
8000927c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1268
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
80009280:	8fc20014 	lw	v0,20(s8)
80009284:	8c42000c 	lw	v0,12(v0)
80009288:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1270

				prvCopyDataFromQueue( pxQueue, pvBuffer );
8000928c:	8fc40014 	lw	a0,20(s8)
80009290:	8fc50044 	lw	a1,68(s8)
80009294:	0c0026ee 	jal	80009bb8 <prvCopyDataFromQueue>
80009298:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1272

				if( xJustPeeking == pdFALSE )
8000929c:	8fc2004c 	lw	v0,76(s8)
800092a0:	14400025 	bnez	v0,80009338 <xQueueGenericReceive+0x1b4>
800092a4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1277
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
800092a8:	8fc20018 	lw	v0,24(s8)
800092ac:	2443ffff 	addiu	v1,v0,-1
800092b0:	8fc20014 	lw	v0,20(s8)
800092b4:	ac430038 	sw	v1,56(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1281

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
800092b8:	8fc20014 	lw	v0,20(s8)
800092bc:	8c420000 	lw	v0,0(v0)
800092c0:	14400006 	bnez	v0,800092dc <xQueueGenericReceive+0x158>
800092c4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1285
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
800092c8:	0c001e18 	jal	80007860 <pvTaskIncrementMutexHeldCount>
800092cc:	00000000 	nop
800092d0:	00401825 	move	v1,v0
800092d4:	8fc20014 	lw	v0,20(s8)
800092d8:	ac430004 	sw	v1,4(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1294
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
800092dc:	8fc20014 	lw	v0,20(s8)
800092e0:	8c420010 	lw	v0,16(v0)
800092e4:	1040002c 	beqz	v0,80009398 <xQueueGenericReceive+0x214>
800092e8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1296
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
800092ec:	8fc20014 	lw	v0,20(s8)
800092f0:	24420010 	addiu	v0,v0,16
800092f4:	00402025 	move	a0,v0
800092f8:	0c001aaa 	jal	80006aa8 <xTaskRemoveFromEventList>
800092fc:	00000000 	nop
80009300:	10400025 	beqz	v0,80009398 <xQueueGenericReceive+0x214>
80009304:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1298
						{
							queueYIELD_IF_USING_PREEMPTION();
80009308:	40026800 	mfc0	v0,c0_cause
8000930c:	0040f825 	move	ra,v0
80009310:	03e01025 	move	v0,ra
80009314:	afc20024 	sw	v0,36(s8)
80009318:	8fc20024 	lw	v0,36(s8)
8000931c:	34420100 	ori	v0,v0,0x100
80009320:	afc20024 	sw	v0,36(s8)
80009324:	8fc20024 	lw	v0,36(s8)
80009328:	40826000 	mtc0	v0,c0_status
8000932c:	000000c0 	ehb
80009330:	10000019 	b	80009398 <xQueueGenericReceive+0x214>
80009334:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1316
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
80009338:	8fc20014 	lw	v0,20(s8)
8000933c:	8fc30020 	lw	v1,32(s8)
80009340:	ac43000c 	sw	v1,12(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1320

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
80009344:	8fc20014 	lw	v0,20(s8)
80009348:	8c420024 	lw	v0,36(v0)
8000934c:	10400012 	beqz	v0,80009398 <xQueueGenericReceive+0x214>
80009350:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1322
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
80009354:	8fc20014 	lw	v0,20(s8)
80009358:	24420024 	addiu	v0,v0,36
8000935c:	00402025 	move	a0,v0
80009360:	0c001aaa 	jal	80006aa8 <xTaskRemoveFromEventList>
80009364:	00000000 	nop
80009368:	1040000b 	beqz	v0,80009398 <xQueueGenericReceive+0x214>
8000936c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1325
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
80009370:	40026800 	mfc0	v0,c0_cause
80009374:	0040f825 	move	ra,v0
80009378:	03e01025 	move	v0,ra
8000937c:	afc20028 	sw	v0,40(s8)
80009380:	8fc20028 	lw	v0,40(s8)
80009384:	34420100 	ori	v0,v0,0x100
80009388:	afc20028 	sw	v0,40(s8)
8000938c:	8fc20028 	lw	v0,40(s8)
80009390:	40826000 	mtc0	v0,c0_status
80009394:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1338
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
80009398:	0c001de3 	jal	8000778c <vTaskExitCritical>
8000939c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1339
				return pdPASS;
800093a0:	24020001 	li	v0,1
800093a4:	10000074 	b	80009578 <xQueueGenericReceive+0x3f4>
800093a8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1343
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
800093ac:	8fc20048 	lw	v0,72(s8)
800093b0:	14400006 	bnez	v0,800093cc <xQueueGenericReceive+0x248>
800093b4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1347
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
800093b8:	0c001de3 	jal	8000778c <vTaskExitCritical>
800093bc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1349
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
800093c0:	00001025 	move	v0,zero
800093c4:	1000006c 	b	80009578 <xQueueGenericReceive+0x3f4>
800093c8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1351
				}
				else if( xEntryTimeSet == pdFALSE )
800093cc:	8fc20010 	lw	v0,16(s8)
800093d0:	14400007 	bnez	v0,800093f0 <xQueueGenericReceive+0x26c>
800093d4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1355
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
800093d8:	27c2002c 	addiu	v0,s8,44
800093dc:	00402025 	move	a0,v0
800093e0:	0c001b4d 	jal	80006d34 <vTaskSetTimeOutState>
800093e4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1356
					xEntryTimeSet = pdTRUE;
800093e8:	24020001 	li	v0,1
800093ec:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1365
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
800093f0:	0c001de3 	jal	8000778c <vTaskExitCritical>
800093f4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1370

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
800093f8:	0c001876 	jal	800061d8 <vTaskSuspendAll>
800093fc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1371
		prvLockQueue( pxQueue );
80009400:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80009404:	00000000 	nop
80009408:	8fc20014 	lw	v0,20(s8)
8000940c:	90420044 	lbu	v0,68(v0)
80009410:	7c021c20 	seb	v1,v0
80009414:	2402ffff 	li	v0,-1
80009418:	14620003 	bne	v1,v0,80009428 <xQueueGenericReceive+0x2a4>
8000941c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1371 (discriminator 1)
80009420:	8fc20014 	lw	v0,20(s8)
80009424:	a0400044 	sb	zero,68(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1371 (discriminator 3)
80009428:	8fc20014 	lw	v0,20(s8)
8000942c:	90420045 	lbu	v0,69(v0)
80009430:	7c021c20 	seb	v1,v0
80009434:	2402ffff 	li	v0,-1
80009438:	14620003 	bne	v1,v0,80009448 <xQueueGenericReceive+0x2c4>
8000943c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1371 (discriminator 4)
80009440:	8fc20014 	lw	v0,20(s8)
80009444:	a0400045 	sb	zero,69(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1371 (discriminator 6)
80009448:	0c001de3 	jal	8000778c <vTaskExitCritical>
8000944c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1374 (discriminator 6)

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
80009450:	27c3002c 	addiu	v1,s8,44
80009454:	27c20048 	addiu	v0,s8,72
80009458:	00602025 	move	a0,v1
8000945c:	00402825 	move	a1,v0
80009460:	0c001b66 	jal	80006d98 <xTaskCheckForTimeOut>
80009464:	00000000 	nop
80009468:	14400034 	bnez	v0,8000953c <xQueueGenericReceive+0x3b8>
8000946c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1376
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
80009470:	8fc40014 	lw	a0,20(s8)
80009474:	0c00277a 	jal	80009de8 <prvIsQueueEmpty>
80009478:	00000000 	nop
8000947c:	10400028 	beqz	v0,80009520 <xQueueGenericReceive+0x39c>
80009480:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1382
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
80009484:	8fc20014 	lw	v0,20(s8)
80009488:	8c420000 	lw	v0,0(v0)
8000948c:	1440000a 	bnez	v0,800094b8 <xQueueGenericReceive+0x334>
80009490:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1384
					{
						taskENTER_CRITICAL();
80009494:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80009498:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1386
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
8000949c:	8fc20014 	lw	v0,20(s8)
800094a0:	8c420004 	lw	v0,4(v0)
800094a4:	00402025 	move	a0,v0
800094a8:	0c001cd0 	jal	80007340 <vTaskPriorityInherit>
800094ac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1388
						}
						taskEXIT_CRITICAL();
800094b0:	0c001de3 	jal	8000778c <vTaskExitCritical>
800094b4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1397
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
800094b8:	8fc20014 	lw	v0,20(s8)
800094bc:	24430024 	addiu	v1,v0,36
800094c0:	8fc20048 	lw	v0,72(s8)
800094c4:	00602025 	move	a0,v1
800094c8:	00402825 	move	a1,v0
800094cc:	0c001a3c 	jal	800068f0 <vTaskPlaceOnEventList>
800094d0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1398
				prvUnlockQueue( pxQueue );
800094d4:	8fc40014 	lw	a0,20(s8)
800094d8:	0c002719 	jal	80009c64 <prvUnlockQueue>
800094dc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1399
				if( xTaskResumeAll() == pdFALSE )
800094e0:	0c001881 	jal	80006204 <xTaskResumeAll>
800094e4:	00000000 	nop
800094e8:	14400021 	bnez	v0,80009570 <xQueueGenericReceive+0x3ec>
800094ec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1401
				{
					portYIELD_WITHIN_API();
800094f0:	40026800 	mfc0	v0,c0_cause
800094f4:	0040f825 	move	ra,v0
800094f8:	03e01025 	move	v0,ra
800094fc:	afc2001c 	sw	v0,28(s8)
80009500:	8fc2001c 	lw	v0,28(s8)
80009504:	34420100 	ori	v0,v0,0x100
80009508:	afc2001c 	sw	v0,28(s8)
8000950c:	8fc2001c 	lw	v0,28(s8)
80009510:	40826000 	mtc0	v0,c0_status
80009514:	000000c0 	ehb
80009518:	10000015 	b	80009570 <xQueueGenericReceive+0x3ec>
8000951c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1411
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
80009520:	8fc40014 	lw	a0,20(s8)
80009524:	0c002719 	jal	80009c64 <prvUnlockQueue>
80009528:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1412
				( void ) xTaskResumeAll();
8000952c:	0c001881 	jal	80006204 <xTaskResumeAll>
80009530:	00000000 	nop
80009534:	1000ff4a 	b	80009260 <xQueueGenericReceive+0xdc>
80009538:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1417
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
8000953c:	8fc40014 	lw	a0,20(s8)
80009540:	0c002719 	jal	80009c64 <prvUnlockQueue>
80009544:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1418
			( void ) xTaskResumeAll();
80009548:	0c001881 	jal	80006204 <xTaskResumeAll>
8000954c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1420

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
80009550:	8fc40014 	lw	a0,20(s8)
80009554:	0c00277a 	jal	80009de8 <prvIsQueueEmpty>
80009558:	00000000 	nop
8000955c:	10400004 	beqz	v0,80009570 <xQueueGenericReceive+0x3ec>
80009560:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1423
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
80009564:	00001025 	move	v0,zero
80009568:	10000003 	b	80009578 <xQueueGenericReceive+0x3f4>
8000956c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1430 (discriminator 3)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
80009570:	1000ff3b 	b	80009260 <xQueueGenericReceive+0xdc>
80009574:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1431 (discriminator 4)
}
80009578:	03c0e825 	move	sp,s8
8000957c:	8fbf003c 	lw	ra,60(sp)
80009580:	8fbe0038 	lw	s8,56(sp)
80009584:	27bd0040 	addiu	sp,sp,64
80009588:	03e00008 	jr	ra
8000958c:	00000000 	nop

80009590 <xQueueReceiveFromISR>:
xQueueReceiveFromISR():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1435
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
80009590:	27bdffd0 	addiu	sp,sp,-48
80009594:	afbf002c 	sw	ra,44(sp)
80009598:	afbe0028 	sw	s8,40(sp)
8000959c:	03a0f025 	move	s8,sp
800095a0:	afc40030 	sw	a0,48(s8)
800095a4:	afc50034 	sw	a1,52(s8)
800095a8:	afc60038 	sw	a2,56(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1438
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
800095ac:	8fc20030 	lw	v0,48(s8)
800095b0:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1440

	configASSERT( pxQueue );
800095b4:	8fc20014 	lw	v0,20(s8)
800095b8:	14400006 	bnez	v0,800095d4 <xQueueReceiveFromISR+0x44>
800095bc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1440 (discriminator 1)
800095c0:	3c028001 	lui	v0,0x8001
800095c4:	2444bd90 	addiu	a0,v0,-17008
800095c8:	240505a0 	li	a1,1440
800095cc:	0c000417 	jal	8000105c <vAssertCalled>
800095d0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1441
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
800095d4:	8fc20034 	lw	v0,52(s8)
800095d8:	14400005 	bnez	v0,800095f0 <xQueueReceiveFromISR+0x60>
800095dc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1441 (discriminator 2)
800095e0:	8fc20014 	lw	v0,20(s8)
800095e4:	8c420040 	lw	v0,64(v0)
800095e8:	14400004 	bnez	v0,800095fc <xQueueReceiveFromISR+0x6c>
800095ec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1441 (discriminator 3)
800095f0:	24020001 	li	v0,1
800095f4:	10000002 	b	80009600 <xQueueReceiveFromISR+0x70>
800095f8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1441 (discriminator 4)
800095fc:	00001025 	move	v0,zero
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1441 (discriminator 6)
80009600:	14400006 	bnez	v0,8000961c <xQueueReceiveFromISR+0x8c>
80009604:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1441 (discriminator 7)
80009608:	3c028001 	lui	v0,0x8001
8000960c:	2444bd90 	addiu	a0,v0,-17008
80009610:	240505a1 	li	a1,1441
80009614:	0c000417 	jal	8000105c <vAssertCalled>
80009618:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1459
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
8000961c:	0c002a23 	jal	8000a88c <uxPortSetInterruptMaskFromISR>
80009620:	00000000 	nop
80009624:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1461
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
80009628:	8fc20014 	lw	v0,20(s8)
8000962c:	8c420038 	lw	v0,56(v0)
80009630:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1464

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
80009634:	8fc2001c 	lw	v0,28(s8)
80009638:	1040002d 	beqz	v0,800096f0 <xQueueReceiveFromISR+0x160>
8000963c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1466
		{
			const int8_t cRxLock = pxQueue->cRxLock;
80009640:	8fc20014 	lw	v0,20(s8)
80009644:	90420044 	lbu	v0,68(v0)
80009648:	a3c20020 	sb	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1470

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
8000964c:	8fc40014 	lw	a0,20(s8)
80009650:	8fc50034 	lw	a1,52(s8)
80009654:	0c0026ee 	jal	80009bb8 <prvCopyDataFromQueue>
80009658:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1471
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
8000965c:	8fc2001c 	lw	v0,28(s8)
80009660:	2443ffff 	addiu	v1,v0,-1
80009664:	8fc20014 	lw	v0,20(s8)
80009668:	ac430038 	sw	v1,56(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1477

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
8000966c:	83c30020 	lb	v1,32(s8)
80009670:	2402ffff 	li	v0,-1
80009674:	14620014 	bne	v1,v0,800096c8 <xQueueReceiveFromISR+0x138>
80009678:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1479
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
8000967c:	8fc20014 	lw	v0,20(s8)
80009680:	8c420010 	lw	v0,16(v0)
80009684:	10400016 	beqz	v0,800096e0 <xQueueReceiveFromISR+0x150>
80009688:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1481
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
8000968c:	8fc20014 	lw	v0,20(s8)
80009690:	24420010 	addiu	v0,v0,16
80009694:	00402025 	move	a0,v0
80009698:	0c001aaa 	jal	80006aa8 <xTaskRemoveFromEventList>
8000969c:	00000000 	nop
800096a0:	1040000f 	beqz	v0,800096e0 <xQueueReceiveFromISR+0x150>
800096a4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1485
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
800096a8:	8fc20038 	lw	v0,56(s8)
800096ac:	1040000c 	beqz	v0,800096e0 <xQueueReceiveFromISR+0x150>
800096b0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1487
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
800096b4:	8fc20038 	lw	v0,56(s8)
800096b8:	24030001 	li	v1,1
800096bc:	ac430000 	sw	v1,0(v0)
800096c0:	10000007 	b	800096e0 <xQueueReceiveFromISR+0x150>
800096c4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1508
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
800096c8:	93c20020 	lbu	v0,32(s8)
800096cc:	24420001 	addiu	v0,v0,1
800096d0:	304200ff 	andi	v0,v0,0xff
800096d4:	7c021c20 	seb	v1,v0
800096d8:	8fc20014 	lw	v0,20(s8)
800096dc:	a0430044 	sb	v1,68(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1511
			}

			xReturn = pdPASS;
800096e0:	24020001 	li	v0,1
800096e4:	afc20010 	sw	v0,16(s8)
800096e8:	10000002 	b	800096f4 <xQueueReceiveFromISR+0x164>
800096ec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1515
		}
		else
		{
			xReturn = pdFAIL;
800096f0:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1519
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
800096f4:	8fc40018 	lw	a0,24(s8)
800096f8:	0c0029da 	jal	8000a768 <vPortClearInterruptMaskFromISR>
800096fc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1521

	return xReturn;
80009700:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1522
}
80009704:	03c0e825 	move	sp,s8
80009708:	8fbf002c 	lw	ra,44(sp)
8000970c:	8fbe0028 	lw	s8,40(sp)
80009710:	27bd0030 	addiu	sp,sp,48
80009714:	03e00008 	jr	ra
80009718:	00000000 	nop

8000971c <xQueuePeekFromISR>:
xQueuePeekFromISR():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1526
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
8000971c:	27bdffd8 	addiu	sp,sp,-40
80009720:	afbf0024 	sw	ra,36(sp)
80009724:	afbe0020 	sw	s8,32(sp)
80009728:	03a0f025 	move	s8,sp
8000972c:	afc40028 	sw	a0,40(s8)
80009730:	afc5002c 	sw	a1,44(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1530
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
80009734:	8fc20028 	lw	v0,40(s8)
80009738:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1532

	configASSERT( pxQueue );
8000973c:	8fc20014 	lw	v0,20(s8)
80009740:	14400006 	bnez	v0,8000975c <xQueuePeekFromISR+0x40>
80009744:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1532 (discriminator 1)
80009748:	3c028001 	lui	v0,0x8001
8000974c:	2444bd90 	addiu	a0,v0,-17008
80009750:	240505fc 	li	a1,1532
80009754:	0c000417 	jal	8000105c <vAssertCalled>
80009758:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1533
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
8000975c:	8fc2002c 	lw	v0,44(s8)
80009760:	14400005 	bnez	v0,80009778 <xQueuePeekFromISR+0x5c>
80009764:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1533 (discriminator 2)
80009768:	8fc20014 	lw	v0,20(s8)
8000976c:	8c420040 	lw	v0,64(v0)
80009770:	14400004 	bnez	v0,80009784 <xQueuePeekFromISR+0x68>
80009774:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1533 (discriminator 3)
80009778:	24020001 	li	v0,1
8000977c:	10000002 	b	80009788 <xQueuePeekFromISR+0x6c>
80009780:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1533 (discriminator 4)
80009784:	00001025 	move	v0,zero
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1533 (discriminator 6)
80009788:	14400006 	bnez	v0,800097a4 <xQueuePeekFromISR+0x88>
8000978c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1533 (discriminator 7)
80009790:	3c028001 	lui	v0,0x8001
80009794:	2444bd90 	addiu	a0,v0,-17008
80009798:	240505fd 	li	a1,1533
8000979c:	0c000417 	jal	8000105c <vAssertCalled>
800097a0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1534
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
800097a4:	8fc20014 	lw	v0,20(s8)
800097a8:	8c420040 	lw	v0,64(v0)
800097ac:	14400006 	bnez	v0,800097c8 <xQueuePeekFromISR+0xac>
800097b0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1534 (discriminator 1)
800097b4:	3c028001 	lui	v0,0x8001
800097b8:	2444bd90 	addiu	a0,v0,-17008
800097bc:	240505fe 	li	a1,1534
800097c0:	0c000417 	jal	8000105c <vAssertCalled>
800097c4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1552
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
800097c8:	0c002a23 	jal	8000a88c <uxPortSetInterruptMaskFromISR>
800097cc:	00000000 	nop
800097d0:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1555
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
800097d4:	8fc20014 	lw	v0,20(s8)
800097d8:	8c420038 	lw	v0,56(v0)
800097dc:	1040000f 	beqz	v0,8000981c <xQueuePeekFromISR+0x100>
800097e0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1561
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
800097e4:	8fc20014 	lw	v0,20(s8)
800097e8:	8c42000c 	lw	v0,12(v0)
800097ec:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1562
			prvCopyDataFromQueue( pxQueue, pvBuffer );
800097f0:	8fc40014 	lw	a0,20(s8)
800097f4:	8fc5002c 	lw	a1,44(s8)
800097f8:	0c0026ee 	jal	80009bb8 <prvCopyDataFromQueue>
800097fc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1563
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
80009800:	8fc20014 	lw	v0,20(s8)
80009804:	8fc3001c 	lw	v1,28(s8)
80009808:	ac43000c 	sw	v1,12(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1565

			xReturn = pdPASS;
8000980c:	24020001 	li	v0,1
80009810:	afc20010 	sw	v0,16(s8)
80009814:	10000002 	b	80009820 <xQueuePeekFromISR+0x104>
80009818:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1569
		}
		else
		{
			xReturn = pdFAIL;
8000981c:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1573
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
80009820:	8fc40018 	lw	a0,24(s8)
80009824:	0c0029da 	jal	8000a768 <vPortClearInterruptMaskFromISR>
80009828:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1575

	return xReturn;
8000982c:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1576
}
80009830:	03c0e825 	move	sp,s8
80009834:	8fbf0024 	lw	ra,36(sp)
80009838:	8fbe0020 	lw	s8,32(sp)
8000983c:	27bd0028 	addiu	sp,sp,40
80009840:	03e00008 	jr	ra
80009844:	00000000 	nop

80009848 <uxQueueMessagesWaiting>:
uxQueueMessagesWaiting():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1580
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
80009848:	27bdffe0 	addiu	sp,sp,-32
8000984c:	afbf001c 	sw	ra,28(sp)
80009850:	afbe0018 	sw	s8,24(sp)
80009854:	03a0f025 	move	s8,sp
80009858:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1583
UBaseType_t uxReturn;

	configASSERT( xQueue );
8000985c:	8fc20020 	lw	v0,32(s8)
80009860:	14400006 	bnez	v0,8000987c <uxQueueMessagesWaiting+0x34>
80009864:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1583 (discriminator 1)
80009868:	3c028001 	lui	v0,0x8001
8000986c:	2444bd90 	addiu	a0,v0,-17008
80009870:	2405062f 	li	a1,1583
80009874:	0c000417 	jal	8000105c <vAssertCalled>
80009878:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1585

	taskENTER_CRITICAL();
8000987c:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80009880:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1587
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
80009884:	8fc20020 	lw	v0,32(s8)
80009888:	8c420038 	lw	v0,56(v0)
8000988c:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1589
	}
	taskEXIT_CRITICAL();
80009890:	0c001de3 	jal	8000778c <vTaskExitCritical>
80009894:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1591

	return uxReturn;
80009898:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1592
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
8000989c:	03c0e825 	move	sp,s8
800098a0:	8fbf001c 	lw	ra,28(sp)
800098a4:	8fbe0018 	lw	s8,24(sp)
800098a8:	27bd0020 	addiu	sp,sp,32
800098ac:	03e00008 	jr	ra
800098b0:	00000000 	nop

800098b4 <uxQueueSpacesAvailable>:
uxQueueSpacesAvailable():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1596
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
800098b4:	27bdffe0 	addiu	sp,sp,-32
800098b8:	afbf001c 	sw	ra,28(sp)
800098bc:	afbe0018 	sw	s8,24(sp)
800098c0:	03a0f025 	move	s8,sp
800098c4:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1600
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
800098c8:	8fc20020 	lw	v0,32(s8)
800098cc:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1601
	configASSERT( pxQueue );
800098d0:	8fc20010 	lw	v0,16(s8)
800098d4:	14400006 	bnez	v0,800098f0 <uxQueueSpacesAvailable+0x3c>
800098d8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1601 (discriminator 1)
800098dc:	3c028001 	lui	v0,0x8001
800098e0:	2444bd90 	addiu	a0,v0,-17008
800098e4:	24050641 	li	a1,1601
800098e8:	0c000417 	jal	8000105c <vAssertCalled>
800098ec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1603

	taskENTER_CRITICAL();
800098f0:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
800098f4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1605
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
800098f8:	8fc20010 	lw	v0,16(s8)
800098fc:	8c43003c 	lw	v1,60(v0)
80009900:	8fc20010 	lw	v0,16(s8)
80009904:	8c420038 	lw	v0,56(v0)
80009908:	00621023 	subu	v0,v1,v0
8000990c:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1607
	}
	taskEXIT_CRITICAL();
80009910:	0c001de3 	jal	8000778c <vTaskExitCritical>
80009914:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1609

	return uxReturn;
80009918:	8fc20014 	lw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1610
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
8000991c:	03c0e825 	move	sp,s8
80009920:	8fbf001c 	lw	ra,28(sp)
80009924:	8fbe0018 	lw	s8,24(sp)
80009928:	27bd0020 	addiu	sp,sp,32
8000992c:	03e00008 	jr	ra
80009930:	00000000 	nop

80009934 <uxQueueMessagesWaitingFromISR>:
uxQueueMessagesWaitingFromISR():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1614
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
80009934:	27bdffe0 	addiu	sp,sp,-32
80009938:	afbf001c 	sw	ra,28(sp)
8000993c:	afbe0018 	sw	s8,24(sp)
80009940:	03a0f025 	move	s8,sp
80009944:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1617
UBaseType_t uxReturn;

	configASSERT( xQueue );
80009948:	8fc20020 	lw	v0,32(s8)
8000994c:	14400006 	bnez	v0,80009968 <uxQueueMessagesWaitingFromISR+0x34>
80009950:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1617 (discriminator 1)
80009954:	3c028001 	lui	v0,0x8001
80009958:	2444bd90 	addiu	a0,v0,-17008
8000995c:	24050651 	li	a1,1617
80009960:	0c000417 	jal	8000105c <vAssertCalled>
80009964:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1619

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
80009968:	8fc20020 	lw	v0,32(s8)
8000996c:	8c420038 	lw	v0,56(v0)
80009970:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1621

	return uxReturn;
80009974:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1622
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
80009978:	03c0e825 	move	sp,s8
8000997c:	8fbf001c 	lw	ra,28(sp)
80009980:	8fbe0018 	lw	s8,24(sp)
80009984:	27bd0020 	addiu	sp,sp,32
80009988:	03e00008 	jr	ra
8000998c:	00000000 	nop

80009990 <vQueueDelete>:
vQueueDelete():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1626
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
80009990:	27bdffe0 	addiu	sp,sp,-32
80009994:	afbf001c 	sw	ra,28(sp)
80009998:	afbe0018 	sw	s8,24(sp)
8000999c:	03a0f025 	move	s8,sp
800099a0:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1627
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
800099a4:	8fc20020 	lw	v0,32(s8)
800099a8:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1629

	configASSERT( pxQueue );
800099ac:	8fc20010 	lw	v0,16(s8)
800099b0:	14400006 	bnez	v0,800099cc <vQueueDelete+0x3c>
800099b4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1629 (discriminator 1)
800099b8:	3c028001 	lui	v0,0x8001
800099bc:	2444bd90 	addiu	a0,v0,-17008
800099c0:	2405065d 	li	a1,1629
800099c4:	0c000417 	jal	8000105c <vAssertCalled>
800099c8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1642

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
800099cc:	8fc40010 	lw	a0,16(s8)
800099d0:	0c002b7a 	jal	8000ade8 <vPortFree>
800099d4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1664
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
800099d8:	03c0e825 	move	sp,s8
800099dc:	8fbf001c 	lw	ra,28(sp)
800099e0:	8fbe0018 	lw	s8,24(sp)
800099e4:	27bd0020 	addiu	sp,sp,32
800099e8:	03e00008 	jr	ra
800099ec:	00000000 	nop

800099f0 <prvCopyDataToQueue>:
prvCopyDataToQueue():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1698

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
800099f0:	27bdffe0 	addiu	sp,sp,-32
800099f4:	afbf001c 	sw	ra,28(sp)
800099f8:	afbe0018 	sw	s8,24(sp)
800099fc:	03a0f025 	move	s8,sp
80009a00:	afc40020 	sw	a0,32(s8)
80009a04:	afc50024 	sw	a1,36(s8)
80009a08:	afc60028 	sw	a2,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1699
BaseType_t xReturn = pdFALSE;
80009a0c:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1704
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
80009a10:	8fc20020 	lw	v0,32(s8)
80009a14:	8c420038 	lw	v0,56(v0)
80009a18:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1706

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
80009a1c:	8fc20020 	lw	v0,32(s8)
80009a20:	8c420040 	lw	v0,64(v0)
80009a24:	1440000f 	bnez	v0,80009a64 <prvCopyDataToQueue+0x74>
80009a28:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1710
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
80009a2c:	8fc20020 	lw	v0,32(s8)
80009a30:	8c420000 	lw	v0,0(v0)
80009a34:	14400055 	bnez	v0,80009b8c <prvCopyDataToQueue+0x19c>
80009a38:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1713
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
80009a3c:	8fc20020 	lw	v0,32(s8)
80009a40:	8c420004 	lw	v0,4(v0)
80009a44:	00402025 	move	a0,v0
80009a48:	0c001d3e 	jal	800074f8 <xTaskPriorityDisinherit>
80009a4c:	00000000 	nop
80009a50:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1714
				pxQueue->pxMutexHolder = NULL;
80009a54:	8fc20020 	lw	v0,32(s8)
80009a58:	ac400004 	sw	zero,4(v0)
80009a5c:	1000004b 	b	80009b8c <prvCopyDataToQueue+0x19c>
80009a60:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1723
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
80009a64:	8fc20028 	lw	v0,40(s8)
80009a68:	1440001e 	bnez	v0,80009ae4 <prvCopyDataToQueue+0xf4>
80009a6c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1725
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
80009a70:	8fc20020 	lw	v0,32(s8)
80009a74:	8c430008 	lw	v1,8(v0)
80009a78:	8fc20020 	lw	v0,32(s8)
80009a7c:	8c420040 	lw	v0,64(v0)
80009a80:	00602025 	move	a0,v1
80009a84:	8fc50024 	lw	a1,36(s8)
80009a88:	00403025 	move	a2,v0
80009a8c:	0c002c16 	jal	8000b058 <memcpy>
80009a90:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1726
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
80009a94:	8fc20020 	lw	v0,32(s8)
80009a98:	8c430008 	lw	v1,8(v0)
80009a9c:	8fc20020 	lw	v0,32(s8)
80009aa0:	8c420040 	lw	v0,64(v0)
80009aa4:	00621821 	addu	v1,v1,v0
80009aa8:	8fc20020 	lw	v0,32(s8)
80009aac:	ac430008 	sw	v1,8(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1727
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
80009ab0:	8fc20020 	lw	v0,32(s8)
80009ab4:	8c430008 	lw	v1,8(v0)
80009ab8:	8fc20020 	lw	v0,32(s8)
80009abc:	8c420004 	lw	v0,4(v0)
80009ac0:	0062102b 	sltu	v0,v1,v0
80009ac4:	14400031 	bnez	v0,80009b8c <prvCopyDataToQueue+0x19c>
80009ac8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1729
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
80009acc:	8fc20020 	lw	v0,32(s8)
80009ad0:	8c430000 	lw	v1,0(v0)
80009ad4:	8fc20020 	lw	v0,32(s8)
80009ad8:	ac430008 	sw	v1,8(v0)
80009adc:	1000002b 	b	80009b8c <prvCopyDataToQueue+0x19c>
80009ae0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1738
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80009ae4:	8fc20020 	lw	v0,32(s8)
80009ae8:	8c43000c 	lw	v1,12(v0)
80009aec:	8fc20020 	lw	v0,32(s8)
80009af0:	8c420040 	lw	v0,64(v0)
80009af4:	00602025 	move	a0,v1
80009af8:	8fc50024 	lw	a1,36(s8)
80009afc:	00403025 	move	a2,v0
80009b00:	0c002c16 	jal	8000b058 <memcpy>
80009b04:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1739
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
80009b08:	8fc20020 	lw	v0,32(s8)
80009b0c:	8c43000c 	lw	v1,12(v0)
80009b10:	8fc20020 	lw	v0,32(s8)
80009b14:	8c420040 	lw	v0,64(v0)
80009b18:	00021023 	negu	v0,v0
80009b1c:	00621821 	addu	v1,v1,v0
80009b20:	8fc20020 	lw	v0,32(s8)
80009b24:	ac43000c 	sw	v1,12(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1740
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
80009b28:	8fc20020 	lw	v0,32(s8)
80009b2c:	8c43000c 	lw	v1,12(v0)
80009b30:	8fc20020 	lw	v0,32(s8)
80009b34:	8c420000 	lw	v0,0(v0)
80009b38:	0062102b 	sltu	v0,v1,v0
80009b3c:	10400009 	beqz	v0,80009b64 <prvCopyDataToQueue+0x174>
80009b40:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1742
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
80009b44:	8fc20020 	lw	v0,32(s8)
80009b48:	8c430004 	lw	v1,4(v0)
80009b4c:	8fc20020 	lw	v0,32(s8)
80009b50:	8c420040 	lw	v0,64(v0)
80009b54:	00021023 	negu	v0,v0
80009b58:	00621821 	addu	v1,v1,v0
80009b5c:	8fc20020 	lw	v0,32(s8)
80009b60:	ac43000c 	sw	v1,12(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1749
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
80009b64:	8fc30028 	lw	v1,40(s8)
80009b68:	24020002 	li	v0,2
80009b6c:	14620007 	bne	v1,v0,80009b8c <prvCopyDataToQueue+0x19c>
80009b70:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1751
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
80009b74:	8fc20014 	lw	v0,20(s8)
80009b78:	10400004 	beqz	v0,80009b8c <prvCopyDataToQueue+0x19c>
80009b7c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1757
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
80009b80:	8fc20014 	lw	v0,20(s8)
80009b84:	2442ffff 	addiu	v0,v0,-1
80009b88:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1770
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
80009b8c:	8fc20014 	lw	v0,20(s8)
80009b90:	24430001 	addiu	v1,v0,1
80009b94:	8fc20020 	lw	v0,32(s8)
80009b98:	ac430038 	sw	v1,56(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1772

	return xReturn;
80009b9c:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1773
}
80009ba0:	03c0e825 	move	sp,s8
80009ba4:	8fbf001c 	lw	ra,28(sp)
80009ba8:	8fbe0018 	lw	s8,24(sp)
80009bac:	27bd0020 	addiu	sp,sp,32
80009bb0:	03e00008 	jr	ra
80009bb4:	00000000 	nop

80009bb8 <prvCopyDataFromQueue>:
prvCopyDataFromQueue():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1777
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
80009bb8:	27bdffe8 	addiu	sp,sp,-24
80009bbc:	afbf0014 	sw	ra,20(sp)
80009bc0:	afbe0010 	sw	s8,16(sp)
80009bc4:	03a0f025 	move	s8,sp
80009bc8:	afc40018 	sw	a0,24(s8)
80009bcc:	afc5001c 	sw	a1,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1778
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
80009bd0:	8fc20018 	lw	v0,24(s8)
80009bd4:	8c420040 	lw	v0,64(v0)
80009bd8:	1040001c 	beqz	v0,80009c4c <prvCopyDataFromQueue+0x94>
80009bdc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1780
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
80009be0:	8fc20018 	lw	v0,24(s8)
80009be4:	8c43000c 	lw	v1,12(v0)
80009be8:	8fc20018 	lw	v0,24(s8)
80009bec:	8c420040 	lw	v0,64(v0)
80009bf0:	00621821 	addu	v1,v1,v0
80009bf4:	8fc20018 	lw	v0,24(s8)
80009bf8:	ac43000c 	sw	v1,12(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1781
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
80009bfc:	8fc20018 	lw	v0,24(s8)
80009c00:	8c43000c 	lw	v1,12(v0)
80009c04:	8fc20018 	lw	v0,24(s8)
80009c08:	8c420004 	lw	v0,4(v0)
80009c0c:	0062102b 	sltu	v0,v1,v0
80009c10:	14400005 	bnez	v0,80009c28 <prvCopyDataFromQueue+0x70>
80009c14:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1783
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
80009c18:	8fc20018 	lw	v0,24(s8)
80009c1c:	8c430000 	lw	v1,0(v0)
80009c20:	8fc20018 	lw	v0,24(s8)
80009c24:	ac43000c 	sw	v1,12(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1789
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
80009c28:	8fc20018 	lw	v0,24(s8)
80009c2c:	8c43000c 	lw	v1,12(v0)
80009c30:	8fc20018 	lw	v0,24(s8)
80009c34:	8c420040 	lw	v0,64(v0)
80009c38:	8fc4001c 	lw	a0,28(s8)
80009c3c:	00602825 	move	a1,v1
80009c40:	00403025 	move	a2,v0
80009c44:	0c002c16 	jal	8000b058 <memcpy>
80009c48:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1791
	}
}
80009c4c:	03c0e825 	move	sp,s8
80009c50:	8fbf0014 	lw	ra,20(sp)
80009c54:	8fbe0010 	lw	s8,16(sp)
80009c58:	27bd0018 	addiu	sp,sp,24
80009c5c:	03e00008 	jr	ra
80009c60:	00000000 	nop

80009c64 <prvUnlockQueue>:
prvUnlockQueue():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1795
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
80009c64:	27bdffe0 	addiu	sp,sp,-32
80009c68:	afbf001c 	sw	ra,28(sp)
80009c6c:	afbe0018 	sw	s8,24(sp)
80009c70:	03a0f025 	move	s8,sp
80009c74:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1802

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
80009c78:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80009c7c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1804
	{
		int8_t cTxLock = pxQueue->cTxLock;
80009c80:	8fc20020 	lw	v0,32(s8)
80009c84:	90420045 	lbu	v0,69(v0)
80009c88:	a3c20010 	sb	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1807

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
80009c8c:	10000024 	b	80009d20 <prvUnlockQueue+0xbc>
80009c90:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1813
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
80009c94:	8fc20020 	lw	v0,32(s8)
80009c98:	8c420048 	lw	v0,72(v0)
80009c9c:	1040000b 	beqz	v0,80009ccc <prvUnlockQueue+0x68>
80009ca0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1815
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
80009ca4:	8fc40020 	lw	a0,32(s8)
80009ca8:	00002825 	move	a1,zero
80009cac:	0c00289f 	jal	8000a27c <prvNotifyQueueSetContainer>
80009cb0:	00000000 	nop
80009cb4:	10400016 	beqz	v0,80009d10 <prvUnlockQueue+0xac>
80009cb8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1820
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
80009cbc:	0c001bba 	jal	80006ee8 <vTaskMissedYield>
80009cc0:	00000000 	nop
80009cc4:	10000012 	b	80009d10 <prvUnlockQueue+0xac>
80009cc8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1832
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
80009ccc:	8fc20020 	lw	v0,32(s8)
80009cd0:	8c420024 	lw	v0,36(v0)
80009cd4:	1040000c 	beqz	v0,80009d08 <prvUnlockQueue+0xa4>
80009cd8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1834
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
80009cdc:	8fc20020 	lw	v0,32(s8)
80009ce0:	24420024 	addiu	v0,v0,36
80009ce4:	00402025 	move	a0,v0
80009ce8:	0c001aaa 	jal	80006aa8 <xTaskRemoveFromEventList>
80009cec:	00000000 	nop
80009cf0:	10400007 	beqz	v0,80009d10 <prvUnlockQueue+0xac>
80009cf4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1838
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
80009cf8:	0c001bba 	jal	80006ee8 <vTaskMissedYield>
80009cfc:	00000000 	nop
80009d00:	10000003 	b	80009d10 <prvUnlockQueue+0xac>
80009d04:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1847
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
80009d08:	10000008 	b	80009d2c <prvUnlockQueue+0xc8>
80009d0c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1875
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
80009d10:	93c20010 	lbu	v0,16(s8)
80009d14:	2442ffff 	addiu	v0,v0,-1
80009d18:	304200ff 	andi	v0,v0,0xff
80009d1c:	a3c20010 	sb	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1807
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
80009d20:	83c20010 	lb	v0,16(s8)
80009d24:	1c40ffdb 	bgtz	v0,80009c94 <prvUnlockQueue+0x30>
80009d28:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1878
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
80009d2c:	8fc20020 	lw	v0,32(s8)
80009d30:	2403ffff 	li	v1,-1
80009d34:	a0430045 	sb	v1,69(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1880
	}
	taskEXIT_CRITICAL();
80009d38:	0c001de3 	jal	8000778c <vTaskExitCritical>
80009d3c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1883

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
80009d40:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80009d44:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1885
	{
		int8_t cRxLock = pxQueue->cRxLock;
80009d48:	8fc20020 	lw	v0,32(s8)
80009d4c:	90420044 	lbu	v0,68(v0)
80009d50:	a3c20011 	sb	v0,17(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1887

		while( cRxLock > queueLOCKED_UNMODIFIED )
80009d54:	10000016 	b	80009db0 <prvUnlockQueue+0x14c>
80009d58:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1889
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
80009d5c:	8fc20020 	lw	v0,32(s8)
80009d60:	8c420010 	lw	v0,16(v0)
80009d64:	10400010 	beqz	v0,80009da8 <prvUnlockQueue+0x144>
80009d68:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1891
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
80009d6c:	8fc20020 	lw	v0,32(s8)
80009d70:	24420010 	addiu	v0,v0,16
80009d74:	00402025 	move	a0,v0
80009d78:	0c001aaa 	jal	80006aa8 <xTaskRemoveFromEventList>
80009d7c:	00000000 	nop
80009d80:	10400003 	beqz	v0,80009d90 <prvUnlockQueue+0x12c>
80009d84:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1893
				{
					vTaskMissedYield();
80009d88:	0c001bba 	jal	80006ee8 <vTaskMissedYield>
80009d8c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1900
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
80009d90:	93c20011 	lbu	v0,17(s8)
80009d94:	2442ffff 	addiu	v0,v0,-1
80009d98:	304200ff 	andi	v0,v0,0xff
80009d9c:	a3c20011 	sb	v0,17(s8)
80009da0:	10000003 	b	80009db0 <prvUnlockQueue+0x14c>
80009da4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1904
			}
			else
			{
				break;
80009da8:	10000004 	b	80009dbc <prvUnlockQueue+0x158>
80009dac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1887
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
80009db0:	83c20011 	lb	v0,17(s8)
80009db4:	1c40ffe9 	bgtz	v0,80009d5c <prvUnlockQueue+0xf8>
80009db8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1908
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
80009dbc:	8fc20020 	lw	v0,32(s8)
80009dc0:	2403ffff 	li	v1,-1
80009dc4:	a0430044 	sb	v1,68(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1910
	}
	taskEXIT_CRITICAL();
80009dc8:	0c001de3 	jal	8000778c <vTaskExitCritical>
80009dcc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1911
}
80009dd0:	03c0e825 	move	sp,s8
80009dd4:	8fbf001c 	lw	ra,28(sp)
80009dd8:	8fbe0018 	lw	s8,24(sp)
80009ddc:	27bd0020 	addiu	sp,sp,32
80009de0:	03e00008 	jr	ra
80009de4:	00000000 	nop

80009de8 <prvIsQueueEmpty>:
prvIsQueueEmpty():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1915
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
80009de8:	27bdffe0 	addiu	sp,sp,-32
80009dec:	afbf001c 	sw	ra,28(sp)
80009df0:	afbe0018 	sw	s8,24(sp)
80009df4:	03a0f025 	move	s8,sp
80009df8:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1918
BaseType_t xReturn;

	taskENTER_CRITICAL();
80009dfc:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80009e00:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1920
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
80009e04:	8fc20020 	lw	v0,32(s8)
80009e08:	8c420038 	lw	v0,56(v0)
80009e0c:	14400005 	bnez	v0,80009e24 <prvIsQueueEmpty+0x3c>
80009e10:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1922
		{
			xReturn = pdTRUE;
80009e14:	24020001 	li	v0,1
80009e18:	afc20010 	sw	v0,16(s8)
80009e1c:	10000002 	b	80009e28 <prvIsQueueEmpty+0x40>
80009e20:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1926
		}
		else
		{
			xReturn = pdFALSE;
80009e24:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1929
		}
	}
	taskEXIT_CRITICAL();
80009e28:	0c001de3 	jal	8000778c <vTaskExitCritical>
80009e2c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1931

	return xReturn;
80009e30:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1932
}
80009e34:	03c0e825 	move	sp,s8
80009e38:	8fbf001c 	lw	ra,28(sp)
80009e3c:	8fbe0018 	lw	s8,24(sp)
80009e40:	27bd0020 	addiu	sp,sp,32
80009e44:	03e00008 	jr	ra
80009e48:	00000000 	nop

80009e4c <xQueueIsQueueEmptyFromISR>:
xQueueIsQueueEmptyFromISR():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1936
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
80009e4c:	27bdffe0 	addiu	sp,sp,-32
80009e50:	afbf001c 	sw	ra,28(sp)
80009e54:	afbe0018 	sw	s8,24(sp)
80009e58:	03a0f025 	move	s8,sp
80009e5c:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1939
BaseType_t xReturn;

	configASSERT( xQueue );
80009e60:	8fc20020 	lw	v0,32(s8)
80009e64:	14400006 	bnez	v0,80009e80 <xQueueIsQueueEmptyFromISR+0x34>
80009e68:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1939 (discriminator 1)
80009e6c:	3c028001 	lui	v0,0x8001
80009e70:	2444bd90 	addiu	a0,v0,-17008
80009e74:	24050793 	li	a1,1939
80009e78:	0c000417 	jal	8000105c <vAssertCalled>
80009e7c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1940
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
80009e80:	8fc20020 	lw	v0,32(s8)
80009e84:	8c420038 	lw	v0,56(v0)
80009e88:	14400005 	bnez	v0,80009ea0 <xQueueIsQueueEmptyFromISR+0x54>
80009e8c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1942
	{
		xReturn = pdTRUE;
80009e90:	24020001 	li	v0,1
80009e94:	afc20010 	sw	v0,16(s8)
80009e98:	10000002 	b	80009ea4 <xQueueIsQueueEmptyFromISR+0x58>
80009e9c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1946
	}
	else
	{
		xReturn = pdFALSE;
80009ea0:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1949
	}

	return xReturn;
80009ea4:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1950
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
80009ea8:	03c0e825 	move	sp,s8
80009eac:	8fbf001c 	lw	ra,28(sp)
80009eb0:	8fbe0018 	lw	s8,24(sp)
80009eb4:	27bd0020 	addiu	sp,sp,32
80009eb8:	03e00008 	jr	ra
80009ebc:	00000000 	nop

80009ec0 <prvIsQueueFull>:
prvIsQueueFull():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1954
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
80009ec0:	27bdffe0 	addiu	sp,sp,-32
80009ec4:	afbf001c 	sw	ra,28(sp)
80009ec8:	afbe0018 	sw	s8,24(sp)
80009ecc:	03a0f025 	move	s8,sp
80009ed0:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1957
BaseType_t xReturn;

	taskENTER_CRITICAL();
80009ed4:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80009ed8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1959
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
80009edc:	8fc20020 	lw	v0,32(s8)
80009ee0:	8c430038 	lw	v1,56(v0)
80009ee4:	8fc20020 	lw	v0,32(s8)
80009ee8:	8c42003c 	lw	v0,60(v0)
80009eec:	14620005 	bne	v1,v0,80009f04 <prvIsQueueFull+0x44>
80009ef0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1961
		{
			xReturn = pdTRUE;
80009ef4:	24020001 	li	v0,1
80009ef8:	afc20010 	sw	v0,16(s8)
80009efc:	10000002 	b	80009f08 <prvIsQueueFull+0x48>
80009f00:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1965
		}
		else
		{
			xReturn = pdFALSE;
80009f04:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1968
		}
	}
	taskEXIT_CRITICAL();
80009f08:	0c001de3 	jal	8000778c <vTaskExitCritical>
80009f0c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1970

	return xReturn;
80009f10:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1971
}
80009f14:	03c0e825 	move	sp,s8
80009f18:	8fbf001c 	lw	ra,28(sp)
80009f1c:	8fbe0018 	lw	s8,24(sp)
80009f20:	27bd0020 	addiu	sp,sp,32
80009f24:	03e00008 	jr	ra
80009f28:	00000000 	nop

80009f2c <xQueueIsQueueFullFromISR>:
xQueueIsQueueFullFromISR():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1975
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
80009f2c:	27bdffe0 	addiu	sp,sp,-32
80009f30:	afbf001c 	sw	ra,28(sp)
80009f34:	afbe0018 	sw	s8,24(sp)
80009f38:	03a0f025 	move	s8,sp
80009f3c:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1978
BaseType_t xReturn;

	configASSERT( xQueue );
80009f40:	8fc20020 	lw	v0,32(s8)
80009f44:	14400006 	bnez	v0,80009f60 <xQueueIsQueueFullFromISR+0x34>
80009f48:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1978 (discriminator 1)
80009f4c:	3c028001 	lui	v0,0x8001
80009f50:	2444bd90 	addiu	a0,v0,-17008
80009f54:	240507ba 	li	a1,1978
80009f58:	0c000417 	jal	8000105c <vAssertCalled>
80009f5c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1979
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
80009f60:	8fc20020 	lw	v0,32(s8)
80009f64:	8c430038 	lw	v1,56(v0)
80009f68:	8fc20020 	lw	v0,32(s8)
80009f6c:	8c42003c 	lw	v0,60(v0)
80009f70:	14620005 	bne	v1,v0,80009f88 <xQueueIsQueueFullFromISR+0x5c>
80009f74:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1981
	{
		xReturn = pdTRUE;
80009f78:	24020001 	li	v0,1
80009f7c:	afc20010 	sw	v0,16(s8)
80009f80:	10000002 	b	80009f8c <xQueueIsQueueFullFromISR+0x60>
80009f84:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1985
	}
	else
	{
		xReturn = pdFALSE;
80009f88:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1988
	}

	return xReturn;
80009f8c:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:1989
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
80009f90:	03c0e825 	move	sp,s8
80009f94:	8fbf001c 	lw	ra,28(sp)
80009f98:	8fbe0018 	lw	s8,24(sp)
80009f9c:	27bd0020 	addiu	sp,sp,32
80009fa0:	03e00008 	jr	ra
80009fa4:	00000000 	nop

80009fa8 <vQueueWaitForMessageRestricted>:
vQueueWaitForMessageRestricted():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2359
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
80009fa8:	27bdffe0 	addiu	sp,sp,-32
80009fac:	afbf001c 	sw	ra,28(sp)
80009fb0:	afbe0018 	sw	s8,24(sp)
80009fb4:	03a0f025 	move	s8,sp
80009fb8:	afc40020 	sw	a0,32(s8)
80009fbc:	afc50024 	sw	a1,36(s8)
80009fc0:	afc60028 	sw	a2,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2360
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
80009fc4:	8fc20020 	lw	v0,32(s8)
80009fc8:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2376
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
80009fcc:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
80009fd0:	00000000 	nop
80009fd4:	8fc20010 	lw	v0,16(s8)
80009fd8:	90420044 	lbu	v0,68(v0)
80009fdc:	7c021c20 	seb	v1,v0
80009fe0:	2402ffff 	li	v0,-1
80009fe4:	14620003 	bne	v1,v0,80009ff4 <vQueueWaitForMessageRestricted+0x4c>
80009fe8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2376 (discriminator 1)
80009fec:	8fc20010 	lw	v0,16(s8)
80009ff0:	a0400044 	sb	zero,68(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2376 (discriminator 3)
80009ff4:	8fc20010 	lw	v0,16(s8)
80009ff8:	90420045 	lbu	v0,69(v0)
80009ffc:	7c021c20 	seb	v1,v0
8000a000:	2402ffff 	li	v0,-1
8000a004:	14620003 	bne	v1,v0,8000a014 <vQueueWaitForMessageRestricted+0x6c>
8000a008:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2376 (discriminator 4)
8000a00c:	8fc20010 	lw	v0,16(s8)
8000a010:	a0400045 	sb	zero,69(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2376 (discriminator 6)
8000a014:	0c001de3 	jal	8000778c <vTaskExitCritical>
8000a018:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2377 (discriminator 6)
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
8000a01c:	8fc20010 	lw	v0,16(s8)
8000a020:	8c420038 	lw	v0,56(v0)
8000a024:	14400008 	bnez	v0,8000a048 <vQueueWaitForMessageRestricted+0xa0>
8000a028:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2380
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
8000a02c:	8fc20010 	lw	v0,16(s8)
8000a030:	24420024 	addiu	v0,v0,36
8000a034:	00402025 	move	a0,v0
8000a038:	8fc50024 	lw	a1,36(s8)
8000a03c:	8fc60028 	lw	a2,40(s8)
8000a040:	0c001a86 	jal	80006a18 <vTaskPlaceOnEventListRestricted>
8000a044:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2386
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
8000a048:	8fc40010 	lw	a0,16(s8)
8000a04c:	0c002719 	jal	80009c64 <prvUnlockQueue>
8000a050:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2387
	}
8000a054:	03c0e825 	move	sp,s8
8000a058:	8fbf001c 	lw	ra,28(sp)
8000a05c:	8fbe0018 	lw	s8,24(sp)
8000a060:	27bd0020 	addiu	sp,sp,32
8000a064:	03e00008 	jr	ra
8000a068:	00000000 	nop

8000a06c <xQueueCreateSet>:
xQueueCreateSet():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2395
/*-----------------------------------------------------------*/

#if( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
	{
8000a06c:	27bdffe0 	addiu	sp,sp,-32
8000a070:	afbf001c 	sw	ra,28(sp)
8000a074:	afbe0018 	sw	s8,24(sp)
8000a078:	03a0f025 	move	s8,sp
8000a07c:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2398
	QueueSetHandle_t pxQueue;

		pxQueue = xQueueGenericCreate( uxEventQueueLength, sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
8000a080:	8fc40020 	lw	a0,32(s8)
8000a084:	24050004 	li	a1,4
8000a088:	00003025 	move	a2,zero
8000a08c:	0c00212f 	jal	800084bc <xQueueGenericCreate>
8000a090:	00000000 	nop
8000a094:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2400

		return pxQueue;
8000a098:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2401
	}
8000a09c:	03c0e825 	move	sp,s8
8000a0a0:	8fbf001c 	lw	ra,28(sp)
8000a0a4:	8fbe0018 	lw	s8,24(sp)
8000a0a8:	27bd0020 	addiu	sp,sp,32
8000a0ac:	03e00008 	jr	ra
8000a0b0:	00000000 	nop

8000a0b4 <xQueueAddToSet>:
xQueueAddToSet():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2409
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )
	{
8000a0b4:	27bdffe0 	addiu	sp,sp,-32
8000a0b8:	afbf001c 	sw	ra,28(sp)
8000a0bc:	afbe0018 	sw	s8,24(sp)
8000a0c0:	03a0f025 	move	s8,sp
8000a0c4:	afc40020 	sw	a0,32(s8)
8000a0c8:	afc50024 	sw	a1,36(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2412
	BaseType_t xReturn;

		taskENTER_CRITICAL();
8000a0cc:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
8000a0d0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2414
		{
			if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
8000a0d4:	8fc20020 	lw	v0,32(s8)
8000a0d8:	8c420048 	lw	v0,72(v0)
8000a0dc:	10400004 	beqz	v0,8000a0f0 <xQueueAddToSet+0x3c>
8000a0e0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2417
			{
				/* Cannot add a queue/semaphore to more than one queue set. */
				xReturn = pdFAIL;
8000a0e4:	afc00010 	sw	zero,16(s8)
8000a0e8:	1000000d 	b	8000a120 <xQueueAddToSet+0x6c>
8000a0ec:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2419
			}
			else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
8000a0f0:	8fc20020 	lw	v0,32(s8)
8000a0f4:	8c420038 	lw	v0,56(v0)
8000a0f8:	10400004 	beqz	v0,8000a10c <xQueueAddToSet+0x58>
8000a0fc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2423
			{
				/* Cannot add a queue/semaphore to a queue set if there are already
				items in the queue/semaphore. */
				xReturn = pdFAIL;
8000a100:	afc00010 	sw	zero,16(s8)
8000a104:	10000006 	b	8000a120 <xQueueAddToSet+0x6c>
8000a108:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2427
			}
			else
			{
				( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
8000a10c:	8fc20020 	lw	v0,32(s8)
8000a110:	8fc30024 	lw	v1,36(s8)
8000a114:	ac430048 	sw	v1,72(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2428
				xReturn = pdPASS;
8000a118:	24020001 	li	v0,1
8000a11c:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2431
			}
		}
		taskEXIT_CRITICAL();
8000a120:	0c001de3 	jal	8000778c <vTaskExitCritical>
8000a124:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2433

		return xReturn;
8000a128:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2434
	}
8000a12c:	03c0e825 	move	sp,s8
8000a130:	8fbf001c 	lw	ra,28(sp)
8000a134:	8fbe0018 	lw	s8,24(sp)
8000a138:	27bd0020 	addiu	sp,sp,32
8000a13c:	03e00008 	jr	ra
8000a140:	00000000 	nop

8000a144 <xQueueRemoveFromSet>:
xQueueRemoveFromSet():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2442
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	BaseType_t xQueueRemoveFromSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )
	{
8000a144:	27bdffe0 	addiu	sp,sp,-32
8000a148:	afbf001c 	sw	ra,28(sp)
8000a14c:	afbe0018 	sw	s8,24(sp)
8000a150:	03a0f025 	move	s8,sp
8000a154:	afc40020 	sw	a0,32(s8)
8000a158:	afc50024 	sw	a1,36(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2444
	BaseType_t xReturn;
	Queue_t * const pxQueueOrSemaphore = ( Queue_t * ) xQueueOrSemaphore;
8000a15c:	8fc20020 	lw	v0,32(s8)
8000a160:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2446

		if( pxQueueOrSemaphore->pxQueueSetContainer != xQueueSet )
8000a164:	8fc20014 	lw	v0,20(s8)
8000a168:	8c430048 	lw	v1,72(v0)
8000a16c:	8fc20024 	lw	v0,36(s8)
8000a170:	10620004 	beq	v1,v0,8000a184 <xQueueRemoveFromSet+0x40>
8000a174:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2449
		{
			/* The queue was not a member of the set. */
			xReturn = pdFAIL;
8000a178:	afc00010 	sw	zero,16(s8)
8000a17c:	10000010 	b	8000a1c0 <xQueueRemoveFromSet+0x7c>
8000a180:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2451
		}
		else if( pxQueueOrSemaphore->uxMessagesWaiting != ( UBaseType_t ) 0 )
8000a184:	8fc20014 	lw	v0,20(s8)
8000a188:	8c420038 	lw	v0,56(v0)
8000a18c:	10400004 	beqz	v0,8000a1a0 <xQueueRemoveFromSet+0x5c>
8000a190:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2456
		{
			/* It is dangerous to remove a queue from a set when the queue is
			not empty because the queue set will still hold pending events for
			the queue. */
			xReturn = pdFAIL;
8000a194:	afc00010 	sw	zero,16(s8)
8000a198:	10000009 	b	8000a1c0 <xQueueRemoveFromSet+0x7c>
8000a19c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2460
		}
		else
		{
			taskENTER_CRITICAL();
8000a1a0:	0c001dae 	jal	800076b8 <vTaskEnterCritical>
8000a1a4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2463
			{
				/* The queue is no longer contained in the set. */
				pxQueueOrSemaphore->pxQueueSetContainer = NULL;
8000a1a8:	8fc20014 	lw	v0,20(s8)
8000a1ac:	ac400048 	sw	zero,72(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2465
			}
			taskEXIT_CRITICAL();
8000a1b0:	0c001de3 	jal	8000778c <vTaskExitCritical>
8000a1b4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2466
			xReturn = pdPASS;
8000a1b8:	24020001 	li	v0,1
8000a1bc:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2469
		}

		return xReturn;
8000a1c0:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2470
	} /*lint !e818 xQueueSet could not be declared as pointing to const as it is a typedef. */
8000a1c4:	03c0e825 	move	sp,s8
8000a1c8:	8fbf001c 	lw	ra,28(sp)
8000a1cc:	8fbe0018 	lw	s8,24(sp)
8000a1d0:	27bd0020 	addiu	sp,sp,32
8000a1d4:	03e00008 	jr	ra
8000a1d8:	00000000 	nop

8000a1dc <xQueueSelectFromSet>:
xQueueSelectFromSet():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2478
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet, TickType_t const xTicksToWait )
	{
8000a1dc:	27bdffe0 	addiu	sp,sp,-32
8000a1e0:	afbf001c 	sw	ra,28(sp)
8000a1e4:	afbe0018 	sw	s8,24(sp)
8000a1e8:	03a0f025 	move	s8,sp
8000a1ec:	afc40020 	sw	a0,32(s8)
8000a1f0:	afc50024 	sw	a1,36(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2479
	QueueSetMemberHandle_t xReturn = NULL;
8000a1f4:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2481

		( void ) xQueueGenericReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait, pdFALSE ); /*lint !e961 Casting from one typedef to another is not redundant. */
8000a1f8:	8fc40020 	lw	a0,32(s8)
8000a1fc:	27c20010 	addiu	v0,s8,16
8000a200:	00402825 	move	a1,v0
8000a204:	8fc60024 	lw	a2,36(s8)
8000a208:	00003825 	move	a3,zero
8000a20c:	0c002461 	jal	80009184 <xQueueGenericReceive>
8000a210:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2482
		return xReturn;
8000a214:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2483
	}
8000a218:	03c0e825 	move	sp,s8
8000a21c:	8fbf001c 	lw	ra,28(sp)
8000a220:	8fbe0018 	lw	s8,24(sp)
8000a224:	27bd0020 	addiu	sp,sp,32
8000a228:	03e00008 	jr	ra
8000a22c:	00000000 	nop

8000a230 <xQueueSelectFromSetFromISR>:
xQueueSelectFromSetFromISR():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2491
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	QueueSetMemberHandle_t xQueueSelectFromSetFromISR( QueueSetHandle_t xQueueSet )
	{
8000a230:	27bdffe0 	addiu	sp,sp,-32
8000a234:	afbf001c 	sw	ra,28(sp)
8000a238:	afbe0018 	sw	s8,24(sp)
8000a23c:	03a0f025 	move	s8,sp
8000a240:	afc40020 	sw	a0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2492
	QueueSetMemberHandle_t xReturn = NULL;
8000a244:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2494

		( void ) xQueueReceiveFromISR( ( QueueHandle_t ) xQueueSet, &xReturn, NULL ); /*lint !e961 Casting from one typedef to another is not redundant. */
8000a248:	8fc40020 	lw	a0,32(s8)
8000a24c:	27c20010 	addiu	v0,s8,16
8000a250:	00402825 	move	a1,v0
8000a254:	00003025 	move	a2,zero
8000a258:	0c002564 	jal	80009590 <xQueueReceiveFromISR>
8000a25c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2495
		return xReturn;
8000a260:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2496
	}
8000a264:	03c0e825 	move	sp,s8
8000a268:	8fbf001c 	lw	ra,28(sp)
8000a26c:	8fbe0018 	lw	s8,24(sp)
8000a270:	27bd0020 	addiu	sp,sp,32
8000a274:	03e00008 	jr	ra
8000a278:	00000000 	nop

8000a27c <prvNotifyQueueSetContainer>:
prvNotifyQueueSetContainer():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2504
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
8000a27c:	27bdffd8 	addiu	sp,sp,-40
8000a280:	afbf0024 	sw	ra,36(sp)
8000a284:	afbe0020 	sw	s8,32(sp)
8000a288:	03a0f025 	move	s8,sp
8000a28c:	afc40028 	sw	a0,40(s8)
8000a290:	afc5002c 	sw	a1,44(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2505
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
8000a294:	8fc20028 	lw	v0,40(s8)
8000a298:	8c420048 	lw	v0,72(v0)
8000a29c:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2506
	BaseType_t xReturn = pdFALSE;
8000a2a0:	afc00010 	sw	zero,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2510

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
8000a2a4:	8fc20014 	lw	v0,20(s8)
8000a2a8:	14400006 	bnez	v0,8000a2c4 <prvNotifyQueueSetContainer+0x48>
8000a2ac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2510 (discriminator 1)
8000a2b0:	3c028001 	lui	v0,0x8001
8000a2b4:	2444bd90 	addiu	a0,v0,-17008
8000a2b8:	240509ce 	li	a1,2510
8000a2bc:	0c000417 	jal	8000105c <vAssertCalled>
8000a2c0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2511
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
8000a2c4:	8fc20014 	lw	v0,20(s8)
8000a2c8:	8c430038 	lw	v1,56(v0)
8000a2cc:	8fc20014 	lw	v0,20(s8)
8000a2d0:	8c42003c 	lw	v0,60(v0)
8000a2d4:	0062102b 	sltu	v0,v1,v0
8000a2d8:	14400006 	bnez	v0,8000a2f4 <prvNotifyQueueSetContainer+0x78>
8000a2dc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2511 (discriminator 1)
8000a2e0:	3c028001 	lui	v0,0x8001
8000a2e4:	2444bd90 	addiu	a0,v0,-17008
8000a2e8:	240509cf 	li	a1,2511
8000a2ec:	0c000417 	jal	8000105c <vAssertCalled>
8000a2f0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2513

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
8000a2f4:	8fc20014 	lw	v0,20(s8)
8000a2f8:	8c430038 	lw	v1,56(v0)
8000a2fc:	8fc20014 	lw	v0,20(s8)
8000a300:	8c42003c 	lw	v0,60(v0)
8000a304:	0062102b 	sltu	v0,v1,v0
8000a308:	10400025 	beqz	v0,8000a3a0 <prvNotifyQueueSetContainer+0x124>
8000a30c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2515
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
8000a310:	8fc20014 	lw	v0,20(s8)
8000a314:	90420045 	lbu	v0,69(v0)
8000a318:	a3c20018 	sb	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2520

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
8000a31c:	8fc40014 	lw	a0,20(s8)
8000a320:	27c50028 	addiu	a1,s8,40
8000a324:	8fc6002c 	lw	a2,44(s8)
8000a328:	0c00267c 	jal	800099f0 <prvCopyDataToQueue>
8000a32c:	00000000 	nop
8000a330:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2522

			if( cTxLock == queueUNLOCKED )
8000a334:	83c30018 	lb	v1,24(s8)
8000a338:	2402ffff 	li	v0,-1
8000a33c:	14620010 	bne	v1,v0,8000a380 <prvNotifyQueueSetContainer+0x104>
8000a340:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2524
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
8000a344:	8fc20014 	lw	v0,20(s8)
8000a348:	8c420024 	lw	v0,36(v0)
8000a34c:	10400014 	beqz	v0,8000a3a0 <prvNotifyQueueSetContainer+0x124>
8000a350:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2526
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
8000a354:	8fc20014 	lw	v0,20(s8)
8000a358:	24420024 	addiu	v0,v0,36
8000a35c:	00402025 	move	a0,v0
8000a360:	0c001aaa 	jal	80006aa8 <xTaskRemoveFromEventList>
8000a364:	00000000 	nop
8000a368:	1040000d 	beqz	v0,8000a3a0 <prvNotifyQueueSetContainer+0x124>
8000a36c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2529
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
8000a370:	24020001 	li	v0,1
8000a374:	afc20010 	sw	v0,16(s8)
8000a378:	10000009 	b	8000a3a0 <prvNotifyQueueSetContainer+0x124>
8000a37c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2543
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
8000a380:	93c20018 	lbu	v0,24(s8)
8000a384:	24420001 	addiu	v0,v0,1
8000a388:	304200ff 	andi	v0,v0,0xff
8000a38c:	7c021c20 	seb	v1,v0
8000a390:	8fc20014 	lw	v0,20(s8)
8000a394:	a0430045 	sb	v1,69(v0)
8000a398:	10000001 	b	8000a3a0 <prvNotifyQueueSetContainer+0x124>
8000a39c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2551
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
8000a3a0:	8fc20010 	lw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/queue.c:2552
	}
8000a3a4:	03c0e825 	move	sp,s8
8000a3a8:	8fbf0024 	lw	ra,36(sp)
8000a3ac:	8fbe0020 	lw	s8,32(sp)
8000a3b0:	27bd0028 	addiu	sp,sp,40
8000a3b4:	03e00008 	jr	ra
8000a3b8:	00000000 	nop

8000a3bc <vListInitialise>:
vListInitialise():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:80
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
8000a3bc:	27bdfff8 	addiu	sp,sp,-8
8000a3c0:	afbe0004 	sw	s8,4(sp)
8000a3c4:	03a0f025 	move	s8,sp
8000a3c8:	afc40008 	sw	a0,8(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:84
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
8000a3cc:	8fc20008 	lw	v0,8(s8)
8000a3d0:	24430008 	addiu	v1,v0,8
8000a3d4:	8fc20008 	lw	v0,8(s8)
8000a3d8:	ac430004 	sw	v1,4(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:88

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
8000a3dc:	8fc20008 	lw	v0,8(s8)
8000a3e0:	2403ffff 	li	v1,-1
8000a3e4:	ac430008 	sw	v1,8(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:92

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
8000a3e8:	8fc20008 	lw	v0,8(s8)
8000a3ec:	24430008 	addiu	v1,v0,8
8000a3f0:	8fc20008 	lw	v0,8(s8)
8000a3f4:	ac43000c 	sw	v1,12(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:93
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
8000a3f8:	8fc20008 	lw	v0,8(s8)
8000a3fc:	24430008 	addiu	v1,v0,8
8000a400:	8fc20008 	lw	v0,8(s8)
8000a404:	ac430010 	sw	v1,16(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:95

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
8000a408:	8fc20008 	lw	v0,8(s8)
8000a40c:	ac400000 	sw	zero,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:101

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
8000a410:	03c0e825 	move	sp,s8
8000a414:	8fbe0004 	lw	s8,4(sp)
8000a418:	27bd0008 	addiu	sp,sp,8
8000a41c:	03e00008 	jr	ra
8000a420:	00000000 	nop

8000a424 <vListInitialiseItem>:
vListInitialiseItem():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:105
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
8000a424:	27bdfff8 	addiu	sp,sp,-8
8000a428:	afbe0004 	sw	s8,4(sp)
8000a42c:	03a0f025 	move	s8,sp
8000a430:	afc40008 	sw	a0,8(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:107
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
8000a434:	8fc20008 	lw	v0,8(s8)
8000a438:	ac400010 	sw	zero,16(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:113

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
8000a43c:	03c0e825 	move	sp,s8
8000a440:	8fbe0004 	lw	s8,4(sp)
8000a444:	27bd0008 	addiu	sp,sp,8
8000a448:	03e00008 	jr	ra
8000a44c:	00000000 	nop

8000a450 <vListInsertEnd>:
vListInsertEnd():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:117
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
8000a450:	27bdfff0 	addiu	sp,sp,-16
8000a454:	afbe000c 	sw	s8,12(sp)
8000a458:	03a0f025 	move	s8,sp
8000a45c:	afc40010 	sw	a0,16(s8)
8000a460:	afc50014 	sw	a1,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:118
ListItem_t * const pxIndex = pxList->pxIndex;
8000a464:	8fc20010 	lw	v0,16(s8)
8000a468:	8c420004 	lw	v0,4(v0)
8000a46c:	afc20000 	sw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:129
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
8000a470:	8fc20014 	lw	v0,20(s8)
8000a474:	8fc30000 	lw	v1,0(s8)
8000a478:	ac430004 	sw	v1,4(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:130
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
8000a47c:	8fc20000 	lw	v0,0(s8)
8000a480:	8c430008 	lw	v1,8(v0)
8000a484:	8fc20014 	lw	v0,20(s8)
8000a488:	ac430008 	sw	v1,8(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:135

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
8000a48c:	8fc20000 	lw	v0,0(s8)
8000a490:	8c420008 	lw	v0,8(v0)
8000a494:	8fc30014 	lw	v1,20(s8)
8000a498:	ac430004 	sw	v1,4(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:136
	pxIndex->pxPrevious = pxNewListItem;
8000a49c:	8fc20000 	lw	v0,0(s8)
8000a4a0:	8fc30014 	lw	v1,20(s8)
8000a4a4:	ac430008 	sw	v1,8(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:139

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
8000a4a8:	8fc20014 	lw	v0,20(s8)
8000a4ac:	8fc30010 	lw	v1,16(s8)
8000a4b0:	ac430010 	sw	v1,16(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:141

	( pxList->uxNumberOfItems )++;
8000a4b4:	8fc20010 	lw	v0,16(s8)
8000a4b8:	8c420000 	lw	v0,0(v0)
8000a4bc:	24430001 	addiu	v1,v0,1
8000a4c0:	8fc20010 	lw	v0,16(s8)
8000a4c4:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:142
}
8000a4c8:	03c0e825 	move	sp,s8
8000a4cc:	8fbe000c 	lw	s8,12(sp)
8000a4d0:	27bd0010 	addiu	sp,sp,16
8000a4d4:	03e00008 	jr	ra
8000a4d8:	00000000 	nop

8000a4dc <vListInsert>:
vListInsert():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:146
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
8000a4dc:	27bdfff0 	addiu	sp,sp,-16
8000a4e0:	afbe000c 	sw	s8,12(sp)
8000a4e4:	03a0f025 	move	s8,sp
8000a4e8:	afc40010 	sw	a0,16(s8)
8000a4ec:	afc50014 	sw	a1,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:148
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
8000a4f0:	8fc20014 	lw	v0,20(s8)
8000a4f4:	8c420000 	lw	v0,0(v0)
8000a4f8:	afc20004 	sw	v0,4(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:164
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
8000a4fc:	8fc30004 	lw	v1,4(s8)
8000a500:	2402ffff 	li	v0,-1
8000a504:	14620006 	bne	v1,v0,8000a520 <vListInsert+0x44>
8000a508:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:166
	{
		pxIterator = pxList->xListEnd.pxPrevious;
8000a50c:	8fc20010 	lw	v0,16(s8)
8000a510:	8c420010 	lw	v0,16(v0)
8000a514:	afc20000 	sw	v0,0(s8)
8000a518:	10000010 	b	8000a55c <vListInsert+0x80>
8000a51c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:192
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
8000a520:	8fc20010 	lw	v0,16(s8)
8000a524:	24420008 	addiu	v0,v0,8
8000a528:	afc20000 	sw	v0,0(s8)
8000a52c:	10000004 	b	8000a540 <vListInsert+0x64>
8000a530:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:192 (discriminator 3)
8000a534:	8fc20000 	lw	v0,0(s8)
8000a538:	8c420004 	lw	v0,4(v0)
8000a53c:	afc20000 	sw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:192 (discriminator 1)
8000a540:	8fc20000 	lw	v0,0(s8)
8000a544:	8c420004 	lw	v0,4(v0)
8000a548:	8c430000 	lw	v1,0(v0)
8000a54c:	8fc20004 	lw	v0,4(s8)
8000a550:	0043102b 	sltu	v0,v0,v1
8000a554:	1040fff7 	beqz	v0,8000a534 <vListInsert+0x58>
8000a558:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:199
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
8000a55c:	8fc20000 	lw	v0,0(s8)
8000a560:	8c430004 	lw	v1,4(v0)
8000a564:	8fc20014 	lw	v0,20(s8)
8000a568:	ac430004 	sw	v1,4(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:200
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
8000a56c:	8fc20014 	lw	v0,20(s8)
8000a570:	8c420004 	lw	v0,4(v0)
8000a574:	8fc30014 	lw	v1,20(s8)
8000a578:	ac430008 	sw	v1,8(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:201
	pxNewListItem->pxPrevious = pxIterator;
8000a57c:	8fc20014 	lw	v0,20(s8)
8000a580:	8fc30000 	lw	v1,0(s8)
8000a584:	ac430008 	sw	v1,8(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:202
	pxIterator->pxNext = pxNewListItem;
8000a588:	8fc20000 	lw	v0,0(s8)
8000a58c:	8fc30014 	lw	v1,20(s8)
8000a590:	ac430004 	sw	v1,4(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:206

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
8000a594:	8fc20014 	lw	v0,20(s8)
8000a598:	8fc30010 	lw	v1,16(s8)
8000a59c:	ac430010 	sw	v1,16(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:208

	( pxList->uxNumberOfItems )++;
8000a5a0:	8fc20010 	lw	v0,16(s8)
8000a5a4:	8c420000 	lw	v0,0(v0)
8000a5a8:	24430001 	addiu	v1,v0,1
8000a5ac:	8fc20010 	lw	v0,16(s8)
8000a5b0:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:209
}
8000a5b4:	03c0e825 	move	sp,s8
8000a5b8:	8fbe000c 	lw	s8,12(sp)
8000a5bc:	27bd0010 	addiu	sp,sp,16
8000a5c0:	03e00008 	jr	ra
8000a5c4:	00000000 	nop

8000a5c8 <uxListRemove>:
uxListRemove():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:213
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
8000a5c8:	27bdfff0 	addiu	sp,sp,-16
8000a5cc:	afbe000c 	sw	s8,12(sp)
8000a5d0:	03a0f025 	move	s8,sp
8000a5d4:	afc40010 	sw	a0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:216
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
8000a5d8:	8fc20010 	lw	v0,16(s8)
8000a5dc:	8c420010 	lw	v0,16(v0)
8000a5e0:	afc20000 	sw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:218

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
8000a5e4:	8fc20010 	lw	v0,16(s8)
8000a5e8:	8c420004 	lw	v0,4(v0)
8000a5ec:	8fc30010 	lw	v1,16(s8)
8000a5f0:	8c630008 	lw	v1,8(v1)
8000a5f4:	ac430008 	sw	v1,8(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:219
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
8000a5f8:	8fc20010 	lw	v0,16(s8)
8000a5fc:	8c420008 	lw	v0,8(v0)
8000a600:	8fc30010 	lw	v1,16(s8)
8000a604:	8c630004 	lw	v1,4(v1)
8000a608:	ac430004 	sw	v1,4(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:225

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
8000a60c:	8fc20000 	lw	v0,0(s8)
8000a610:	8c430004 	lw	v1,4(v0)
8000a614:	8fc20010 	lw	v0,16(s8)
8000a618:	14620005 	bne	v1,v0,8000a630 <uxListRemove+0x68>
8000a61c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:227
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
8000a620:	8fc20010 	lw	v0,16(s8)
8000a624:	8c430008 	lw	v1,8(v0)
8000a628:	8fc20000 	lw	v0,0(s8)
8000a62c:	ac430004 	sw	v1,4(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:234
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
8000a630:	8fc20010 	lw	v0,16(s8)
8000a634:	ac400010 	sw	zero,16(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:235
	( pxList->uxNumberOfItems )--;
8000a638:	8fc20000 	lw	v0,0(s8)
8000a63c:	8c420000 	lw	v0,0(v0)
8000a640:	2443ffff 	addiu	v1,v0,-1
8000a644:	8fc20000 	lw	v0,0(s8)
8000a648:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:237

	return pxList->uxNumberOfItems;
8000a64c:	8fc20000 	lw	v0,0(s8)
8000a650:	8c420000 	lw	v0,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/list.c:238
}
8000a654:	03c0e825 	move	sp,s8
8000a658:	8fbe000c 	lw	s8,12(sp)
8000a65c:	27bd0010 	addiu	sp,sp,16
8000a660:	03e00008 	jr	ra
8000a664:	00000000 	nop

8000a668 <configCLEAR_TICK_TIMER_INTERRUPT>:
configCLEAR_TICK_TIMER_INTERRUPT():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:161
//static inline int SetStatus(int set_val);
void enableInterrupts(void);
void enableTimerInt(void);

void configCLEAR_TICK_TIMER_INTERRUPT()
{
8000a668:	27bdfff8 	addiu	sp,sp,-8
8000a66c:	afbe0004 	sw	s8,4(sp)
8000a670:	afb00000 	sw	s0,0(sp)
8000a674:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:162
    mips_setcount(0);
8000a678:	40804800 	mtc0	zero,c0_count
8000a67c:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:163
    mips_setcompare(TIMER_PERIOD);
8000a680:	34029c3f 	li	v0,0x9c3f
8000a684:	40825800 	mtc0	v0,c0_compare
8000a688:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:164
    mips_setsr(mips_getsr() & ~(1 << 1)); // clear exeption level bit (EXL) */
8000a68c:	40026000 	mfc0	v0,c0_status
8000a690:	00408025 	move	s0,v0
8000a694:	02001025 	move	v0,s0
8000a698:	7c020844 	ins	v0,zero,0x1,0x1
8000a69c:	40826000 	mtc0	v0,c0_status
8000a6a0:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:165
}
8000a6a4:	03c0e825 	move	sp,s8
8000a6a8:	8fbe0004 	lw	s8,4(sp)
8000a6ac:	8fb00000 	lw	s0,0(sp)
8000a6b0:	27bd0008 	addiu	sp,sp,8
8000a6b4:	03e00008 	jr	ra
8000a6b8:	00000000 	nop

8000a6bc <vPortIncrementTick>:
vPortIncrementTick():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:168

void vPortIncrementTick( void )
{
8000a6bc:	27bdffe0 	addiu	sp,sp,-32
8000a6c0:	afbf001c 	sw	ra,28(sp)
8000a6c4:	afbe0018 	sw	s8,24(sp)
8000a6c8:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:171
UBaseType_t uxSavedStatus;

	uxSavedStatus = uxPortSetInterruptMaskFromISR();
8000a6cc:	0c002a23 	jal	8000a88c <uxPortSetInterruptMaskFromISR>
8000a6d0:	00000000 	nop
8000a6d4:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:173
	{
		if( xTaskIncrementTick() != pdFALSE )
8000a6d8:	0c00193a 	jal	800064e8 <xTaskIncrementTick>
8000a6dc:	00000000 	nop
8000a6e0:	10400008 	beqz	v0,8000a704 <vPortIncrementTick+0x48>
8000a6e4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:176
		{
			/* Pend a context switch. */
			_CP0_BIS_CAUSE( portCORE_SW_0 );
8000a6e8:	40026800 	mfc0	v0,c0_cause
8000a6ec:	0040f825 	move	ra,v0
8000a6f0:	03e01025 	move	v0,ra
8000a6f4:	0040f825 	move	ra,v0
8000a6f8:	37e20100 	ori	v0,ra,0x100
8000a6fc:	40826800 	mtc0	v0,c0_cause
8000a700:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:179
		}
	}
	vPortClearInterruptMaskFromISR( uxSavedStatus );
8000a704:	8fc40010 	lw	a0,16(s8)
8000a708:	0c0029da 	jal	8000a768 <vPortClearInterruptMaskFromISR>
8000a70c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:182

	/* Look for the ISR stack getting near or past its limit. */
	portCHECK_ISR_STACK();
8000a710:	3c028001 	lui	v0,0x8001
8000a714:	2444c470 	addiu	a0,v0,-15248
8000a718:	3c028001 	lui	v0,0x8001
8000a71c:	2445bda8 	addiu	a1,v0,-16984
8000a720:	24060014 	li	a2,20
8000a724:	0c002c08 	jal	8000b020 <memcmp>
8000a728:	00000000 	nop
8000a72c:	10400006 	beqz	v0,8000a748 <vPortIncrementTick+0x8c>
8000a730:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:182 (discriminator 1)
8000a734:	3c028001 	lui	v0,0x8001
8000a738:	2444bdbc 	addiu	a0,v0,-16964
8000a73c:	240500b6 	li	a1,182
8000a740:	0c000417 	jal	8000105c <vAssertCalled>
8000a744:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:185

	/* Clear timer interrupt. */
	configCLEAR_TICK_TIMER_INTERRUPT();
8000a748:	0c00299a 	jal	8000a668 <configCLEAR_TICK_TIMER_INTERRUPT>
8000a74c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:186
}
8000a750:	03c0e825 	move	sp,s8
8000a754:	8fbf001c 	lw	ra,28(sp)
8000a758:	8fbe0018 	lw	s8,24(sp)
8000a75c:	27bd0020 	addiu	sp,sp,32
8000a760:	03e00008 	jr	ra
8000a764:	00000000 	nop

8000a768 <vPortClearInterruptMaskFromISR>:
vPortClearInterruptMaskFromISR():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:189

void vPortClearInterruptMaskFromISR( UBaseType_t uxSavedStatusRegister )
{
8000a768:	27bdfff8 	addiu	sp,sp,-8
8000a76c:	afbe0004 	sw	s8,4(sp)
8000a770:	03a0f025 	move	s8,sp
8000a774:	afc40008 	sw	a0,8(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:190
	_CP0_SET_STATUS( uxSavedStatusRegister );
8000a778:	8fc20008 	lw	v0,8(s8)
8000a77c:	40826000 	mtc0	v0,c0_status
8000a780:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:191
}
8000a784:	03c0e825 	move	sp,s8
8000a788:	8fbe0004 	lw	s8,4(sp)
8000a78c:	27bd0008 	addiu	sp,sp,8
8000a790:	03e00008 	jr	ra
8000a794:	00000000 	nop

8000a798 <vPortEndScheduler>:
vPortEndScheduler():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:194

void vPortEndScheduler(void)
{
8000a798:	27bdffe8 	addiu	sp,sp,-24
8000a79c:	afbf0014 	sw	ra,20(sp)
8000a7a0:	afbe0010 	sw	s8,16(sp)
8000a7a4:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:197
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxInterruptNesting == 1000UL );
8000a7a8:	8f83801b 	lw	v1,-32741(gp)
8000a7ac:	240203e8 	li	v0,1000
8000a7b0:	10620006 	beq	v1,v0,8000a7cc <vPortEndScheduler+0x34>
8000a7b4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:197 (discriminator 1)
8000a7b8:	3c028001 	lui	v0,0x8001
8000a7bc:	2444bdbc 	addiu	a0,v0,-16964
8000a7c0:	240500c5 	li	a1,197
8000a7c4:	0c000417 	jal	8000105c <vAssertCalled>
8000a7c8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:198
}
8000a7cc:	03c0e825 	move	sp,s8
8000a7d0:	8fbf0014 	lw	ra,20(sp)
8000a7d4:	8fbe0010 	lw	s8,16(sp)
8000a7d8:	27bd0018 	addiu	sp,sp,24
8000a7dc:	03e00008 	jr	ra
8000a7e0:	00000000 	nop

8000a7e4 <vApplicationSetupTickTimerInterrupt>:
vApplicationSetupTickTimerInterrupt():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:204

extern void vPortTickInterruptHandler( void );

//__attribute__(( weak )) void vApplicationSetupTickTimerInterrupt( void )
void vApplicationSetupTickTimerInterrupt( void )
{
8000a7e4:	27bdffe8 	addiu	sp,sp,-24
8000a7e8:	afbf0014 	sw	ra,20(sp)
8000a7ec:	afbe0010 	sw	s8,16(sp)
8000a7f0:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:205
    configCLEAR_TICK_TIMER_INTERRUPT();
8000a7f4:	0c00299a 	jal	8000a668 <configCLEAR_TICK_TIMER_INTERRUPT>
8000a7f8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:206
}
8000a7fc:	03c0e825 	move	sp,s8
8000a800:	8fbf0014 	lw	ra,20(sp)
8000a804:	8fbe0010 	lw	s8,16(sp)
8000a808:	27bd0018 	addiu	sp,sp,24
8000a80c:	03e00008 	jr	ra
8000a810:	00000000 	nop

8000a814 <xPortStartScheduler>:
xPortStartScheduler():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:213

#define portIE_FLAG 0
#define portS0_IM_FLAG 8

BaseType_t xPortStartScheduler( void )
{
8000a814:	27bdffe8 	addiu	sp,sp,-24
8000a818:	afbf0014 	sw	ra,20(sp)
8000a81c:	afbe0010 	sw	s8,16(sp)
8000a820:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:220
    extern void *pxCurrentTCB;

	#if ( configCHECK_FOR_STACK_OVERFLOW > 2 )
	{
		/* Fill the ISR stack to make it easy to asses how much is being used. */
		memset( ( void * ) xISRStack, portISR_STACK_FILL_BYTE, sizeof( xISRStack ) );
8000a824:	3c028001 	lui	v0,0x8001
8000a828:	2444c470 	addiu	a0,v0,-15248
8000a82c:	240500ee 	li	a1,238
8000a830:	24060640 	li	a2,1600
8000a834:	0c002cfd 	jal	8000b3f4 <memset>
8000a838:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:231
    // Enable MIPSfpga software int
    //*(volatile int*)0xbf800000 = 0x1f;
    //_CP0_SET_STATUS(_CP0_GET_STATUS() & (1 << portS0_IM_FLAG) & (1 << portIE_FLAG));
    //_CP0_SET_STATUS(_CP0_GET_STATUS() & (1 << 10 ) );
    //
    enableInterrupts();
8000a83c:	0c002ace 	jal	8000ab38 <enableInterrupts>
8000a840:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:232
    enableTimerInt();
8000a844:	0c002adf 	jal	8000ab7c <enableTimerInt>
8000a848:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:235
	/* Setup the timer to generate the tick.  Interrupts will have been
	disabled by the time we get here. */
	vApplicationSetupTickTimerInterrupt();
8000a84c:	0c0029f9 	jal	8000a7e4 <vApplicationSetupTickTimerInterrupt>
8000a850:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:240

	/* Kick off the highest priority task that has been created so far.
	Its stack location is loaded into uxSavedTaskStackPointer. */

	uxSavedTaskStackPointer = *( UBaseType_t * ) pxCurrentTCB;
8000a854:	8f8280af 	lw	v0,-32593(gp)
8000a858:	8c420000 	lw	v0,0(v0)
8000a85c:	af8280eb 	sw	v0,-32533(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:241
	vPortStartFirstTask();
8000a860:	0c0001f7 	jal	800007dc <vPortStartFirstTask>
8000a864:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:247

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
8000a868:	0c002a83 	jal	8000aa0c <prvTaskExitError>
8000a86c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:249

	return pdFALSE;
8000a870:	00001025 	move	v0,zero
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:251

}
8000a874:	03c0e825 	move	sp,s8
8000a878:	8fbf0014 	lw	ra,20(sp)
8000a87c:	8fbe0010 	lw	s8,16(sp)
8000a880:	27bd0018 	addiu	sp,sp,24
8000a884:	03e00008 	jr	ra
8000a888:	00000000 	nop

8000a88c <uxPortSetInterruptMaskFromISR>:
uxPortSetInterruptMaskFromISR():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:257
/*-----------------------------------------------------------*/



UBaseType_t uxPortSetInterruptMaskFromISR( void )
{
8000a88c:	27bdfff0 	addiu	sp,sp,-16
8000a890:	afbe000c 	sw	s8,12(sp)
8000a894:	afb00008 	sw	s0,8(sp)
8000a898:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:260
UBaseType_t uxSavedStatusRegister;

	__asm__ volatile ("di"); /* disable interrupts */
8000a89c:	41606000 	di
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:262

	uxSavedStatusRegister = _CP0_GET_STATUS() | 0x01;
8000a8a0:	40026000 	mfc0	v0,c0_status
8000a8a4:	00408025 	move	s0,v0
8000a8a8:	02001025 	move	v0,s0
8000a8ac:	34420001 	ori	v0,v0,0x1
8000a8b0:	afc20000 	sw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:269
	configMAX_SYSCALL_INTERRUPT_PRIORITY.  This function should not be called
	from an interrupt that has a priority above
	configMAX_SYSCALL_INTERRUPT_PRIORITY so, when used correctly, the action
	can only result in the IPL being unchanged or raised, and therefore never
	lowered. */
	_CP0_SET_STATUS( ( ( uxSavedStatusRegister & ( ~portALL_IPL_BITS ) ) ) | ( configMAX_SYSCALL_INTERRUPT_PRIORITY << portIPL_SHIFT ) );
8000a8b4:	8fc20000 	lw	v0,0(s8)
8000a8b8:	7c028284 	ins	v0,zero,0xa,0x7
8000a8bc:	34420c00 	ori	v0,v0,0xc00
8000a8c0:	40826000 	mtc0	v0,c0_status
8000a8c4:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:271

	return uxSavedStatusRegister;
8000a8c8:	8fc20000 	lw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:272
}
8000a8cc:	03c0e825 	move	sp,s8
8000a8d0:	8fbe000c 	lw	s8,12(sp)
8000a8d4:	8fb00008 	lw	s0,8(sp)
8000a8d8:	27bd0010 	addiu	sp,sp,16
8000a8dc:	03e00008 	jr	ra
8000a8e0:	00000000 	nop

8000a8e4 <pxPortInitialiseStack>:
pxPortInitialiseStack():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:275

StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
8000a8e4:	27bdfff8 	addiu	sp,sp,-8
8000a8e8:	afbe0004 	sw	s8,4(sp)
8000a8ec:	afb00000 	sw	s0,0(sp)
8000a8f0:	03a0f025 	move	s8,sp
8000a8f4:	afc40008 	sw	a0,8(s8)
8000a8f8:	afc5000c 	sw	a1,12(s8)
8000a8fc:	afc60010 	sw	a2,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:278

    	/* Ensure 8 byte alignment is maintained when leaving this function. */
	pxTopOfStack--;
8000a900:	8fc20008 	lw	v0,8(s8)
8000a904:	2442fffc 	addiu	v0,v0,-4
8000a908:	afc20008 	sw	v0,8(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:279
	pxTopOfStack--;
8000a90c:	8fc20008 	lw	v0,8(s8)
8000a910:	2442fffc 	addiu	v0,v0,-4
8000a914:	afc20008 	sw	v0,8(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:281

	*pxTopOfStack = (StackType_t) 0xDEADBEEF;
8000a918:	8fc20008 	lw	v0,8(s8)
8000a91c:	3c03dead 	lui	v1,0xdead
8000a920:	3463beef 	ori	v1,v1,0xbeef
8000a924:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:282
	pxTopOfStack--;
8000a928:	8fc20008 	lw	v0,8(s8)
8000a92c:	2442fffc 	addiu	v0,v0,-4
8000a930:	afc20008 	sw	v0,8(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:284

	*pxTopOfStack = (StackType_t) 0x12345678;	/* Word to which the stack pointer will be left pointing after context restore. */
8000a934:	8fc20008 	lw	v0,8(s8)
8000a938:	3c031234 	lui	v1,0x1234
8000a93c:	34635678 	ori	v1,v1,0x5678
8000a940:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:285
	pxTopOfStack--;
8000a944:	8fc20008 	lw	v0,8(s8)
8000a948:	2442fffc 	addiu	v0,v0,-4
8000a94c:	afc20008 	sw	v0,8(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:287

	*pxTopOfStack = (StackType_t) _CP0_GET_CAUSE();
8000a950:	40026800 	mfc0	v0,c0_cause
8000a954:	00408025 	move	s0,v0
8000a958:	02001825 	move	v1,s0
8000a95c:	8fc20008 	lw	v0,8(s8)
8000a960:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:288
	pxTopOfStack--;
8000a964:	8fc20008 	lw	v0,8(s8)
8000a968:	2442fffc 	addiu	v0,v0,-4
8000a96c:	afc20008 	sw	v0,8(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:290

	*pxTopOfStack = (StackType_t) portINITIAL_SR;/* CP0_STATUS */
8000a970:	8fc20008 	lw	v0,8(s8)
8000a974:	24030401 	li	v1,1025
8000a978:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:291
	pxTopOfStack--;
8000a97c:	8fc20008 	lw	v0,8(s8)
8000a980:	2442fffc 	addiu	v0,v0,-4
8000a984:	afc20008 	sw	v0,8(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:293

	*pxTopOfStack = (StackType_t) pxCode; 		/* CP0_EPC */
8000a988:	8fc3000c 	lw	v1,12(s8)
8000a98c:	8fc20008 	lw	v0,8(s8)
8000a990:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:294
	pxTopOfStack--;
8000a994:	8fc20008 	lw	v0,8(s8)
8000a998:	2442fffc 	addiu	v0,v0,-4
8000a99c:	afc20008 	sw	v0,8(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:296

	*pxTopOfStack = (StackType_t) 0x00000000;	/* DSPControl */
8000a9a0:	8fc20008 	lw	v0,8(s8)
8000a9a4:	ac400000 	sw	zero,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:297
	pxTopOfStack -= 7;  						/* Includes space for AC1 - AC3. */ // Is it neccesary? We disable the DSP system!!!!
8000a9a8:	8fc20008 	lw	v0,8(s8)
8000a9ac:	2442ffe4 	addiu	v0,v0,-28
8000a9b0:	afc20008 	sw	v0,8(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:299

	*pxTopOfStack = (StackType_t) portTASK_RETURN_ADDRESS;	/* ra */
8000a9b4:	3c028001 	lui	v0,0x8001
8000a9b8:	2443aa0c 	addiu	v1,v0,-22004
8000a9bc:	8fc20008 	lw	v0,8(s8)
8000a9c0:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:300
	pxTopOfStack -= 15;
8000a9c4:	8fc20008 	lw	v0,8(s8)
8000a9c8:	2442ffc4 	addiu	v0,v0,-60
8000a9cc:	afc20008 	sw	v0,8(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:302

	*pxTopOfStack = (StackType_t) pvParameters; /* Parameters to pass in. */
8000a9d0:	8fc30010 	lw	v1,16(s8)
8000a9d4:	8fc20008 	lw	v0,8(s8)
8000a9d8:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:303
	pxTopOfStack -= 15;
8000a9dc:	8fc20008 	lw	v0,8(s8)
8000a9e0:	2442ffc4 	addiu	v0,v0,-60
8000a9e4:	afc20008 	sw	v0,8(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:305

	*pxTopOfStack = (StackType_t) pdFALSE; /*by default disable FPU context save on parts with FPU */
8000a9e8:	8fc20008 	lw	v0,8(s8)
8000a9ec:	ac400000 	sw	zero,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:307

	return pxTopOfStack;
8000a9f0:	8fc20008 	lw	v0,8(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:309

}
8000a9f4:	03c0e825 	move	sp,s8
8000a9f8:	8fbe0004 	lw	s8,4(sp)
8000a9fc:	8fb00000 	lw	s0,0(sp)
8000aa00:	27bd0008 	addiu	sp,sp,8
8000aa04:	03e00008 	jr	ra
8000aa08:	00000000 	nop

8000aa0c <prvTaskExitError>:
prvTaskExitError():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:312

static void prvTaskExitError( void )
{
8000aa0c:	27bdffe0 	addiu	sp,sp,-32
8000aa10:	afbf001c 	sw	ra,28(sp)
8000aa14:	afbe0018 	sw	s8,24(sp)
8000aa18:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:319
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxSavedTaskStackPointer == 0UL );
8000aa1c:	8f8280eb 	lw	v0,-32533(gp)
8000aa20:	10400006 	beqz	v0,8000aa3c <prvTaskExitError+0x30>
8000aa24:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:319 (discriminator 1)
8000aa28:	3c028001 	lui	v0,0x8001
8000aa2c:	2444bdbc 	addiu	a0,v0,-16964
8000aa30:	2405013f 	li	a1,319
8000aa34:	0c000417 	jal	8000105c <vAssertCalled>
8000aa38:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:320
	portDISABLE_INTERRUPTS();
8000aa3c:	40026000 	mfc0	v0,c0_status
8000aa40:	0040f825 	move	ra,v0
8000aa44:	03e01025 	move	v0,ra
8000aa48:	afc20010 	sw	v0,16(s8)
8000aa4c:	8fc30010 	lw	v1,16(s8)
8000aa50:	3c020001 	lui	v0,0x1
8000aa54:	3442fc00 	ori	v0,v0,0xfc00
8000aa58:	00621024 	and	v0,v1,v0
8000aa5c:	00021282 	srl	v0,v0,0xa
8000aa60:	2c420003 	sltiu	v0,v0,3
8000aa64:	10400008 	beqz	v0,8000aa88 <prvTaskExitError+0x7c>
8000aa68:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:320 (discriminator 1)
8000aa6c:	8fc20010 	lw	v0,16(s8)
8000aa70:	7c028284 	ins	v0,zero,0xa,0x7
8000aa74:	afc20010 	sw	v0,16(s8)
8000aa78:	8fc20010 	lw	v0,16(s8)
8000aa7c:	34420c00 	ori	v0,v0,0xc00
8000aa80:	40826000 	mtc0	v0,c0_status
8000aa84:	000000c0 	ehb
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:321 (discriminator 1)
	for( ;; );
8000aa88:	1000ffff 	b	8000aa88 <prvTaskExitError+0x7c>
8000aa8c:	00000000 	nop

8000aa90 <_mips_interrupt>:
_mips_interrupt():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:326
}


void _mips_interrupt(void* ctx, int reason)
{
8000aa90:	27bdfff8 	addiu	sp,sp,-8
8000aa94:	afbe0004 	sw	s8,4(sp)
8000aa98:	03a0f025 	move	s8,sp
8000aa9c:	afc40008 	sw	a0,8(s8)
8000aaa0:	afc5000c 	sw	a1,12(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:327
    *(int*)0xbf800000= 0xACDC;
8000aaa4:	3c02bf80 	lui	v0,0xbf80
8000aaa8:	3403acdc 	li	v1,0xacdc
8000aaac:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:328 (discriminator 1)
    while(1);
8000aab0:	1000ffff 	b	8000aab0 <_mips_interrupt+0x20>
8000aab4:	00000000 	nop

8000aab8 <_mips_handle_exception>:
_mips_handle_exception():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:334

    vPortIncrementTick();
}

void _mips_handle_exception(void* ctx, int reason)
{
8000aab8:	27bdfff8 	addiu	sp,sp,-8
8000aabc:	afbe0004 	sw	s8,4(sp)
8000aac0:	03a0f025 	move	s8,sp
8000aac4:	afc40008 	sw	a0,8(s8)
8000aac8:	afc5000c 	sw	a1,12(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:335
  *(int*)0xbf800000= 0xff01;
8000aacc:	3c02bf80 	lui	v0,0xbf80
8000aad0:	3403ff01 	li	v1,0xff01
8000aad4:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:336 (discriminator 1)
  while (1) ;
8000aad8:	1000ffff 	b	8000aad8 <_mips_handle_exception+0x20>
8000aadc:	00000000 	nop

8000aae0 <GetStatus>:
GetStatus():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:341

  vPortIncrementTick();
}
static inline int GetStatus(void)
{
8000aae0:	27bdfff0 	addiu	sp,sp,-16
8000aae4:	afbe000c 	sw	s8,12(sp)
8000aae8:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:344
  int ret_val;

  asm (
8000aaec:	40026000 	mfc0	v0,c0_status
8000aaf0:	afc20000 	sw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:349
    "mfc0 %0, $12"
    : "=r" (ret_val)
    );

    return ret_val;
8000aaf4:	8fc20000 	lw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:350
}
8000aaf8:	03c0e825 	move	sp,s8
8000aafc:	8fbe000c 	lw	s8,12(sp)
8000ab00:	27bd0010 	addiu	sp,sp,16
8000ab04:	03e00008 	jr	ra
8000ab08:	00000000 	nop

8000ab0c <SetStatus>:
SetStatus():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:353

static inline void SetStatus(int set_val)
{
8000ab0c:	27bdfff8 	addiu	sp,sp,-8
8000ab10:	afbe0004 	sw	s8,4(sp)
8000ab14:	03a0f025 	move	s8,sp
8000ab18:	afc40008 	sw	a0,8(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:355

  asm (
8000ab1c:	8fc20008 	lw	v0,8(s8)
8000ab20:	40826000 	mtc0	v0,c0_status
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:360
    "mtc0 %0, $12"
    :
    : "r" (set_val)
    );
}
8000ab24:	03c0e825 	move	sp,s8
8000ab28:	8fbe0004 	lw	s8,4(sp)
8000ab2c:	27bd0008 	addiu	sp,sp,8
8000ab30:	03e00008 	jr	ra
8000ab34:	00000000 	nop

8000ab38 <enableInterrupts>:
enableInterrupts():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:363

void enableInterrupts(void)
{
8000ab38:	27bdffe0 	addiu	sp,sp,-32
8000ab3c:	afbf001c 	sw	ra,28(sp)
8000ab40:	afbe0018 	sw	s8,24(sp)
8000ab44:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:366
    int status;

    status = GetStatus() | 1;
8000ab48:	0c002ab8 	jal	8000aae0 <GetStatus>
8000ab4c:	00000000 	nop
8000ab50:	34420001 	ori	v0,v0,0x1
8000ab54:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:367
    SetStatus(status);
8000ab58:	8fc40010 	lw	a0,16(s8)
8000ab5c:	0c002ac3 	jal	8000ab0c <SetStatus>
8000ab60:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:368
}
8000ab64:	03c0e825 	move	sp,s8
8000ab68:	8fbf001c 	lw	ra,28(sp)
8000ab6c:	8fbe0018 	lw	s8,24(sp)
8000ab70:	27bd0020 	addiu	sp,sp,32
8000ab74:	03e00008 	jr	ra
8000ab78:	00000000 	nop

8000ab7c <enableTimerInt>:
enableTimerInt():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:371

void enableTimerInt(void)
{
8000ab7c:	27bdffe0 	addiu	sp,sp,-32
8000ab80:	afbf001c 	sw	ra,28(sp)
8000ab84:	afbe0018 	sw	s8,24(sp)
8000ab88:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:374
    int status;

    status = GetStatus() | (1 << 10);
8000ab8c:	0c002ab8 	jal	8000aae0 <GetStatus>
8000ab90:	00000000 	nop
8000ab94:	34420400 	ori	v0,v0,0x400
8000ab98:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:375
    SetStatus(status);
8000ab9c:	8fc40010 	lw	a0,16(s8)
8000aba0:	0c002ac3 	jal	8000ab0c <SetStatus>
8000aba4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/CodeScape/MIPSFpga/port.c:376
}
8000aba8:	03c0e825 	move	sp,s8
8000abac:	8fbf001c 	lw	ra,28(sp)
8000abb0:	8fbe0018 	lw	s8,24(sp)
8000abb4:	27bd0020 	addiu	sp,sp,32
8000abb8:	03e00008 	jr	ra
8000abbc:	00000000 	nop

8000abc0 <pvPortMalloc>:
pvPortMalloc():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:161
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
8000abc0:	27bdffd0 	addiu	sp,sp,-48
8000abc4:	afbf002c 	sw	ra,44(sp)
8000abc8:	afbe0028 	sw	s8,40(sp)
8000abcc:	03a0f025 	move	s8,sp
8000abd0:	afc40030 	sw	a0,48(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:164
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
8000abd4:	afc00018 	sw	zero,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:166

	vTaskSuspendAll();
8000abd8:	0c001876 	jal	800061d8 <vTaskSuspendAll>
8000abdc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:170
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
8000abe0:	8f828103 	lw	v0,-32509(gp)
8000abe4:	14400005 	bnez	v0,8000abfc <pvPortMalloc+0x3c>
8000abe8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:172
		{
			prvHeapInit();
8000abec:	0c002bc3 	jal	8000af0c <prvHeapInit>
8000abf0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:173
			xHeapHasBeenInitialised = pdTRUE;
8000abf4:	24020001 	li	v0,1
8000abf8:	af828103 	sw	v0,-32509(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:178
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
8000abfc:	8fc20030 	lw	v0,48(s8)
8000ac00:	1040000e 	beqz	v0,8000ac3c <pvPortMalloc+0x7c>
8000ac04:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:180
		{
			xWantedSize += heapSTRUCT_SIZE;
8000ac08:	24020008 	li	v0,8
8000ac0c:	00401825 	move	v1,v0
8000ac10:	8fc20030 	lw	v0,48(s8)
8000ac14:	00431021 	addu	v0,v0,v1
8000ac18:	afc20030 	sw	v0,48(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:183

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
8000ac1c:	8fc20030 	lw	v0,48(s8)
8000ac20:	30420007 	andi	v0,v0,0x7
8000ac24:	10400005 	beqz	v0,8000ac3c <pvPortMalloc+0x7c>
8000ac28:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:186
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
8000ac2c:	8fc20030 	lw	v0,48(s8)
8000ac30:	7c021004 	ins	v0,zero,0x0,0x3
8000ac34:	24420008 	addiu	v0,v0,8
8000ac38:	afc20030 	sw	v0,48(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:190
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
8000ac3c:	8fc20030 	lw	v0,48(s8)
8000ac40:	1040005b 	beqz	v0,8000adb0 <pvPortMalloc+0x1f0>
8000ac44:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:190 (discriminator 1)
8000ac48:	8fc30030 	lw	v1,48(s8)
8000ac4c:	3402ea58 	li	v0,0xea58
8000ac50:	0062102b 	sltu	v0,v1,v0
8000ac54:	10400056 	beqz	v0,8000adb0 <pvPortMalloc+0x1f0>
8000ac58:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:194
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
8000ac5c:	278280f3 	addiu	v0,gp,-32525
8000ac60:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:195
			pxBlock = xStart.pxNextFreeBlock;
8000ac64:	8f8280f3 	lw	v0,-32525(gp)
8000ac68:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:196
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
8000ac6c:	10000006 	b	8000ac88 <pvPortMalloc+0xc8>
8000ac70:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:198
			{
				pxPreviousBlock = pxBlock;
8000ac74:	8fc20010 	lw	v0,16(s8)
8000ac78:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:199
				pxBlock = pxBlock->pxNextFreeBlock;
8000ac7c:	8fc20010 	lw	v0,16(s8)
8000ac80:	8c420000 	lw	v0,0(v0)
8000ac84:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:196
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
8000ac88:	8fc20010 	lw	v0,16(s8)
8000ac8c:	8c430004 	lw	v1,4(v0)
8000ac90:	8fc20030 	lw	v0,48(s8)
8000ac94:	0062102b 	sltu	v0,v1,v0
8000ac98:	10400005 	beqz	v0,8000acb0 <pvPortMalloc+0xf0>
8000ac9c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:196 (discriminator 1)
8000aca0:	8fc20010 	lw	v0,16(s8)
8000aca4:	8c420000 	lw	v0,0(v0)
8000aca8:	1440fff2 	bnez	v0,8000ac74 <pvPortMalloc+0xb4>
8000acac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:203
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
8000acb0:	8fc30010 	lw	v1,16(s8)
8000acb4:	278280fb 	addiu	v0,gp,-32517
8000acb8:	1062003d 	beq	v1,v0,8000adb0 <pvPortMalloc+0x1f0>
8000acbc:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:207
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
8000acc0:	8fc20014 	lw	v0,20(s8)
8000acc4:	8c420000 	lw	v0,0(v0)
8000acc8:	24030008 	li	v1,8
8000accc:	00431021 	addu	v0,v0,v1
8000acd0:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:211

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
8000acd4:	8fc20010 	lw	v0,16(s8)
8000acd8:	8c430000 	lw	v1,0(v0)
8000acdc:	8fc20014 	lw	v0,20(s8)
8000ace0:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:214

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
8000ace4:	8fc20010 	lw	v0,16(s8)
8000ace8:	8c430004 	lw	v1,4(v0)
8000acec:	8fc20030 	lw	v0,48(s8)
8000acf0:	00621023 	subu	v0,v1,v0
8000acf4:	24030008 	li	v1,8
8000acf8:	00031840 	sll	v1,v1,0x1
8000acfc:	0062102b 	sltu	v0,v1,v0
8000ad00:	10400026 	beqz	v0,8000ad9c <pvPortMalloc+0x1dc>
8000ad04:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:219
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
8000ad08:	8fc30010 	lw	v1,16(s8)
8000ad0c:	8fc20030 	lw	v0,48(s8)
8000ad10:	00621021 	addu	v0,v1,v0
8000ad14:	afc20020 	sw	v0,32(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:223

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
8000ad18:	8fc20010 	lw	v0,16(s8)
8000ad1c:	8c430004 	lw	v1,4(v0)
8000ad20:	8fc20030 	lw	v0,48(s8)
8000ad24:	00621823 	subu	v1,v1,v0
8000ad28:	8fc20020 	lw	v0,32(s8)
8000ad2c:	ac430004 	sw	v1,4(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:224
					pxBlock->xBlockSize = xWantedSize;
8000ad30:	8fc20010 	lw	v0,16(s8)
8000ad34:	8fc30030 	lw	v1,48(s8)
8000ad38:	ac430004 	sw	v1,4(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:227

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
8000ad3c:	8fc20020 	lw	v0,32(s8)
8000ad40:	8c420004 	lw	v0,4(v0)
8000ad44:	afc20024 	sw	v0,36(s8)
8000ad48:	278280f3 	addiu	v0,gp,-32525
8000ad4c:	afc2001c 	sw	v0,28(s8)
8000ad50:	10000004 	b	8000ad64 <pvPortMalloc+0x1a4>
8000ad54:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:227 (discriminator 3)
8000ad58:	8fc2001c 	lw	v0,28(s8)
8000ad5c:	8c420000 	lw	v0,0(v0)
8000ad60:	afc2001c 	sw	v0,28(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:227 (discriminator 1)
8000ad64:	8fc2001c 	lw	v0,28(s8)
8000ad68:	8c420000 	lw	v0,0(v0)
8000ad6c:	8c430004 	lw	v1,4(v0)
8000ad70:	8fc20024 	lw	v0,36(s8)
8000ad74:	0062102b 	sltu	v0,v1,v0
8000ad78:	1440fff7 	bnez	v0,8000ad58 <pvPortMalloc+0x198>
8000ad7c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:227 (discriminator 4)
8000ad80:	8fc2001c 	lw	v0,28(s8)
8000ad84:	8c430000 	lw	v1,0(v0)
8000ad88:	8fc20020 	lw	v0,32(s8)
8000ad8c:	ac430000 	sw	v1,0(v0)
8000ad90:	8fc2001c 	lw	v0,28(s8)
8000ad94:	8fc30020 	lw	v1,32(s8)
8000ad98:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:230
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
8000ad9c:	8f838023 	lw	v1,-32733(gp)
8000ada0:	8fc20010 	lw	v0,16(s8)
8000ada4:	8c420004 	lw	v0,4(v0)
8000ada8:	00621023 	subu	v0,v1,v0
8000adac:	af828023 	sw	v0,-32733(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:236
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
8000adb0:	0c001881 	jal	80006204 <xTaskResumeAll>
8000adb4:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:240

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
8000adb8:	8fc20018 	lw	v0,24(s8)
8000adbc:	14400003 	bnez	v0,8000adcc <pvPortMalloc+0x20c>
8000adc0:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:243
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
8000adc4:	0c0003cb 	jal	80000f2c <vApplicationMallocFailedHook>
8000adc8:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:248
		}
	}
	#endif

	return pvReturn;
8000adcc:	8fc20018 	lw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:249
}
8000add0:	03c0e825 	move	sp,s8
8000add4:	8fbf002c 	lw	ra,44(sp)
8000add8:	8fbe0028 	lw	s8,40(sp)
8000addc:	27bd0030 	addiu	sp,sp,48
8000ade0:	03e00008 	jr	ra
8000ade4:	00000000 	nop

8000ade8 <vPortFree>:
vPortFree():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:253
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
8000ade8:	27bdffd8 	addiu	sp,sp,-40
8000adec:	afbf0024 	sw	ra,36(sp)
8000adf0:	afbe0020 	sw	s8,32(sp)
8000adf4:	03a0f025 	move	s8,sp
8000adf8:	afc40028 	sw	a0,40(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:254
uint8_t *puc = ( uint8_t * ) pv;
8000adfc:	8fc20028 	lw	v0,40(s8)
8000ae00:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:257
BlockLink_t *pxLink;

	if( pv != NULL )
8000ae04:	8fc20028 	lw	v0,40(s8)
8000ae08:	10400029 	beqz	v0,8000aeb0 <vPortFree+0xc8>
8000ae0c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:261
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
8000ae10:	24020008 	li	v0,8
8000ae14:	00021023 	negu	v0,v0
8000ae18:	8fc30014 	lw	v1,20(s8)
8000ae1c:	00621021 	addu	v0,v1,v0
8000ae20:	afc20014 	sw	v0,20(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:265

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
8000ae24:	8fc20014 	lw	v0,20(s8)
8000ae28:	afc20018 	sw	v0,24(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:267

		vTaskSuspendAll();
8000ae2c:	0c001876 	jal	800061d8 <vTaskSuspendAll>
8000ae30:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:270
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
8000ae34:	8fc20018 	lw	v0,24(s8)
8000ae38:	8c420004 	lw	v0,4(v0)
8000ae3c:	afc2001c 	sw	v0,28(s8)
8000ae40:	278280f3 	addiu	v0,gp,-32525
8000ae44:	afc20010 	sw	v0,16(s8)
8000ae48:	10000004 	b	8000ae5c <vPortFree+0x74>
8000ae4c:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:270 (discriminator 3)
8000ae50:	8fc20010 	lw	v0,16(s8)
8000ae54:	8c420000 	lw	v0,0(v0)
8000ae58:	afc20010 	sw	v0,16(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:270 (discriminator 1)
8000ae5c:	8fc20010 	lw	v0,16(s8)
8000ae60:	8c420000 	lw	v0,0(v0)
8000ae64:	8c430004 	lw	v1,4(v0)
8000ae68:	8fc2001c 	lw	v0,28(s8)
8000ae6c:	0062102b 	sltu	v0,v1,v0
8000ae70:	1440fff7 	bnez	v0,8000ae50 <vPortFree+0x68>
8000ae74:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:270 (discriminator 4)
8000ae78:	8fc20010 	lw	v0,16(s8)
8000ae7c:	8c430000 	lw	v1,0(v0)
8000ae80:	8fc20018 	lw	v0,24(s8)
8000ae84:	ac430000 	sw	v1,0(v0)
8000ae88:	8fc20010 	lw	v0,16(s8)
8000ae8c:	8fc30018 	lw	v1,24(s8)
8000ae90:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:271 (discriminator 4)
			xFreeBytesRemaining += pxLink->xBlockSize;
8000ae94:	8fc20018 	lw	v0,24(s8)
8000ae98:	8c430004 	lw	v1,4(v0)
8000ae9c:	8f828023 	lw	v0,-32733(gp)
8000aea0:	00621021 	addu	v0,v1,v0
8000aea4:	af828023 	sw	v0,-32733(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:274 (discriminator 4)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
8000aea8:	0c001881 	jal	80006204 <xTaskResumeAll>
8000aeac:	00000000 	nop
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:276
	}
}
8000aeb0:	03c0e825 	move	sp,s8
8000aeb4:	8fbf0024 	lw	ra,36(sp)
8000aeb8:	8fbe0020 	lw	s8,32(sp)
8000aebc:	27bd0028 	addiu	sp,sp,40
8000aec0:	03e00008 	jr	ra
8000aec4:	00000000 	nop

8000aec8 <xPortGetFreeHeapSize>:
xPortGetFreeHeapSize():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:280
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
8000aec8:	27bdfff8 	addiu	sp,sp,-8
8000aecc:	afbe0004 	sw	s8,4(sp)
8000aed0:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:281
	return xFreeBytesRemaining;
8000aed4:	8f828023 	lw	v0,-32733(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:282
}
8000aed8:	03c0e825 	move	sp,s8
8000aedc:	8fbe0004 	lw	s8,4(sp)
8000aee0:	27bd0008 	addiu	sp,sp,8
8000aee4:	03e00008 	jr	ra
8000aee8:	00000000 	nop

8000aeec <vPortInitialiseBlocks>:
vPortInitialiseBlocks():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:286
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
8000aeec:	27bdfff8 	addiu	sp,sp,-8
8000aef0:	afbe0004 	sw	s8,4(sp)
8000aef4:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:288
	/* This just exists to keep the linker quiet. */
}
8000aef8:	03c0e825 	move	sp,s8
8000aefc:	8fbe0004 	lw	s8,4(sp)
8000af00:	27bd0008 	addiu	sp,sp,8
8000af04:	03e00008 	jr	ra
8000af08:	00000000 	nop

8000af0c <prvHeapInit>:
prvHeapInit():
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:292
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
8000af0c:	27bdfff0 	addiu	sp,sp,-16
8000af10:	afbe000c 	sw	s8,12(sp)
8000af14:	03a0f025 	move	s8,sp
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:297
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
8000af18:	3c028001 	lui	v0,0x8001
8000af1c:	2442cab8 	addiu	v0,v0,-13640
8000af20:	7c021004 	ins	v0,zero,0x0,0x3
8000af24:	afc20000 	sw	v0,0(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:301

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
8000af28:	8fc20000 	lw	v0,0(s8)
8000af2c:	af8280f3 	sw	v0,-32525(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:302
	xStart.xBlockSize = ( size_t ) 0;
8000af30:	af8080f7 	sw	zero,-32521(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:305

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
8000af34:	3402ea58 	li	v0,0xea58
8000af38:	af8280ff 	sw	v0,-32513(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:306
	xEnd.pxNextFreeBlock = NULL;
8000af3c:	af8080fb 	sw	zero,-32517(gp)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:310

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
8000af40:	8fc20000 	lw	v0,0(s8)
8000af44:	afc20004 	sw	v0,4(s8)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:311
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
8000af48:	8fc20004 	lw	v0,4(s8)
8000af4c:	3403ea58 	li	v1,0xea58
8000af50:	ac430004 	sw	v1,4(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:312
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
8000af54:	8fc20004 	lw	v0,4(s8)
8000af58:	278380fb 	addiu	v1,gp,-32517
8000af5c:	ac430000 	sw	v1,0(v0)
/home/grihey/STUD/FreeRTOS_mips/Demo/MIPSfpga_CodeScape/../../Source/portable/MemMang/heap_2.c:313
}
8000af60:	03c0e825 	move	sp,s8
8000af64:	8fbe000c 	lw	s8,12(sp)
8000af68:	27bd0010 	addiu	sp,sp,16
8000af6c:	03e00008 	jr	ra
8000af70:	00000000 	nop

8000af74 <__do_global_ctors_aux>:
__do_global_ctors_aux():
8000af74:	27bdffe0 	addiu	sp,sp,-32
8000af78:	afb00014 	sw	s0,20(sp)
8000af7c:	3c108001 	lui	s0,0x8001
8000af80:	afb10018 	sw	s1,24(sp)
8000af84:	2411ffff 	li	s1,-1
8000af88:	2610bbfc 	addiu	s0,s0,-17412
8000af8c:	afbf001c 	sw	ra,28(sp)
8000af90:	8e020000 	lw	v0,0(s0)
8000af94:	10510005 	beq	v0,s1,8000afac <__do_global_ctors_aux+0x38>
8000af98:	8fbf001c 	lw	ra,28(sp)
8000af9c:	0040f809 	jalr	v0
8000afa0:	2610fffc 	addiu	s0,s0,-4
8000afa4:	1000fffb 	b	8000af94 <__do_global_ctors_aux+0x20>
8000afa8:	8e020000 	lw	v0,0(s0)
8000afac:	8fb10018 	lw	s1,24(sp)
8000afb0:	8fb00014 	lw	s0,20(sp)
8000afb4:	03e00008 	jr	ra
8000afb8:	27bd0020 	addiu	sp,sp,32

8000afbc <atexit>:
atexit():
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/atexit.c:64
8000afbc:	27bdffe8 	addiu	sp,sp,-24
8000afc0:	00802825 	move	a1,a0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/atexit.c:65
8000afc4:	00003025 	move	a2,zero
8000afc8:	00002025 	move	a0,zero
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/atexit.c:64
8000afcc:	afbf0014 	sw	ra,20(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/atexit.c:65
8000afd0:	0c002d48 	jal	8000b520 <__register_exitproc>
8000afd4:	00003825 	move	a3,zero
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/atexit.c:66
8000afd8:	8fbf0014 	lw	ra,20(sp)
8000afdc:	03e00008 	jr	ra
8000afe0:	27bd0018 	addiu	sp,sp,24

8000afe4 <exit>:
exit():
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/exit.c:60
8000afe4:	27bdffe8 	addiu	sp,sp,-24
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/exit.c:66
8000afe8:	00002825 	move	a1,zero
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/exit.c:60
8000afec:	afb00010 	sw	s0,16(sp)
8000aff0:	afbf0014 	sw	ra,20(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/exit.c:66
8000aff4:	0c002d8c 	jal	8000b630 <__call_exitprocs>
8000aff8:	00808025 	move	s0,a0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/exit.c:68
8000affc:	3c028001 	lui	v0,0x8001
8000b000:	8c44c254 	lw	a0,-15788(v0)
8000b004:	8c82003c 	lw	v0,60(a0)
8000b008:	10400003 	beqz	v0,8000b018 <exit+0x34>
8000b00c:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/exit.c:69
8000b010:	0040f809 	jalr	v0
8000b014:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/exit.c:70
8000b018:	0c000116 	jal	80000458 <_exit>
8000b01c:	02002025 	move	a0,s0

8000b020 <memcmp>:
memcmp():
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/string/memcmp.c:62
8000b020:	00001825 	move	v1,zero
8000b024:	1066000a 	beq	v1,a2,8000b050 <memcmp+0x30>
8000b028:	00000000 	nop
8000b02c:	00831021 	addu	v0,a0,v1
8000b030:	24630001 	addiu	v1,v1,1
8000b034:	00a33821 	addu	a3,a1,v1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/string/memcmp.c:64
8000b038:	90420000 	lbu	v0,0(v0)
8000b03c:	90e7ffff 	lbu	a3,-1(a3)
8000b040:	1047fff8 	beq	v0,a3,8000b024 <memcmp+0x4>
8000b044:	00471023 	subu	v0,v0,a3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/string/memcmp.c:66
8000b048:	03e00008 	jr	ra
8000b04c:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/string/memcmp.c:112
8000b050:	03e00008 	jr	ra
8000b054:	00001025 	move	v0,zero

8000b058 <memcpy>:
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:317
8000b058:	28ca0008 	slti	t2,a2,8
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:323
8000b05c:	1540005f 	bnez	t2,8000b1dc <memcpy+0x184>
8000b060:	00801025 	move	v0,a0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:333
8000b064:	00a4c026 	xor	t8,a1,a0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:334
8000b068:	33180003 	andi	t8,t8,0x3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:336
8000b06c:	17000064 	bnez	t8,8000b200 <memcpy+0x1a8>
8000b070:	00043823 	negu	a3,a0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:338
8000b074:	30e70003 	andi	a3,a3,0x3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:340
8000b078:	10e00005 	beqz	a3,8000b090 <memcpy+0x38>
8000b07c:	00c73023 	subu	a2,a2,a3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:342
8000b080:	98b80000 	lwr	t8,0(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:343
8000b084:	00a72821 	addu	a1,a1,a3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:344
8000b088:	b8980000 	swr	t8,0(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:345
8000b08c:	00872021 	addu	a0,a0,a3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:435
8000b090:	30d8003f 	andi	t8,a2,0x3f
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:437
8000b094:	10d80032 	beq	a2,t8,8000b160 <memcpy+0x108>
8000b098:	00d83823 	subu	a3,a2,t8
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:438
8000b09c:	00873821 	addu	a3,a0,a3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:447
8000b0a0:	00864021 	addu	t0,a0,a2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:448
8000b0a4:	2519fee0 	addiu	t9,t0,-288
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:450
8000b0a8:	cca40000 	pref	0x4,0(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:451
8000b0ac:	cca40020 	pref	0x4,32(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:452
8000b0b0:	cca40040 	pref	0x4,64(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:453
8000b0b4:	cca40060 	pref	0x4,96(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:477
8000b0b8:	8ca80000 	lw	t0,0(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:482
8000b0bc:	0324182b 	sltu	v1,t9,a0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:484
8000b0c0:	1c600003 	bgtz	v1,8000b0d0 <memcpy+0x78>
8000b0c4:	8ca90004 	lw	t1,4(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:491
8000b0c8:	cc9e0080 	pref	0x1e,128(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:492
8000b0cc:	cc9e00a0 	pref	0x1e,160(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:501
8000b0d0:	8caa0008 	lw	t2,8(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:502
8000b0d4:	8cab000c 	lw	t3,12(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:503
8000b0d8:	8cac0010 	lw	t4,16(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:504
8000b0dc:	8cad0014 	lw	t5,20(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:505
8000b0e0:	8cae0018 	lw	t6,24(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:506
8000b0e4:	8caf001c 	lw	t7,28(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:510
8000b0e8:	cca40080 	pref	0x4,128(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:513
8000b0ec:	ac880000 	sw	t0,0(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:514
8000b0f0:	ac890004 	sw	t1,4(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:515
8000b0f4:	ac8a0008 	sw	t2,8(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:516
8000b0f8:	ac8b000c 	sw	t3,12(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:517
8000b0fc:	ac8c0010 	sw	t4,16(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:518
8000b100:	ac8d0014 	sw	t5,20(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:519
8000b104:	ac8e0018 	sw	t6,24(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:520
8000b108:	ac8f001c 	sw	t7,28(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:522
8000b10c:	8ca80020 	lw	t0,32(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:523
8000b110:	8ca90024 	lw	t1,36(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:524
8000b114:	8caa0028 	lw	t2,40(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:525
8000b118:	8cab002c 	lw	t3,44(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:526
8000b11c:	8cac0030 	lw	t4,48(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:527
8000b120:	8cad0034 	lw	t5,52(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:528
8000b124:	8cae0038 	lw	t6,56(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:529
8000b128:	8caf003c 	lw	t7,60(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:531
8000b12c:	cca400a0 	pref	0x4,160(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:533
8000b130:	ac880020 	sw	t0,32(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:534
8000b134:	ac890024 	sw	t1,36(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:535
8000b138:	ac8a0028 	sw	t2,40(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:536
8000b13c:	ac8b002c 	sw	t3,44(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:537
8000b140:	ac8c0030 	sw	t4,48(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:538
8000b144:	ac8d0034 	sw	t5,52(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:539
8000b148:	ac8e0038 	sw	t6,56(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:540
8000b14c:	ac8f003c 	sw	t7,60(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:541
8000b150:	24840040 	addiu	a0,a0,64
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:543
8000b154:	1487ffd8 	bne	a0,a3,8000b0b8 <memcpy+0x60>
8000b158:	24a50040 	addiu	a1,a1,64
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:544
8000b15c:	03003025 	move	a2,t8
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:553
8000b160:	cca40000 	pref	0x4,0(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:554
8000b164:	30d8001f 	andi	t8,a2,0x1f
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:556
8000b168:	10d80013 	beq	a2,t8,8000b1b8 <memcpy+0x160>
8000b16c:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:557
8000b170:	8ca80000 	lw	t0,0(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:558
8000b174:	8ca90004 	lw	t1,4(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:559
8000b178:	8caa0008 	lw	t2,8(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:560
8000b17c:	8cab000c 	lw	t3,12(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:561
8000b180:	8cac0010 	lw	t4,16(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:562
8000b184:	8cad0014 	lw	t5,20(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:563
8000b188:	8cae0018 	lw	t6,24(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:564
8000b18c:	8caf001c 	lw	t7,28(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:565
8000b190:	24a50020 	addiu	a1,a1,32
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:566
8000b194:	ac880000 	sw	t0,0(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:567
8000b198:	ac890004 	sw	t1,4(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:568
8000b19c:	ac8a0008 	sw	t2,8(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:569
8000b1a0:	ac8b000c 	sw	t3,12(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:570
8000b1a4:	ac8c0010 	sw	t4,16(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:571
8000b1a8:	ac8d0014 	sw	t5,20(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:572
8000b1ac:	ac8e0018 	sw	t6,24(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:573
8000b1b0:	ac8f001c 	sw	t7,28(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:574
8000b1b4:	24840020 	addiu	a0,a0,32
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:584
8000b1b8:	33060003 	andi	a2,t8,0x3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:586
8000b1bc:	10d80007 	beq	a2,t8,8000b1dc <memcpy+0x184>
8000b1c0:	03063823 	subu	a3,t8,a2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:587
8000b1c4:	00873821 	addu	a3,a0,a3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:591
8000b1c8:	8cab0000 	lw	t3,0(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:592
8000b1cc:	24840004 	addiu	a0,a0,4
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:593
8000b1d0:	24a50004 	addiu	a1,a1,4
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:595
8000b1d4:	1487fffc 	bne	a0,a3,8000b1c8 <memcpy+0x170>
8000b1d8:	ac8bfffc 	sw	t3,-4(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:600
8000b1dc:	18c00006 	blez	a2,8000b1f8 <memcpy+0x1a0>
8000b1e0:	00863821 	addu	a3,a0,a2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:602
8000b1e4:	80a30000 	lb	v1,0(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:603
8000b1e8:	24840001 	addiu	a0,a0,1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:604
8000b1ec:	24a50001 	addiu	a1,a1,1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:606
8000b1f0:	1487fffc 	bne	a0,a3,8000b1e4 <memcpy+0x18c>
8000b1f4:	a083ffff 	sb	v1,-1(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:608
8000b1f8:	03e00008 	jr	ra
8000b1fc:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:621
8000b200:	30e70003 	andi	a3,a3,0x3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:623
8000b204:	10e00006 	beqz	a3,8000b220 <memcpy+0x1c8>
8000b208:	00c73023 	subu	a2,a2,a3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:625
8000b20c:	98a30000 	lwr	v1,0(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:626
8000b210:	88a30003 	lwl	v1,3(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:627
8000b214:	00a72821 	addu	a1,a1,a3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:628
8000b218:	b8830000 	swr	v1,0(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:629
8000b21c:	00872021 	addu	a0,a0,a3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:640
8000b220:	30d8003f 	andi	t8,a2,0x3f
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:642
8000b224:	10d80042 	beq	a2,t8,8000b330 <memcpy+0x2d8>
8000b228:	00d83823 	subu	a3,a2,t8
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:643
8000b22c:	00873821 	addu	a3,a0,a3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:646
8000b230:	00864021 	addu	t0,a0,a2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:647
8000b234:	2519fee0 	addiu	t9,t0,-288
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:649
8000b238:	cca40000 	pref	0x4,0(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:650
8000b23c:	cca40020 	pref	0x4,32(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:651
8000b240:	cca40040 	pref	0x4,64(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:668
8000b244:	cca40060 	pref	0x4,96(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:669
8000b248:	98a80000 	lwr	t0,0(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:670
8000b24c:	98a90004 	lwr	t1,4(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:671
8000b250:	98aa0008 	lwr	t2,8(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:676
8000b254:	0324182b 	sltu	v1,t9,a0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:678
8000b258:	1c600003 	bgtz	v1,8000b268 <memcpy+0x210>
8000b25c:	98ab000c 	lwr	t3,12(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:682
8000b260:	cc9e0080 	pref	0x1e,128(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:683
8000b264:	cc9e00a0 	pref	0x1e,160(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:685
8000b268:	98ac0010 	lwr	t4,16(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:686
8000b26c:	98ad0014 	lwr	t5,20(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:687
8000b270:	98ae0018 	lwr	t6,24(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:688
8000b274:	98af001c 	lwr	t7,28(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:689
8000b278:	88a80003 	lwl	t0,3(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:690
8000b27c:	88a90007 	lwl	t1,7(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:691
8000b280:	88aa000b 	lwl	t2,11(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:692
8000b284:	88ab000f 	lwl	t3,15(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:693
8000b288:	88ac0013 	lwl	t4,19(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:694
8000b28c:	88ad0017 	lwl	t5,23(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:695
8000b290:	88ae001b 	lwl	t6,27(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:696
8000b294:	88af001f 	lwl	t7,31(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:697
8000b298:	cca40080 	pref	0x4,128(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:698
8000b29c:	ac880000 	sw	t0,0(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:699
8000b2a0:	ac890004 	sw	t1,4(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:700
8000b2a4:	ac8a0008 	sw	t2,8(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:701
8000b2a8:	ac8b000c 	sw	t3,12(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:702
8000b2ac:	ac8c0010 	sw	t4,16(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:703
8000b2b0:	ac8d0014 	sw	t5,20(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:704
8000b2b4:	ac8e0018 	sw	t6,24(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:705
8000b2b8:	ac8f001c 	sw	t7,28(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:706
8000b2bc:	98a80020 	lwr	t0,32(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:707
8000b2c0:	98a90024 	lwr	t1,36(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:708
8000b2c4:	98aa0028 	lwr	t2,40(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:709
8000b2c8:	98ab002c 	lwr	t3,44(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:710
8000b2cc:	98ac0030 	lwr	t4,48(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:711
8000b2d0:	98ad0034 	lwr	t5,52(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:712
8000b2d4:	98ae0038 	lwr	t6,56(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:713
8000b2d8:	98af003c 	lwr	t7,60(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:714
8000b2dc:	88a80023 	lwl	t0,35(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:715
8000b2e0:	88a90027 	lwl	t1,39(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:716
8000b2e4:	88aa002b 	lwl	t2,43(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:717
8000b2e8:	88ab002f 	lwl	t3,47(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:718
8000b2ec:	88ac0033 	lwl	t4,51(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:719
8000b2f0:	88ad0037 	lwl	t5,55(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:720
8000b2f4:	88ae003b 	lwl	t6,59(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:721
8000b2f8:	88af003f 	lwl	t7,63(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:722
8000b2fc:	cca400a0 	pref	0x4,160(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:723
8000b300:	ac880020 	sw	t0,32(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:724
8000b304:	ac890024 	sw	t1,36(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:725
8000b308:	ac8a0028 	sw	t2,40(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:726
8000b30c:	ac8b002c 	sw	t3,44(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:727
8000b310:	ac8c0030 	sw	t4,48(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:728
8000b314:	ac8d0034 	sw	t5,52(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:729
8000b318:	ac8e0038 	sw	t6,56(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:730
8000b31c:	ac8f003c 	sw	t7,60(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:731
8000b320:	24840040 	addiu	a0,a0,64
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:733
8000b324:	1487ffc7 	bne	a0,a3,8000b244 <memcpy+0x1ec>
8000b328:	24a50040 	addiu	a1,a1,64
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:734
8000b32c:	03003025 	move	a2,t8
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:742
8000b330:	cca40000 	pref	0x4,0(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:743
8000b334:	30d8001f 	andi	t8,a2,0x1f
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:745
8000b338:	10d8001b 	beq	a2,t8,8000b3a8 <memcpy+0x350>
8000b33c:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:746
8000b340:	98a80000 	lwr	t0,0(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:747
8000b344:	98a90004 	lwr	t1,4(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:748
8000b348:	98aa0008 	lwr	t2,8(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:749
8000b34c:	98ab000c 	lwr	t3,12(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:750
8000b350:	98ac0010 	lwr	t4,16(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:751
8000b354:	98ad0014 	lwr	t5,20(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:752
8000b358:	98ae0018 	lwr	t6,24(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:753
8000b35c:	98af001c 	lwr	t7,28(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:754
8000b360:	88a80003 	lwl	t0,3(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:755
8000b364:	88a90007 	lwl	t1,7(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:756
8000b368:	88aa000b 	lwl	t2,11(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:757
8000b36c:	88ab000f 	lwl	t3,15(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:758
8000b370:	88ac0013 	lwl	t4,19(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:759
8000b374:	88ad0017 	lwl	t5,23(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:760
8000b378:	88ae001b 	lwl	t6,27(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:761
8000b37c:	88af001f 	lwl	t7,31(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:762
8000b380:	24a50020 	addiu	a1,a1,32
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:763
8000b384:	ac880000 	sw	t0,0(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:764
8000b388:	ac890004 	sw	t1,4(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:765
8000b38c:	ac8a0008 	sw	t2,8(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:766
8000b390:	ac8b000c 	sw	t3,12(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:767
8000b394:	ac8c0010 	sw	t4,16(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:768
8000b398:	ac8d0014 	sw	t5,20(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:769
8000b39c:	ac8e0018 	sw	t6,24(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:770
8000b3a0:	ac8f001c 	sw	t7,28(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:771
8000b3a4:	24840020 	addiu	a0,a0,32
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:777
8000b3a8:	33060003 	andi	a2,t8,0x3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:779
8000b3ac:	10d80008 	beq	a2,t8,8000b3d0 <memcpy+0x378>
8000b3b0:	03063823 	subu	a3,t8,a2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:780
8000b3b4:	00873821 	addu	a3,a0,a3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:784
8000b3b8:	98a30000 	lwr	v1,0(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:785
8000b3bc:	88a30003 	lwl	v1,3(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:786
8000b3c0:	24840004 	addiu	a0,a0,4
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:787
8000b3c4:	24a50004 	addiu	a1,a1,4
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:789
8000b3c8:	1487fffb 	bne	a0,a3,8000b3b8 <memcpy+0x360>
8000b3cc:	ac83fffc 	sw	v1,-4(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:794
8000b3d0:	10c0ff89 	beqz	a2,8000b1f8 <memcpy+0x1a0>
8000b3d4:	00863821 	addu	a3,a0,a2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:796
8000b3d8:	80a30000 	lb	v1,0(a1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:797
8000b3dc:	24840001 	addiu	a0,a0,1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:798
8000b3e0:	24a50001 	addiu	a1,a1,1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:800
8000b3e4:	1487fffc 	bne	a0,a3,8000b3d8 <memcpy+0x380>
8000b3e8:	a083ffff 	sb	v1,-1(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memcpy.S:802
8000b3ec:	03e00008 	jr	ra
8000b3f0:	00000000 	nop

8000b3f4 <memset>:
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:227
8000b3f4:	28ca0010 	slti	t2,a2,16
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:229
8000b3f8:	15400042 	bnez	t2,8000b504 <memset+0x110>
8000b3fc:	00801025 	move	v0,a0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:234
8000b400:	10a00004 	beqz	a1,8000b414 <memset+0x20>
8000b404:	00043823 	negu	a3,a0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:235
8000b408:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:244
8000b40c:	7ca57a04 	ins	a1,a1,0x8,0x8
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:245
8000b410:	7ca5fc04 	ins	a1,a1,0x10,0x10
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:269
8000b414:	30ea0003 	andi	t2,a3,0x3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:271
8000b418:	11400003 	beqz	t2,8000b428 <memset+0x34>
8000b41c:	00ca3023 	subu	a2,a2,t2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:272
8000b420:	b8850000 	swr	a1,0(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:273
8000b424:	008a2021 	addu	a0,a0,t2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:322
8000b428:	30ea0004 	andi	t2,a3,0x4
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:324
8000b42c:	11400003 	beqz	t2,8000b43c <memset+0x48>
8000b430:	00ca3023 	subu	a2,a2,t2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:325
8000b434:	ac850000 	sw	a1,0(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:326
8000b438:	008a2021 	addu	a0,a0,t2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:335
8000b43c:	30d8003f 	andi	t8,a2,0x3f
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:337
8000b440:	10d8001d 	beq	a2,t8,8000b4b8 <memset+0xc4>
8000b444:	00d83823 	subu	a3,a2,t8
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:338
8000b448:	00873821 	addu	a3,a0,a3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:347
8000b44c:	00864021 	addu	t0,a0,a2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:348
8000b450:	2519fee0 	addiu	t9,t0,-288
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:360
8000b454:	0324182b 	sltu	v1,t9,a0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:361
8000b458:	1c600003 	bgtz	v1,8000b468 <memset+0x74>
8000b45c:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:366
8000b460:	cc9e0080 	pref	0x1e,128(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:367
8000b464:	cc9e00a0 	pref	0x1e,160(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:370
8000b468:	ac850000 	sw	a1,0(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:371
8000b46c:	ac850004 	sw	a1,4(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:372
8000b470:	ac850008 	sw	a1,8(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:373
8000b474:	ac85000c 	sw	a1,12(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:374
8000b478:	ac850010 	sw	a1,16(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:375
8000b47c:	ac850014 	sw	a1,20(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:376
8000b480:	ac850018 	sw	a1,24(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:377
8000b484:	ac85001c 	sw	a1,28(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:378
8000b488:	ac850020 	sw	a1,32(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:379
8000b48c:	ac850024 	sw	a1,36(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:380
8000b490:	ac850028 	sw	a1,40(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:381
8000b494:	ac85002c 	sw	a1,44(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:382
8000b498:	ac850030 	sw	a1,48(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:383
8000b49c:	ac850034 	sw	a1,52(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:384
8000b4a0:	ac850038 	sw	a1,56(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:385
8000b4a4:	ac85003c 	sw	a1,60(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:386
8000b4a8:	24840040 	addiu	a0,a0,64
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:387
8000b4ac:	1487ffe9 	bne	a0,a3,8000b454 <memset+0x60>
8000b4b0:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:388
8000b4b4:	03003025 	move	a2,t8
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:394
8000b4b8:	30d8001f 	andi	t8,a2,0x1f
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:396
8000b4bc:	10d8000a 	beq	a2,t8,8000b4e8 <memset+0xf4>
8000b4c0:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:397
8000b4c4:	ac850000 	sw	a1,0(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:398
8000b4c8:	ac850004 	sw	a1,4(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:399
8000b4cc:	ac850008 	sw	a1,8(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:400
8000b4d0:	ac85000c 	sw	a1,12(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:401
8000b4d4:	ac850010 	sw	a1,16(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:402
8000b4d8:	ac850014 	sw	a1,20(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:403
8000b4dc:	ac850018 	sw	a1,24(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:404
8000b4e0:	ac85001c 	sw	a1,28(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:405
8000b4e4:	24840020 	addiu	a0,a0,32
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:413
8000b4e8:	33060003 	andi	a2,t8,0x3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:415
8000b4ec:	10d80005 	beq	a2,t8,8000b504 <memset+0x110>
8000b4f0:	03063823 	subu	a3,t8,a2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:416
8000b4f4:	00873821 	addu	a3,a0,a3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:420
8000b4f8:	24840004 	addiu	a0,a0,4
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:422
8000b4fc:	1487fffe 	bne	a0,a3,8000b4f8 <memset+0x104>
8000b500:	ac85fffc 	sw	a1,-4(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:427
8000b504:	18c00004 	blez	a2,8000b518 <memset+0x124>
8000b508:	00863821 	addu	a3,a0,a2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:429
8000b50c:	24840001 	addiu	a0,a0,1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:431
8000b510:	1487fffe 	bne	a0,a3,8000b50c <memset+0x118>
8000b514:	a085ffff 	sb	a1,-1(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/machine/mips/memset.S:433
8000b518:	03e00008 	jr	ra
8000b51c:	00000000 	nop

8000b520 <__register_exitproc>:
__register_exitproc():
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:72
8000b520:	27bdffd8 	addiu	sp,sp,-40
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:80
8000b524:	3c028001 	lui	v0,0x8001
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:72
8000b528:	afb00010 	sw	s0,16(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:80
8000b52c:	8c50c254 	lw	s0,-15788(v0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:72
8000b530:	afb40020 	sw	s4,32(sp)
8000b534:	00c0a025 	move	s4,a2
8000b538:	afb3001c 	sw	s3,28(sp)
8000b53c:	00e09825 	move	s3,a3
8000b540:	afb20018 	sw	s2,24(sp)
8000b544:	00a09025 	move	s2,a1
8000b548:	afb10014 	sw	s1,20(sp)
8000b54c:	afbf0024 	sw	ra,36(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:80
8000b550:	8e020148 	lw	v0,328(s0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:81
8000b554:	14400003 	bnez	v0,8000b564 <__register_exitproc+0x44>
8000b558:	00808825 	move	s1,a0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:82
8000b55c:	2602014c 	addiu	v0,s0,332
8000b560:	ae020148 	sw	v0,328(s0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:83
8000b564:	8c430004 	lw	v1,4(v0)
8000b568:	28630020 	slti	v1,v1,32
8000b56c:	14600011 	bnez	v1,8000b5b4 <__register_exitproc+0x94>
8000b570:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:90
8000b574:	3c020000 	lui	v0,0x0
8000b578:	24420000 	addiu	v0,v0,0
8000b57c:	14400003 	bnez	v0,8000b58c <__register_exitproc+0x6c>
8000b580:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:91
8000b584:	10000022 	b	8000b610 <__register_exitproc+0xf0>
8000b588:	2402ffff 	li	v0,-1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:93
8000b58c:	0c000000 	jal	80000000 <__app_start>
8000b590:	24040190 	li	a0,400
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:94
8000b594:	1040fffb 	beqz	v0,8000b584 <__register_exitproc+0x64>
8000b598:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:102
8000b59c:	8e030148 	lw	v1,328(s0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:101
8000b5a0:	ac400004 	sw	zero,4(v0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:102
8000b5a4:	ac430000 	sw	v1,0(v0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:103
8000b5a8:	ae020148 	sw	v0,328(s0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:105
8000b5ac:	ac400188 	sw	zero,392(v0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:106
8000b5b0:	ac40018c 	sw	zero,396(v0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:113
8000b5b4:	1220000f 	beqz	s1,8000b5f4 <__register_exitproc+0xd4>
8000b5b8:	8c430004 	lw	v1,4(v0)
8000b5bc:	00034080 	sll	t0,v1,0x2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:137
8000b5c0:	24060001 	li	a2,1
8000b5c4:	00484021 	addu	t0,v0,t0
8000b5c8:	00663004 	sllv	a2,a2,v1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:139
8000b5cc:	24040002 	li	a0,2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:136
8000b5d0:	ad140088 	sw	s4,136(t0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:137
8000b5d4:	8c490188 	lw	t1,392(v0)
8000b5d8:	01264825 	or	t1,t1,a2
8000b5dc:	ac490188 	sw	t1,392(v0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:139
8000b5e0:	16240004 	bne	s1,a0,8000b5f4 <__register_exitproc+0xd4>
8000b5e4:	ad130108 	sw	s3,264(t0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:140
8000b5e8:	8c44018c 	lw	a0,396(v0)
8000b5ec:	00863025 	or	a2,a0,a2
8000b5f0:	ac46018c 	sw	a2,396(v0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:142
8000b5f4:	24640001 	addiu	a0,v1,1
8000b5f8:	24630002 	addiu	v1,v1,2
8000b5fc:	ac440004 	sw	a0,4(v0)
8000b600:	00031880 	sll	v1,v1,0x2
8000b604:	00431021 	addu	v0,v0,v1
8000b608:	ac520000 	sw	s2,0(v0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:146
8000b60c:	00001025 	move	v0,zero
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__atexit.c:147
8000b610:	8fbf0024 	lw	ra,36(sp)
8000b614:	8fb40020 	lw	s4,32(sp)
8000b618:	8fb3001c 	lw	s3,28(sp)
8000b61c:	8fb20018 	lw	s2,24(sp)
8000b620:	8fb10014 	lw	s1,20(sp)
8000b624:	8fb00010 	lw	s0,16(sp)
8000b628:	03e00008 	jr	ra
8000b62c:	27bd0028 	addiu	sp,sp,40

8000b630 <__call_exitprocs>:
__call_exitprocs():
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:68
8000b630:	27bdffc0 	addiu	sp,sp,-64
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:83
8000b634:	3c028001 	lui	v0,0x8001
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:68
8000b638:	afb30024 	sw	s3,36(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:136
8000b63c:	3c130000 	lui	s3,0x0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:68
8000b640:	afb70034 	sw	s7,52(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:96
8000b644:	24170001 	li	s7,1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:68
8000b648:	afb60030 	sw	s6,48(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:136
8000b64c:	26730000 	addiu	s3,s3,0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:68
8000b650:	afb40028 	sw	s4,40(sp)
8000b654:	0080b025 	move	s6,a0
8000b658:	afbf003c 	sw	ra,60(sp)
8000b65c:	00a0a025 	move	s4,a1
8000b660:	afbe0038 	sw	s8,56(sp)
8000b664:	afb5002c 	sw	s5,44(sp)
8000b668:	afb20020 	sw	s2,32(sp)
8000b66c:	afb1001c 	sw	s1,28(sp)
8000b670:	afb00018 	sw	s0,24(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:83
8000b674:	8c42c254 	lw	v0,-15788(v0)
8000b678:	afa20010 	sw	v0,16(sp)
8000b67c:	8fa20010 	lw	v0,16(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:84
8000b680:	24520148 	addiu	s2,v0,328
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:83
8000b684:	8c500148 	lw	s0,328(v0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:85
8000b688:	1200003e 	beqz	s0,8000b784 <__call_exitprocs+0x154>
8000b68c:	8fbf003c 	lw	ra,60(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:92
8000b690:	8e110004 	lw	s1,4(s0)
8000b694:	2635ffff 	addiu	s5,s1,-1
8000b698:	00118880 	sll	s1,s1,0x2
8000b69c:	02118821 	addu	s1,s0,s1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:92 (discriminator 1)
8000b6a0:	06a0001e 	bltz	s5,8000b71c <__call_exitprocs+0xec>
8000b6a4:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:99
8000b6a8:	12800004 	beqz	s4,8000b6bc <__call_exitprocs+0x8c>
8000b6ac:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:99 (discriminator 2)
8000b6b0:	8e230104 	lw	v1,260(s1)
8000b6b4:	14740016 	bne	v1,s4,8000b710 <__call_exitprocs+0xe0>
8000b6b8:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:105
8000b6bc:	8e040004 	lw	a0,4(s0)
8000b6c0:	2484ffff 	addiu	a0,a0,-1
8000b6c4:	16a40003 	bne	s5,a0,8000b6d4 <__call_exitprocs+0xa4>
8000b6c8:	8e230004 	lw	v1,4(s1)
8000b6cc:	10000002 	b	8000b6d8 <__call_exitprocs+0xa8>
8000b6d0:	ae150004 	sw	s5,4(s0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:108
8000b6d4:	ae200004 	sw	zero,4(s1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:111
8000b6d8:	1060000d 	beqz	v1,8000b710 <__call_exitprocs+0xe0>
8000b6dc:	02b72004 	sllv	a0,s7,s5
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:117
8000b6e0:	8e050188 	lw	a1,392(s0)
8000b6e4:	00852824 	and	a1,a0,a1
8000b6e8:	14a0001a 	bnez	a1,8000b754 <__call_exitprocs+0x124>
8000b6ec:	8e1e0004 	lw	s8,4(s0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:118
8000b6f0:	0060f809 	jalr	v1
8000b6f4:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:127
8000b6f8:	8e030004 	lw	v1,4(s0)
8000b6fc:	17c3ffe0 	bne	s8,v1,8000b680 <__call_exitprocs+0x50>
8000b700:	8fa20010 	lw	v0,16(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:127 (discriminator 1)
8000b704:	8e430000 	lw	v1,0(s2)
8000b708:	1470ffdd 	bne	v1,s0,8000b680 <__call_exitprocs+0x50>
8000b70c:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:92 (discriminator 2)
8000b710:	26b5ffff 	addiu	s5,s5,-1
8000b714:	1000ffe2 	b	8000b6a0 <__call_exitprocs+0x70>
8000b718:	2631fffc 	addiu	s1,s1,-4
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:136
8000b71c:	12600019 	beqz	s3,8000b784 <__call_exitprocs+0x154>
8000b720:	8fbf003c 	lw	ra,60(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:141
8000b724:	8e030004 	lw	v1,4(s0)
8000b728:	14600007 	bnez	v1,8000b748 <__call_exitprocs+0x118>
8000b72c:	8e020000 	lw	v0,0(s0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:141 (discriminator 1)
8000b730:	10400005 	beqz	v0,8000b748 <__call_exitprocs+0x118>
8000b734:	02002025 	move	a0,s0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:149
8000b738:	0c000000 	jal	80000000 <__app_start>
8000b73c:	ae420000 	sw	v0,0(s2)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:150
8000b740:	1000ffd1 	b	8000b688 <__call_exitprocs+0x58>
8000b744:	8e500000 	lw	s0,0(s2)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:154
8000b748:	02009025 	move	s2,s0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:155
8000b74c:	1000ffce 	b	8000b688 <__call_exitprocs+0x58>
8000b750:	00408025 	move	s0,v0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:119
8000b754:	8e06018c 	lw	a2,396(s0)
8000b758:	00863024 	and	a2,a0,a2
8000b75c:	14c00005 	bnez	a2,8000b774 <__call_exitprocs+0x144>
8000b760:	8e250084 	lw	a1,132(s1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:120
8000b764:	0060f809 	jalr	v1
8000b768:	02c02025 	move	a0,s6
8000b76c:	1000ffe3 	b	8000b6fc <__call_exitprocs+0xcc>
8000b770:	8e030004 	lw	v1,4(s0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:122
8000b774:	0060f809 	jalr	v1
8000b778:	00a02025 	move	a0,a1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:127
8000b77c:	1000ffdf 	b	8000b6fc <__call_exitprocs+0xcc>
8000b780:	8e030004 	lw	v1,4(s0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/newlib/libc/stdlib/__call_atexit.c:163
8000b784:	8fbe0038 	lw	s8,56(sp)
8000b788:	8fb70034 	lw	s7,52(sp)
8000b78c:	8fb60030 	lw	s6,48(sp)
8000b790:	8fb5002c 	lw	s5,44(sp)
8000b794:	8fb40028 	lw	s4,40(sp)
8000b798:	8fb30024 	lw	s3,36(sp)
8000b79c:	8fb20020 	lw	s2,32(sp)
8000b7a0:	8fb1001c 	lw	s1,28(sp)
8000b7a4:	8fb00018 	lw	s0,24(sp)
8000b7a8:	03e00008 	jr	ra
8000b7ac:	27bd0040 	addiu	sp,sp,64

8000b7b0 <__exit>:
__exit():
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_exit.c:61
8000b7b0:	27bdffd8 	addiu	sp,sp,-40
8000b7b4:	afb2001c 	sw	s2,28(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_exit.c:83
8000b7b8:	3c120000 	lui	s2,0x0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_exit.c:61
8000b7bc:	afb10018 	sw	s1,24(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_exit.c:81
8000b7c0:	3c110000 	lui	s1,0x0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_exit.c:61
8000b7c4:	afb00014 	sw	s0,20(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_exit.c:79
8000b7c8:	3c100000 	lui	s0,0x0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_exit.c:81
8000b7cc:	26310000 	addiu	s1,s1,0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_exit.c:61
8000b7d0:	afb30020 	sw	s3,32(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_exit.c:79
8000b7d4:	26100000 	addiu	s0,s0,0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_exit.c:61
8000b7d8:	afbf0024 	sw	ra,36(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_exit.c:83
8000b7dc:	26520000 	addiu	s2,s2,0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_exit.c:61
8000b7e0:	00809825 	move	s3,a0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_exit.c:62
8000b7e4:	02602025 	move	a0,s3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_exit.c:63
8000b7e8:	24190001 	li	t9,1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_exit.c:64
8000b7ec:	24020001 	li	v0,1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_exit.c:66
8000b7f0:	0000004c 	syscall	0x1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_exit.c:79
8000b7f4:	24020002 	li	v0,2
8000b7f8:	16020005 	bne	s0,v0,8000b810 <__exit+0x60>
8000b7fc:	24020001 	li	v0,1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_exit.c:83
8000b800:	1240fff9 	beqz	s2,8000b7e8 <__exit+0x38>
8000b804:	02602025 	move	a0,s3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_exit.c:84
8000b808:	0c000000 	jal	80000000 <__app_start>
8000b80c:	02602025 	move	a0,s3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_exit.c:80
8000b810:	1602fff5 	bne	s0,v0,8000b7e8 <__exit+0x38>
8000b814:	02602025 	move	a0,s3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_exit.c:81
8000b818:	1220fff4 	beqz	s1,8000b7ec <__exit+0x3c>
8000b81c:	24190001 	li	t9,1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_exit.c:82
8000b820:	0c000000 	jal	80000000 <__app_start>
8000b824:	00000000 	nop
8000b828:	1040fff5 	beqz	v0,8000b800 <__exit+0x50>
8000b82c:	02602025 	move	a0,s3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_exit.c:63
8000b830:	1000ffee 	b	8000b7ec <__exit+0x3c>
8000b834:	24190001 	li	t9,1

8000b838 <__getargs>:
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:43
8000b838:	00004025 	move	t0,zero
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:44
8000b83c:	00004825 	move	t1,zero
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:46
8000b840:	24190009 	li	t9,9
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:47
8000b844:	24020001 	li	v0,1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:49
8000b848:	0000004c 	syscall	0x1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:52
8000b84c:	18400022 	blez	v0,8000b8d8 <__getargs+0xa0>
8000b850:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:54
8000b854:	00404025 	move	t0,v0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:55
8000b858:	00085880 	sll	t3,t0,0x2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:56
8000b85c:	256b0007 	addiu	t3,t3,7
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:57
8000b860:	2401fff8 	li	at,-8
8000b864:	01615824 	and	t3,t3,at
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:58
8000b868:	03abe823 	subu	sp,sp,t3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:59
8000b86c:	03a04825 	move	t1,sp
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:60
8000b870:	00005025 	move	t2,zero
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:64
8000b874:	2419000a 	li	t9,10
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:65
8000b878:	24020001 	li	v0,1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:66
8000b87c:	01402025 	move	a0,t2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:68
8000b880:	0000004c 	syscall	0x1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:70
8000b884:	18400014 	blez	v0,8000b8d8 <__getargs+0xa0>
8000b888:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:72
8000b88c:	24420001 	addiu	v0,v0,1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:73
8000b890:	24420007 	addiu	v0,v0,7
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:74
8000b894:	2401fff8 	li	at,-8
8000b898:	00411024 	and	v0,v0,at
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:75
8000b89c:	03a2e823 	subu	sp,sp,v0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:76
8000b8a0:	000a5880 	sll	t3,t2,0x2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:77
8000b8a4:	01695821 	addu	t3,t3,t1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:78
8000b8a8:	ad7d0000 	sw	sp,0(t3)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:80
8000b8ac:	2419000b 	li	t9,11
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:81
8000b8b0:	24020001 	li	v0,1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:82
8000b8b4:	01402025 	move	a0,t2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:83
8000b8b8:	03a02825 	move	a1,sp
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:85
8000b8bc:	0000004c 	syscall	0x1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:87
8000b8c0:	04400005 	bltz	v0,8000b8d8 <__getargs+0xa0>
8000b8c4:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:89
8000b8c8:	254a0001 	addiu	t2,t2,1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:90
8000b8cc:	0148102a 	slt	v0,t2,t0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:91
8000b8d0:	1440ffe8 	bnez	v0,8000b874 <__getargs+0x3c>
8000b8d4:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:94
8000b8d8:	01002025 	move	a0,t0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:95
8000b8dc:	01202825 	move	a1,t1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:99
8000b8e0:	27bdffe0 	addiu	sp,sp,-32
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:100
8000b8e4:	27a60010 	addiu	a2,sp,16
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_getargs.S:103
8000b8e8:	03e00008 	jr	ra
8000b8ec:	acc00000 	sw	zero,0(a2)

8000b8f0 <_get_ram_range>:
_get_ram_range():
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_get_ram_range.c:45
8000b8f0:	3c030002 	lui	v1,0x2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_get_ram_range.c:40
8000b8f4:	00803025 	move	a2,a0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_get_ram_range.c:45
8000b8f8:	2463f800 	addiu	v1,v1,-2048
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_get_ram_range.c:40
8000b8fc:	00a03825 	move	a3,a1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_get_ram_range.c:41
8000b900:	2419000c 	li	t9,12
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_get_ram_range.c:45
8000b904:	10600007 	beqz	v1,8000b924 <_get_ram_range+0x34>
8000b908:	24020001 	li	v0,1
8000b90c:	3c020000 	lui	v0,0x0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_get_ram_range.c:47
8000b910:	10800002 	beqz	a0,8000b91c <_get_ram_range+0x2c>
8000b914:	24420000 	addiu	v0,v0,0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_get_ram_range.c:48
8000b918:	ac820000 	sw	v0,0(a0)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_get_ram_range.c:50
8000b91c:	10000005 	b	8000b934 <_get_ram_range+0x44>
8000b920:	00621821 	addu	v1,v1,v0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_get_ram_range.c:54
8000b924:	0000004c 	syscall	0x1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_get_ram_range.c:60
8000b928:	10c00002 	beqz	a2,8000b934 <_get_ram_range+0x44>
8000b92c:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_get_ram_range.c:61
8000b930:	acc20000 	sw	v0,0(a2)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/uhi/uhi_get_ram_range.c:62
8000b934:	03e00008 	jr	ra
8000b938:	ace30000 	sw	v1,0(a3)

8000b93c <__register_excpt_handler>:
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:57
8000b93c:	40056000 	mfc0	a1,c0_status
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:62
8000b940:	3c0a0040 	lui	t2,0x40
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:63
8000b944:	408a6000 	mtc0	t2,c0_status
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:64
8000b948:	000000c0 	ehb
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:72
8000b94c:	3c090000 	lui	t1,0x0
8000b950:	25290000 	addiu	t1,t1,0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:73
8000b954:	11200005 	beqz	t1,8000b96c <__register_excpt_handler+0x30>
8000b958:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:74
8000b95c:	03e03025 	move	a2,ra
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:75
8000b960:	0120f809 	jalr	t1
8000b964:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:76
8000b968:	0040f825 	move	ra,v0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:79
8000b96c:	3c098001 	lui	t1,0x8001
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:80
8000b970:	2529c228 	addiu	t1,t1,-15832
8000b974:	ad200000 	sw	zero,0(t1)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:82
8000b978:	400c8003 	mfc0	t4,c0_config3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:91
8000b97c:	3c0a8000 	lui	t2,0x8000
8000b980:	254a0000 	addiu	t2,t2,0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:95
8000b984:	354a0800 	ori	t2,t2,0x800
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:96
8000b988:	408a7801 	mtc0	t2,c0_ebase
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:97
8000b98c:	000000c0 	ehb
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:100
8000b990:	00001025 	move	v0,zero
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:103
8000b994:	3c090000 	lui	t1,0x0
8000b998:	25290020 	addiu	t1,t1,32
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:106
8000b99c:	7d8a0140 	ext	t2,t4,0x5,0x1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:107
8000b9a0:	7d8b0180 	ext	t3,t4,0x6,0x1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:108
8000b9a4:	014b5025 	or	t2,t2,t3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:110
8000b9a8:	11400005 	beqz	t2,8000b9c0 <__register_excpt_handler+0x84>
8000b9ac:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:113
8000b9b0:	400a6001 	mfc0	t2,c0_intctl
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:114
8000b9b4:	7d2a4804 	ins	t2,t1,0x0,0xa
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:116
8000b9b8:	10000003 	b	8000b9c8 <__register_excpt_handler+0x8c>
8000b9bc:	408a6001 	mtc0	t2,c0_intctl
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:120
8000b9c0:	15200008 	bnez	t1,8000b9e4 <__register_excpt_handler+0xa8>
8000b9c4:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:123
8000b9c8:	3c090080 	lui	t1,0x80
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:124
8000b9cc:	40896800 	mtc0	t1,c0_cause
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:125
8000b9d0:	000000c0 	ehb
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:128
8000b9d4:	7d8a0180 	ext	t2,t4,0x6,0x1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:129
8000b9d8:	15400002 	bnez	t2,8000b9e4 <__register_excpt_handler+0xa8>
8000b9dc:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:132
8000b9e0:	34420001 	ori	v0,v0,0x1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_register.S:134
8000b9e4:	03e00008 	jr	ra
8000b9e8:	00000000 	nop

8000b9ec <__exception_save>:
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:116
8000b9ec:	03a0d825 	move	k1,sp
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:118
8000b9f0:	27bdff50 	addiu	sp,sp,-176
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:121
8000b9f4:	afa10010 	sw	at,16(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:122
8000b9f8:	afa20014 	sw	v0,20(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:123
8000b9fc:	afa30018 	sw	v1,24(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:124
8000ba00:	afa4001c 	sw	a0,28(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:125
8000ba04:	afa50020 	sw	a1,32(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:126
8000ba08:	afa60024 	sw	a2,36(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:127
8000ba0c:	afa70028 	sw	a3,40(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:128
8000ba10:	afa8002c 	sw	t0,44(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:129
8000ba14:	afa90030 	sw	t1,48(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:130
8000ba18:	afaa0034 	sw	t2,52(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:131
8000ba1c:	afab0038 	sw	t3,56(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:132
8000ba20:	afac003c 	sw	t4,60(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:133
8000ba24:	afad0040 	sw	t5,64(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:134
8000ba28:	afae0044 	sw	t6,68(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:135
8000ba2c:	afaf0048 	sw	t7,72(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:136
8000ba30:	afb0004c 	sw	s0,76(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:137
8000ba34:	afb10050 	sw	s1,80(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:138
8000ba38:	afb20054 	sw	s2,84(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:139
8000ba3c:	afb30058 	sw	s3,88(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:140
8000ba40:	afb4005c 	sw	s4,92(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:141
8000ba44:	afb50060 	sw	s5,96(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:142
8000ba48:	afb60064 	sw	s6,100(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:143
8000ba4c:	afb70068 	sw	s7,104(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:144
8000ba50:	afb8006c 	sw	t8,108(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:145
8000ba54:	afb90070 	sw	t9,112(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:146
8000ba58:	afba0074 	sw	k0,116(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:148
8000ba5c:	afbc007c 	sw	gp,124(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:149
8000ba60:	afbb0080 	sw	k1,128(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:150
8000ba64:	afbe0084 	sw	s8,132(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:151
8000ba68:	afbf0088 	sw	ra,136(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:152
8000ba6c:	afa0009c 	sw	zero,156(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:155
8000ba70:	00004810 	mfhi	t1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:156
8000ba74:	00005012 	mflo	t2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:157
8000ba78:	afa90094 	sw	t1,148(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:158
8000ba7c:	afaa0098 	sw	t2,152(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:163
8000ba80:	401f7000 	mfc0	ra,c0_epc
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:164
8000ba84:	40136800 	mfc0	s3,c0_cause
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:165
8000ba88:	afbf008c 	sw	ra,140(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:168
8000ba8c:	40094000 	mfc0	t1,c0_badvaddr
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:169
8000ba90:	afa90090 	sw	t1,144(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:170
8000ba94:	afb300a4 	sw	s3,164(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:172
8000ba98:	00005825 	move	t3,zero
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:173
8000ba9c:	00006025 	move	t4,zero
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:174
8000baa0:	40098003 	mfc0	t1,c0_config3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:175
8000baa4:	7d2a06c0 	ext	t2,t1,0x1b,0x1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:176
8000baa8:	11400002 	beqz	t2,8000bab4 <__exception_save+0xc8>
8000baac:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:177
8000bab0:	400b4002 	mfc0	t3,$8,2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:179
8000bab4:	7d290680 	ext	t1,t1,0x1a,0x1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:180
8000bab8:	11200002 	beqz	t1,8000bac4 <__exception_save+0xd8>
8000babc:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:181
8000bac0:	400c4001 	mfc0	t4,$8,1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:183
8000bac4:	afab00ac 	sw	t3,172(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:184
8000bac8:	afac00a8 	sw	t4,168(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:187
8000bacc:	03a02025 	move	a0,sp
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:190
8000bad0:	40156000 	mfc0	s5,c0_status
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:191
8000bad4:	afb500a0 	sw	s5,160(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:192
8000bad8:	3c090000 	lui	t1,0x0
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:193
8000badc:	2529fffd 	addiu	t1,t1,-3
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:194
8000bae0:	02a9a824 	and	s5,s5,t1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:195
8000bae4:	40956000 	mtc0	s5,c0_status
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:198
8000bae8:	3c1f8001 	lui	ra,0x8001
8000baec:	27ffbb0c 	addiu	ra,ra,-17652
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:200
8000baf0:	3265007c 	andi	a1,s3,0x7c
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:203
8000baf4:	24840010 	addiu	a0,a0,16
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:206
8000baf8:	00052882 	srl	a1,a1,0x2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:210
8000bafc:	3c198001 	lui	t9,0x8001
8000bb00:	2739aab8 	addiu	t9,t9,-21832
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:211
8000bb04:	03200008 	jr	t9
8000bb08:	00000000 	nop
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:217
8000bb0c:	8fa90094 	lw	t1,148(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:218
8000bb10:	8faa0098 	lw	t2,152(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:219
8000bb14:	01200011 	mthi	t1
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:220
8000bb18:	01400013 	mtlo	t2
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:223
8000bb1c:	8fa10010 	lw	at,16(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:224
8000bb20:	8fa20014 	lw	v0,20(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:225
8000bb24:	8fa30018 	lw	v1,24(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:226
8000bb28:	8fa4001c 	lw	a0,28(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:227
8000bb2c:	8fa50020 	lw	a1,32(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:228
8000bb30:	8fa60024 	lw	a2,36(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:229
8000bb34:	8fa70028 	lw	a3,40(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:230
8000bb38:	8fa8002c 	lw	t0,44(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:231
8000bb3c:	8fa90030 	lw	t1,48(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:232
8000bb40:	8faa0034 	lw	t2,52(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:233
8000bb44:	8fab0038 	lw	t3,56(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:234
8000bb48:	8fac003c 	lw	t4,60(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:235
8000bb4c:	8fad0040 	lw	t5,64(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:236
8000bb50:	8fae0044 	lw	t6,68(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:237
8000bb54:	8faf0048 	lw	t7,72(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:238
8000bb58:	8fb0004c 	lw	s0,76(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:239
8000bb5c:	8fb10050 	lw	s1,80(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:240
8000bb60:	8fb20054 	lw	s2,84(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:241
8000bb64:	8fb30058 	lw	s3,88(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:242
8000bb68:	8fb4005c 	lw	s4,92(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:243
8000bb6c:	8fb50060 	lw	s5,96(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:244
8000bb70:	8fb60064 	lw	s6,100(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:245
8000bb74:	8fb70068 	lw	s7,104(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:246
8000bb78:	8fb8006c 	lw	t8,108(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:247
8000bb7c:	8fb90070 	lw	t9,112(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:249
8000bb80:	8fbc007c 	lw	gp,124(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:251
8000bb84:	8fbe0084 	lw	s8,132(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:252
8000bb88:	8fbf0088 	lw	ra,136(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:253
8000bb8c:	41606000 	di
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:254
8000bb90:	8fba00a0 	lw	k0,160(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:255
8000bb94:	8fbb008c 	lw	k1,140(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:256
8000bb98:	409a6000 	mtc0	k0,c0_status
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:257
8000bb9c:	409b7000 	mtc0	k1,c0_epc
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:258
8000bba0:	000000c0 	ehb
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:259
8000bba4:	8fba0074 	lw	k0,116(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:260
8000bba8:	8fbb0078 	lw	k1,120(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:261
8000bbac:	8fbd0080 	lw	sp,128(sp)
/scratch/mpf/jobs/54395/48094/240198/shared/gcc/libgloss/mips/hal/mips_excpt_entry.S:263
8000bbb0:	42000018 	eret

Disassembly of section .init:

8000bbb4 <_init>:
_init():
8000bbb4:	27bdffe0 	addiu	sp,sp,-32
8000bbb8:	afbf0014 	sw	ra,20(sp)
8000bbbc:	0c000177 	jal	800005dc <frame_dummy>
8000bbc0:	00000000 	nop
8000bbc4:	0c002bdd 	jal	8000af74 <__do_global_ctors_aux>
8000bbc8:	00000000 	nop

8000bbcc <init>:
init():
8000bbcc:	8fbf0014 	lw	ra,20(sp)
8000bbd0:	03e00008 	jr	ra
8000bbd4:	27bd0020 	addiu	sp,sp,32

Disassembly of section .fini:

8000bbd8 <_fini>:
_fini():
8000bbd8:	27bdffe0 	addiu	sp,sp,-32
8000bbdc:	afbf0014 	sw	ra,20(sp)
8000bbe0:	0c000147 	jal	8000051c <__do_global_dtors_aux>
8000bbe4:	00000000 	nop

8000bbe8 <fini>:
fini():
8000bbe8:	8fbf0014 	lw	ra,20(sp)
8000bbec:	03e00008 	jr	ra
8000bbf0:	27bd0020 	addiu	sp,sp,32

Disassembly of section .eh_frame:

8000bbf4 <__EH_FRAME_BEGIN__>:
8000bbf4:	00000000 	nop

Disassembly of section .jcr:

8000bbf8 <__JCR_END__>:
8000bbf8:	00000000 	nop

Disassembly of section .ctors:

8000bbfc <__CTOR_LIST__>:
8000bbfc:	ffffffff 	sdc3	$31,-1(ra)

8000bc00 <__CTOR_END__>:
8000bc00:	00000000 	nop

Disassembly of section .dtors:

8000bc04 <__DTOR_LIST__>:
8000bc04:	ffffffff 	sdc3	$31,-1(ra)

8000bc08 <__DTOR_END__>:
8000bc08:	00000000 	nop

Disassembly of section .MIPS.abiflags:

8000bc10 <__MIPS_abiflags_start>:
__MIPS_abiflags_start():
8000bc10:	02200000 	0x2200000
8000bc14:	03000001 	movf	zero,t8,$fcc0
	...
8000bc20:	00000001 	movf	zero,zero,$fcc0
8000bc24:	00000000 	nop

Disassembly of section .rodata:

8000bc28 <ucExpectedStackBytes-0x180>:
8000bc28:	2f637273 	sltiu	v1,k1,29299
8000bc2c:	6e69616d 	0x6e69616d
8000bc30:	696c625f 	0x696c625f
8000bc34:	2e796b6e 	sltiu	t9,s3,27502
8000bc38:	00000063 	0x63
8000bc3c:	00007852 	mflhxu	t7
8000bc40:	00005854 	0x5854
8000bc44:	6e696c42 	0x6e696c42
8000bc48:	0000796b 	0x796b
8000bc4c:	65764f51 	0x65764f51
8000bc50:	00000072 	tlt	zero,zero,0x1
8000bc54:	432f2e2e 	c0	0x12f2e2e
8000bc58:	6f6d6d6f 	0x6f6d6d6f
8000bc5c:	694d2f6e 	0x694d2f6e
8000bc60:	616d696e 	0x616d696e
8000bc64:	75512f6c 	jalx	8544bdb0 <__stack+0x540bdb0>
8000bc68:	4f657565 	c3	0x1657565
8000bc6c:	77726576 	jalx	8dc995d8 <__stack+0xdc595d8>
8000bc70:	65746972 	0x65746972
8000bc74:	0000632e 	0x632e
8000bc78:	54746553 	bnel	v1,s4,800251c8 <_end+0x98a8>
8000bc7c:	00000078 	0x78
8000bc80:	52746553 	beql	s3,s4,800251d0 <_end+0x98b0>
8000bc84:	00000078 	0x78
8000bc88:	432f2e2e 	c0	0x12f2e2e
8000bc8c:	6f6d6d6f 	0x6f6d6d6f
8000bc90:	694d2f6e 	0x694d2f6e
8000bc94:	616d696e 	0x616d696e
8000bc98:	75512f6c 	jalx	8544bdb0 <__stack+0x540bdb0>
8000bc9c:	53657565 	beql	k1,a1,80029234 <_end+0xd914>
8000bca0:	632e7465 	0x632e7465
8000bca4:	00000000 	nop
8000bca8:	74696157 	jalx	81a5855c <__stack+0x1a1855c>
8000bcac:	0000004f 	sync	0x1
8000bcb0:	42746553 	c0	0x746553
8000bcb4:	00000000 	nop
8000bcb8:	76646e52 	jalx	8991b948 <__stack+0x98db948>
8000bcbc:	00000000 	nop
8000bcc0:	432f2e2e 	c0	0x12f2e2e
8000bcc4:	6f6d6d6f 	0x6f6d6d6f
8000bcc8:	694d2f6e 	0x694d2f6e
8000bccc:	616d696e 	0x616d696e
8000bcd0:	76452f6c 	jalx	8914bdb0 <__stack+0x910bdb0>
8000bcd4:	47746e65 	bz.d	$w20,8002766c <_end+0xbd4c>
8000bcd8:	70756f72 	0x70756f72
8000bcdc:	6d654473 	0x6d654473
8000bce0:	00632e6f 	0x632e6f
8000bce4:	20726d54 	addi	s2,v1,27988
8000bce8:	00637653 	0x637653
8000bcec:	2e2f2e2e 	sltiu	t7,s1,11822
8000bcf0:	6f532f2e 	0x6f532f2e
8000bcf4:	65637275 	0x65637275
8000bcf8:	6d69742f 	0x6d69742f
8000bcfc:	2e737265 	sltiu	s3,s3,29285
8000bd00:	00000063 	0x63
8000bd04:	80003cb8 	lb	zero,15544(zero)
8000bd08:	80003cb8 	lb	zero,15544(zero)
8000bd0c:	80003cb8 	lb	zero,15544(zero)
8000bd10:	80003dec 	lb	zero,15852(zero)
8000bd14:	80003d74 	lb	zero,15732(zero)
8000bd18:	80003dd4 	lb	zero,15828(zero)
8000bd1c:	80003cb8 	lb	zero,15544(zero)
8000bd20:	80003cb8 	lb	zero,15544(zero)
8000bd24:	80003dec 	lb	zero,15852(zero)
8000bd28:	80003d74 	lb	zero,15732(zero)
8000bd2c:	2e2f2e2e 	sltiu	t7,s1,11822
8000bd30:	6f532f2e 	0x6f532f2e
8000bd34:	65637275 	0x65637275
8000bd38:	6576652f 	0x6576652f
8000bd3c:	675f746e 	0x675f746e
8000bd40:	70756f72 	0x70756f72
8000bd44:	00632e73 	tltu	v1,v1,0xb9
8000bd48:	2e2f2e2e 	sltiu	t7,s1,11822
8000bd4c:	6f532f2e 	0x6f532f2e
8000bd50:	65637275 	0x65637275
8000bd54:	7361742f 	0x7361742f
8000bd58:	632e736b 	0x632e736b
8000bd5c:	00000000 	nop
8000bd60:	454c4449 	bc1any4f	$fcc3,8001ce88 <_end+0x1568>
8000bd64:	00000000 	nop
8000bd68:	80007c20 	lb	zero,31776(zero)
8000bd6c:	80007ba0 	lb	zero,31648(zero)
8000bd70:	80007bc0 	lb	zero,31680(zero)
8000bd74:	80007bdc 	lb	zero,31708(zero)
8000bd78:	80007bf0 	lb	zero,31728(zero)
8000bd7c:	80007e6c 	lb	zero,32364(zero)
8000bd80:	80007dec 	lb	zero,32236(zero)
8000bd84:	80007e0c 	lb	zero,32268(zero)
8000bd88:	80007e28 	lb	zero,32296(zero)
8000bd8c:	80007e3c 	lb	zero,32316(zero)
8000bd90:	2e2f2e2e 	sltiu	t7,s1,11822
8000bd94:	6f532f2e 	0x6f532f2e
8000bd98:	65637275 	0x65637275
8000bd9c:	6575712f 	0x6575712f
8000bda0:	632e6575 	0x632e6575
8000bda4:	00000000 	nop

8000bda8 <ucExpectedStackBytes>:
8000bda8:	eeeeeeee 	swc3	$14,-4370(s7)
8000bdac:	eeeeeeee 	swc3	$14,-4370(s7)
8000bdb0:	eeeeeeee 	swc3	$14,-4370(s7)
8000bdb4:	eeeeeeee 	swc3	$14,-4370(s7)
8000bdb8:	eeeeeeee 	swc3	$14,-4370(s7)
8000bdbc:	2e2f2e2e 	sltiu	t7,s1,11822
8000bdc0:	6f532f2e 	0x6f532f2e
8000bdc4:	65637275 	0x65637275
8000bdc8:	726f702f 	0x726f702f
8000bdcc:	6c626174 	0x6c626174
8000bdd0:	6f432f65 	0x6f432f65
8000bdd4:	63536564 	0x63536564
8000bdd8:	2f657061 	sltiu	a1,k1,28769
8000bddc:	5350494d 	beql	k0,s0,8001e314 <_end+0x29f4>
8000bde0:	61677046 	0x61677046
8000bde4:	726f702f 	0x726f702f
8000bde8:	00632e74 	teq	v1,v1,0xb9
8000bdec:	00000043 	sra	zero,zero,0x1

Disassembly of section .data:

8000bdf0 <__temp_space>:
	...

8000be00 <impure_data>:
__temp_space():
8000be00:	00000000 	nop
8000be04:	8000c0ec 	lb	zero,-16148(zero)
8000be08:	8000c154 	lb	zero,-16044(zero)
8000be0c:	8000c1bc 	lb	zero,-15940(zero)
	...
8000be34:	8000bdec 	lb	zero,-16916(zero)
	...
8000bea8:	00000001 	movf	zero,zero,$fcc0
8000beac:	00000000 	nop
8000beb0:	abcd330e 	swl	t5,13070(s8)
8000beb4:	e66d1234 	swc1	$f13,4660(s3)
8000beb8:	0005deec 	0x5deec
8000bebc:	0000000b 	movn	zero,zero,zero
	...

8000c228 <__first_boot>:
8000c228:	00000001 	movf	zero,zero,$fcc0

Disassembly of section .sdata:

8000c22c <__TMC_END__>:
8000c22c:	00000000 	nop

8000c230 <IO_LEDR>:
8000c230:	bf800000 	cache	0x0,0(gp)

8000c234 <xISRTestStatus>:
8000c234:	00000001 	movf	zero,zero,$fcc0

8000c238 <xQueueSetTasksStatus>:
8000c238:	00000001 	movf	zero,zero,$fcc0

8000c23c <ulISRTxValue>:
8000c23c:	0000ffff 	0xffff

8000c240 <ulExpectedReceivedFromISR.2631>:
8000c240:	0000ffff 	0xffff

8000c244 <xISRStackTop>:
8000c244:	8000ca94 	lb	zero,-13676(zero)

8000c248 <uxInterruptNesting>:
8000c248:	00000001 	movf	zero,zero,$fcc0

8000c24c <heapSTRUCT_SIZE>:
8000c24c:	00000008 	jr	zero

8000c250 <xFreeBytesRemaining>:
8000c250:	0000ea58 	0xea58

8000c254 <_global_impure_ptr>:
8000c254:	8000be00 	lb	zero,-16896(zero)

8000c258 <_impure_ptr>:
8000c258:	8000be00 	lb	zero,-16896(zero)

Disassembly of section .sbss:

8000c25c <_edata>:
_edata():
8000c25c:	00000000 	nop

8000c260 <ulLoopCounter>:
8000c260:	00000000 	nop

8000c264 <xISRQueue>:
8000c264:	00000000 	nop

8000c268 <ulCallCount.2041>:
8000c268:	00000000 	nop

8000c26c <xQueueSet>:
8000c26c:	00000000 	nop

8000c270 <ulCycleCounter>:
8000c270:	00000000 	nop

8000c274 <xSetupComplete>:
8000c274:	00000000 	nop

8000c278 <uxNextRand>:
8000c278:	00000000 	nop

8000c27c <ulLastCycleCounter.2592>:
8000c27c:	00000000 	nop

8000c280 <ulLastISRTxValue.2593>:
8000c280:	00000000 	nop

8000c284 <ulLoops.2610>:
8000c284:	00000000 	nop

8000c288 <ePriorities.2611>:
8000c288:	00000000 	nop

8000c28c <ulCallCount.2626>:
8000c28c:	00000000 	nop

8000c290 <ulExpectedReceivedFromTask.2630>:
8000c290:	00000000 	nop

8000c294 <xQueueToWriteTo.2650>:
8000c294:	00000000 	nop

8000c298 <ulTestMasterCycles>:
8000c298:	00000000 	nop

8000c29c <ulTestSlaveCycles>:
8000c29c:	00000000 	nop

8000c2a0 <ulISRCycles>:
8000c2a0:	00000000 	nop

8000c2a4 <xEventGroup>:
8000c2a4:	00000000 	nop

8000c2a8 <xISREventGroup>:
8000c2a8:	00000000 	nop

8000c2ac <xSyncTask1>:
8000c2ac:	00000000 	nop

8000c2b0 <xSyncTask2>:
8000c2b0:	00000000 	nop

8000c2b4 <xCallCount.2059>:
8000c2b4:	00000000 	nop

8000c2b8 <xISRTestError.2060>:
8000c2b8:	00000000 	nop

8000c2bc <ulPreviousSetBitCycles.2071>:
8000c2bc:	00000000 	nop

8000c2c0 <ulPreviousWaitBitCycles.2070>:
8000c2c0:	00000000 	nop

8000c2c4 <ulPreviousISRCycles.2072>:
8000c2c4:	00000000 	nop

8000c2c8 <pxCurrentTimerList>:
8000c2c8:	00000000 	nop

8000c2cc <pxOverflowTimerList>:
8000c2cc:	00000000 	nop

8000c2d0 <xTimerQueue>:
8000c2d0:	00000000 	nop

8000c2d4 <xTimerTaskHandle>:
8000c2d4:	00000000 	nop

8000c2d8 <xLastTime.2733>:
8000c2d8:	00000000 	nop

8000c2dc <pxCurrentTCB>:
8000c2dc:	00000000 	nop

8000c2e0 <pxDelayedTaskList>:
8000c2e0:	00000000 	nop

8000c2e4 <pxOverflowDelayedTaskList>:
8000c2e4:	00000000 	nop

8000c2e8 <uxDeletedTasksWaitingCleanUp>:
8000c2e8:	00000000 	nop

8000c2ec <uxCurrentNumberOfTasks>:
8000c2ec:	00000000 	nop

8000c2f0 <xTickCount>:
8000c2f0:	00000000 	nop

8000c2f4 <uxTopReadyPriority>:
8000c2f4:	00000000 	nop

8000c2f8 <xSchedulerRunning>:
8000c2f8:	00000000 	nop

8000c2fc <uxPendedTicks>:
8000c2fc:	00000000 	nop

8000c300 <xYieldPending>:
8000c300:	00000000 	nop

8000c304 <xNumOfOverflows>:
8000c304:	00000000 	nop

8000c308 <uxTaskNumber>:
8000c308:	00000000 	nop

8000c30c <xNextTaskUnblockTime>:
8000c30c:	00000000 	nop

8000c310 <xIdleTaskHandle>:
8000c310:	00000000 	nop

8000c314 <uxSchedulerSuspended>:
8000c314:	00000000 	nop

8000c318 <uxSavedTaskStackPointer>:
8000c318:	00000000 	nop

8000c31c <cyclesPerTick>:
8000c31c:	00000000 	nop

8000c320 <xStart>:
	...

8000c328 <xEnd>:
	...

8000c330 <xHeapHasBeenInitialised.2455>:
8000c330:	00000000 	nop

8000c334 <xQueueSetSendingTask>:
8000c334:	00000000 	nop

8000c338 <xQueueSetReceivingTask>:
8000c338:	00000000 	nop

Disassembly of section .bss:

8000c33c <_bss_start>:
_bss_start():
8000c33c:	00000000 	nop

8000c340 <dtor_idx.3451>:
8000c340:	00000000 	nop

8000c344 <object.3461>:
	...

8000c35c <xQueues>:
	...

8000c368 <ulQueueUsedCounter>:
	...

8000c374 <ulLastQueueUsedCounter.2594>:
	...

8000c380 <xActiveTimerList1>:
	...

8000c394 <xActiveTimerList2>:
	...

8000c3a8 <pxReadyTasksLists>:
	...

8000c40c <xDelayedTaskList1>:
	...

8000c420 <xDelayedTaskList2>:
	...

8000c434 <xPendingReadyList>:
	...

8000c448 <xTasksWaitingTermination>:
	...

8000c45c <xSuspendedTaskList>:
	...

8000c470 <xISRStack>:
	...

8000cab0 <ucHeap>:
	...

Disassembly of section .startdata:

8001b510 <__lstack-0x400>:
	...

8001b910 <__lstack>:
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	0x1c
   4:	00000002 	srl	zero,zero,0x0
   8:	00040000 	sll	zero,a0,0x0
   c:	00000000 	nop
  10:	80000200 	lb	zero,512(zero)
  14:	00000298 	0x298
	...
  20:	0000001c 	0x1c
  24:	00e60002 	0xe60002
  28:	00040000 	sll	zero,a0,0x0
  2c:	00000000 	nop
  30:	9fc00000 	0x9fc00000
  34:	0000049c 	0x49c
	...
  40:	0000001c 	0x1c
  44:	01520002 	0x1520002
  48:	00040000 	sll	zero,a0,0x0
  4c:	00000000 	nop
  50:	8000063c 	lb	zero,1596(zero)
  54:	00000418 	0x418
	...
  60:	0000001c 	0x1c
  64:	01e70002 	0x1e70002
  68:	00040000 	sll	zero,a0,0x0
  6c:	00000000 	nop
  70:	80000a54 	lb	zero,2644(zero)
  74:	00000480 	sll	zero,zero,0x12
	...
  80:	0000001c 	0x1c
  84:	045e0002 	0x45e0002
  88:	00040000 	sll	zero,a0,0x0
  8c:	00000000 	nop
  90:	80000ed4 	lb	zero,3796(zero)
  94:	000001e8 	0x1e8
	...
  a0:	0000001c 	0x1c
  a4:	067a0002 	0x67a0002
  a8:	00040000 	sll	zero,a0,0x0
  ac:	00000000 	nop
  b0:	800010bc 	lb	zero,4284(zero)
  b4:	000003ec 	0x3ec
	...
  c0:	0000001c 	0x1c
  c4:	08c60002 	j	3180008 <__memory_size+0x3160808>
  c8:	00040000 	sll	zero,a0,0x0
  cc:	00000000 	nop
  d0:	800014a8 	lb	zero,5288(zero)
  d4:	00000b9c 	0xb9c
	...
  e0:	0000001c 	0x1c
  e4:	0e230002 	jal	88c0008 <__memory_size+0x88a0808>
  e8:	00040000 	sll	zero,a0,0x0
  ec:	00000000 	nop
  f0:	80002044 	lb	zero,8260(zero)
  f4:	000012bc 	0x12bc
	...
 100:	0000001c 	0x1c
 104:	12d10002 	beq	s6,s1,110 <__isr_vec_space+0xf0>
 108:	00040000 	sll	zero,a0,0x0
 10c:	00000000 	nop
 110:	80003300 	lb	zero,13056(zero)
 114:	00000f9c 	0xf9c
	...
 120:	0000001c 	0x1c
 124:	1ee60002 	0x1ee60002
 128:	00040000 	sll	zero,a0,0x0
 12c:	00000000 	nop
 130:	8000429c 	lb	zero,17052(zero)
 134:	00000a58 	0xa58
	...
 140:	0000001c 	0x1c
 144:	25b50002 	addiu	s5,t5,2
 148:	00040000 	sll	zero,a0,0x0
 14c:	00000000 	nop
 150:	80004cf4 	lb	zero,19700(zero)
 154:	00003640 	sll	a2,zero,0x19
	...
 160:	0000001c 	0x1c
 164:	3f840002 	0x3f840002
 168:	00040000 	sll	zero,a0,0x0
 16c:	00000000 	nop
 170:	80008334 	lb	zero,-31948(zero)
 174:	00002088 	0x2088
	...
 180:	0000001c 	0x1c
 184:	50910002 	beql	a0,s1,190 <__isr_vec_space+0x170>
 188:	00040000 	sll	zero,a0,0x0
 18c:	00000000 	nop
 190:	8000a3bc 	lb	zero,-23620(zero)
 194:	000002ac 	0x2ac
	...
 1a0:	0000001c 	0x1c
 1a4:	532e0002 	beql	t9,t6,1b0 <__isr_vec_space+0x190>
 1a8:	00040000 	sll	zero,a0,0x0
 1ac:	00000000 	nop
 1b0:	8000a668 	lb	zero,-22936(zero)
 1b4:	00000558 	0x558
	...
 1c0:	0000001c 	0x1c
 1c4:	58270002 	0x58270002
 1c8:	00040000 	sll	zero,a0,0x0
 1cc:	00000000 	nop
 1d0:	8000abc0 	lb	zero,-21568(zero)
 1d4:	000003b4 	teq	zero,zero,0xe
	...
 1e0:	0000001c 	0x1c
 1e4:	5b180002 	0x5b180002
 1e8:	00040000 	sll	zero,a0,0x0
 1ec:	00000000 	nop
 1f0:	8000afbc 	lb	zero,-20548(zero)
 1f4:	00000028 	0x28
	...
 200:	0000001c 	0x1c
 204:	5c1e0002 	0x5c1e0002
 208:	00040000 	sll	zero,a0,0x0
 20c:	00000000 	nop
 210:	8000afe4 	lb	zero,-20508(zero)
 214:	0000003c 	0x3c
	...
 220:	00000014 	0x14
 224:	64fe0002 	0x64fe0002
 228:	00040000 	sll	zero,a0,0x0
	...
 238:	0000001c 	0x1c
 23c:	6d8e0002 	0x6d8e0002
 240:	00040000 	sll	zero,a0,0x0
 244:	00000000 	nop
 248:	8000b020 	lb	zero,-20448(zero)
 24c:	00000038 	0x38
	...
 258:	0000001c 	0x1c
 25c:	6e770002 	0x6e770002
 260:	00040000 	sll	zero,a0,0x0
 264:	00000000 	nop
 268:	8000b058 	lb	zero,-20392(zero)
 26c:	0000039c 	0x39c
	...
 278:	0000001c 	0x1c
 27c:	6f710002 	0x6f710002
 280:	00040000 	sll	zero,a0,0x0
 284:	00000000 	nop
 288:	8000b3f4 	lb	zero,-19468(zero)
 28c:	0000012c 	0x12c
	...
 298:	0000001c 	0x1c
 29c:	706b0002 	mul	zero,v1,t3
 2a0:	00040000 	sll	zero,a0,0x0
 2a4:	00000000 	nop
 2a8:	8000b520 	lb	zero,-19168(zero)
 2ac:	00000110 	0x110
	...
 2b8:	0000001c 	0x1c
 2bc:	799b0002 	shf.h	$w0,$w0,0x9b
 2c0:	00040000 	sll	zero,a0,0x0
 2c4:	00000000 	nop
 2c8:	8000b630 	lb	zero,-18896(zero)
 2cc:	00000180 	sll	zero,zero,0x6
	...
 2d8:	0000001c 	0x1c
 2dc:	82f00002 	lb	s0,2(s7)
 2e0:	00040000 	sll	zero,a0,0x0
 2e4:	00000000 	nop
 2e8:	8000b7b0 	lb	zero,-18512(zero)
 2ec:	00000088 	0x88
	...
 2f8:	0000001c 	0x1c
 2fc:	84160002 	lh	s6,2(zero)
 300:	00040000 	sll	zero,a0,0x0
 304:	00000000 	nop
 308:	8000b838 	lb	zero,-18376(zero)
 30c:	000000b8 	0xb8
	...
 318:	0000001c 	0x1c
 31c:	85030002 	lh	v1,2(t0)
 320:	00040000 	sll	zero,a0,0x0
 324:	00000000 	nop
 328:	8000b8f0 	lb	zero,-18192(zero)
 32c:	0000004c 	syscall	0x1
	...
 338:	00000024 	and	zero,zero,zero
 33c:	86120002 	lh	s2,2(s0)
 340:	00040000 	sll	zero,a0,0x0
 344:	00000000 	nop
 348:	80000000 	lb	zero,0(zero)
 34c:	00000194 	0x194
 350:	8000b9ec 	lb	zero,-17940(zero)
 354:	000001c8 	0x1c8
	...
 360:	0000001c 	0x1c
 364:	87000002 	lh	zero,2(t8)
 368:	00040000 	sll	zero,a0,0x0
 36c:	00000000 	nop
 370:	8000b93c 	lb	zero,-18116(zero)
 374:	000000b0 	tge	zero,zero,0x2
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000000e2 	0xe2
       4:	00000002 	srl	zero,zero,0x0
       8:	01040000 	0x1040000
       c:	00000000 	nop
      10:	80000200 	lb	zero,512(zero)
      14:	80000498 	lb	zero,1176(zero)
      18:	7263732f 	0x7263732f
      1c:	68637461 	0x68637461
      20:	66706d2f 	0x66706d2f
      24:	626f6a2f 	0x626f6a2f
      28:	34352f73 	ori	s5,at,0x2f73
      2c:	2f353933 	sltiu	s5,t9,14643
      30:	39303834 	xori	s0,t1,0x3834
      34:	34322f34 	ori	s2,at,0x2f34
      38:	38393130 	xori	t9,at,0x3130
      3c:	6168732f 	0x6168732f
      40:	2f646572 	sltiu	a0,k1,25970
      44:	2f636367 	sltiu	v1,k1,25447
      48:	6762696c 	0x6762696c
      4c:	73736f6c 	s16ldi	xr13,k1,438,ptn2
      50:	70696d2f 	0x70696d2f
      54:	61682f73 	0x61682f73
      58:	72632f6c 	s16ldi	xr13,s3,406,ptn0
      5c:	532e3074 	beql	t9,t6,c230 <__isr_vec_space+0xc210>
      60:	63732f00 	0x63732f00
      64:	63746172 	0x63746172
      68:	706d2f68 	lxhu	a1,v1,t5,3
      6c:	6f6a2f66 	0x6f6a2f66
      70:	352f7362 	ori	t7,t1,0x7362
      74:	35393334 	ori	t9,t1,0x3334
      78:	3038342f 	andi	t8,at,0x342f
      7c:	322f3439 	andi	t7,s1,0x3439
      80:	36323034 	ori	s2,s1,0x3034
      84:	6f772f32 	0x6f772f32
      88:	6f2f6b72 	0x6f2f6b72
      8c:	6d2d6a62 	0x6d2d6a62
      90:	2d737069 	sltiu	s3,t3,28777
      94:	2d69746d 	sltiu	t1,t3,29805
      98:	2f666c65 	sltiu	a2,k1,27749
      9c:	2f636367 	sltiu	v1,k1,25447
      a0:	7370696d 	s16sdi	xr5,k1,52,
      a4:	69746d2d 	0x69746d2d
      a8:	666c652d 	0x666c652d
      ac:	70696d2f 	0x70696d2f
      b0:	2d6c6573 	sltiu	t4,t3,25971
      b4:	732d3272 	0x732d3272
      b8:	2d74666f 	sltiu	s4,t3,26223
      bc:	6c77656e 	0x6c77656e
      c0:	6c2f6269 	0x6c2f6269
      c4:	6c2f6269 	0x6c2f6269
      c8:	6c676269 	0x6c676269
      cc:	2f73736f 	sltiu	s3,k1,29551
      d0:	7370696d 	s16sdi	xr5,k1,52,
      d4:	554e4700 	bnel	t2,t6,11cd8 <__isr_vec_space+0x11cb8>
      d8:	20534120 	addi	s3,v0,16672
      dc:	34322e32 	ori	s2,at,0x2e32
      e0:	0030392e 	0x30392e
      e4:	00688001 	movf	s0,v1,$fcc2
      e8:	00020000 	sll	zero,v0,0x0
      ec:	00000014 	0x14
      f0:	00f90104 	0xf90104
      f4:	00000000 	nop
      f8:	049c9fc0 	0x49c9fc0
      fc:	72739fc0 	s32madd	xr15,xr7,s3,s3
     100:	6f622f63 	0x6f622f63
     104:	532e746f 	beql	t9,t6,1d2c4 <__isr_vec_space+0x1d2a4>
     108:	6f682f00 	0x6f682f00
     10c:	672f656d 	0x672f656d
     110:	65686972 	0x65686972
     114:	54532f79 	bnel	v0,s3,befc <__isr_vec_space+0xbedc>
     118:	462f4455 	c1	0x2f4455
     11c:	52656572 	beql	s3,a1,196e8 <__isr_vec_space+0x196c8>
     120:	5f534f54 	0x5f534f54
     124:	7370696d 	s16sdi	xr5,k1,52,
     128:	6d65442f 	0x6d65442f
     12c:	494d2f6f 	0x494d2f6f
     130:	70665350 	s32ldd	xr13,v1,1616
     134:	435f6167 	c0	0x15f6167
     138:	5365646f 	beql	k1,a1,192f8 <__isr_vec_space+0x192d8>
     13c:	65706163 	0x65706163
     140:	554e4700 	bnel	t2,t6,11d44 <__isr_vec_space+0x11d24>
     144:	20534120 	addi	s3,v0,16672
     148:	34322e32 	ori	s2,at,0x2e32
     14c:	0030392e 	0x30392e
     150:	00918001 	movt	s0,a0,$fcc4
     154:	00020000 	sll	zero,v0,0x0
     158:	00000028 	0x28
     15c:	02220104 	0x2220104
     160:	063c0000 	0x63c0000
     164:	0a548000 	j	9520000 <__memory_size+0x9500800>
     168:	2e2e8000 	sltiu	t6,s1,-32768
     16c:	2f2e2e2f 	sltiu	t6,t9,11823
     170:	72756f53 	udi3	s3,s5,t5,0x1d
     174:	702f6563 	s8std	xr5,at,-39,ptn3
     178:	6174726f 	0x6174726f
     17c:	2f656c62 	sltiu	a1,k1,27746
     180:	65646f43 	0x65646f43
     184:	70616353 	udi3	v1,at,t4,0xd
     188:	494d2f65 	0x494d2f65
     18c:	70465350 	s32ldd	xr13,v0,1616
     190:	702f6167 	0x702f6167
     194:	5f74726f 	0x5f74726f
     198:	2e6d7361 	sltiu	t5,s3,29537
     19c:	682f0053 	0x682f0053
     1a0:	2f656d6f 	sltiu	a1,k1,28015
     1a4:	68697267 	0x68697267
     1a8:	532f7965 	beql	t9,t7,1e740 <__isr_vec_space+0x1e720>
     1ac:	2f445554 	sltiu	a0,k0,21844
     1b0:	65657246 	0x65657246
     1b4:	534f5452 	beql	k0,t7,15300 <__isr_vec_space+0x152e0>
     1b8:	70696d5f 	udi15	v1,t1,t5,0x15
     1bc:	65442f73 	0x65442f73
     1c0:	4d2f6f6d 	0x4d2f6f6d
     1c4:	66535049 	0x66535049
     1c8:	5f616770 	0x5f616770
     1cc:	65646f43 	0x65646f43
     1d0:	70616353 	udi3	v1,at,t4,0xd
     1d4:	4e470065 	c3	0x470065
     1d8:	53412055 	beql	k0,at,8330 <__isr_vec_space+0x8310>
     1dc:	322e3220 	andi	t6,s1,0x3220
     1e0:	30392e34 	andi	t9,at,0x2e34
     1e4:	73800100 	0x73800100
     1e8:	04000002 	bltz	zero,1f4 <__isr_vec_space+0x1d4>
     1ec:	00003c00 	sll	a3,zero,0x10
     1f0:	a5010400 	sh	at,1024(t0)
     1f4:	01000001 	movf	zero,t0,$fcc0
     1f8:	000000a6 	0xa6
     1fc:	00000163 	0x163
     200:	80000a54 	lb	zero,2644(zero)
     204:	00000480 	sll	zero,zero,0x12
     208:	00000304 	0x304
     20c:	09070402 	j	41c1008 <__memory_size+0x41a1808>
     210:	02000001 	movf	zero,s0,$fcc0
     214:	015a0504 	0x15a0504
     218:	04030000 	bgezl	zero,21c <__isr_vec_space+0x1fc>
     21c:	746e6905 	jalx	1b9a414 <__memory_size+0x1b7ac14>
     220:	06010200 	bgez	s0,a24 <__isr_vec_space+0xa04>
     224:	0000006a 	0x6a
     228:	00000004 	sllv	zero,zero,zero
     22c:	4c1c0200 	lwxc1	$f8,gp(zero)
     230:	02000000 	0x2000000
     234:	00680801 	movf	at,v1,$fcc2
     238:	02020000 	0x2020000
     23c:	00019b05 	0x19b05
     240:	07020200 	bltzl	t8,a44 <__isr_vec_space+0xa24>
     244:	00000093 	0x93
     248:	0000de04 	0xde04
     24c:	25380200 	addiu	t8,t1,512
     250:	02000000 	0x2000000
     254:	01550508 	0x1550508
     258:	08020000 	j	80000 <__memory_size+0x60800>
     25c:	00010407 	0x10407
     260:	07040200 	0x7040200
     264:	0000010e 	0x10e
     268:	32070402 	andi	a3,s0,0x402
     26c:	05000001 	bltz	t0,274 <__isr_vec_space+0x254>
     270:	08010204 	j	40810 <__memory_size+0x21010>
     274:	00000071 	tgeu	zero,zero,0x1
     278:	00000204 	0x204
     27c:	412a0300 	0x412a0300
     280:	04000000 	bltz	zero,284 <__isr_vec_space+0x264>
     284:	000000e0 	0xe0
     288:	00614203 	0x614203
     28c:	13040000 	beq	t8,a0,290 <__isr_vec_space+0x270>
     290:	04000002 	bltz	zero,29c <__isr_vec_space+0x27c>
     294:	00002c6c 	0x2c6c
     298:	02120400 	0x2120400
     29c:	6d040000 	0x6d040000
     2a0:	00000025 	move	zero,zero
     2a4:	00000a04 	0xa04
     2a8:	9c730400 	0x9c730400
     2ac:	04000000 	bltz	zero,2b0 <__isr_vec_space+0x290>
     2b0:	00000038 	0x38
     2b4:	00885805 	lsa	t3,a0,t0,0x1
     2b8:	f6040000 	sdc1	$f4,0(s0)
     2bc:	06000000 	bltz	s0,2c0 <__isr_vec_space+0x2a0>
     2c0:	00008876 	tne	zero,zero,0x221
     2c4:	00260600 	0x260600
     2c8:	93010000 	lbu	at,0(t8)
     2cc:	80000a54 	lb	zero,2644(zero)
     2d0:	00000044 	0x44
     2d4:	01029c01 	0x1029c01
     2d8:	1e070000 	0x1e070000
     2dc:	01000002 	0x1000002
     2e0:	0000b293 	0xb293
     2e4:	00910200 	0x910200
     2e8:	013b0800 	0x13b0800
     2ec:	b4010000 	0xb4010000
     2f0:	80000a98 	lb	zero,2712(zero)
     2f4:	00000198 	0x198
     2f8:	013a9c01 	0x13a9c01
     2fc:	54090000 	bnel	zero,t1,300 <__isr_vec_space+0x2e0>
     300:	0100000f 	0x100000f
     304:	0000d3b6 	tne	zero,zero,0x34e
     308:	70910200 	0x70910200
     30c:	0000540a 	0x540a
     310:	0bb80100 	j	ee00400 <__memory_size+0xede0c00>
     314:	00000046 	rorv	zero,zero,zero
     318:	0033be01 	0x33be01
     31c:	000c0000 	sll	zero,t4,0x0
     320:	00150d00 	sll	at,s5,0x14
     324:	fa010000 	sdc2	$1,0(s0)
     328:	80000c30 	lb	zero,3120(zero)
     32c:	00000088 	0x88
     330:	760e9c01 	jalx	83a7004 <__memory_size+0x8387804>
     334:	01000000 	0x1000000
     338:	0cb8010d 	jal	2e00434 <__memory_size+0x2de0c34>
     33c:	00a88000 	0xa88000
     340:	9c010000 	0x9c010000
     344:	0000018b 	0x18b
     348:	0000e90f 	0xe90f
     34c:	010d0100 	0x10d0100
     350:	00000088 	0x88
     354:	10009102 	b	fffe4760 <__flash_start+0x403e4760>
     358:	10010069 	beq	zero,at,500 <__isr_vec_space+0x4e0>
     35c:	00003301 	0x3301
     360:	70910200 	0x70910200
     364:	01006a10 	0x1006a10
     368:	00330111 	0x330111
     36c:	91020000 	lbu	v0,0(t0)
     370:	01110074 	teq	t0,s1,0x1
     374:	01000002 	0x1000002
     378:	0d60011b 	jal	580046c <__memory_size+0x57e0c6c>
     37c:	00708000 	0x708000
     380:	9c010000 	0x9c010000
     384:	000001cf 	sync	0x7
     388:	0000e90f 	0xe90f
     38c:	011b0100 	0x11b0100
     390:	00000088 	0x88
     394:	12009102 	beqz	s0,fffe47a0 <__flash_start+0x403e47a0>
     398:	00000147 	0x147
     39c:	bd011d01 	cache	0x1,7425(t0)
     3a0:	02000000 	0x2000000
     3a4:	c0127091 	ll	s2,28817(zero)
     3a8:	01000000 	0x1000000
     3ac:	01cf011e 	0x1cf011e
     3b0:	91020000 	lbu	v0,0(t0)
     3b4:	25130074 	addiu	s3,t0,116
     3b8:	11000000 	beqz	t0,3bc <__isr_vec_space+0x39c>
     3bc:	0000007f 	0x7f
     3c0:	d0013a01 	0xd0013a01
     3c4:	cc80000d 	pref	0x0,13(a0)
     3c8:	01000000 	0x1000000
     3cc:	0002239c 	0x2239c
     3d0:	00e90f00 	0xe90f00
     3d4:	3a010000 	xori	at,s0,0x0
     3d8:	00008801 	movf	s1,zero,$fcc0
     3dc:	00910200 	0x910200
     3e0:	0000ce12 	0xce12
     3e4:	013c0100 	0x13c0100
     3e8:	00000025 	move	zero,zero
     3ec:	10749102 	beq	v1,s4,fffe47f8 <__flash_start+0x403e47f8>
     3f0:	40010069 	0x40010069
     3f4:	00003301 	0x3301
     3f8:	70910200 	0x70910200
     3fc:	0000460b 	0x460b
     400:	33be0100 	andi	s8,sp,0x100
     404:	0c000000 	jal	0 <hardware_exit_hook>
     408:	1b110000 	0x1b110000
     40c:	01000001 	movf	zero,t0,$fcc0
     410:	0e9c0159 	jal	a700564 <__memory_size+0xa6e0d64>
     414:	00388000 	0x388000
     418:	9c010000 	0x9c010000
     41c:	00000249 	0x249
     420:	000f540f 	0xf540f
     424:	01590100 	0x1590100
     428:	000000d3 	0xd3
     42c:	00009102 	srl	s2,zero,0x4
     430:	00202109 	0x202109
     434:	c8b00100 	lwc2	$16,256(a1)
     438:	05000000 	bltz	t0,43c <__isr_vec_space+0x41c>
     43c:	00c25c03 	0xc25c03
     440:	00b81480 	0xb81480
     444:	90010000 	lbu	at,0(zero)
     448:	0000026b 	0x26b
     44c:	c2300305 	ll	s0,773(s1)
     450:	04158000 	0x4158000
     454:	00000271 	tgeu	zero,zero,0x9
     458:	00003316 	0x3316
     45c:	02180000 	0x2180000
     460:	00040000 	sll	zero,a0,0x0
     464:	00000190 	0x190
     468:	01a50104 	0x1a50104
     46c:	9a010000 	lwr	at,0(s0)
     470:	63000002 	0x63000002
     474:	d4000001 	ldc1	$f0,1(zero)
     478:	e880000e 	swc2	$0,14(a0)
     47c:	ff000001 	sdc3	$0,1(t8)
     480:	02000004 	sllv	zero,zero,s0
     484:	015a0504 	0x15a0504
     488:	04020000 	bltzl	zero,48c <__isr_vec_space+0x46c>
     48c:	00010907 	0x10907
     490:	05040300 	0x5040300
     494:	00746e69 	0x746e69
     498:	6a060102 	0x6a060102
     49c:	02000000 	0x2000000
     4a0:	00680801 	movf	at,v1,$fcc2
     4a4:	02020000 	0x2020000
     4a8:	00019b05 	0x19b05
     4ac:	07020200 	bltzl	t8,cb0 <__isr_vec_space+0xc90>
     4b0:	00000093 	0x93
     4b4:	0000de04 	0xde04
     4b8:	2c380200 	sltiu	t8,at,512
     4bc:	02000000 	0x2000000
     4c0:	01550508 	0x1550508
     4c4:	08020000 	j	80000 <__memory_size+0x60800>
     4c8:	00010407 	0x10407
     4cc:	00e00400 	0xe00400
     4d0:	42030000 	c0	0x30000
     4d4:	00000056 	0x56
     4d8:	0e070402 	jal	81c1008 <__memory_size+0x81a1808>
     4dc:	05000001 	bltz	t0,4e4 <__isr_vec_space+0x4c4>
     4e0:	07040204 	0x7040204
     4e4:	00000132 	tlt	zero,zero,0x4
     4e8:	00900406 	0x900406
     4ec:	01020000 	0x1020000
     4f0:	00007108 	0x7108
     4f4:	02460700 	0x2460700
     4f8:	93040000 	lbu	a0,0(t8)
     4fc:	00007a03 	sra	t7,zero,0x8
     500:	02390400 	0x2390400
     504:	67050000 	0x67050000
     508:	00000081 	0x81
     50c:	00b40406 	0xb40406
     510:	90080000 	lbu	t0,0(zero)
     514:	09000000 	j	4000000 <__memory_size+0x3fe0800>
     518:	0000024e 	0x24e
     51c:	00338a01 	0x338a01
     520:	0ed40000 	jal	b500000 <__memory_size+0xb4e0800>
     524:	00388000 	0x388000
     528:	9c010000 	0x9c010000
     52c:	00025e0a 	0x25e0a
     530:	0ca00100 	jal	2800400 <__memory_size+0x27e0c00>
     534:	2080000f 	addi	zero,a0,15
     538:	01000000 	0x1000000
     53c:	026f0b9c 	0x26f0b9c
     540:	a6010000 	sh	at,0(s0)
     544:	80000f2c 	lb	zero,3884(zero)
     548:	00000064 	0x64
     54c:	01249c01 	0x1249c01
     550:	3c0c0000 	lui	t4,0x0
     554:	4c80000f 	prefx	0x0,zero(a0)
     558:	0d000000 	jal	4000000 <__memory_size+0x3fe0800>
     55c:	000002e2 	0x2e2
     560:	006fb201 	0x6fb201
     564:	91020000 	lbu	v0,0(t0)
     568:	0f3c0c70 	jal	cf031c0 <__memory_size+0xcee39c0>
     56c:	000c8000 	sll	s0,t4,0x0
     570:	5f0e0000 	0x5f0e0000
     574:	0100725f 	0x100725f
     578:	00002cb2 	tlt	zero,zero,0xb2
     57c:	006f0100 	0x6f0100
     580:	eb0f0000 	swc2	$15,0(t8)
     584:	01000002 	0x1000002
     588:	000f90b7 	0xf90b7
     58c:	00002080 	sll	a0,zero,0x2
     590:	0b9c0100 	j	e700400 <__memory_size+0xe6e0c00>
     594:	000002c4 	0x2c4
     598:	0fb0c501 	jal	ec31404 <__memory_size+0xec11c04>
     59c:	006c8000 	0x6c8000
     5a0:	9c010000 	0x9c010000
     5a4:	00000196 	0x196
     5a8:	0002a510 	0x2a510
     5ac:	a3c50100 	sb	a1,256(s8)
     5b0:	02000000 	0x2000000
     5b4:	ac100091 	sw	s0,145(zero)
     5b8:	01000002 	0x1000002
     5bc:	00008ac5 	0x8ac5
     5c0:	04910200 	bgezal	a0,dc4 <__isr_vec_space+0xda4>
     5c4:	000fc80c 	syscall	0x3f20
     5c8:	00004c80 	sll	t1,zero,0x12
     5cc:	02e20d00 	0x2e20d00
     5d0:	ce010000 	pref	0x1,0(s0)
     5d4:	0000006f 	0x6f
     5d8:	0c709102 	jal	1c24408 <__memory_size+0x1c04c08>
     5dc:	80000fc8 	lb	zero,4040(zero)
     5e0:	0000000c 	syscall
     5e4:	725f5f0e 	q16add	xr12,xr7,xr13,xr7,SA,LW
     5e8:	2cce0100 	sltiu	t6,a2,256
     5ec:	01000000 	0x1000000
     5f0:	0000006f 	0x6f
     5f4:	00022411 	0x22411
     5f8:	1cd30100 	0x1cd30100
     5fc:	40800010 	0x40800010
     600:	01000000 	0x1000000
     604:	00460b9c 	0x460b9c
     608:	ea010000 	swc2	$1,0(s0)
     60c:	8000105c 	lb	zero,4188(zero)
     610:	00000060 	0x60
     614:	01f59c01 	0x1f59c01
     618:	8c100000 	lw	s0,0(zero)
     61c:	01000002 	0x1000002
     620:	0000aeea 	0xaeea
     624:	00910200 	0x910200
     628:	00029310 	0x29310
     62c:	2cea0100 	sltiu	t2,a3,256
     630:	02000000 	0x2000000
     634:	530d0491 	beql	t8,t5,187c <__isr_vec_space+0x185c>
     638:	01000002 	0x1000002
     63c:	0001f5ec 	0x1f5ec
     640:	70910200 	0x70910200
     644:	0002b70d 	break	0x2,0x2dc
     648:	00ed0100 	0xed0100
     64c:	02000002 	0x2000002
     650:	06007491 	bltz	s0,1d898 <__isr_vec_space+0x1d878>
     654:	0001fb04 	0x1fb04
     658:	00901200 	0x901200
     65c:	2c120000 	sltiu	s2,zero,0
     660:	13000000 	beqz	t8,664 <__isr_vec_space+0x644>
     664:	000000b8 	0xb8
     668:	02107801 	movf	t7,s0,$fcc4
     66c:	04060000 	0x4060000
     670:	00000216 	0x216
     674:	00003312 	0x3312
     678:	02480000 	0x2480000
     67c:	00040000 	sll	zero,a0,0x0
     680:	000002b3 	tltu	zero,zero,0xa
     684:	01a50104 	0x1a50104
     688:	53010000 	beql	t8,at,68c <__isr_vec_space+0x66c>
     68c:	63000003 	0x63000003
     690:	bc000001 	cache	0x0,1(zero)
     694:	ec800010 	swc3	$0,16(a0)
     698:	aa000003 	swl	zero,3(s0)
     69c:	02000006 	srlv	zero,zero,s0
     6a0:	015a0504 	0x15a0504
     6a4:	04020000 	bltzl	zero,6a8 <__isr_vec_space+0x688>
     6a8:	00010907 	0x10907
     6ac:	05040300 	0x5040300
     6b0:	00746e69 	0x746e69
     6b4:	6a060102 	0x6a060102
     6b8:	04000000 	bltz	zero,6bc <__isr_vec_space+0x69c>
     6bc:	00000000 	nop
     6c0:	004c1c02 	0x4c1c02
     6c4:	01020000 	0x1020000
     6c8:	00006808 	0x6808
     6cc:	05020200 	bltzl	t0,ed0 <__isr_vec_space+0xeb0>
     6d0:	0000019b 	0x19b
     6d4:	93070202 	lbu	a3,514(t8)
     6d8:	04000000 	bltz	zero,6dc <__isr_vec_space+0x6bc>
     6dc:	000000de 	0xde
     6e0:	002c3802 	ror	a3,t4,0x0
     6e4:	08020000 	j	80000 <__memory_size+0x60800>
     6e8:	00015505 	0x15505
     6ec:	07080200 	tgei	t8,512
     6f0:	00000104 	0x104
     6f4:	00000204 	0x204
     6f8:	412a0300 	0x412a0300
     6fc:	04000000 	bltz	zero,700 <__isr_vec_space+0x6e0>
     700:	000000e0 	0xe0
     704:	00614203 	0x614203
     708:	04020000 	bltzl	zero,70c <__isr_vec_space+0x6ec>
     70c:	00010e07 	0x10e07
     710:	02040500 	0x2040500
     714:	01320704 	0x1320704
     718:	01020000 	0x1020000
     71c:	00007108 	0x7108
     720:	02130400 	0x2130400
     724:	6c040000 	0x6c040000
     728:	00000025 	move	zero,zero
     72c:	00021204 	0x21204
     730:	2c6d0400 	sltiu	t5,v1,1024
     734:	04000000 	bltz	zero,738 <__isr_vec_space+0x718>
     738:	00000239 	0x239
     73c:	00976705 	0x976705
     740:	38040000 	xori	a0,zero,0x0
     744:	06000000 	bltz	s0,748 <__isr_vec_space+0x728>
     748:	00009758 	0x9758
     74c:	030c0600 	0x30c0600
     750:	6a010000 	0x6a010000
     754:	800010bc 	lb	zero,4284(zero)
     758:	00000078 	0x78
     75c:	01059c01 	0x1059c01
     760:	9a070000 	lwr	a3,0(s0)
     764:	01000003 	0x1000003
     768:	0000b26a 	0xb26a
     76c:	00910200 	0x910200
     770:	0003c908 	0x3c908
     774:	056c0100 	teqi	t3,256
     778:	02000001 	movf	zero,s0,$fcc0
     77c:	09007091 	j	401c244 <__memory_size+0x3ffca44>
     780:	000000b2 	tlt	zero,zero,0x2
     784:	0003760a 	0x3760a
     788:	34780100 	ori	t8,v1,0x100
     78c:	9c800011 	0x9c800011
     790:	01000001 	movf	zero,t0,$fcc0
     794:	00017f9c 	0x17f9c
     798:	00e90700 	0xe90700
     79c:	78010000 	andi.b	$w0,$w0,0x1
     7a0:	00000097 	0x97
     7a4:	08009102 	j	24408 <__memory_size+0x4c08>
     7a8:	0000032b 	0x32b
     7ac:	00c87a01 	0xc87a01
     7b0:	91020000 	lbu	v0,0(t0)
     7b4:	03c90868 	0x3c90868
     7b8:	7b010000 	xori.b	$w0,$w0,0x1
     7bc:	00000105 	0x105
     7c0:	08649102 	j	1924408 <__memory_size+0x1904c08>
     7c4:	00000336 	tne	zero,zero,0xc
     7c8:	00857c01 	0x857c01
     7cc:	91020000 	lbu	v0,0(t0)
     7d0:	02e2086c 	0x2e2086c
     7d4:	7c010000 	ext	at,zero,0x0,0x1
     7d8:	00000085 	lsa	zero,zero,zero,0x3
     7dc:	0b609102 	j	d824408 <__memory_size+0xd804c08>
     7e0:	7c010078 	extrv.w	at,$ac0,zero
     7e4:	00000085 	lsa	zero,zero,zero,0x3
     7e8:	0c709102 	jal	1c24408 <__memory_size+0x1c04c08>
     7ec:	00000046 	rorv	zero,zero,zero
     7f0:	00338401 	0x338401
     7f4:	000d0000 	sll	zero,t5,0x0
     7f8:	03f70e00 	0x3f70e00
     7fc:	c1010000 	ll	at,0(t0)
     800:	000000a7 	0xa7
     804:	800012d0 	lb	zero,4816(zero)
     808:	00000064 	0x64
     80c:	01a79c01 	0x1a79c01
     810:	3d080000 	0x3d080000
     814:	01000011 	mthi	t0
     818:	0000a7c3 	sra	s4,zero,0x1f
     81c:	70910200 	0x70910200
     820:	03a50600 	0x3a50600
     824:	d9010000 	ldc2	$1,0(t0)
     828:	80001334 	lb	zero,4916(zero)
     82c:	00000174 	teq	zero,zero,0x5
     830:	02139c01 	0x2139c01
     834:	00080000 	sll	zero,t0,0x0
     838:	01000003 	0x1000003
     83c:	000085db 	0x85db
     840:	68030500 	0x68030500
     844:	088000c2 	j	2000308 <__memory_size+0x1fe0b08>
     848:	0000034d 	break	0x0,0xd
     84c:	0213dc01 	0x213dc01
     850:	91020000 	lbu	v0,0(t0)
     854:	0325086c 	0x325086c
     858:	dc010000 	ldc3	$1,0(zero)
     85c:	00000213 	0x213
     860:	08709102 	j	1c24408 <__memory_size+0x1c04c08>
     864:	000003e1 	0x3e1
     868:	0213dc01 	0x213dc01
     86c:	91020000 	lbu	v0,0(t0)
     870:	03c40868 	0x3c40868
     874:	dd010000 	ldc3	$1,0(t0)
     878:	00000085 	lsa	zero,zero,zero,0x3
     87c:	0c749102 	jal	1d24408 <__memory_size+0x1d04c08>
     880:	00000046 	rorv	zero,zero,zero
     884:	00338401 	0x338401
     888:	000d0000 	sll	zero,t5,0x0
     88c:	00850900 	0x850900
     890:	8c080000 	lw	t0,0(zero)
     894:	01000003 	0x1000003
     898:	0000855e 	0x855e
     89c:	60030500 	0x60030500
     8a0:	088000c2 	j	2000308 <__memory_size+0x1fe0b08>
     8a4:	0000033e 	0x33e
     8a8:	00a76201 	0xa76201
     8ac:	03050000 	0x3050000
     8b0:	8000c234 	lb	zero,-15820(zero)
     8b4:	0003d708 	0x3d708
     8b8:	c8660100 	lwc2	$6,256(v1)
     8bc:	05000000 	bltz	t0,8c0 <__isr_vec_space+0x8a0>
     8c0:	00c26403 	0xc26403
     8c4:	05590080 	0x5590080
     8c8:	00040000 	sll	zero,a0,0x0
     8cc:	00000389 	0x389
     8d0:	01a50104 	0x1a50104
     8d4:	43010000 	c0	0x1010000
     8d8:	63000006 	0x63000006
     8dc:	a8000001 	swl	zero,1(zero)
     8e0:	9c800014 	0x9c800014
     8e4:	7e00000b 	0x7e00000b
     8e8:	02000008 	jr	s0
     8ec:	00000472 	tlt	zero,zero,0x11
     8f0:	0030d402 	ror	k0,s0,0x10
     8f4:	04030000 	bgezl	zero,8f8 <__isr_vec_space+0x8d8>
     8f8:	00010907 	0x10907
     8fc:	05040400 	0x5040400
     900:	00746e69 	0x746e69
     904:	5a050403 	0x5a050403
     908:	03000001 	movf	zero,t8,$fcc0
     90c:	006a0601 	0x6a0601
     910:	00020000 	sll	zero,v0,0x0
     914:	03000000 	0x3000000
     918:	0000571c 	0x571c
     91c:	08010300 	j	40c00 <__memory_size+0x21400>
     920:	00000068 	0x68
     924:	9b050203 	lwr	a1,515(t8)
     928:	03000001 	movf	zero,t8,$fcc0
     92c:	00930702 	0x930702
     930:	de020000 	ldc3	$2,0(s0)
     934:	03000000 	0x3000000
     938:	00003038 	0x3038
     93c:	05080300 	tgei	t0,768
     940:	00000155 	0x155
     944:	04070803 	aclr	0x0,-2045(zero)
     948:	03000001 	movf	zero,t8,$fcc0
     94c:	010e0704 	0x10e0704
     950:	04030000 	bgezl	zero,954 <__isr_vec_space+0x934>
     954:	00013207 	0x13207
     958:	03040500 	0x3040500
     95c:	00710801 	movt	at,v1,$fcc4
     960:	02020000 	0x2020000
     964:	04000000 	bltz	zero,968 <__isr_vec_space+0x948>
     968:	00004c2a 	0x4c2a
     96c:	00e00200 	0xe00200
     970:	42040000 	c0	0x40000
     974:	0000006c 	0x6c
     978:	00021302 	srl	v0,v0,0xc
     97c:	3e6c0500 	0x3e6c0500
     980:	02000000 	0x2000000
     984:	00000212 	0x212
     988:	00306d05 	0x306d05
     98c:	0a020000 	j	8080000 <__memory_size+0x8060800>
     990:	05000000 	bltz	t0,994 <__isr_vec_space+0x974>
     994:	0000a773 	tltu	zero,zero,0x29d
     998:	02390200 	0x2390200
     99c:	67060000 	0x67060000
     9a0:	00000093 	0x93
     9a4:	00003802 	srl	a3,zero,0x0
     9a8:	93580700 	lbu	t8,1792(k0)
     9ac:	02000000 	0x2000000
     9b0:	000004fe 	0x4fe
     9b4:	00935f07 	0x935f07
     9b8:	2e020000 	sltiu	v0,s0,0
     9bc:	07000005 	bltz	t8,9d4 <__isr_vec_space+0x9b4>
     9c0:	00009366 	0x9366
     9c4:	01040600 	0x1040600
     9c8:	00011a8a 	0x11a8a
     9cc:	05450700 	0x5450700
     9d0:	07000000 	bltz	t8,9d4 <__isr_vec_space+0x9b4>
     9d4:	00000698 	0x698
     9d8:	067c0701 	0x67c0701
     9dc:	00020000 	sll	zero,v0,0x0
     9e0:	00066802 	srl	t5,a2,0x0
     9e4:	ff8e0100 	sdc3	$14,256(gp)
     9e8:	08000000 	j	0 <hardware_exit_hook>
     9ec:	000005cb 	0x5cb
     9f0:	14a8e901 	bne	a1,t0,ffffadf8 <__flash_start+0x403fadf8>
     9f4:	00a88000 	0xa88000
     9f8:	9c010000 	0x9c010000
     9fc:	0005ad09 	0x5ad09
     a00:	b2fc0100 	0xb2fc0100
     a04:	50000000 	beqzl	zero,a08 <__isr_vec_space+0x9e8>
     a08:	14800015 	bnez	a0,a60 <__isr_vec_space+0xa40>
     a0c:	01000001 	movf	zero,t0,$fcc0
     a10:	00019f9c 	0x19f9c
     a14:	06210a00 	bgez	s1,3218 <__isr_vec_space+0x31f8>
     a18:	fe010000 	sdc3	$1,0(s0)
     a1c:	000000a7 	0xa7
     a20:	c27c0305 	ll	gp,773(s3)
     a24:	150a8000 	bne	t0,t2,fffe0a28 <__flash_start+0x403e0a28>
     a28:	01000007 	srav	zero,zero,t0
     a2c:	0000a7fe 	0xa7fe
     a30:	80030500 	lb	v1,1280(zero)
     a34:	0a8000c2 	j	a000308 <__memory_size+0x9fe0b08>
     a38:	00000726 	0x726
     a3c:	019fff01 	0x19fff01
     a40:	03050000 	0x3050000
     a44:	8000c374 	lb	zero,-15500(zero)
     a48:	00113d0b 	0x113d0b
     a4c:	01000100 	0x1000100
     a50:	000000b2 	tlt	zero,zero,0x2
     a54:	0c709102 	jal	1c24408 <__memory_size+0x1c04c08>
     a58:	00010078 	0x10078
     a5c:	0000b201 	0xb201
     a60:	74910200 	jalx	2440800 <__memory_size+0x2421000>
     a64:	00a70d00 	0xa70d00
     a68:	01af0000 	0x1af0000
     a6c:	8c0e0000 	lw	t6,0(zero)
     a70:	02000000 	0x2000000
     a74:	05170f00 	0x5170f00
     a78:	2c010000 	sltiu	at,zero,0
     a7c:	00166401 	0x166401
     a80:	00010c80 	sll	at,at,0x12
     a84:	029c0100 	0x29c0100
     a88:	10000002 	b	a94 <__isr_vec_space+0xa74>
     a8c:	000000e9 	0xe9
     a90:	93012c01 	lbu	at,11265(t8)
     a94:	02000000 	0x2000000
     a98:	3d0b0091 	0x3d0b0091
     a9c:	01000007 	srav	zero,zero,t0
     aa0:	00a7012e 	0xa7012e
     aa4:	91020000 	lbu	v0,0(t0)
     aa8:	04190b70 	0x4190b70
     aac:	2f010000 	sltiu	at,t8,0
     ab0:	00002501 	0x2501
     ab4:	68910200 	0x68910200
     ab8:	0004970b 	0x4970b
     abc:	01300100 	0x1300100
     ac0:	000000de 	0xde
     ac4:	006c9102 	0x6c9102
     ac8:	0006600f 	0x6600f
     acc:	015f0100 	0x15f0100
     ad0:	80001770 	lb	zero,6000(zero)
     ad4:	000000fc 	0xfc
     ad8:	023d9c01 	0x23d9c01
     adc:	b30b0000 	0xb30b0000
     ae0:	01000004 	sllv	zero,zero,t0
     ae4:	00bd0161 	0xbd0161
     ae8:	03050000 	0x3050000
     aec:	8000c284 	lb	zero,-15740(zero)
     af0:	0006700b 	movn	t6,zero,a2
     af4:	01620100 	0x1620100
     af8:	0000011a 	0x11a
     afc:	c2880305 	ll	t0,773(s4)
     b00:	0f008000 	jal	c020000 <__memory_size+0xc000800>
     b04:	000005fd 	0x5fd
     b08:	6c018f01 	0x6c018f01
     b0c:	f4800018 	sdc1	$f0,24(a0)
     b10:	01000000 	0x1000000
     b14:	0002909c 	0x2909c
     b18:	00e91000 	0xe91000
     b1c:	8f010000 	lw	at,0(t8)
     b20:	00009301 	0x9301
     b24:	00910200 	0x910200
     b28:	00048c0b 	0x48c0b
     b2c:	01910100 	0x1910100
     b30:	000000a7 	0xa7
     b34:	0b709102 	j	dc24408 <__memory_size+0xdc04c08>
     b38:	000004a3 	0x4a3
     b3c:	de019201 	ldc3	$1,-28159(s0)
     b40:	02000000 	0x2000000
     b44:	160b6c91 	bne	s0,t3,1bd8c <__isr_vec_space+0x1bd6c>
     b48:	01000006 	srlv	zero,zero,t0
     b4c:	00c80193 	0xc80193
     b50:	91020000 	lbu	v0,0(t0)
     b54:	bf110068 	cache	0x11,104(t8)
     b58:	01000006 	srlv	zero,zero,t0
     b5c:	196001d1 	blez	t3,12a4 <__isr_vec_space+0x1284>
     b60:	00688000 	0x688000
     b64:	9c010000 	0x9c010000
     b68:	000002b9 	0x2b9
     b6c:	0003000b 	movn	zero,zero,v1
     b70:	01d30100 	0x1d30100
     b74:	000000a7 	0xa7
     b78:	c28c0305 	ll	t4,773(s4)
     b7c:	0f008000 	jal	c020000 <__memory_size+0xc000800>
     b80:	00000437 	0x437
     b84:	c801ea01 	lwc2	$1,-5631(zero)
     b88:	78800019 	copy_s.b	zero,$w0[0]
     b8c:	01000001 	movf	zero,t0,$fcc0
     b90:	0003379c 	0x3379c
     b94:	048c1000 	teqi	a0,4096
     b98:	ea010000 	swc2	$1,0(s0)
     b9c:	0000a701 	0xa701
     ba0:	00910200 	0x910200
     ba4:	0005740b 	0x5740b
     ba8:	01ec0100 	0x1ec0100
     bac:	000000a7 	0xa7
     bb0:	c2900305 	ll	s0,773(s4)
     bb4:	bb0b8000 	swr	t3,-32768(t8)
     bb8:	01000004 	sllv	zero,zero,t0
     bbc:	00a701ec 	0xa701ec
     bc0:	03050000 	0x3050000
     bc4:	8000c240 	lb	zero,-15808(zero)
     bc8:	0019f012 	0x19f012
     bcc:	00009480 	sll	s2,zero,0x12
     bd0:	00031e00 	sll	v1,v1,0x18
     bd4:	00461300 	0x461300
     bd8:	0f010000 	jal	c040000 <__memory_size+0xc020800>
     bdc:	00003702 	srl	a2,zero,0x1c
     be0:	00001400 	sll	v0,zero,0x10
     be4:	001a9415 	0x1a9415
     be8:	00009480 	sll	s2,zero,0x12
     bec:	00461300 	0x461300
     bf0:	0f010000 	jal	c040000 <__memory_size+0xc020800>
     bf4:	00003702 	srl	a2,zero,0x1c
     bf8:	00001400 	sll	v0,zero,0x10
     bfc:	04d51600 	0x4d51600
     c00:	3a010000 	xori	at,s0,0x0
     c04:	0000b202 	srl	s6,zero,0x8
     c08:	001b4000 	sll	t0,k1,0x0
     c0c:	0000f080 	sll	s8,zero,0x2
     c10:	b39c0100 	0xb39c0100
     c14:	10000003 	b	c24 <__isr_vec_space+0xc04>
     c18:	0000048c 	syscall	0x12
     c1c:	a7023a01 	sh	v0,14849(t8)
     c20:	02000000 	0x2000000
     c24:	79100091 	subsus_u.b	$w2,$w0,$w16
     c28:	01000004 	sllv	zero,zero,t0
     c2c:	00a7023a 	0xa7023a
     c30:	91020000 	lbu	v0,0(t0)
     c34:	113d0b04 	beq	t1,sp,3848 <__isr_vec_space+0x3828>
     c38:	3c010000 	lui	at,0x0
     c3c:	0000b202 	srl	s6,zero,0x8
     c40:	70910200 	0x70910200
     c44:	001b7412 	0x1b7412
     c48:	00004880 	sll	t1,zero,0x2
     c4c:	00039a00 	sll	s3,v1,0x8
     c50:	00461300 	0x461300
     c54:	0f010000 	jal	c040000 <__memory_size+0xc020800>
     c58:	00003702 	srl	a2,zero,0x1c
     c5c:	00001400 	sll	v0,zero,0x10
     c60:	001bcc15 	0x1bcc15
     c64:	00004880 	sll	t1,zero,0x2
     c68:	00461300 	0x461300
     c6c:	0f010000 	jal	c040000 <__memory_size+0xc020800>
     c70:	00003702 	srl	a2,zero,0x1c
     c74:	00001400 	sll	v0,zero,0x10
     c78:	06f50f00 	0x6f50f00
     c7c:	53010000 	beql	t8,at,c80 <__isr_vec_space+0xc60>
     c80:	001c3002 	srl	a2,gp,0x0
     c84:	00008480 	sll	s0,zero,0x12
     c88:	e89c0100 	swc2	$28,256(a0)
     c8c:	0b000003 	j	c00000c <__memory_size+0xbfe080c>
     c90:	000004a3 	0x4a3
     c94:	f4025501 	sdc1	$f2,21761(zero)
     c98:	02000000 	0x2000000
     c9c:	8c0b7091 	lw	t3,28817(zero)
     ca0:	01000004 	sllv	zero,zero,t0
     ca4:	00a70256 	0xa70256
     ca8:	91020000 	lbu	v0,0(t0)
     cac:	570f0074 	bnel	t8,t7,e80 <__isr_vec_space+0xe60>
     cb0:	01000004 	sllv	zero,zero,t0
     cb4:	1cb4026b 	0x1cb4026b
     cb8:	00a88000 	0xa88000
     cbc:	9c010000 	0x9c010000
     cc0:	00000411 	0x411
     cc4:	00041a0b 	0x41a0b
     cc8:	026d0100 	0x26d0100
     ccc:	000000b2 	tlt	zero,zero,0x2
     cd0:	c2940305 	ll	s4,773(s4)
     cd4:	0f008000 	jal	c020000 <__memory_size+0xc000800>
     cd8:	00000554 	0x554
     cdc:	5c028301 	0x5c028301
     ce0:	7480001d 	jalx	2000074 <__memory_size+0x1fe0874>
     ce4:	01000002 	0x1000002
     ce8:	00045c9c 	0x45c9c
     cec:	00780c00 	0x780c00
     cf0:	b2028501 	0xb2028501
     cf4:	02000000 	0x2000000
     cf8:	c00b7091 	ll	t3,28817(zero)
     cfc:	01000000 	0x1000000
     d00:	00a70286 	0xa70286
     d04:	91020000 	lbu	v0,0(t0)
     d08:	1d8c1574 	0x1d8c1574
     d0c:	00e48000 	0xe48000
     d10:	46130000 	add.s	$f0,$f0,$f19
     d14:	01000000 	0x1000000
     d18:	0037020f 	0x37020f
     d1c:	00140000 	sll	zero,s4,0x0
     d20:	0f170000 	jal	c5c0000 <__memory_size+0xc5a0800>
     d24:	01000005 	lsa	zero,t0,zero,0x1
     d28:	002502d7 	0x2502d7
     d2c:	1fd00000 	0x1fd00000
     d30:	00488000 	0x488000
     d34:	9c010000 	0x9c010000
     d38:	0005df18 	0x5df18
     d3c:	02de0100 	0x2de0100
     d40:	80002018 	lb	zero,8216(zero)
     d44:	0000002c 	0x2c
     d48:	04989c01 	0x4989c01
     d4c:	34100000 	li	s0,0x0
     d50:	01000006 	srlv	zero,zero,t0
     d54:	002502de 	0x2502de
     d58:	91020000 	lbu	v0,0(t0)
     d5c:	de0d0000 	ldc3	$13,0(s0)
     d60:	a8000000 	swl	zero,0(zero)
     d64:	0e000004 	jal	8000010 <__memory_size+0x7fe0810>
     d68:	0000008c 	syscall	0x2
     d6c:	3b0a0002 	xori	t2,t8,0x2
     d70:	01000006 	srlv	zero,zero,t0
     d74:	000498c4 	0x498c4
     d78:	5c030500 	0x5c030500
     d7c:	0a8000c3 	j	a00030c <__memory_size+0x9fe0b0c>
     d80:	00000561 	0x561
     d84:	019fc801 	0x19fc801
     d88:	03050000 	0x3050000
     d8c:	8000c368 	lb	zero,-15512(zero)
     d90:	00044d0a 	0x44d0a
     d94:	e9cb0100 	swc2	$11,256(t6)
     d98:	05000000 	bltz	t0,d9c <__isr_vec_space+0xd7c>
     d9c:	00c26c03 	0xc26c03
     da0:	058f0a80 	0x58f0a80
     da4:	d2010000 	0xd2010000
     da8:	000004ec 	0x4ec
     dac:	c2700305 	ll	s0,773(s3)
     db0:	a7198000 	sh	t9,-32768(t8)
     db4:	0a000000 	j	8000000 <__memory_size+0x7fe0800>
     db8:	000005e8 	0x5e8
     dbc:	0502d601 	bltzl	t0,ffff65c4 <__flash_start+0x403f65c4>
     dc0:	03050000 	0x3050000
     dc4:	8000c238 	lb	zero,-15816(zero)
     dc8:	0000b219 	0xb219
     dcc:	059e0a00 	0x59e0a00
     dd0:	da010000 	ldc2	$1,0(s0)
     dd4:	00000502 	srl	zero,zero,0x14
     dd8:	c2740305 	ll	s4,773(s3)
     ddc:	2a0a8000 	slti	t2,s0,-32768
     de0:	01000004 	sllv	zero,zero,t0
     de4:	0004ecdf 	0x4ecdf
     de8:	3c030500 	lui	v1,0x500
     dec:	0a8000c2 	j	a000308 <__memory_size+0x9fe0b08>
     df0:	0000068d 	break	0x0,0x1a
     df4:	0025e201 	0x25e201
     df8:	03050000 	0x3050000
     dfc:	8000c278 	lb	zero,-15752(zero)
     e00:	0006aa1a 	0x6aa1a
     e04:	d3e50100 	0xd3e50100
     e08:	05000000 	bltz	t0,e0c <__isr_vec_space+0xdec>
     e0c:	00c33403 	0xc33403
     e10:	06de1a80 	0x6de1a80
     e14:	e5010000 	swc1	$f1,0(t0)
     e18:	000000d3 	0xd3
     e1c:	c3380305 	ll	t8,773(t9)
     e20:	aa008000 	swl	zero,-32768(s0)
     e24:	04000004 	bltz	zero,e38 <__isr_vec_space+0xe18>
     e28:	00051d00 	sll	v1,a1,0x14
     e2c:	a5010400 	sh	at,1024(t0)
     e30:	01000001 	movf	zero,t0,$fcc0
     e34:	0000074b 	0x74b
     e38:	00000163 	0x163
     e3c:	80002044 	lb	zero,8260(zero)
     e40:	000012bc 	0x12bc
     e44:	00000b78 	0xb78
     e48:	5a050402 	0x5a050402
     e4c:	02000001 	movf	zero,s0,$fcc0
     e50:	01090704 	0x1090704
     e54:	04030000 	bgezl	zero,e58 <__isr_vec_space+0xe38>
     e58:	746e6905 	jalx	1b9a414 <__memory_size+0x1b7ac14>
     e5c:	06010200 	bgez	s0,1660 <__isr_vec_space+0x1640>
     e60:	0000006a 	0x6a
     e64:	68080102 	0x68080102
     e68:	02000000 	0x2000000
     e6c:	019b0502 	0x19b0502
     e70:	02020000 	0x2020000
     e74:	00009307 	0x9307
     e78:	00de0400 	0xde0400
     e7c:	38020000 	xori	v0,zero,0x0
     e80:	0000002c 	0x2c
     e84:	55050802 	bnel	t0,a1,2e90 <__isr_vec_space+0x2e70>
     e88:	02000001 	movf	zero,s0,$fcc0
     e8c:	01040708 	0x1040708
     e90:	e0040000 	sc	a0,0(zero)
     e94:	03000000 	0x3000000
     e98:	00005642 	srl	t2,zero,0x19
     e9c:	07040200 	0x7040200
     ea0:	0000010e 	0x10e
     ea4:	04020405 	bltzl	zero,1ebc <__isr_vec_space+0x1e9c>
     ea8:	00013207 	0x13207
     eac:	08010200 	j	40800 <__memory_size+0x21000>
     eb0:	00000071 	tgeu	zero,zero,0x1
     eb4:	00021304 	0x21304
     eb8:	256c0400 	addiu	t4,t3,1024
     ebc:	04000000 	bltz	zero,ec0 <__isr_vec_space+0xea0>
     ec0:	00000212 	0x212
     ec4:	002c6d04 	0x2c6d04
     ec8:	0a040000 	j	8100000 <__memory_size+0x80e0800>
     ecc:	04000000 	bltz	zero,ed0 <__isr_vec_space+0xeb0>
     ed0:	00006f73 	tltu	zero,zero,0x1bd
     ed4:	02390400 	0x2390400
     ed8:	67050000 	0x67050000
     edc:	00000081 	0x81
     ee0:	71050406 	0x71050406
     ee4:	000000ea 	0xea
     ee8:	00097207 	0x97207
     eec:	7a070000 	nori.b	$w0,$w0,0x7
     ef0:	01000008 	jr	t0
     ef4:	00097b07 	0x97b07
     ef8:	18070200 	0x18070200
     efc:	03000009 	jalr	zero,t8
     f00:	0008f907 	0x8f907
     f04:	db070400 	ldc2	$7,1024(t8)
     f08:	05000009 	bltz	t0,f30 <__isr_vec_space+0xf10>
     f0c:	07fe0400 	0x7fe0400
     f10:	7b060000 	xori.b	$w0,$w0,0x6
     f14:	00000081 	0x81
     f18:	0007b804 	sllv	s7,a3,zero
     f1c:	a7850600 	sh	a1,1536(gp)
     f20:	08000000 	j	0 <hardware_exit_hook>
     f24:	00000881 	0x881
     f28:	2044d001 	addi	a0,v0,-12287
     f2c:	01308000 	0x1308000
     f30:	9c010000 	0x9c010000
     f34:	00000131 	tgeu	zero,zero,0x4
     f38:	00095d09 	0x95d09
     f3c:	b2d20100 	0xb2d20100
     f40:	02000000 	0x2000000
     f44:	460a7091 	c1	0xa7091
     f48:	01000000 	0x1000000
     f4c:	000033e5 	0x33e5
     f50:	00000b00 	sll	at,zero,0xc
     f54:	0009230c 	syscall	0x248c
     f58:	74ee0100 	jalx	3b80400 <__memory_size+0x3b60c00>
     f5c:	6c800021 	0x6c800021
     f60:	01000001 	movf	zero,t0,$fcc0
     f64:	00017e9c 	0x17e9c
     f68:	00e90d00 	0xe90d00
     f6c:	ee010000 	swc3	$1,0(s0)
     f70:	00000081 	0x81
     f74:	09009102 	j	4024408 <__memory_size+0x4004c08>
     f78:	000009f2 	tlt	zero,zero,0x27
     f7c:	0091f001 	movt	s8,a0,$fcc4
     f80:	91020000 	lbu	v0,0(t0)
     f84:	095d0970 	j	57425c0 <__memory_size+0x5722dc0>
     f88:	f3010000 	0xf3010000
     f8c:	000000b2 	tlt	zero,zero,0x2
     f90:	0a749102 	j	9d24408 <__memory_size+0x9d04c08>
     f94:	00000046 	rorv	zero,zero,zero
     f98:	0033e501 	0x33e501
     f9c:	000b0000 	sll	zero,t3,0x0
     fa0:	07e50e00 	0x7e50e00
     fa4:	2d010000 	sltiu	at,t0,0
     fa8:	0022e001 	0x22e001
     fac:	00011c80 	sll	v1,at,0x12
     fb0:	d99c0100 	ldc2	$28,256(t4)
     fb4:	0f000001 	jal	c000004 <__memory_size+0xbfe0804>
     fb8:	000000e9 	0xe9
     fbc:	81012d01 	lb	at,11521(t0)
     fc0:	02000000 	0x2000000
     fc4:	48100091 	0x48100091
     fc8:	01000009 	jalr	zero,t0
     fcc:	00f5012f 	0xf5012f
     fd0:	91020000 	lbu	v0,0(t0)
     fd4:	082c1070 	j	b041c0 <__memory_size+0xae49c0>
     fd8:	2f010000 	sltiu	at,t8,0
     fdc:	0000f501 	0xf501
     fe0:	74910200 	jalx	2440800 <__memory_size+0x2421000>
     fe4:	00230411 	0x230411
     fe8:	0000f080 	sll	s8,zero,0x2
     fec:	00460a00 	0x460a00
     ff0:	e5010000 	swc1	$f1,0(t0)
     ff4:	00000033 	tltu	zero,zero
     ff8:	0000000b 	movn	zero,zero,zero
     ffc:	0007a70e 	0x7a70e
    1000:	016a0100 	0x16a0100
    1004:	800023fc 	lb	zero,9212(zero)
    1008:	00000284 	0x284
    100c:	02349c01 	0x2349c01
    1010:	e90f0000 	swc2	$15,0(t0)
    1014:	01000000 	0x1000000
    1018:	0081016a 	0x81016a
    101c:	91020000 	lbu	v0,0(t0)
    1020:	082c1000 	j	b04000 <__memory_size+0xae4800>
    1024:	6c010000 	0x6c010000
    1028:	0000f501 	0xf501
    102c:	74910200 	jalx	2440800 <__memory_size+0x2421000>
    1030:	0009f210 	0x9f210
    1034:	016d0100 	0x16d0100
    1038:	00000091 	0x91
    103c:	11709102 	beq	t3,s0,fffe5448 <__flash_start+0x403e5448>
    1040:	80002414 	lb	zero,9236(zero)
    1044:	00000264 	0x264
    1048:	0000460a 	0x460a
    104c:	33e50100 	andi	a1,ra,0x100
    1050:	0b000000 	j	c000000 <__memory_size+0xbfe0800>
    1054:	12000000 	beqz	s0,1058 <__isr_vec_space+0x1038>
    1058:	000008e1 	0x8e1
    105c:	91021201 	lbu	v0,4609(t0)
    1060:	80000000 	lb	zero,0(zero)
    1064:	d4800026 	ldc1	$f0,38(a0)
    1068:	01000004 	sllv	zero,zero,t0
    106c:	00027c9c 	0x27c9c
    1070:	09f20f00 	j	7c83c00 <__memory_size+0x7c64400>
    1074:	12010000 	beq	s0,at,1078 <__isr_vec_space+0x1058>
    1078:	00009102 	srl	s2,zero,0x4
    107c:	00910200 	0x910200
    1080:	00095d0f 	0x95d0f
    1084:	02120100 	0x2120100
    1088:	000000b2 	tlt	zero,zero,0x2
    108c:	10049102 	beq	zero,a0,fffe5498 <__flash_start+0x403e5498>
    1090:	000007f7 	0x7f7
    1094:	f5021401 	sdc1	$f2,5121(t0)
    1098:	02000000 	0x2000000
    109c:	12007091 	beqz	s0,1d2e4 <__isr_vec_space+0x1d2c4>
    10a0:	00000897 	0x897
    10a4:	9102d701 	lbu	v0,-10495(t0)
    10a8:	54000000 	bnezl	zero,10ac <__isr_vec_space+0x108c>
    10ac:	d080002b 	0xd080002b
    10b0:	01000002 	0x1000002
    10b4:	0002c49c 	0x2c49c
    10b8:	09f20f00 	j	7c83c00 <__memory_size+0x7c64400>
    10bc:	d7010000 	ldc1	$f1,0(t8)
    10c0:	00009102 	srl	s2,zero,0x4
    10c4:	00910200 	0x910200
    10c8:	00095d0f 	0x95d0f
    10cc:	02d70100 	0x2d70100
    10d0:	000000b2 	tlt	zero,zero,0x2
    10d4:	10049102 	beq	zero,a0,fffe54e0 <__flash_start+0x403e54e0>
    10d8:	000007f7 	0x7f7
    10dc:	f502d901 	sdc1	$f2,-9983(t0)
    10e0:	02000000 	0x2000000
    10e4:	0e007091 	jal	801c244 <__memory_size+0x7ffca44>
    10e8:	00000a07 	0xa07
    10ec:	24035001 	li	v1,20481
    10f0:	a880002e 	swl	zero,46(a0)
    10f4:	01000000 	0x1000000
    10f8:	0002f99c 	0x2f99c
    10fc:	08111000 	j	444000 <__memory_size+0x424800>
    1100:	52010000 	beql	s0,at,1104 <__isr_vec_space+0x10e4>
    1104:	0000f503 	sra	s8,zero,0x14
    1108:	70910200 	0x70910200
    110c:	00082c10 	0x82c10
    1110:	03520100 	0x3520100
    1114:	000000f5 	0xf5
    1118:	00749102 	0x749102
    111c:	0009b812 	0x9b812
    1120:	03740100 	0x3740100
    1124:	00000091 	0x91
    1128:	80002ecc 	lb	zero,11980(zero)
    112c:	00000230 	tge	zero,zero,0x8
    1130:	03329c01 	0x3329c01
    1134:	f2100000 	0xf2100000
    1138:	01000009 	jalr	zero,t0
    113c:	00910376 	tne	a0,s1,0xd
    1140:	91020000 	lbu	v0,0(t0)
    1144:	07f11070 	bgezal	ra,5308 <__isr_vec_space+0x52e8>
    1148:	77010000 	jalx	c040000 <__memory_size+0xc020800>
    114c:	0000f503 	sra	s8,zero,0x14
    1150:	74910200 	jalx	2440800 <__memory_size+0x2421000>
    1154:	08371300 	j	dc4c00 <__memory_size+0xda5400>
    1158:	d3010000 	0xd3010000
    115c:	0030fc03 	0x30fc03
    1160:	00018480 	sll	s0,at,0x12
    1164:	c79c0100 	lwc1	$f28,256(gp)
    1168:	10000003 	b	1178 <__isr_vec_space+0x1158>
    116c:	000008d6 	0x8d6
    1170:	9103d501 	lbu	v1,-11007(t0)
    1174:	05000000 	bltz	t0,1178 <__isr_vec_space+0x1158>
    1178:	00c2b403 	0xc2b403
    117c:	09f91080 	j	7e44200 <__memory_size+0x7e24a00>
    1180:	d5010000 	ldc1	$f1,0(t0)
    1184:	00009103 	sra	s2,zero,0x4
    1188:	b8030500 	swr	v1,1280(zero)
    118c:	108000c2 	beqz	a0,1498 <__isr_vec_space+0x1478>
    1190:	0000086d 	0x86d
    1194:	c703d601 	lwc1	$f3,-10751(t8)
    1198:	02000003 	0x2000003
    119c:	e4106091 	swc1	$f16,24721(zero)
    11a0:	01000009 	jalr	zero,t0
    11a4:	03c703d6 	0x3c703d6
    11a8:	91020000 	lbu	v0,0(t0)
    11ac:	081c1064 	j	704190 <__memory_size+0x6e4990>
    11b0:	d6010000 	ldc1	$f1,0(s0)
    11b4:	0003c703 	sra	t8,v1,0x1c
    11b8:	68910200 	0x68910200
    11bc:	0009a410 	0x9a410
    11c0:	03d70100 	0x3d70100
    11c4:	000003cc 	syscall	0xf
    11c8:	106c9102 	beq	v1,t4,fffe55d4 <__flash_start+0x403e55d4>
    11cc:	0000082c 	0x82c
    11d0:	f503d801 	sdc1	$f3,-10239(t0)
    11d4:	02000000 	0x2000000
    11d8:	c4107091 	lwc1	$f16,28817(zero)
    11dc:	01000007 	srav	zero,zero,t0
    11e0:	009103d9 	0x9103d9
    11e4:	91020000 	lbu	v0,0(t0)
    11e8:	91140074 	lbu	s4,116(t0)
    11ec:	14000000 	bnez	zero,11f0 <__isr_vec_space+0x11d0>
    11f0:	000000f5 	0xf5
    11f4:	00098415 	0x98415
    11f8:	041a0100 	0x41a0100
    11fc:	00000091 	0x91
    1200:	80003280 	lb	zero,12928(zero)
    1204:	00000080 	sll	zero,zero,0x2
    1208:	04319c01 	bgezal	at,fffe8210 <__flash_start+0x403e8210>
    120c:	8f100000 	lw	s0,0(t8)
    1210:	01000007 	srav	zero,zero,t0
    1214:	006f041c 	0x6f041c
    1218:	03050000 	0x3050000
    121c:	8000c2c0 	lb	zero,-15680(zero)
    1220:	00085610 	0x85610
    1224:	041c0100 	bposge32	1628 <__isr_vec_space+0x1608>
    1228:	0000006f 	0x6f
    122c:	c2bc0305 	ll	gp,773(s5)
    1230:	6f108000 	0x6f108000
    1234:	01000007 	srav	zero,zero,t0
    1238:	006f041c 	0x6f041c
    123c:	03050000 	0x3050000
    1240:	8000c2c4 	lb	zero,-15676(zero)
    1244:	0009b010 	0x9b010
    1248:	041d0100 	0x41d0100
    124c:	00000091 	0x91
    1250:	00709102 	0x709102
    1254:	00093509 	0x93509
    1258:	42c30100 	c0	0xc30100
    125c:	05000004 	bltz	t0,1270 <__isr_vec_space+0x1250>
    1260:	00c29803 	0xc29803
    1264:	006f1680 	0x6f1680
    1268:	d3090000 	0xd3090000
    126c:	01000007 	srav	zero,zero,t0
    1270:	000442c3 	sra	t0,a0,0xb
    1274:	9c030500 	0x9c030500
    1278:	098000c2 	j	6000308 <__memory_size+0x5fe0b08>
    127c:	000008ca 	0x8ca
    1280:	0442c301 	bltzl	v0,ffff1e88 <__flash_start+0x403f1e88>
    1284:	03050000 	0x3050000
    1288:	8000c2a0 	lb	zero,-15712(zero)
    128c:	00078309 	0x78309
    1290:	eac60100 	swc2	$6,256(s6)
    1294:	05000000 	bltz	t0,1298 <__isr_vec_space+0x1278>
    1298:	00c2a403 	0xc2a403
    129c:	08bb0980 	j	2ec2600 <__memory_size+0x2ea2e00>
    12a0:	c9010000 	lwc2	$1,0(t0)
    12a4:	000000ea 	0xea
    12a8:	c2a80305 	ll	t0,773(s5)
    12ac:	02098000 	0x2098000
    12b0:	01000009 	jalr	zero,t0
    12b4:	0000b2cc 	syscall	0x2cb
    12b8:	ac030500 	sw	v1,1280(zero)
    12bc:	098000c2 	j	6000308 <__memory_size+0x5fe0b08>
    12c0:	0000090d 	break	0x0,0x24
    12c4:	00b2cc01 	0xb2cc01
    12c8:	03050000 	0x3050000
    12cc:	8000c2b0 	lb	zero,-15696(zero)
    12d0:	000c1100 	sll	v0,t4,0x4
    12d4:	74000400 	jalx	1000 <__isr_vec_space+0xfe0>
    12d8:	04000006 	bltz	zero,12f4 <__isr_vec_space+0x12d4>
    12dc:	0001a501 	0x1a501
    12e0:	0df70100 	jal	7dc0400 <__memory_size+0x7da0c00>
    12e4:	01630000 	0x1630000
    12e8:	33000000 	andi	zero,t8,0x0
    12ec:	0f9c8000 	jal	e720000 <__memory_size+0xe700800>
    12f0:	0ec20000 	jal	b080000 <__memory_size+0xb060800>
    12f4:	04020000 	bltzl	zero,12f8 <__isr_vec_space+0x12d8>
    12f8:	00010907 	0x10907
    12fc:	05040300 	0x5040300
    1300:	00746e69 	0x746e69
    1304:	5a050402 	0x5a050402
    1308:	02000001 	movf	zero,s0,$fcc0
    130c:	006a0601 	0x6a0601
    1310:	00040000 	sll	zero,a0,0x0
    1314:	02000000 	0x2000000
    1318:	00004c1c 	0x4c1c
    131c:	08010200 	j	40800 <__memory_size+0x21000>
    1320:	00000068 	0x68
    1324:	9b050202 	lwr	a1,514(t8)
    1328:	02000001 	movf	zero,s0,$fcc0
    132c:	00930702 	0x930702
    1330:	de040000 	ldc3	$4,0(s0)
    1334:	02000000 	0x2000000
    1338:	00002538 	0x2538
    133c:	05080200 	tgei	t0,512
    1340:	00000155 	0x155
    1344:	04070802 	aclr	0x0,-2046(zero)
    1348:	02000001 	movf	zero,s0,$fcc0
    134c:	010e0704 	0x10e0704
    1350:	04020000 	bltzl	zero,1354 <__isr_vec_space+0x1334>
    1354:	00013207 	0x13207
    1358:	02040500 	0x2040500
    135c:	00710801 	movt	at,v1,$fcc4
    1360:	04060000 	0x4060000
    1364:	00000097 	0x97
    1368:	00008a07 	0x8a07
    136c:	00020400 	sll	zero,v0,0x10
    1370:	2a030000 	slti	v1,s0,0
    1374:	00000041 	0x41
    1378:	0000e004 	sllv	gp,zero,zero
    137c:	61420300 	0x61420300
    1380:	08000000 	j	0 <hardware_exit_hook>
    1384:	00000246 	0x246
    1388:	7a039304 	0x7a039304
    138c:	04000000 	bltz	zero,1390 <__isr_vec_space+0x1370>
    1390:	00000213 	0x213
    1394:	00336c05 	0x336c05
    1398:	12040000 	beq	s0,a0,139c <__isr_vec_space+0x137c>
    139c:	05000002 	bltz	t0,13a8 <__isr_vec_space+0x1388>
    13a0:	0000256d 	0x256d
    13a4:	000a0400 	sll	zero,t2,0x10
    13a8:	73050000 	madd	t8,a1
    13ac:	000000a7 	0xa7
    13b0:	000caa09 	0xcaa09
    13b4:	b5061400 	0xb5061400
    13b8:	00000128 	0x128
    13bc:	000c4d0a 	0xc4d0a
    13c0:	d4b80600 	ldc1	$f24,1536(a1)
    13c4:	00000000 	nop
    13c8:	000d880a 	movz	s1,zero,t5
    13cc:	28b90600 	slti	t9,a1,1536
    13d0:	04000001 	bltz	zero,13d8 <__isr_vec_space+0x13b8>
    13d4:	000ace0a 	0xace0a
    13d8:	28ba0600 	slti	k0,a1,1536
    13dc:	08000001 	j	4 <ABIFlags_gpr_size>
    13e0:	000ed40a 	0xed40a
    13e4:	88bb0600 	lwl	k1,1536(a1)
    13e8:	0c000000 	jal	0 <hardware_exit_hook>
    13ec:	000d2f0a 	0xd2f0a
    13f0:	88bc0600 	lwl	gp,1536(a1)
    13f4:	10000000 	b	13f8 <__isr_vec_space+0x13d8>
    13f8:	df040600 	ldc3	$4,1536(t8)
    13fc:	04000000 	bltz	zero,1400 <__isr_vec_space+0x13e0>
    1400:	00000bec 	0xbec
    1404:	00dfbf06 	0xdfbf06
    1408:	68090000 	0x68090000
    140c:	0c00000f 	jal	3c <__isr_vec_space+0x1c>
    1410:	016ac106 	0x16ac106
    1414:	4d0a0000 	lwxc1	$f0,t2(t0)
    1418:	0600000c 	bltz	s0,144c <__isr_vec_space+0x142c>
    141c:	0000d4c4 	0xd4c4
    1420:	880a0000 	lwl	t2,0(zero)
    1424:	0600000d 	bltz	s0,145c <__isr_vec_space+0x143c>
    1428:	000128c5 	lsa	a1,zero,at,0x4
    142c:	ce0a0400 	pref	0xa,1024(s0)
    1430:	0600000a 	bltz	s0,145c <__isr_vec_space+0x143c>
    1434:	000128c6 	0x128c6
    1438:	04000800 	bltz	zero,343c <__isr_vec_space+0x341c>
    143c:	00000be8 	0xbe8
    1440:	0139c806 	srlv	t9,t9,t1
    1444:	2b090000 	slti	t1,t8,0
    1448:	1400000c 	bnez	zero,147c <__isr_vec_space+0x145c>
    144c:	01a6cd06 	0x1a6cd06
    1450:	300a0000 	andi	t2,zero,0x0
    1454:	0600000e 	bltz	s0,1490 <__isr_vec_space+0x1470>
    1458:	0000c9d0 	0xc9d0
    145c:	370a0000 	ori	t2,t8,0x0
    1460:	0600000f 	bltz	s0,14a0 <__isr_vec_space+0x1480>
    1464:	0001a6d1 	0x1a6d1
    1468:	c00a0400 	ll	t2,1024(zero)
    146c:	0600000f 	bltz	s0,14ac <__isr_vec_space+0x148c>
    1470:	00016ad2 	0x16ad2
    1474:	06000800 	bltz	s0,3478 <__isr_vec_space+0x3458>
    1478:	00012e04 	0x12e04
    147c:	0be10400 	j	f841000 <__memory_size+0xf821800>
    1480:	d4060000 	ldc1	$f6,0(zero)
    1484:	00000175 	0x175
    1488:	00023904 	0x23904
    148c:	88670700 	lwl	a3,1792(v1)
    1490:	07000000 	bltz	t8,1494 <__isr_vec_space+0x1474>
    1494:	00000091 	0x91
    1498:	00003804 	sllv	a3,zero,zero
    149c:	88580800 	lwl	t8,2048(v0)
    14a0:	04000000 	bltz	zero,14a4 <__isr_vec_space+0x1484>
    14a4:	000000f6 	tne	zero,zero,0x3
    14a8:	00887609 	0x887609
    14ac:	aa040000 	swl	a0,0(s0)
    14b0:	0900000a 	j	4000028 <__memory_size+0x3fe0828>
    14b4:	0001e87b 	0x1e87b
    14b8:	ee040600 	swc3	$4,1536(s0)
    14bc:	0b000001 	j	c000004 <__memory_size+0xbfe0804>
    14c0:	000001f9 	0x1f9
    14c4:	0001d20c 	syscall	0x748
    14c8:	99040000 	lwr	a0,0(t0)
    14cc:	0900000a 	j	4000028 <__memory_size+0x3fe0828>
    14d0:	00020481 	0x20481
    14d4:	0a040600 	j	8101800 <__memory_size+0x80e2000>
    14d8:	0b000002 	j	c000008 <__memory_size+0xbfe0808>
    14dc:	0000021a 	0x21a
    14e0:	0000880c 	syscall	0x220
    14e4:	00a70c00 	0xa70c00
    14e8:	09000000 	j	4000000 <__memory_size+0x3fe0800>
    14ec:	00000e40 	sll	at,zero,0x19
    14f0:	6f680128 	0x6f680128
    14f4:	0a000002 	j	8000008 <__memory_size+0x7fe0808>
    14f8:	00000ac2 	srl	at,zero,0xb
    14fc:	00916a01 	0x916a01
    1500:	0a000000 	j	8000000 <__memory_size+0x7fe0800>
    1504:	00000ae9 	0xae9
    1508:	012e6b01 	0x12e6b01
    150c:	0a040000 	j	8100000 <__memory_size+0x80e0800>
    1510:	00000c31 	tgeu	zero,zero,0x30
    1514:	00d46c01 	0xd46c01
    1518:	0a180000 	j	8600000 <__memory_size+0x85e0800>
    151c:	00000e9c 	0xe9c
    1520:	00c96d01 	0xc96d01
    1524:	0a1c0000 	j	8700000 <__memory_size+0x86e0800>
    1528:	00000ce6 	0xce6
    152c:	00886e01 	0x886e01
    1530:	0a200000 	j	8800000 <__memory_size+0x87e0800>
    1534:	00000c18 	0xc18
    1538:	01dd6f01 	0x1dd6f01
    153c:	00240000 	0x240000
    1540:	000b3104 	0xb3104
    1544:	1a770100 	0x1a770100
    1548:	04000002 	bltz	zero,1554 <__isr_vec_space+0x1534>
    154c:	00000c45 	0xc45
    1550:	026f7b01 	0x26f7b01
    1554:	7b090000 	xori.b	$w0,$w0,0x9
    1558:	0800000a 	j	28 <__isr_vec_space+0x8>
    155c:	02aa8201 	0x2aa8201
    1560:	d30a0000 	0xd30a0000
    1564:	0100000b 	movn	zero,t0,zero
    1568:	0000d484 	0xd484
    156c:	530a0000 	beql	t8,t2,1570 <__isr_vec_space+0x1550>
    1570:	0100000f 	0x100000f
    1574:	0002aa85 	0x2aa85
    1578:	06000400 	bltz	s0,257c <__isr_vec_space+0x255c>
    157c:	00027a04 	0x27a04
    1580:	0a290400 	j	8a41000 <__memory_size+0x8a21800>
    1584:	86010000 	lh	at,0(s0)
    1588:	00000285 	0x285
    158c:	000ba709 	0xba709
    1590:	89010c00 	lwl	at,3072(t0)
    1594:	000002ec 	0x2ec
    1598:	000c180a 	movz	v1,zero,t4
    159c:	f98b0100 	sdc2	$11,256(t4)
    15a0:	00000001 	movf	zero,zero,$fcc0
    15a4:	000bc60a 	0xbc60a
    15a8:	888c0100 	lwl	t4,256(a0)
    15ac:	04000000 	bltz	zero,15b0 <__isr_vec_space+0x1590>
    15b0:	000cbd0a 	0xcbd0a
    15b4:	a78d0100 	sh	t5,256(gp)
    15b8:	08000000 	j	0 <hardware_exit_hook>
    15bc:	0d500400 	jal	5401000 <__memory_size+0x53e1800>
    15c0:	8e010000 	lw	at,0(s0)
    15c4:	000002bb 	0x2bb
    15c8:	95010c0d 	lhu	at,3085(t0)
    15cc:	00000316 	0x316
    15d0:	000c7f0e 	0xc7f0e
    15d4:	b0970100 	0xb0970100
    15d8:	0e000002 	jal	8000008 <__memory_size+0x7fe0808>
    15dc:	00000b93 	0xb93
    15e0:	02ec9c01 	0x2ec9c01
    15e4:	09000000 	j	4000000 <__memory_size+0x3fe0800>
    15e8:	00000edc 	0xedc
    15ec:	39920110 	xori	s2,t4,0x110
    15f0:	0a000003 	j	800000c <__memory_size+0x7fe080c>
    15f4:	00000e25 	0xe25
    15f8:	00be9401 	0xbe9401
    15fc:	0f000000 	jal	c000000 <__memory_size+0xbfe0800>
    1600:	9e010075 	0x9e010075
    1604:	000002f7 	0x2f7
    1608:	4f040004 	c3	0x1040004
    160c:	0100000a 	movz	zero,t0,zero
    1610:	0003169f 	0x3169f
    1614:	0c021000 	jal	84000 <__memory_size+0x64800>
    1618:	03010000 	0x3010000
    161c:	0000be01 	0xbe01
    1620:	00330000 	0x330000
    1624:	00009880 	sll	s3,zero,0x2
    1628:	7c9c0100 	ext	gp,a0,0x4,0x1
    162c:	11000003 	beqz	t0,163c <__isr_vec_space+0x161c>
    1630:	0000113d 	0x113d
    1634:	be010501 	cache	0x1,1281(s0)
    1638:	02000000 	0x2000000
    163c:	46127091 	c1	0x127091
    1640:	01000000 	0x1000000
    1644:	002c0133 	tltu	at,t4,0x4
    1648:	00130000 	sll	zero,s3,0x0
    164c:	0b511000 	j	d444000 <__memory_size+0xd424800>
    1650:	3a010000 	xori	at,s0,0x0
    1654:	0001d201 	0x1d201
    1658:	00339800 	0x339800
    165c:	00008080 	sll	s0,zero,0x2
    1660:	f19c0100 	0xf19c0100
    1664:	14000003 	bnez	zero,1674 <__isr_vec_space+0x1654>
    1668:	00000ac2 	srl	at,zero,0xb
    166c:	c2013a01 	ll	at,14849(s0)
    1670:	02000001 	movf	zero,s0,$fcc0
    1674:	31140091 	andi	s4,t0,0x91
    1678:	0100000c 	syscall	0x40000
    167c:	03f1013b 	0x3f1013b
    1680:	91020000 	lbu	v0,0(t0)
    1684:	0e9c1404 	jal	a705010 <__memory_size+0xa6e5810>
    1688:	3c010000 	lui	at,0x0
    168c:	0003f601 	0x3f601
    1690:	08910200 	j	2440800 <__memory_size+0x2421000>
    1694:	000ce614 	0xce614
    1698:	013d0100 	0x13d0100
    169c:	000003fb 	0x3fb
    16a0:	140c9102 	bne	zero,t4,fffe5aac <__flash_start+0x403e5aac>
    16a4:	00000c18 	0xc18
    16a8:	dd013e01 	ldc3	$1,15873(t0)
    16ac:	02000001 	movf	zero,s0,$fcc0
    16b0:	88111091 	lwl	s1,4241(zero)
    16b4:	0100000b 	movn	zero,t0,zero
    16b8:	02aa0140 	0x2aa0140
    16bc:	91020000 	lbu	v0,0(t0)
    16c0:	d4070070 	ldc1	$f7,112(zero)
    16c4:	07000000 	bltz	t8,16c8 <__isr_vec_space+0x16a8>
    16c8:	000000c9 	0xc9
    16cc:	00008807 	srav	s1,zero,zero
    16d0:	0b721500 	j	dc85400 <__memory_size+0xdc65c00>
    16d4:	84010000 	lh	at,0(zero)
    16d8:	00341801 	movf	v1,at,$fcc5
    16dc:	0000bc80 	sll	s7,zero,0x12
    16e0:	7f9c0100 	ext	gp,gp,0x4,0x1
    16e4:	14000004 	bnez	zero,16f8 <__isr_vec_space+0x16d8>
    16e8:	00000ac2 	srl	at,zero,0xb
    16ec:	c2018401 	ll	at,-31743(s0)
    16f0:	02000001 	movf	zero,s0,$fcc0
    16f4:	31140091 	andi	s4,t0,0x91
    16f8:	0100000c 	syscall	0x40000
    16fc:	03f10185 	0x3f10185
    1700:	91020000 	lbu	v0,0(t0)
    1704:	0e9c1404 	jal	a705010 <__memory_size+0xa6e5810>
    1708:	86010000 	lh	at,0(s0)
    170c:	0003f601 	0x3f601
    1710:	08910200 	j	2440800 <__memory_size+0x2421000>
    1714:	000ce614 	0xce614
    1718:	01870100 	0x1870100
    171c:	000003fb 	0x3fb
    1720:	140c9102 	bne	zero,t4,fffe5b2c <__flash_start+0x403e5b2c>
    1724:	00000c18 	0xc18
    1728:	dd018801 	ldc3	$1,-30719(t0)
    172c:	02000001 	movf	zero,s0,$fcc0
    1730:	88141091 	lwl	s4,4241(zero)
    1734:	0100000b 	movn	zero,t0,zero
    1738:	02aa0189 	0x2aa0189
    173c:	91020000 	lbu	v0,0(t0)
    1740:	00461214 	0x461214
    1744:	33010000 	andi	at,t8,0x0
    1748:	00002c01 	0x2c01
    174c:	00001300 	sll	v0,zero,0xc
    1750:	000d1a10 	0xd1a10
    1754:	01a10100 	0x1a10100
    1758:	000000be 	0xbe
    175c:	800034d4 	lb	zero,13524(zero)
    1760:	00000128 	0x128
    1764:	05119c01 	bgezal	t0,fffe876c <__flash_start+0x403e876c>
    1768:	54140000 	bnel	zero,s4,176c <__isr_vec_space+0x174c>
    176c:	0100000f 	0x100000f
    1770:	01d201a1 	0x1d201a1
    1774:	91020000 	lbu	v0,0(t0)
    1778:	0a8e1400 	j	a385000 <__memory_size+0xa365800>
    177c:	a1010000 	sb	at,0(t0)
    1780:	00051101 	0x51101
    1784:	04910200 	bgezal	a0,1f88 <__isr_vec_space+0x1f68>
    1788:	000d6514 	0xd6514
    178c:	01a10100 	0x1a10100
    1790:	000003f1 	tgeu	zero,zero,0xf
    1794:	14089102 	bne	zero,t0,fffe5ba0 <__flash_start+0x403e5ba0>
    1798:	00000ea9 	0xea9
    179c:	1601a101 	bne	s0,at,fffe9ba4 <__flash_start+0x403e9ba4>
    17a0:	02000005 	lsa	zero,s0,zero,0x1
    17a4:	87140c91 	lh	s4,3217(t8)
    17a8:	0100001a 	div	zero,t0,zero
    17ac:	03f101a1 	0x3f101a1
    17b0:	91020000 	lbu	v0,0(t0)
    17b4:	113d1110 	beq	t1,sp,5bf8 <__isr_vec_space+0x5bd8>
    17b8:	a3010000 	sb	at,0(t8)
    17bc:	0000be01 	0xbe01
    17c0:	60910200 	0x60910200
    17c4:	000bbd11 	0xbbd11
    17c8:	01a40100 	0x1a40100
    17cc:	00000339 	0x339
    17d0:	12649102 	beq	s3,a0,fffe5bdc <__flash_start+0x403e5bdc>
    17d4:	00000046 	rorv	zero,zero,zero
    17d8:	2c013301 	sltiu	at,zero,13057
    17dc:	13000000 	beqz	t8,17e0 <__isr_vec_space+0x17c0>
    17e0:	be070000 	cache	0x7,0(s0)
    17e4:	07000000 	bltz	t8,17e8 <__isr_vec_space+0x17c8>
    17e8:	0000051b 	0x51b
    17ec:	00be0406 	0xbe0406
    17f0:	01100000 	0x1100000
    17f4:	0100000f 	0x100000f
    17f8:	01b701cc 	syscall	0x6dc07
    17fc:	35fc0000 	ori	gp,t7,0x0
    1800:	004c8000 	0x4c8000
    1804:	9c010000 	0x9c010000
    1808:	0000054a 	0x54a
    180c:	00004612 	0x4612
    1810:	01330100 	0x1330100
    1814:	0000002c 	0x2c
    1818:	10000013 	b	1868 <__isr_vec_space+0x1848>
    181c:	00000ef1 	tgeu	zero,zero,0x3b
    1820:	d401d501 	ldc1	$f1,-11007(zero)
    1824:	48000000 	mfc2	zero,$0
    1828:	5c800036 	bgtzl	a0,1904 <__isr_vec_space+0x18e4>
    182c:	01000000 	0x1000000
    1830:	0005919c 	0x5919c
    1834:	0f541400 	jal	d505000 <__memory_size+0xd4e5800>
    1838:	d5010000 	ldc1	$f1,0(t0)
    183c:	0001d201 	0x1d201
    1840:	00910200 	0x910200
    1844:	000f5311 	0xf5311
    1848:	01d70100 	0x1d70100
    184c:	000002aa 	0x2aa
    1850:	12709102 	beq	s3,s0,fffe5c5c <__flash_start+0x403e5c5c>
    1854:	00000046 	rorv	zero,zero,zero
    1858:	2c013301 	sltiu	at,zero,13057
    185c:	13000000 	beqz	t8,1860 <__isr_vec_space+0x1840>
    1860:	3f100000 	0x3f100000
    1864:	0100000f 	0x100000f
    1868:	00d401de 	0xd401de
    186c:	36a40000 	ori	a0,s5,0x0
    1870:	00648000 	0x648000
    1874:	9c010000 	0x9c010000
    1878:	000005e7 	0x5e7
    187c:	000f5414 	0xf5414
    1880:	01de0100 	0x1de0100
    1884:	000001d2 	0x1d2
    1888:	11009102 	beqz	t0,fffe5c94 <__flash_start+0x403e5c94>
    188c:	00000f53 	0xf53
    1890:	aa01e001 	swl	at,-8191(s0)
    1894:	02000002 	0x2000002
    1898:	3d117091 	0x3d117091
    189c:	01000011 	mthi	t0
    18a0:	00d401e1 	0xd401e1
    18a4:	91020000 	lbu	v0,0(t0)
    18a8:	00461274 	teq	v0,a2,0x49
    18ac:	33010000 	andi	at,t8,0x0
    18b0:	00002c01 	0x2c01
    18b4:	00001300 	sll	v0,zero,0xc
    18b8:	000cf010 	0xcf010
    18bc:	01e90100 	0x1e90100
    18c0:	00000091 	0x91
    18c4:	80003708 	lb	zero,14088(zero)
    18c8:	0000005c 	0x5c
    18cc:	062e9c01 	tnei	s1,-25599
    18d0:	54140000 	bnel	zero,s4,18d4 <__isr_vec_space+0x18b4>
    18d4:	0100000f 	0x100000f
    18d8:	01d201e9 	0x1d201e9
    18dc:	91020000 	lbu	v0,0(t0)
    18e0:	0f531100 	jal	d4c4400 <__memory_size+0xd4a4c00>
    18e4:	eb010000 	swc2	$1,0(t8)
    18e8:	0002aa01 	0x2aa01
    18ec:	70910200 	0x70910200
    18f0:	00004612 	0x4612
    18f4:	01330100 	0x1330100
    18f8:	0000002c 	0x2c
    18fc:	15000013 	bnez	t0,194c <__isr_vec_space+0x192c>
    1900:	00000b1a 	0xb1a
    1904:	6401f201 	0x6401f201
    1908:	f4800037 	sdc1	$f0,55(a0)
    190c:	01000000 	0x1000000
    1910:	0006999c 	0x6999c
    1914:	0af81400 	j	be05000 <__memory_size+0xbde5800>
    1918:	f2010000 	0xf2010000
    191c:	0003f101 	0x3f101
    1920:	00910200 	0x910200
    1924:	000e0d14 	0xe0d14
    1928:	01f20100 	0x1f20100
    192c:	000003f1 	tgeu	zero,zero,0xf
    1930:	11049102 	beq	t0,a0,fffe5d3c <__flash_start+0x403e5d3c>
    1934:	00000b49 	0xb49
    1938:	be01f401 	cache	0x1,-3071(s0)
    193c:	02000000 	0x2000000
    1940:	53117491 	beql	t8,s1,1eb88 <__isr_vec_space+0x1eb68>
    1944:	0100000f 	0x100000f
    1948:	069901f5 	0x69901f5
    194c:	91020000 	lbu	v0,0(t0)
    1950:	37e41670 	ori	a0,ra,0x1670
    1954:	00408000 	0x408000
    1958:	46120000 	add.s	$f0,$f0,$f18
    195c:	01000000 	0x1000000
    1960:	002c0133 	tltu	at,t4,0x4
    1964:	00130000 	sll	zero,s3,0x0
    1968:	aa070000 	swl	a3,0(s0)
    196c:	15000002 	bnez	t0,1978 <__isr_vec_space+0x1958>
    1970:	00000d8f 	0xd8f
    1974:	58021a01 	0x58021a01
    1978:	4c800038 	nmsub.s	$f0,$f4,$f0,$f0
    197c:	01000000 	0x1000000
    1980:	0006e29c 	0x6e29c
    1984:	00e91400 	0xe91400
    1988:	1a010000 	0x1a010000
    198c:	00008802 	srl	s1,zero,0x0
    1990:	00910200 	0x910200
    1994:	000af811 	0xaf811
    1998:	021c0100 	0x21c0100
    199c:	000000d4 	0xd4
    19a0:	11709102 	beq	t3,s0,fffe5dac <__flash_start+0x403e5dac>
    19a4:	00000e17 	0xe17
    19a8:	be021d01 	cache	0x2,7425(s0)
    19ac:	02000000 	0x2000000
    19b0:	15007491 	bnez	t0,1ebf8 <__isr_vec_space+0x1ebd8>
    19b4:	00000e63 	0xe63
    19b8:	a4023e01 	sh	v0,15873(zero)
    19bc:	28800038 	slti	zero,a0,56
    19c0:	01000001 	movf	zero,t0,$fcc0
    19c4:	0007669c 	0x7669c
    19c8:	0af81400 	j	be05000 <__memory_size+0xbde5800>
    19cc:	3e010000 	0x3e010000
    19d0:	0003f102 	srl	s8,v1,0x4
    19d4:	00910200 	0x910200
    19d8:	000e1714 	0xe1714
    19dc:	023e0100 	0x23e0100
    19e0:	000000be 	0xbe
    19e4:	11049102 	beq	t0,a0,fffe5df0 <__flash_start+0x403e5df0>
    19e8:	00000e0d 	break	0x0,0x38
    19ec:	d4024001 	ldc1	$f2,16385(zero)
    19f0:	02000000 	0x2000000
    19f4:	79116091 	subsus_u.b	$w2,$w12,$w17
    19f8:	0100000f 	0x100000f
    19fc:	00be0241 	0xbe0241
    1a00:	91020000 	lbu	v0,0(t0)
    1a04:	39781668 	xori	t8,t3,0x1668
    1a08:	00288000 	0x288000
    1a0c:	b5110000 	0xb5110000
    1a10:	0100000c 	syscall	0x40000
    1a14:	00a7026a 	0xa7026a
    1a18:	91020000 	lbu	v0,0(t0)
    1a1c:	39781664 	xori	t8,t3,0x1664
    1a20:	000c8000 	sll	s0,t4,0x0
    1a24:	5f170000 	0x5f170000
    1a28:	0100725f 	0x100725f
    1a2c:	0025026a 	0x25026a
    1a30:	60010000 	0x60010000
    1a34:	18000000 	blez	zero,1a38 <__isr_vec_space+0x1a18>
    1a38:	00000d3b 	0xd3b
    1a3c:	d4027a01 	ldc1	$f2,31233(zero)
    1a40:	cc000000 	pref	0x0,0(zero)
    1a44:	70800039 	0x70800039
    1a48:	01000000 	0x1000000
    1a4c:	00079f9c 	0x79f9c
    1a50:	0e161400 	jal	8585000 <__memory_size+0x8565800>
    1a54:	7a010000 	nori.b	$w0,$w0,0x1
    1a58:	00051602 	srl	v0,a1,0x18
    1a5c:	00910200 	0x910200
    1a60:	000af811 	0xaf811
    1a64:	027c0100 	0x27c0100
    1a68:	000000d4 	0xd4
    1a6c:	00709102 	0x709102
    1a70:	000c9019 	0xc9019
    1a74:	02940100 	0x2940100
    1a78:	000000d4 	0xd4
    1a7c:	80003a3c 	lb	zero,14908(zero)
    1a80:	0000007c 	0x7c
    1a84:	07ea9c01 	tlti	ra,-25599
    1a88:	78140000 	andi.b	$w0,$w0,0x14
    1a8c:	0100000f 	0x100000f
    1a90:	05160294 	0x5160294
    1a94:	91020000 	lbu	v0,0(t0)
    1a98:	0e0d1100 	jal	8344400 <__memory_size+0x8324c00>
    1a9c:	96010000 	lhu	at,0(s0)
    1aa0:	0000d402 	srl	k0,zero,0x10
    1aa4:	70910200 	0x70910200
    1aa8:	000c7511 	0xc7511
    1aac:	02970100 	0x2970100
    1ab0:	000000d4 	0xd4
    1ab4:	c2d80305 	ll	t8,773(s6)
    1ab8:	19008000 	blez	t0,fffe1abc <__flash_start+0x403e1abc>
    1abc:	00000d9c 	0xd9c
    1ac0:	be02ab01 	cache	0x2,-21759(s0)
    1ac4:	b8000000 	swr	zero,0(zero)
    1ac8:	1480003a 	bnez	a0,1bb4 <__isr_vec_space+0x1b94>
    1acc:	01000001 	movf	zero,t0,$fcc0
    1ad0:	0008509c 	0x8509c
    1ad4:	0f531400 	jal	d4c5000 <__memory_size+0xd4a5800>
    1ad8:	ab010000 	swl	at,0(t8)
    1adc:	00069902 	srl	s3,a2,0x4
    1ae0:	00910200 	0x910200
    1ae4:	000ad914 	0xad914
    1ae8:	02ab0100 	0x2ab0100
    1aec:	000003f1 	tgeu	zero,zero,0xf
    1af0:	14049102 	bne	zero,a0,fffe5efc <__flash_start+0x403e5efc>
    1af4:	00000e0d 	break	0x0,0x38
    1af8:	f102ab01 	0xf102ab01
    1afc:	02000003 	0x2000003
    1b00:	5b140891 	0x5b140891
    1b04:	0100000f 	0x100000f
    1b08:	03f102ab 	0x3f102ab
    1b0c:	91020000 	lbu	v0,0(t0)
    1b10:	0ec3110c 	jal	b0c4430 <__memory_size+0xb0a4c30>
    1b14:	ad010000 	sw	at,0(t0)
    1b18:	0000be02 	srl	s7,zero,0x18
    1b1c:	70910200 	0x70910200
    1b20:	0cff1500 	jal	3fc5400 <__memory_size+0x3fa5c00>
    1b24:	d4010000 	ldc1	$f1,0(zero)
    1b28:	003bcc02 	ror	t9,k1,0x10
    1b2c:	00026080 	sll	t4,v0,0x2
    1b30:	119c0100 	beq	t4,gp,1f34 <__isr_vec_space+0x1f14>
    1b34:	11000009 	beqz	t0,1b5c <__isr_vec_space+0x1b3c>
    1b38:	00000bbd 	0xbbd
    1b3c:	3902d601 	xori	v0,t0,0xd601
    1b40:	02000003 	0x2000003
    1b44:	53116091 	beql	t8,s1,19d8c <__isr_vec_space+0x19d6c>
    1b48:	0100000f 	0x100000f
    1b4c:	02aa02d7 	0x2aa02d7
    1b50:	91020000 	lbu	v0,0(t0)
    1b54:	0f791154 	jal	de44550 <__memory_size+0xde24d50>
    1b58:	d8010000 	ldc2	$1,0(zero)
    1b5c:	0000be02 	srl	s7,zero,0x18
    1b60:	70910200 	0x70910200
    1b64:	000b4911 	0xb4911
    1b68:	02d80100 	0x2d80100
    1b6c:	000000be 	0xbe
    1b70:	115c9102 	beq	t2,gp,fffe5f7c <__flash_start+0x403e5f7c>
    1b74:	00000e0d 	break	0x0,0x38
    1b78:	d402d901 	ldc1	$f2,-9983(zero)
    1b7c:	02000000 	0x2000000
    1b80:	f01a5891 	0xf01a5891
    1b84:	5080003b 	beqzl	a0,1c74 <__isr_vec_space+0x1c54>
    1b88:	dc000000 	ldc3	$0,0(zero)
    1b8c:	11000008 	beqz	t0,1bb0 <__isr_vec_space+0x1b90>
    1b90:	00000bf7 	0xbf7
    1b94:	1102e301 	beq	t0,v0,ffffa79c <__flash_start+0x403fa79c>
    1b98:	02000009 	jalr	zero,s0
    1b9c:	46125091 	c1	0x125091
    1ba0:	01000000 	0x1000000
    1ba4:	002c0133 	tltu	at,t4,0x4
    1ba8:	00130000 	sll	zero,s3,0x0
    1bac:	3cb81600 	0x3cb81600
    1bb0:	01348000 	0x1348000
    1bb4:	461b0000 	add.s	$f0,$f0,$f27
    1bb8:	01000000 	0x1000000
    1bbc:	002c0133 	tltu	at,t4,0x4
    1bc0:	08f70000 	j	3dc0000 <__memory_size+0x3da0800>
    1bc4:	00130000 	sll	zero,s3,0x0
    1bc8:	003d1416 	0x3d1416
    1bcc:	00005080 	sll	t2,zero,0x2
    1bd0:	00461200 	0x461200
    1bd4:	33010000 	andi	at,t8,0x0
    1bd8:	00002c01 	0x2c01
    1bdc:	00001300 	sll	v0,zero,0xc
    1be0:	16070000 	bne	s0,a3,1be4 <__isr_vec_space+0x1bc4>
    1be4:	06000009 	bltz	s0,1c0c <__isr_vec_space+0x1bec>
    1be8:	00091c04 	0x91c04
    1bec:	02ec0700 	0x2ec0700
    1bf0:	5e150000 	0x5e150000
    1bf4:	0100000b 	movn	zero,t0,zero
    1bf8:	3e2c0367 	0x3e2c0367
    1bfc:	01588000 	0x1588000
    1c00:	9c010000 	0x9c010000
    1c04:	0000099b 	0x99b
    1c08:	000af811 	0xaf811
    1c0c:	03690100 	0x3690100
    1c10:	000000d4 	0xd4
    1c14:	11609102 	beqz	t3,fffe6020 <__flash_start+0x403e6020>
    1c18:	00000f91 	0xf91
    1c1c:	d4036901 	ldc1	$f3,26881(zero)
    1c20:	02000000 	0x2000000
    1c24:	74116891 	jalx	45a244 <__memory_size+0x43aa44>
    1c28:	0100000a 	movz	zero,t0,zero
    1c2c:	099b036a 	j	66c0da8 <__memory_size+0x66a15a8>
    1c30:	91020000 	lbu	v0,0(t0)
    1c34:	0f531170 	jal	d4c45c0 <__memory_size+0xd4a4dc0>
    1c38:	6b010000 	0x6b010000
    1c3c:	0002aa03 	sra	s5,v0,0x8
    1c40:	64910200 	0x64910200
    1c44:	000b4911 	0xb4911
    1c48:	036c0100 	0x36c0100
    1c4c:	000000be 	0xbe
    1c50:	166c9102 	bne	s3,t4,fffe605c <__flash_start+0x403e605c>
    1c54:	80003f04 	lb	zero,16132(zero)
    1c58:	00000040 	ssnop
    1c5c:	00004612 	0x4612
    1c60:	01330100 	0x1330100
    1c64:	0000002c 	0x2c
    1c68:	00000013 	mtlo	zero
    1c6c:	01ac0406 	0x1ac0406
    1c70:	581c0000 	0x581c0000
    1c74:	0100000c 	syscall	0x40000
    1c78:	3f8403a2 	0x3f8403a2
    1c7c:	00948000 	0x948000
    1c80:	9c010000 	0x9c010000
    1c84:	000cd210 	0xcd210
    1c88:	03d50100 	0x3d50100
    1c8c:	000000be 	0xbe
    1c90:	80004018 	lb	zero,16408(zero)
    1c94:	0000007c 	0x7c
    1c98:	0a099c01 	j	8267004 <__memory_size+0x8247804>
    1c9c:	54140000 	bnel	zero,s4,1ca0 <__isr_vec_space+0x1c80>
    1ca0:	0100000f 	0x100000f
    1ca4:	01d203d5 	0x1d203d5
    1ca8:	91020000 	lbu	v0,0(t0)
    1cac:	0a3a1100 	j	8e84400 <__memory_size+0x8e64c00>
    1cb0:	d7010000 	ldc1	$f1,0(t8)
    1cb4:	0000be03 	sra	s7,zero,0x18
    1cb8:	74910200 	jalx	2440800 <__memory_size+0x2421000>
    1cbc:	000f5311 	0xf5311
    1cc0:	03d80100 	0x3d80100
    1cc4:	000002aa 	0x2aa
    1cc8:	12709102 	beq	s3,s0,fffe60d4 <__flash_start+0x403e60d4>
    1ccc:	00000046 	rorv	zero,zero,zero
    1cd0:	2c013301 	sltiu	at,zero,13057
    1cd4:	13000000 	beqz	t8,1cd8 <__isr_vec_space+0x1cb8>
    1cd8:	08100000 	j	400000 <__memory_size+0x3e0800>
    1cdc:	0100000b 	movn	zero,t0,zero
    1ce0:	008803ea 	0x8803ea
    1ce4:	40940000 	mtc0	s4,c0_index
    1ce8:	00748000 	0x748000
    1cec:	9c010000 	0x9c010000
    1cf0:	00000a5f 	0xa5f
    1cf4:	000f5414 	0xf5414
    1cf8:	03ea0100 	0x3ea0100
    1cfc:	00000a5f 	0xa5f
    1d00:	11009102 	beqz	t0,fffe610c <__flash_start+0x403e610c>
    1d04:	00000f53 	0xf53
    1d08:	9903ec01 	lwr	v1,-5119(t0)
    1d0c:	02000006 	srlv	zero,zero,s0
    1d10:	a1117091 	sb	s1,28817(t0)
    1d14:	0100000c 	syscall	0x40000
    1d18:	008803ed 	0x8803ed
    1d1c:	91020000 	lbu	v0,0(t0)
    1d20:	00461274 	teq	v0,a2,0x49
    1d24:	33010000 	andi	at,t8,0x0
    1d28:	00002c01 	0x2c01
    1d2c:	00001300 	sll	v0,zero,0xc
    1d30:	0001d207 	0x1d207
    1d34:	0a631d00 	j	98c7400 <__memory_size+0x98a7c00>
    1d38:	fb010000 	sdc2	$1,0(t8)
    1d3c:	00410803 	0x410803
    1d40:	00007480 	sll	t6,zero,0x12
    1d44:	b69c0100 	0xb69c0100
    1d48:	1400000a 	bnez	zero,1d74 <__isr_vec_space+0x1d54>
    1d4c:	00000f54 	0xf54
    1d50:	d203fb01 	0xd203fb01
    1d54:	02000001 	movf	zero,s0,$fcc0
    1d58:	ca140091 	lwc2	$20,145(s0)
    1d5c:	0100000c 	syscall	0x40000
    1d60:	008803fb 	0x8803fb
    1d64:	91020000 	lbu	v0,0(t0)
    1d68:	0f531104 	jal	d4c4410 <__memory_size+0xd4a4c10>
    1d6c:	fd010000 	sdc3	$1,0(t0)
    1d70:	00069903 	sra	s3,a2,0x4
    1d74:	70910200 	0x70910200
    1d78:	00004612 	0x4612
    1d7c:	01330100 	0x1330100
    1d80:	0000002c 	0x2c
    1d84:	10000013 	b	1dd4 <__isr_vec_space+0x1db4>
    1d88:	00000e7e 	0xe7e
    1d8c:	be040b01 	cache	0x4,2817(s0)
    1d90:	7c000000 	ext	zero,zero,0x0,0x1
    1d94:	80800041 	lb	zero,65(a0)
    1d98:	01000000 	0x1000000
    1d9c:	000b2b9c 	0xb2b9c
    1da0:	0de71400 	jal	79c5000 <__memory_size+0x79a5800>
    1da4:	0b010000 	j	c040000 <__memory_size+0xc020800>
    1da8:	0001f904 	0x1f904
    1dac:	00910200 	0x910200
    1db0:	000bc614 	0xbc614
    1db4:	040b0100 	tltiu	zero,256
    1db8:	00000088 	0x88
    1dbc:	14049102 	bne	zero,a0,fffe61c8 <__flash_start+0x403e61c8>
    1dc0:	00000cbd 	0xcbd
    1dc4:	a7040b01 	sh	a0,2817(t8)
    1dc8:	02000000 	0x2000000
    1dcc:	a9140891 	swl	s4,2193(t0)
    1dd0:	0100000e 	0x100000e
    1dd4:	051b040b 	0x51b040b
    1dd8:	91020000 	lbu	v0,0(t0)
    1ddc:	0bbd110c 	j	ef44430 <__memory_size+0xef24c30>
    1de0:	0d010000 	jal	4040000 <__memory_size+0x4020800>
    1de4:	00033904 	0x33904
    1de8:	64910200 	0x64910200
    1dec:	00113d11 	0x113d11
    1df0:	040e0100 	tnei	zero,256
    1df4:	000000be 	0xbe
    1df8:	00609102 	0x609102
    1dfc:	000f2010 	0xf2010
    1e00:	04230100 	bgezl	at,2204 <__isr_vec_space+0x21e4>
    1e04:	000000be 	0xbe
    1e08:	800041fc 	lb	zero,16892(zero)
    1e0c:	000000a0 	0xa0
    1e10:	0bae9c01 	j	eba7004 <__memory_size+0xeb87804>
    1e14:	e7140000 	swc1	$f20,0(t8)
    1e18:	0100000d 	break	0x100
    1e1c:	01f90423 	0x1f90423
    1e20:	91020000 	lbu	v0,0(t0)
    1e24:	0bc61400 	j	f185000 <__memory_size+0xf165800>
    1e28:	23010000 	addi	at,t8,0
    1e2c:	00008804 	sllv	s1,zero,zero
    1e30:	04910200 	bgezal	a0,2634 <__isr_vec_space+0x2614>
    1e34:	000cbd14 	0xcbd14
    1e38:	04230100 	bgezl	at,223c <__isr_vec_space+0x221c>
    1e3c:	000000a7 	0xa7
    1e40:	14089102 	bne	zero,t0,fffe624c <__flash_start+0x403e624c>
    1e44:	00001a87 	0x1a87
    1e48:	d4042301 	ldc1	$f4,8961(zero)
    1e4c:	02000000 	0x2000000
    1e50:	bd110c91 	cache	0x11,3217(t0)
    1e54:	0100000b 	movn	zero,t0,zero
    1e58:	03390425 	0x3390425
    1e5c:	91020000 	lbu	v0,0(t0)
    1e60:	113d1164 	beq	t1,sp,63f4 <__isr_vec_space+0x63d4>
    1e64:	26010000 	addiu	at,s0,0
    1e68:	0000be04 	0xbe04
    1e6c:	60910200 	0x60910200
    1e70:	00004612 	0x4612
    1e74:	01330100 	0x1330100
    1e78:	0000002c 	0x2c
    1e7c:	1e000013 	bgtz	s0,1ecc <__isr_vec_space+0x1eac>
    1e80:	00000dc3 	sra	at,zero,0x17
    1e84:	01aca701 	0x1aca701
    1e88:	03050000 	0x3050000
    1e8c:	8000c380 	lb	zero,-15488(zero)
    1e90:	000dd51e 	0xdd51e
    1e94:	aca80100 	sw	t0,256(a1)
    1e98:	05000001 	bltz	t0,1ea0 <__isr_vec_space+0x1e80>
    1e9c:	00c39403 	0xc39403
    1ea0:	0e501e80 	jal	9407a00 <__memory_size+0x93e8200>
    1ea4:	a9010000 	swl	at,0(t0)
    1ea8:	0000099b 	0x99b
    1eac:	c2c80305 	ll	t0,773(s6)
    1eb0:	741e8000 	jalx	7a0000 <__memory_size+0x780800>
    1eb4:	0100000d 	break	0x100
    1eb8:	00099baa 	0x99baa
    1ebc:	cc030500 	pref	0x3,1280(zero)
    1ec0:	1e8000c2 	bgtz	s4,21cc <__isr_vec_space+0x21ac>
    1ec4:	00000db7 	0xdb7
    1ec8:	01c7ad01 	0x1c7ad01
    1ecc:	03050000 	0x3050000
    1ed0:	8000c2d0 	lb	zero,-15664(zero)
    1ed4:	000b381e 	0xb381e
    1ed8:	b7ae0100 	0xb7ae0100
    1edc:	05000001 	bltz	t0,1ee4 <__isr_vec_space+0x1ec4>
    1ee0:	00c2d403 	0xc2d403
    1ee4:	06cb0080 	tltiu	s6,128
    1ee8:	00040000 	sll	zero,a0,0x0
    1eec:	00000837 	0x837
    1ef0:	01a50104 	0x1a50104
    1ef4:	6b010000 	0x6b010000
    1ef8:	63000010 	0x63000010
    1efc:	9c000001 	0x9c000001
    1f00:	58800042 	blezl	a0,200c <__isr_vec_space+0x1fec>
    1f04:	9300000a 	lbu	zero,10(t8)
    1f08:	02000012 	0x2000012
    1f0c:	01090704 	0x1090704
    1f10:	04030000 	bgezl	zero,1f14 <__isr_vec_space+0x1ef4>
    1f14:	746e6905 	jalx	1b9a414 <__memory_size+0x1b7ac14>
    1f18:	05040200 	0x5040200
    1f1c:	0000015a 	0x15a
    1f20:	6a060102 	0x6a060102
    1f24:	02000000 	0x2000000
    1f28:	00680801 	movf	at,v1,$fcc2
    1f2c:	02020000 	0x2020000
    1f30:	00019b05 	0x19b05
    1f34:	07020200 	bltzl	t8,2738 <__isr_vec_space+0x2718>
    1f38:	00000093 	0x93
    1f3c:	0000de04 	0xde04
    1f40:	25380200 	addiu	t8,t1,512
    1f44:	02000000 	0x2000000
    1f48:	01550508 	0x1550508
    1f4c:	08020000 	j	80000 <__memory_size+0x60800>
    1f50:	00010407 	0x10407
    1f54:	07040200 	0x7040200
    1f58:	0000010e 	0x10e
    1f5c:	32070402 	andi	a3,s0,0x402
    1f60:	05000001 	bltz	t0,1f68 <__isr_vec_space+0x1f48>
    1f64:	08010204 	j	40810 <__memory_size+0x21010>
    1f68:	00000071 	tgeu	zero,zero,0x1
    1f6c:	0000e004 	sllv	gp,zero,zero
    1f70:	56420300 	bnel	s2,v0,2b74 <__isr_vec_space+0x2b54>
    1f74:	06000000 	bltz	s0,1f78 <__isr_vec_space+0x1f58>
    1f78:	00000246 	0x246
    1f7c:	6f039304 	0x6f039304
    1f80:	04000000 	bltz	zero,1f84 <__isr_vec_space+0x1f64>
    1f84:	00000213 	0x213
    1f88:	00336c05 	0x336c05
    1f8c:	12040000 	beq	s0,a0,1f90 <__isr_vec_space+0x1f70>
    1f90:	05000002 	bltz	t0,1f9c <__isr_vec_space+0x1f7c>
    1f94:	0000256d 	0x256d
    1f98:	000a0400 	sll	zero,t2,0x10
    1f9c:	73050000 	madd	t8,a1
    1fa0:	00000086 	0x86
    1fa4:	000caa07 	0xcaa07
    1fa8:	b5061400 	0xb5061400
    1fac:	00000107 	0x107
    1fb0:	000c4d08 	0xc4d08
    1fb4:	b3b80600 	0xb3b80600
    1fb8:	00000000 	nop
    1fbc:	000d8808 	0xd8808
    1fc0:	07b90600 	0x7b90600
    1fc4:	04000001 	bltz	zero,1fcc <__isr_vec_space+0x1fac>
    1fc8:	000ace08 	0xace08
    1fcc:	07ba0600 	0x7ba0600
    1fd0:	08000001 	j	4 <ABIFlags_gpr_size>
    1fd4:	000ed408 	0xed408
    1fd8:	7dbb0600 	ext	k1,t5,0x18,0x1
    1fdc:	0c000000 	jal	0 <hardware_exit_hook>
    1fe0:	000d2f08 	0xd2f08
    1fe4:	7dbc0600 	ext	gp,t5,0x18,0x1
    1fe8:	10000000 	b	1fec <__isr_vec_space+0x1fcc>
    1fec:	be040900 	cache	0x4,2304(s0)
    1ff0:	04000000 	bltz	zero,1ff4 <__isr_vec_space+0x1fd4>
    1ff4:	00000bec 	0xbec
    1ff8:	00bebf06 	0xbebf06
    1ffc:	68070000 	0x68070000
    2000:	0c00000f 	jal	3c <__isr_vec_space+0x1c>
    2004:	0149c106 	0x149c106
    2008:	4d080000 	lwxc1	$f0,t0(t0)
    200c:	0600000c 	bltz	s0,2040 <__isr_vec_space+0x2020>
    2010:	0000b3c4 	0xb3c4
    2014:	88080000 	lwl	t0,0(zero)
    2018:	0600000d 	bltz	s0,2050 <__isr_vec_space+0x2030>
    201c:	000107c5 	0x107c5
    2020:	ce080400 	pref	0x8,1024(s0)
    2024:	0600000a 	bltz	s0,2050 <__isr_vec_space+0x2030>
    2028:	000107c6 	0x107c6
    202c:	04000800 	bltz	zero,4030 <__isr_vec_space+0x4010>
    2030:	00000be8 	0xbe8
    2034:	0118c806 	srlv	t9,t8,t0
    2038:	2b070000 	slti	a3,t8,0
    203c:	1400000c 	bnez	zero,2070 <__isr_vec_space+0x2050>
    2040:	0185cd06 	0x185cd06
    2044:	30080000 	andi	t0,zero,0x0
    2048:	0600000e 	bltz	s0,2084 <__isr_vec_space+0x2064>
    204c:	0000a8d0 	0xa8d0
    2050:	37080000 	ori	t0,t8,0x0
    2054:	0600000f 	bltz	s0,2094 <__isr_vec_space+0x2074>
    2058:	000185d1 	0x185d1
    205c:	c0080400 	ll	t0,1024(zero)
    2060:	0600000f 	bltz	s0,20a0 <__isr_vec_space+0x2080>
    2064:	000149d2 	0x149d2
    2068:	09000800 	j	4002000 <__memory_size+0x3fe2800>
    206c:	00010d04 	0x10d04
    2070:	0be10400 	j	f841000 <__memory_size+0xf821800>
    2074:	d4060000 	ldc1	$f6,0(zero)
    2078:	00000154 	0x154
    207c:	0007fe04 	0x7fe04
    2080:	7d7b0700 	ext	k1,t3,0x1c,0x1
    2084:	04000000 	bltz	zero,2088 <__isr_vec_space+0x2068>
    2088:	000007b8 	0x7b8
    208c:	00b38507 	0xb38507
    2090:	3e070000 	0x3e070000
    2094:	18000010 	blez	zero,20d8 <__isr_vec_space+0x20b8>
    2098:	01d16901 	0x1d16901
    209c:	f5080000 	sdc1	$f8,0(t0)
    20a0:	01000010 	0x1000010
    20a4:	0001a16b 	0x1a16b
    20a8:	c2080000 	ll	t0,0(s0)
    20ac:	01000011 	mthi	t0
    20b0:	00018b6c 	0x18b6c
    20b4:	04000400 	bltz	zero,30b8 <__isr_vec_space+0x3098>
    20b8:	000011f5 	0x11f5
    20bc:	01ac7501 	0x1ac7501
    20c0:	9d0a0000 	0x9d0a0000
    20c4:	0100000f 	0x100000f
    20c8:	000196ae 	0x196ae
    20cc:	00429c00 	0x429c00
    20d0:	00006480 	sll	t4,zero,0x12
    20d4:	049c0100 	0x49c0100
    20d8:	0b000002 	j	c000008 <__memory_size+0xbfe0808>
    20dc:	00001176 	tne	zero,zero,0x45
    20e0:	0204b001 	movf	s6,s0,$fcc1
    20e4:	91020000 	lbu	v0,0(t0)
    20e8:	04090070 	tgeiu	zero,112
    20ec:	000001d1 	0x1d1
    20f0:	0010870a 	0x10870a
    20f4:	a1d00100 	sb	s0,256(t6)
    20f8:	00000001 	movf	zero,zero,$fcc0
    20fc:	68800043 	0x68800043
    2100:	01000002 	0x1000002
    2104:	0002e49c 	0x2e49c
    2108:	07830c00 	bgezl	gp,510c <__isr_vec_space+0x50ec>
    210c:	d0010000 	0xd0010000
    2110:	00000196 	0x196
    2114:	0c009102 	jal	24408 <__memory_size+0x4c08>
    2118:	000009a4 	0x9a4
    211c:	02e4d001 	movf	k0,s7,$fcc1
    2120:	91020000 	lbu	v0,0(t0)
    2124:	100a0c04 	beq	zero,t2,5138 <__isr_vec_space+0x5118>
    2128:	d0010000 	0xd0010000
    212c:	000002e4 	0x2e4
    2130:	0c089102 	jal	224408 <__memory_size+0x204c08>
    2134:	00001a87 	0x1a87
    2138:	00b3d001 	0xb3d001
    213c:	91020000 	lbu	v0,0(t0)
    2140:	10e20b0c 	beq	a3,v0,4d74 <__isr_vec_space+0x4d54>
    2144:	d2010000 	0xd2010000
    2148:	000001a1 	0x1a1
    214c:	0b6c9102 	j	db24408 <__memory_size+0xdb04c08>
    2150:	0000113c 	0x113c
    2154:	01a1d201 	0x1a1d201
    2158:	91020000 	lbu	v0,0(t0)
    215c:	11760b60 	beq	t3,s6,4ee0 <__isr_vec_space+0x4ec0>
    2160:	d3010000 	0xd3010000
    2164:	00000204 	0x204
    2168:	0b649102 	j	d924408 <__memory_size+0xd904c08>
    216c:	000011d7 	0x11d7
    2170:	009dd401 	0x9dd401
    2174:	91020000 	lbu	v0,0(t0)
    2178:	11820b70 	beq	t4,v0,4f3c <__isr_vec_space+0x4f1c>
    217c:	d5010000 	ldc1	$f1,0(t0)
    2180:	0000009d 	0x9d
    2184:	0d689102 	jal	5a24408 <__memory_size+0x5a04c08>
    2188:	00000046 	rorv	zero,zero,zero
    218c:	002cd701 	0x2cd701
    2190:	02b20000 	0x2b20000
    2194:	000e0000 	sll	zero,t6,0x0
    2198:	0044a00f 	0x44a00f
    219c:	00002880 	sll	a1,zero,0x2
    21a0:	0cb51000 	jal	2d44000 <__memory_size+0x2d24800>
    21a4:	0f010000 	jal	c040000 <__memory_size+0xc020800>
    21a8:	00008601 	0x8601
    21ac:	74910200 	jalx	2440800 <__memory_size+0x2421000>
    21b0:	0044a00f 	0x44a00f
    21b4:	00000c80 	sll	at,zero,0x12
    21b8:	5f5f1100 	0x5f5f1100
    21bc:	0f010072 	jal	c0401c8 <__memory_size+0xc0209c8>
    21c0:	00002501 	0x2501
    21c4:	006f0100 	0x6f0100
    21c8:	a1120000 	sb	s2,0(t0)
    21cc:	13000001 	beqz	t8,21d4 <__isr_vec_space+0x21b4>
    21d0:	000010b9 	0x10b9
    21d4:	a1014401 	sb	at,17409(t0)
    21d8:	68000001 	0x68000001
    21dc:	c4800045 	lwc1	$f0,69(a0)
    21e0:	01000002 	0x1000002
    21e4:	0004089c 	0x4089c
    21e8:	07831400 	bgezl	gp,71ec <__isr_vec_space+0x71cc>
    21ec:	44010000 	mfc1	at,$f0
    21f0:	00019601 	0x19601
    21f4:	00910200 	0x910200
    21f8:	00100a14 	0x100a14
    21fc:	01440100 	0x1440100
    2200:	000002e4 	0x2e4
    2204:	14049102 	bne	zero,a0,fffe6610 <__flash_start+0x403e6610>
    2208:	00000fc9 	0xfc9
    220c:	08014401 	j	51004 <__memory_size+0x31804>
    2210:	02000004 	sllv	zero,zero,s0
    2214:	af140891 	sw	s4,2193(t8)
    2218:	0100000f 	0x100000f
    221c:	04080144 	tgei	zero,324
    2220:	91020000 	lbu	v0,0(t0)
    2224:	1a87140c 	0x1a87140c
    2228:	44010000 	mfc1	at,$f0
    222c:	0000b301 	0xb301
    2230:	10910200 	beq	a0,s1,2a34 <__isr_vec_space+0x2a14>
    2234:	00117610 	0x117610
    2238:	01460100 	0x1460100
    223c:	00000204 	0x204
    2240:	10609102 	beqz	v1,fffe664c <__flash_start+0x403e664c>
    2244:	0000113c 	0x113c
    2248:	a1014701 	sb	at,18177(t0)
    224c:	02000001 	movf	zero,s0,$fcc0
    2250:	01105891 	0x1105891
    2254:	01000011 	mthi	t0
    2258:	01a10147 	0x1a10147
    225c:	91020000 	lbu	v0,0(t0)
    2260:	0fd6105c 	jal	f584170 <__memory_size+0xf564970>
    2264:	48010000 	mfc2	at,$0
    2268:	00009d01 	0x9d01
    226c:	6c910200 	0x6c910200
    2270:	0011d710 	0x11d710
    2274:	01480100 	0x1480100
    2278:	0000009d 	0x9d
    227c:	10709102 	beq	v1,s0,fffe6688 <__flash_start+0x403e6688>
    2280:	00001182 	srl	v0,zero,0x6
    2284:	9d014901 	0x9d014901
    2288:	02000000 	0x2000000
    228c:	460d6491 	movt.s	$f18,$f12,$fcc3
    2290:	01000000 	0x1000000
    2294:	00002cd7 	0x2cd7
    2298:	0003b900 	sll	s7,v1,0x4
    229c:	15000e00 	bnez	t0,5aa0 <__isr_vec_space+0x5a80>
    22a0:	8000464c 	lb	zero,17996(zero)
    22a4:	000000e8 	0xe8
    22a8:	000003d6 	0x3d6
    22ac:	0011ae10 	0x11ae10
    22b0:	01580100 	0x1580100
    22b4:	000002e4 	0x2e4
    22b8:	00689102 	0x689102
    22bc:	0047580f 	0x47580f
    22c0:	00002880 	sll	a1,zero,0x2
    22c4:	0cb51000 	jal	2d44000 <__memory_size+0x2d24800>
    22c8:	9f010000 	0x9f010000
    22cc:	00008601 	0x8601
    22d0:	74910200 	jalx	2440800 <__memory_size+0x2421000>
    22d4:	0047580f 	0x47580f
    22d8:	00000c80 	sll	at,zero,0x12
    22dc:	5f5f1100 	0x5f5f1100
    22e0:	9f010072 	0x9f010072
    22e4:	00002501 	0x2501
    22e8:	006f0100 	0x6f0100
    22ec:	9d120000 	0x9d120000
    22f0:	13000000 	beqz	t8,22f4 <__isr_vec_space+0x22d4>
    22f4:	00001097 	0x1097
    22f8:	a101d801 	sb	at,-10239(t0)
    22fc:	2c000001 	sltiu	zero,zero,1
    2300:	b8800048 	swr	zero,72(a0)
    2304:	01000000 	0x1000000
    2308:	0004719c 	0x4719c
    230c:	07831400 	bgezl	gp,7310 <__isr_vec_space+0x72f0>
    2310:	d8010000 	ldc2	$1,0(zero)
    2314:	00019601 	0x19601
    2318:	00910200 	0x910200
    231c:	00116814 	0x116814
    2320:	01d80100 	0x1d80100
    2324:	000002e4 	0x2e4
    2328:	10049102 	beq	zero,a0,fffe6734 <__flash_start+0x403e6734>
    232c:	00001176 	tne	zero,zero,0x45
    2330:	0401da01 	b	ffff8b38 <__flash_start+0x403f8b38>
    2334:	02000002 	0x2000002
    2338:	3c107091 	lui	s0,0x7091
    233c:	01000011 	mthi	t0
    2340:	01a101db 	0x1a101db
    2344:	91020000 	lbu	v0,0(t0)
    2348:	00461674 	teq	v0,a2,0x59
    234c:	d7010000 	ldc1	$f1,0(t8)
    2350:	0000002c 	0x2c
    2354:	1300000e 	beqz	t8,2390 <__isr_vec_space+0x2370>
    2358:	0000110f 	0x110f
    235c:	a1020201 	sb	v0,513(t0)
    2360:	e4000001 	swc1	$f0,1(zero)
    2364:	5c800048 	bgtzl	a0,2488 <__isr_vec_space+0x2468>
    2368:	01000000 	0x1000000
    236c:	0004c89c 	0x4c89c
    2370:	07831400 	bgezl	gp,7374 <__isr_vec_space+0x7354>
    2374:	02010000 	0x2010000
    2378:	00019602 	srl	s2,at,0x18
    237c:	00910200 	0x910200
    2380:	00114510 	0x114510
    2384:	02040100 	0x2040100
    2388:	000000a8 	0xa8
    238c:	106c9102 	beq	v1,t4,fffe6798 <__flash_start+0x403e6798>
    2390:	00001176 	tne	zero,zero,0x45
    2394:	04020501 	bltzl	zero,379c <__isr_vec_space+0x377c>
    2398:	02000002 	0x2000002
    239c:	3c106891 	lui	s0,0x6891
    23a0:	01000011 	mthi	t0
    23a4:	01a10206 	0x1a10206
    23a8:	91020000 	lbu	v0,0(t0)
    23ac:	29130070 	slti	s3,t0,112
    23b0:	01000011 	mthi	t0
    23b4:	01a10212 	0x1a10212
    23b8:	49400000 	0x49400000
    23bc:	01f88000 	0x1f88000
    23c0:	9c010000 	0x9c010000
    23c4:	00000595 	0x595
    23c8:	00078314 	0x78314
    23cc:	02120100 	0x2120100
    23d0:	00000196 	0x196
    23d4:	14009102 	bnez	zero,fffe67e0 <__flash_start+0x403e67e0>
    23d8:	000009a4 	0x9a4
    23dc:	e4021201 	swc1	$f2,4609(zero)
    23e0:	02000002 	0x2000002
    23e4:	54100491 	bnel	zero,s0,362c <__isr_vec_space+0x360c>
    23e8:	01000010 	0x1000010
    23ec:	01850214 	0x1850214
    23f0:	91020000 	lbu	v0,0(t0)
    23f4:	0d881050 	jal	6204140 <__memory_size+0x61e4940>
    23f8:	14010000 	bne	zero,at,23fc <__isr_vec_space+0x23dc>
    23fc:	00018502 	srl	s0,at,0x14
    2400:	68910200 	0x68910200
    2404:	000fbf10 	0xfbf10
    2408:	02150100 	0x2150100
    240c:	00000595 	0x595
    2410:	10649102 	beq	v1,a0,fffe681c <__flash_start+0x403e681c>
    2414:	00001037 	0x1037
    2418:	a0021601 	sb	v0,5633(zero)
    241c:	02000005 	lsa	zero,s0,zero,0x1
    2420:	68106091 	0x68106091
    2424:	01000011 	mthi	t0
    2428:	01a10217 	0x1a10217
    242c:	91020000 	lbu	v0,0(t0)
    2430:	0fe81054 	jal	fa04150 <__memory_size+0xf9e4950>
    2434:	17010000 	bne	t8,at,2438 <__isr_vec_space+0x2418>
    2438:	0001a102 	srl	s4,at,0x4
    243c:	6c910200 	0x6c910200
    2440:	00110110 	0x110110
    2444:	02170100 	0x2170100
    2448:	000001a1 	0x1a1
    244c:	10709102 	beq	v1,s0,fffe6858 <__flash_start+0x403e6858>
    2450:	00001176 	tne	zero,zero,0x45
    2454:	04021801 	bltzl	zero,845c <__isr_vec_space+0x843c>
    2458:	02000002 	0x2000002
    245c:	5c105c91 	0x5c105c91
    2460:	01000011 	mthi	t0
    2464:	009d0219 	0x9d0219
    2468:	91020000 	lbu	v0,0(t0)
    246c:	00461658 	0x461658
    2470:	d7010000 	ldc1	$f1,0(t8)
    2474:	0000002c 	0x2c
    2478:	0900000e 	j	4000038 <__memory_size+0x3fe0838>
    247c:	00059b04 	0x59b04
    2480:	010d1200 	0x10d1200
    2484:	04090000 	tgeiu	zero,0
    2488:	0000018b 	0x18b
    248c:	000ff817 	0xff817
    2490:	02700100 	0x2700100
    2494:	80004b38 	lb	zero,19256(zero)
    2498:	000000b8 	0xb8
    249c:	06019c01 	bgez	s0,fffe94a4 <__flash_start+0x403e94a4>
    24a0:	83140000 	lb	s4,0(t8)
    24a4:	01000007 	srav	zero,zero,t0
    24a8:	01960270 	tge	t4,s6,0x9
    24ac:	91020000 	lbu	v0,0(t0)
    24b0:	11761000 	beq	t3,s6,64b4 <__isr_vec_space+0x6494>
    24b4:	72010000 	madd	s0,at
    24b8:	00020402 	srl	zero,v0,0x10
    24bc:	70910200 	0x70910200
    24c0:	0011c110 	0x11c110
    24c4:	02730100 	0x2730100
    24c8:	00000601 	0x601
    24cc:	0f749102 	jal	dd24408 <__memory_size+0xdd04c08>
    24d0:	80004b70 	lb	zero,19312(zero)
    24d4:	00000044 	0x44
    24d8:	00004616 	0x4616
    24dc:	2cd70100 	sltiu	s7,a2,256
    24e0:	0e000000 	jal	8000000 <__memory_size+0x7fe0800>
    24e4:	09000000 	j	4000000 <__memory_size+0x3fe0800>
    24e8:	00060704 	0x60704
    24ec:	018b1200 	0x18b1200
    24f0:	93170000 	lbu	s7,0(t8)
    24f4:	01000011 	mthi	t0
    24f8:	4bf0029c 	c2	0x1f0029c
    24fc:	00408000 	0x408000
    2500:	9c010000 	0x9c010000
    2504:	00000641 	0x641
    2508:	0010ac14 	0x10ac14
    250c:	029c0100 	0x29c0100
    2510:	0000007d 	0x7d
    2514:	14009102 	bnez	zero,fffe6920 <__flash_start+0x403e6920>
    2518:	0000105f 	0x105f
    251c:	41029c01 	bc0fl	fffe9524 <__flash_start+0x403e9524>
    2520:	02000006 	srlv	zero,zero,s0
    2524:	12000491 	beqz	s0,376c <__isr_vec_space+0x374c>
    2528:	00000086 	0x86
    252c:	00101a17 	0x101a17
    2530:	02a40100 	0x2a40100
    2534:	80004c30 	lb	zero,19504(zero)
    2538:	00000040 	ssnop
    253c:	067b9c01 	0x67b9c01
    2540:	ac140000 	sw	s4,0(zero)
    2544:	01000010 	0x1000010
    2548:	007d02a4 	0x7d02a4
    254c:	91020000 	lbu	v0,0(t0)
    2550:	11e71400 	beq	t7,a3,7554 <__isr_vec_space+0x7534>
    2554:	a4010000 	sh	at,0(zero)
    2558:	00064102 	srl	t0,a2,0x4
    255c:	04910200 	bgezal	a0,2d60 <__isr_vec_space+0x2d40>
    2560:	10cd1800 	beq	a2,t5,8564 <__isr_vec_space+0x8544>
    2564:	aa010000 	swl	at,0(s0)
    2568:	00009d02 	srl	s3,zero,0x14
    256c:	004c7000 	0x4c7000
    2570:	00008480 	sll	s0,zero,0x12
    2574:	149c0100 	bne	a0,gp,2978 <__isr_vec_space+0x2958>
    2578:	000011ae 	0x11ae
    257c:	e402aa01 	swc1	$f2,-22015(zero)
    2580:	02000002 	0x2000002
    2584:	0a140091 	j	8500244 <__memory_size+0x84e0a44>
    2588:	01000010 	0x1000010
    258c:	02e402aa 	0x2e402aa
    2590:	91020000 	lbu	v0,0(t0)
    2594:	0faf1404 	jal	ebc5010 <__memory_size+0xeba5810>
    2598:	aa010000 	swl	at,0(s0)
    259c:	00040802 	srl	at,a0,0x0
    25a0:	08910200 	j	2440800 <__memory_size+0x2421000>
    25a4:	000fd610 	0xfd610
    25a8:	02ac0100 	0x2ac0100
    25ac:	0000009d 	0x9d
    25b0:	00709102 	0x709102
    25b4:	0019cb00 	sll	t9,t9,0xc
    25b8:	a2000400 	sb	zero,1024(s0)
    25bc:	04000009 	bltz	zero,25e4 <__isr_vec_space+0x25c4>
    25c0:	0001a501 	0x1a501
    25c4:	1bd70100 	0x1bd70100
    25c8:	01630000 	0x1630000
    25cc:	4cf40000 	lwxc1	$f0,s4(a3)
    25d0:	36408000 	ori	zero,s2,0x8000
    25d4:	15b90000 	bne	t5,t9,25d8 <__isr_vec_space+0x25b8>
    25d8:	72020000 	madd	s0,v0
    25dc:	02000004 	sllv	zero,zero,s0
    25e0:	000030d4 	0x30d4
    25e4:	07040300 	0x7040300
    25e8:	00000109 	0x109
    25ec:	69050404 	0x69050404
    25f0:	0300746e 	0x300746e
    25f4:	015a0504 	0x15a0504
    25f8:	01030000 	0x1030000
    25fc:	00006a06 	0x6a06
    2600:	00000200 	sll	zero,zero,0x8
    2604:	1c030000 	0x1c030000
    2608:	00000057 	0x57
    260c:	68080103 	0x68080103
    2610:	03000000 	0x3000000
    2614:	019b0502 	0x19b0502
    2618:	aa020000 	swl	v0,0(s0)
    261c:	03000014 	0x3000014
    2620:	00007026 	xor	t6,zero,zero
    2624:	07020300 	bltzl	t8,3228 <__isr_vec_space+0x3208>
    2628:	00000093 	0x93
    262c:	0000de02 	srl	k1,zero,0x18
    2630:	30380300 	andi	t8,at,0x300
    2634:	03000000 	0x3000000
    2638:	01550508 	0x1550508
    263c:	08030000 	j	c0000 <__memory_size+0xa0800>
    2640:	00010407 	0x10407
    2644:	07040300 	0x7040300
    2648:	0000010e 	0x10e
    264c:	32070403 	andi	a3,s0,0x403
    2650:	05000001 	bltz	t0,2658 <__isr_vec_space+0x2638>
    2654:	a6040604 	sh	a0,1540(s0)
    2658:	03000000 	0x3000000
    265c:	00710801 	movt	at,v1,$fcc4
    2660:	04060000 	0x4060000
    2664:	000000b3 	tltu	zero,zero,0x2
    2668:	0000a607 	0xa607
    266c:	00a60800 	0xa60800
    2670:	00c80000 	0xc80000
    2674:	97090000 	lhu	t1,0(t8)
    2678:	07000000 	bltz	t8,267c <__isr_vec_space+0x265c>
    267c:	00020200 	sll	zero,v0,0x8
    2680:	2a040000 	slti	a0,s0,0
    2684:	0000004c 	syscall	0x1
    2688:	0014ac02 	srl	s5,s4,0x10
    268c:	65360400 	0x65360400
    2690:	02000000 	0x2000000
    2694:	000000e0 	0xe0
    2698:	00774204 	0x774204
    269c:	93020000 	lbu	v0,0(t8)
    26a0:	05000017 	bltz	t0,2700 <__isr_vec_space+0x26e0>
    26a4:	0000f44d 	break	0x0,0x3d1
    26a8:	fa040600 	sdc2	$4,1536(s0)
    26ac:	0a000000 	j	8000000 <__memory_size+0x7fe0800>
    26b0:	00000105 	0x105
    26b4:	00009e0b 	0x9e0b
    26b8:	460c0000 	add.s	$f0,$f0,$f12
    26bc:	06000002 	bltz	s0,26c8 <__isr_vec_space+0x26a8>
    26c0:	00900393 	0x900393
    26c4:	b9020000 	swr	v0,0(t0)
    26c8:	07000012 	bltz	t8,2714 <__isr_vec_space+0x26f4>
    26cc:	0000de6b 	0xde6b
    26d0:	02130200 	0x2130200
    26d4:	6c070000 	0x6c070000
    26d8:	0000003e 	0x3e
    26dc:	00021202 	srl	v0,v0,0x8
    26e0:	306d0700 	andi	t5,v1,0x700
    26e4:	02000000 	0x2000000
    26e8:	0000000a 	movz	zero,zero,zero
    26ec:	00de7307 	0xde7307
    26f0:	04060000 	0x4060000
    26f4:	000000c8 	0xc8
    26f8:	000caa0d 	break	0xc,0x2a8
    26fc:	b5081400 	0xb5081400
    2700:	0000018c 	syscall	0x6
    2704:	000c4d0e 	0xc4d0e
    2708:	32b80800 	andi	t8,s5,0x800
    270c:	00000001 	movf	zero,zero,$fcc0
    2710:	000d880e 	0xd880e
    2714:	8cb90800 	lw	t9,2048(a1)
    2718:	04000001 	bltz	zero,2720 <__isr_vec_space+0x2700>
    271c:	000ace0e 	0xace0e
    2720:	8cba0800 	lw	k0,2048(a1)
    2724:	08000001 	j	4 <ABIFlags_gpr_size>
    2728:	000ed40e 	0xed40e
    272c:	9ebb0800 	0x9ebb0800
    2730:	0c000000 	jal	0 <hardware_exit_hook>
    2734:	000d2f0e 	0xd2f0e
    2738:	9ebc0800 	0x9ebc0800
    273c:	10000000 	b	2740 <__isr_vec_space+0x2720>
    2740:	43040600 	c0	0x1040600
    2744:	02000001 	movf	zero,s0,$fcc0
    2748:	00000bec 	0xbec
    274c:	0143bf08 	0x143bf08
    2750:	680d0000 	0x680d0000
    2754:	0c00000f 	jal	3c <__isr_vec_space+0x1c>
    2758:	01cec108 	0x1cec108
    275c:	4d0e0000 	lwxc1	$f0,t6(t0)
    2760:	0800000c 	j	30 <__isr_vec_space+0x10>
    2764:	000132c4 	0x132c4
    2768:	880e0000 	lwl	t6,0(zero)
    276c:	0800000d 	j	34 <__isr_vec_space+0x14>
    2770:	00018cc5 	0x18cc5
    2774:	ce0e0400 	pref	0xe,1024(s0)
    2778:	0800000a 	j	28 <__isr_vec_space+0x8>
    277c:	00018cc6 	0x18cc6
    2780:	02000800 	0x2000800
    2784:	00000be8 	0xbe8
    2788:	019dc808 	0x19dc808
    278c:	2b0d0000 	slti	t5,t8,0
    2790:	1400000c 	bnez	zero,27c4 <__isr_vec_space+0x27a4>
    2794:	020acd08 	0x20acd08
    2798:	300e0000 	andi	t6,zero,0x0
    279c:	0800000e 	j	38 <__isr_vec_space+0x18>
    27a0:	000127d0 	0x127d0
    27a4:	370e0000 	ori	t6,t8,0x0
    27a8:	0800000f 	j	3c <__isr_vec_space+0x1c>
    27ac:	00020ad1 	0x20ad1
    27b0:	c00e0400 	ll	t6,1024(zero)
    27b4:	0800000f 	j	3c <__isr_vec_space+0x1c>
    27b8:	0001ced2 	0x1ced2
    27bc:	06000800 	bltz	s0,47c0 <__isr_vec_space+0x47a0>
    27c0:	00019204 	0x19204
    27c4:	0be10200 	j	f840800 <__memory_size+0xf821000>
    27c8:	d4080000 	ldc1	$f8,0(zero)
    27cc:	000001d9 	0x1d9
    27d0:	00023902 	srl	a3,v0,0x4
    27d4:	9e670900 	0x9e670900
    27d8:	0f000000 	jal	c000000 <__memory_size+0xbfe0800>
    27dc:	53710904 	beql	k1,s1,4bf0 <__isr_vec_space+0x4bd0>
    27e0:	10000002 	b	27ec <__isr_vec_space+0x27cc>
    27e4:	00000972 	tlt	zero,zero,0x25
    27e8:	087a1000 	j	1e84000 <__memory_size+0x1e64800>
    27ec:	10010000 	beq	zero,at,27f0 <__isr_vec_space+0x27d0>
    27f0:	0000097b 	0x97b
    27f4:	09181002 	j	4604008 <__memory_size+0x45e4808>
    27f8:	10030000 	beq	zero,v1,27fc <__isr_vec_space+0x27dc>
    27fc:	000008f9 	0x8f9
    2800:	09db1004 	j	76c4010 <__memory_size+0x76a4810>
    2804:	00050000 	sll	zero,a1,0x0
    2808:	00184a02 	srl	t1,t8,0x8
    280c:	26780900 	addiu	t8,s3,2304
    2810:	0f000002 	jal	c000008 <__memory_size+0xbfe0808>
    2814:	857c0904 	lh	gp,2308(t3)
    2818:	10000002 	b	2824 <__isr_vec_space+0x2804>
    281c:	00001269 	0x1269
    2820:	18701000 	0x18701000
    2824:	10010000 	beq	zero,at,2828 <__isr_vec_space+0x2808>
    2828:	00001b9d 	0x1b9d
    282c:	14241002 	bne	at,a0,6838 <__isr_vec_space+0x6818>
    2830:	10030000 	beq	zero,v1,2834 <__isr_vec_space+0x2814>
    2834:	00001646 	0x1646
    2838:	19020004 	0x19020004
    283c:	09000015 	j	4000054 <__memory_size+0x3fe0854>
    2840:	00025e82 	srl	t3,v0,0x1a
    2844:	12c50d00 	beq	s6,a1,5c48 <__isr_vec_space+0x5c28>
    2848:	09080000 	j	4200000 <__memory_size+0x41e0800>
    284c:	0002b587 	0x2b587
    2850:	13760e00 	beq	k1,s6,6054 <__isr_vec_space+0x6034>
    2854:	89090000 	lwl	t1,0(t0)
    2858:	0000011c 	0x11c
    285c:	17830e00 	bne	gp,v1,6060 <__isr_vec_space+0x6040>
    2860:	8a090000 	lwl	t1,0(s0)
    2864:	00000132 	tlt	zero,zero,0x4
    2868:	f4020004 	sdc1	$f2,4(zero)
    286c:	09000017 	j	400005c <__memory_size+0x3fe085c>
    2870:	0002908b 	0x2908b
    2874:	188f0d00 	0x188f0d00
    2878:	090c0000 	j	4300000 <__memory_size+0x42e0800>
    287c:	0002f190 	0x2f190
    2880:	1a130e00 	0x1a130e00
    2884:	92090000 	lbu	t1,0(s0)
    2888:	0000009e 	0x9e
    288c:	174a0e00 	bne	k0,t2,6090 <__isr_vec_space+0x6070>
    2890:	93090000 	lbu	t1,0(t8)
    2894:	000000de 	0xde
    2898:	13850e04 	beq	gp,a1,60ac <__isr_vec_space+0x608c>
    289c:	94090000 	lhu	t1,0(zero)
    28a0:	000000de 	0xde
    28a4:	1b020008 	0x1b020008
    28a8:	09000017 	j	400005c <__memory_size+0x3fe085c>
    28ac:	0002c095 	0x2c095
    28b0:	00ad0700 	0xad0700
    28b4:	04060000 	0x4060000
    28b8:	00000111 	0x111
    28bc:	00158a11 	0x158a11
    28c0:	27015000 	addiu	at,t8,20480
    28c4:	0003a401 	0x3a401
    28c8:	1c011200 	0x1c011200
    28cc:	29010000 	slti	at,t0,0
    28d0:	0003a401 	0x3a401
    28d4:	b4120000 	0xb4120000
    28d8:	0100001b 	divu	zero,t0,zero
    28dc:	0192012f 	0x192012f
    28e0:	12040000 	beq	s0,a0,28e4 <__isr_vec_space+0x28c4>
    28e4:	00001c38 	0x1c38
    28e8:	92013001 	lbu	at,12289(s0)
    28ec:	18000001 	blez	zero,28f4 <__isr_vec_space+0x28d4>
    28f0:	00039a12 	0x39a12
    28f4:	01310100 	0x1310100
    28f8:	00000127 	0x127
    28fc:	194a122c 	0x194a122c
    2900:	32010000 	andi	at,s0,0x0
    2904:	00030101 	0x30101
    2908:	ac123000 	sw	s2,12288(zero)
    290c:	01000002 	0x1000002
    2910:	00b80133 	tltu	a1,t8,0x4
    2914:	12340000 	beq	s1,s4,2918 <__isr_vec_space+0x28f8>
    2918:	00001c0e 	0x1c0e
    291c:	27013a01 	addiu	at,t8,14849
    2920:	3c000001 	lui	zero,0x1
    2924:	001aa212 	0x1aa212
    2928:	01430100 	0x1430100
    292c:	00000127 	0x127
    2930:	16071240 	bne	s0,a3,7234 <__isr_vec_space+0x7214>
    2934:	44010000 	mfc1	at,$f0
    2938:	00012701 	0x12701
    293c:	f7124400 	sdc1	$f18,17408(t8)
    2940:	01000015 	0x1000015
    2944:	03af015f 	0x3af015f
    2948:	12480000 	beq	s2,t0,294c <__isr_vec_space+0x292c>
    294c:	000013c6 	0x13c6
    2950:	b4016001 	0xb4016001
    2954:	4c000003 	mfc3	zero,$0,3
    2958:	aa040600 	swl	a0,1536(s0)
    295c:	13000003 	beqz	t8,296c <__isr_vec_space+0x294c>
    2960:	00000111 	0x111
    2964:	0000de13 	0xde13
    2968:	00c81300 	0xc81300
    296c:	bf0c0000 	cache	0xc,0(t8)
    2970:	01000013 	mtlo	t0
    2974:	0307016d 	0x307016d
    2978:	d70c0000 	ldc1	$f12,0(t8)
    297c:	0100001a 	div	zero,t0,zero
    2980:	03b90171 	tgeu	sp,t9,0x5
    2984:	d4140000 	ldc1	$f20,0(zero)
    2988:	01000016 	0x1000016
    298c:	011c02a7 	0x11c02a7
    2990:	4cf40000 	lwxc1	$f0,s4(a3)
    2994:	01e08000 	0x1e08000
    2998:	9c010000 	0x9c010000
    299c:	0000047d 	0x47d
    29a0:	00171015 	0x171015
    29a4:	02a70100 	0x2a70100
    29a8:	000000e9 	0xe9
    29ac:	15009102 	bnez	t0,fffe6db8 <__flash_start+0x403e6db8>
    29b0:	0000157b 	0x157b
    29b4:	fc02a801 	sdc3	$2,-22527(zero)
    29b8:	02000002 	0x2000002
    29bc:	05150491 	0x5150491
    29c0:	01000014 	0x1000014
    29c4:	047d02a9 	0x47d02a9
    29c8:	91020000 	lbu	v0,0(t0)
    29cc:	00e91508 	0xe91508
    29d0:	aa010000 	swl	at,0(s0)
    29d4:	00048202 	srl	s0,a0,0x8
    29d8:	0c910200 	jal	2440800 <__memory_size+0x2421000>
    29dc:	00039a15 	0x39a15
    29e0:	02ab0100 	0x2ab0100
    29e4:	00000127 	0x127
    29e8:	15109102 	bne	t0,s0,fffe6df4 <__flash_start+0x403e6df4>
    29ec:	00001c47 	0x1c47
    29f0:	8702ac01 	lh	v0,-21503(t8)
    29f4:	02000004 	sllv	zero,zero,s0
    29f8:	07161491 	0x7161491
    29fc:	01000017 	0x1000017
    2a00:	049202ae 	bltzall	a0,34bc <__isr_vec_space+0x349c>
    2a04:	91020000 	lbu	v0,0(t0)
    2a08:	113d1668 	beq	t1,sp,83ac <__isr_vec_space+0x838c>
    2a0c:	af010000 	sw	at,0(t8)
    2a10:	00011c02 	srl	v1,at,0x10
    2a14:	6c910200 	0x6c910200
    2a18:	004d3017 	0x4d3017
    2a1c:	0000b480 	sll	s6,zero,0x12
    2a20:	194a1600 	0x194a1600
    2a24:	d8010000 	ldc2	$1,0(zero)
    2a28:	00030102 	srl	zero,v1,0x4
    2a2c:	70910200 	0x70910200
    2a30:	d3070000 	0xd3070000
    2a34:	07000000 	bltz	t8,2a38 <__isr_vec_space+0x2a18>
    2a38:	0000009e 	0x9e
    2a3c:	00048c07 	0x48c07
    2a40:	1b040600 	0x1b040600
    2a44:	06000002 	bltz	s0,2a50 <__isr_vec_space+0x2a30>
    2a48:	0003c504 	0x3c504
    2a4c:	123d1800 	beq	s1,sp,8a50 <__isr_vec_space+0x8a30>
    2a50:	22010000 	addi	at,s0,0
    2a54:	004ed403 	0x4ed403
    2a58:	0001fc80 	sll	ra,at,0x12
    2a5c:	5b9c0100 	0x5b9c0100
    2a60:	15000005 	bnez	t0,2a78 <__isr_vec_space+0x2a58>
    2a64:	00001710 	0x1710
    2a68:	e9032201 	swc2	$3,8705(t0)
    2a6c:	02000000 	0x2000000
    2a70:	7b150091 	0x7b150091
    2a74:	01000015 	0x1000015
    2a78:	02fc0323 	0x2fc0323
    2a7c:	91020000 	lbu	v0,0(t0)
    2a80:	16701504 	bne	s3,s0,7e94 <__isr_vec_space+0x7e74>
    2a84:	24010000 	li	at,0
    2a88:	00055b03 	sra	t3,a1,0xc
    2a8c:	08910200 	j	2440800 <__memory_size+0x2421000>
    2a90:	0000e915 	0xe915
    2a94:	03250100 	0x3250100
    2a98:	00000482 	srl	zero,zero,0x12
    2a9c:	150c9102 	bne	t0,t4,fffe6ea8 <__flash_start+0x403e6ea8>
    2aa0:	0000039a 	0x39a
    2aa4:	27032601 	addiu	v1,t8,9729
    2aa8:	02000001 	movf	zero,s0,$fcc0
    2aac:	47151091 	bz.b	$w21,6cf4 <__isr_vec_space+0x6cd4>
    2ab0:	0100001c 	0x100001c
    2ab4:	04870327 	aclr	0x0,807(a0)
    2ab8:	91020000 	lbu	v0,0(t0)
    2abc:	17071514 	bne	t8,a3,7f10 <__isr_vec_space+0x7ef0>
    2ac0:	28010000 	slti	at,zero,0
    2ac4:	00049203 	sra	s2,a0,0x8
    2ac8:	18910200 	0x18910200
    2acc:	001b3f15 	0x1b3f15
    2ad0:	03290100 	0x3290100
    2ad4:	00000560 	0x560
    2ad8:	161c9102 	bne	s0,gp,fffe6ee4 <__flash_start+0x403e6ee4>
    2adc:	00001c01 	0x1c01
    2ae0:	01032b01 	0x1032b01
    2ae4:	02000003 	0x2000003
    2ae8:	78197491 	subs_s.b	$w18,$w14,$w25
    2aec:	032c0100 	0x32c0100
    2af0:	00000127 	0x127
    2af4:	17709102 	bne	k1,s0,fffe6f00 <__flash_start+0x403e6f00>
    2af8:	80004f18 	lb	zero,20248(zero)
    2afc:	00000054 	0x54
    2b00:	0000461a 	0x461a
    2b04:	034e0100 	0x34e0100
    2b08:	00000037 	0x37
    2b0c:	0000001b 	divu	zero,zero,zero
    2b10:	0000de07 	0xde07
    2b14:	05650700 	0x5650700
    2b18:	04060000 	0x4060000
    2b1c:	0000056b 	0x56b
    2b20:	0002f107 	0x2f107
    2b24:	16e01800 	bnez	s7,8b28 <__isr_vec_space+0x8b08>
    2b28:	e6010000 	swc1	$f1,0(s0)
    2b2c:	0050d003 	0x50d003
    2b30:	00016880 	sll	t5,at,0x2
    2b34:	c79c0100 	lwc1	$f28,256(gp)
    2b38:	15000005 	bnez	t0,2b50 <__isr_vec_space+0x2b30>
    2b3c:	00001707 	0x1707
    2b40:	9203e601 	lbu	v1,-6655(s0)
    2b44:	02000004 	sllv	zero,zero,s0
    2b48:	f4170091 	sdc1	$f23,145(zero)
    2b4c:	28800051 	slti	zero,a0,81
    2b50:	16000000 	bnez	s0,2b54 <__isr_vec_space+0x2b34>
    2b54:	00000cb5 	0xcb5
    2b58:	de042b01 	ldc3	$4,11009(s0)
    2b5c:	02000000 	0x2000000
    2b60:	f4176891 	sdc1	$f23,26769(zero)
    2b64:	0c800051 	jal	2000144 <__memory_size+0x1fe0944>
    2b68:	19000000 	blez	t0,2b6c <__isr_vec_space+0x2b4c>
    2b6c:	00725f5f 	0x725f5f
    2b70:	30042b01 	andi	a0,zero,0x2b01
    2b74:	01000000 	0x1000000
    2b78:	00000060 	0x60
    2b7c:	00189e1c 	0x189e1c
    2b80:	043b0100 	0x43b0100
    2b84:	80005238 	lb	zero,21048(zero)
    2b88:	000001c4 	0x1c4
    2b8c:	06499c01 	tgeiu	s2,-25599
    2b90:	52150000 	beql	s0,s5,2b94 <__isr_vec_space+0x2b74>
    2b94:	01000019 	multu	t0,zero
    2b98:	021b043b 	0x21b043b
    2b9c:	91020000 	lbu	v0,0(t0)
    2ba0:	1bd11600 	0x1bd11600
    2ba4:	3d010000 	0x3d010000
    2ba8:	00049204 	0x49204
    2bac:	68910200 	0x68910200
    2bb0:	00539817 	0x539817
    2bb4:	00004880 	sll	t1,zero,0x2
    2bb8:	00461d00 	0x461d00
    2bbc:	4e010000 	lwxc1	$f0,at(s0)
    2bc0:	00003703 	sra	a2,zero,0x1c
    2bc4:	00061600 	sll	v0,a2,0x18
    2bc8:	17001b00 	bnez	t8,97cc <__isr_vec_space+0x97ac>
    2bcc:	800053b8 	lb	zero,21432(zero)
    2bd0:	00000028 	0x28
    2bd4:	000cb516 	0xcb516
    2bd8:	04890100 	tgeiu	a0,256
    2bdc:	000000de 	0xde
    2be0:	176c9102 	bne	k1,t4,fffe6fec <__flash_start+0x403e6fec>
    2be4:	800053b8 	lb	zero,21432(zero)
    2be8:	0000000c 	syscall
    2bec:	725f5f19 	d32accm	xr12,xr7,xr13,xr7,SA
    2bf0:	04890100 	tgeiu	a0,256
    2bf4:	00000030 	tge	zero,zero
    2bf8:	00006001 	movf	t4,zero,$fcc0
    2bfc:	b11c0000 	0xb11c0000
    2c00:	0100001a 	div	zero,t0,zero
    2c04:	53fc0497 	beql	ra,gp,3e64 <__isr_vec_space+0x3e44>
    2c08:	01bc8000 	0x1bc8000
    2c0c:	9c010000 	0x9c010000
    2c10:	0000070b 	0x70b
    2c14:	00198415 	0x198415
    2c18:	04970100 	0x4970100
    2c1c:	0000070b 	0x70b
    2c20:	15009102 	bnez	t0,fffe702c <__flash_start+0x403e702c>
    2c24:	00001b99 	0x1b99
    2c28:	16049701 	bne	s0,a0,fffe8830 <__flash_start+0x403e8830>
    2c2c:	02000007 	srav	zero,zero,s0
    2c30:	a8160491 	swl	s6,1169(zero)
    2c34:	0100001b 	divu	zero,t0,zero
    2c38:	01320499 	0x1320499
    2c3c:	91020000 	lbu	v0,0(t0)
    2c40:	11d71660 	beq	t6,s7,85c4 <__isr_vec_space+0x85a4>
    2c44:	9a010000 	lwr	at,0(s0)
    2c48:	00011c04 	0x11c04
    2c4c:	64910200 	0x64910200
    2c50:	00167d16 	0x167d16
    2c54:	049a0100 	0x49a0100
    2c58:	0000011c 	0x11c
    2c5c:	1d589102 	0x1d589102
    2c60:	00000046 	rorv	zero,zero,zero
    2c64:	37034e01 	ori	v1,t8,0x4e01
    2c68:	bc000000 	cache	0x0,0(zero)
    2c6c:	1b000006 	blez	t8,2c88 <__isr_vec_space+0x2c68>
    2c70:	54841e00 	bnel	a0,a0,a474 <__isr_vec_space+0xa454>
    2c74:	00d88000 	0xd88000
    2c78:	06d90000 	0x6d90000
    2c7c:	58160000 	0x58160000
    2c80:	01000015 	0x1000015
    2c84:	071604a4 	0x71604a4
    2c88:	91020000 	lbu	v0,0(t0)
    2c8c:	7417005c 	jalx	5c0170 <__memory_size+0x5a0970>
    2c90:	28800055 	slti	zero,a0,85
    2c94:	16000000 	bnez	s0,2c98 <__isr_vec_space+0x2c78>
    2c98:	00000cb5 	0xcb5
    2c9c:	de04de01 	ldc3	$4,-8703(s0)
    2ca0:	02000000 	0x2000000
    2ca4:	74176891 	jalx	5da244 <__memory_size+0x5baa44>
    2ca8:	0c800055 	jal	2000154 <__memory_size+0x1fe0954>
    2cac:	19000000 	blez	t0,2cb0 <__isr_vec_space+0x2c90>
    2cb0:	00725f5f 	0x725f5f
    2cb4:	3004de01 	andi	a0,zero,0xde01
    2cb8:	01000000 	0x1000000
    2cbc:	00000060 	0x60
    2cc0:	00071007 	srav	v0,a3,zero
    2cc4:	32040600 	andi	a0,s0,0x600
    2cc8:	07000001 	bltz	t8,2cd0 <__isr_vec_space+0x2cb0>
    2ccc:	00000132 	tlt	zero,zero,0x4
    2cd0:	0015ce1c 	0x15ce1c
    2cd4:	04eb0100 	tltiu	a3,256
    2cd8:	800055b8 	lb	zero,21944(zero)
    2cdc:	000000bc 	0xbc
    2ce0:	079d9c01 	0x79d9c01
    2ce4:	21150000 	addi	s5,t0,0
    2ce8:	0100001a 	div	zero,t0,zero
    2cec:	071604eb 	0x71604eb
    2cf0:	91020000 	lbu	v0,0(t0)
    2cf4:	11d71600 	beq	t6,s7,84f8 <__isr_vec_space+0x84d8>
    2cf8:	ed010000 	swc3	$1,0(t0)
    2cfc:	00011c04 	0x11c04
    2d00:	68910200 	0x68910200
    2d04:	0055e01e 	0x55e01e
    2d08:	00004480 	sll	t0,zero,0x12
    2d0c:	00076b00 	sll	t5,a3,0xc
    2d10:	00461a00 	0x461a00
    2d14:	4e010000 	lwxc1	$f0,at(s0)
    2d18:	00003703 	sra	a2,zero,0x1c
    2d1c:	00001b00 	sll	v1,zero,0xc
    2d20:	00563017 	0x563017
    2d24:	00002880 	sll	a1,zero,0x2
    2d28:	0cb51600 	jal	2d45800 <__memory_size+0x2d26000>
    2d2c:	0b010000 	j	c040000 <__memory_size+0xc020800>
    2d30:	0000de05 	0xde05
    2d34:	6c910200 	0x6c910200
    2d38:	00563017 	0x563017
    2d3c:	00000c80 	sll	at,zero,0x12
    2d40:	5f5f1900 	0x5f5f1900
    2d44:	0b010072 	j	c0401c8 <__memory_size+0xc0209c8>
    2d48:	00003005 	lsa	a2,zero,zero,0x1
    2d4c:	00600100 	0x600100
    2d50:	f9140000 	sdc2	$20,0(t0)
    2d54:	01000016 	0x1000016
    2d58:	02530518 	0x2530518
    2d5c:	56740000 	bnel	s3,s4,2d60 <__isr_vec_space+0x2d40>
    2d60:	013c8000 	0x13c8000
    2d64:	9c010000 	0x9c010000
    2d68:	00000802 	srl	at,zero,0x0
    2d6c:	0002a615 	0x2a615
    2d70:	05180100 	0x5180100
    2d74:	0000021b 	0x21b
    2d78:	16009102 	bnez	s0,fffe7184 <__flash_start+0x403e7184>
    2d7c:	00001392 	0x1392
    2d80:	53051a01 	beql	t8,a1,9588 <__isr_vec_space+0x9568>
    2d84:	02000002 	0x2000002
    2d88:	0e166891 	jal	859a244 <__memory_size+0x857aa44>
    2d8c:	01000012 	0x1000012
    2d90:	0802051b 	j	8146c <__memory_size+0x61c6c>
    2d94:	91020000 	lbu	v0,0(t0)
    2d98:	1bd11670 	0x1bd11670
    2d9c:	1c010000 	0x1c010000
    2da0:	00080805 	lsa	at,zero,t0,0x1
    2da4:	6c910200 	0x6c910200
    2da8:	0000461a 	0x461a
    2dac:	034e0100 	0x34e0100
    2db0:	00000037 	0x37
    2db4:	0600001b 	bltz	s0,2e24 <__isr_vec_space+0x2e04>
    2db8:	00021004 	sllv	v0,v0,zero
    2dbc:	080d0700 	j	341c00 <__memory_size+0x322400>
    2dc0:	04060000 	0x4060000
    2dc4:	00000813 	mtlo	zero,$ac1
    2dc8:	0003c507 	0x3c507
    2dcc:	15461400 	bne	t2,a2,7dd0 <__isr_vec_space+0x7db0>
    2dd0:	5f010000 	0x5f010000
    2dd4:	00012705 	0x12705
    2dd8:	0057b000 	0x57b000
    2ddc:	00006c80 	sll	t5,zero,0x12
    2de0:	609c0100 	0x609c0100
    2de4:	15000008 	bnez	t0,2e08 <__isr_vec_space+0x2de8>
    2de8:	000002a6 	0x2a6
    2dec:	1b055f01 	0x1b055f01
    2df0:	02000002 	0x2000002
    2df4:	d1160091 	0xd1160091
    2df8:	0100001b 	divu	zero,t0,zero
    2dfc:	04920561 	bltzall	a0,4384 <__isr_vec_space+0x4364>
    2e00:	91020000 	lbu	v0,0(t0)
    2e04:	113c1670 	beq	t1,gp,87c8 <__isr_vec_space+0x87a8>
    2e08:	62010000 	0x62010000
    2e0c:	00012705 	0x12705
    2e10:	74910200 	jalx	2440800 <__memory_size+0x2421000>
    2e14:	17c91400 	bne	s8,t1,7e18 <__isr_vec_space+0x7df8>
    2e18:	75010000 	jalx	4040000 <__memory_size+0x4020800>
    2e1c:	00012705 	0x12705
    2e20:	00581c00 	0x581c00
    2e24:	00007480 	sll	t6,zero,0x12
    2e28:	b79c0100 	0xb79c0100
    2e2c:	15000008 	bnez	t0,2e50 <__isr_vec_space+0x2e30>
    2e30:	000002a6 	0x2a6
    2e34:	1b057501 	0x1b057501
    2e38:	02000002 	0x2000002
    2e3c:	d1160091 	0xd1160091
    2e40:	0100001b 	divu	zero,t0,zero
    2e44:	04920577 	bltzall	a0,4424 <__isr_vec_space+0x4404>
    2e48:	91020000 	lbu	v0,0(t0)
    2e4c:	113c166c 	beq	t1,gp,8800 <__isr_vec_space+0x87e0>
    2e50:	78010000 	andi.b	$w0,$w0,0x1
    2e54:	00012705 	0x12705
    2e58:	70910200 	0x70910200
    2e5c:	00145416 	0x145416
    2e60:	05780100 	0x5780100
    2e64:	00000127 	0x127
    2e68:	00689102 	0x689102
    2e6c:	00182d1c 	0x182d1c
    2e70:	059d0100 	0x59d0100
    2e74:	80005890 	lb	zero,22672(zero)
    2e78:	00000288 	0x288
    2e7c:	096b9c01 	j	5ae7004 <__memory_size+0x5ac7804>
    2e80:	a6150000 	sh	s5,0(s0)
    2e84:	01000002 	0x1000002
    2e88:	021b059d 	0x21b059d
    2e8c:	91020000 	lbu	v0,0(t0)
    2e90:	1b741500 	0x1b741500
    2e94:	9d010000 	0x9d010000
    2e98:	00012705 	0x12705
    2e9c:	04910200 	bgezal	a0,36a0 <__isr_vec_space+0x3680>
    2ea0:	001bd116 	0x1bd116
    2ea4:	059f0100 	synci	256(t4)
    2ea8:	00000492 	0x492
    2eac:	16649102 	bne	s3,a0,fffe72b8 <__flash_start+0x403e72b8>
    2eb0:	00001c7e 	0x1c7e
    2eb4:	2705a001 	addiu	a1,t8,-24575
    2eb8:	02000001 	movf	zero,s0,$fcc0
    2ebc:	c1166891 	ll	s6,26769(t0)
    2ec0:	0100001a 	div	zero,t0,zero
    2ec4:	012705a0 	0x12705a0
    2ec8:	91020000 	lbu	v0,0(t0)
    2ecc:	13d4166c 	beq	s8,s4,8880 <__isr_vec_space+0x8860>
    2ed0:	a1010000 	sb	at,0(t0)
    2ed4:	00011c05 	0x11c05
    2ed8:	60910200 	0x60910200
    2edc:	0000461d 	0x461d
    2ee0:	034e0100 	0x34e0100
    2ee4:	00000037 	0x37
    2ee8:	00000939 	0x939
    2eec:	d017001b 	0xd017001b
    2ef0:	2880005a 	slti	zero,a0,90
    2ef4:	16000000 	bnez	s0,2ef8 <__isr_vec_space+0x2ed8>
    2ef8:	00000cb5 	0xcb5
    2efc:	de062d01 	ldc3	$6,11521(s0)
    2f00:	02000000 	0x2000000
    2f04:	d0177091 	0xd0177091
    2f08:	0c80005a 	jal	2000168 <__memory_size+0x1fe0968>
    2f0c:	19000000 	blez	t0,2f10 <__isr_vec_space+0x2ef0>
    2f10:	00725f5f 	0x725f5f
    2f14:	30062d01 	andi	a2,zero,0x2d01
    2f18:	01000000 	0x1000000
    2f1c:	0000006f 	0x6f
    2f20:	001aea1c 	0x1aea1c
    2f24:	06410100 	bgez	s2,3328 <__isr_vec_space+0x3308>
    2f28:	80005b18 	lb	zero,23320(zero)
    2f2c:	000001c8 	0x1c8
    2f30:	09ed9c01 	j	7b67004 <__memory_size+0x7b47804>
    2f34:	60150000 	0x60150000
    2f38:	01000019 	multu	t0,zero
    2f3c:	021b0641 	0x21b0641
    2f40:	91020000 	lbu	v0,0(t0)
    2f44:	1bd11600 	0x1bd11600
    2f48:	43010000 	c0	0x1010000
    2f4c:	00049206 	0x49206
    2f50:	68910200 	0x68910200
    2f54:	005c4c17 	0x5c4c17
    2f58:	00004880 	sll	t1,zero,0x2
    2f5c:	00461d00 	0x461d00
    2f60:	4e010000 	lwxc1	$f0,at(s0)
    2f64:	00003703 	sra	a2,zero,0x1c
    2f68:	0009ba00 	sll	s7,t1,0x8
    2f6c:	17001b00 	bnez	t8,9b70 <__isr_vec_space+0x9b50>
    2f70:	80005c6c 	lb	zero,23660(zero)
    2f74:	00000028 	0x28
    2f78:	000cb516 	0xcb516
    2f7c:	067b0100 	0x67b0100
    2f80:	000000de 	0xde
    2f84:	176c9102 	bne	k1,t4,fffe7390 <__flash_start+0x403e7390>
    2f88:	80005c6c 	lb	zero,23660(zero)
    2f8c:	0000000c 	syscall
    2f90:	725f5f19 	d32accm	xr12,xr7,xr13,xr7,SA
    2f94:	067b0100 	0x67b0100
    2f98:	00000030 	tge	zero,zero
    2f9c:	00006001 	movf	t4,zero,$fcc0
    2fa0:	151f0000 	bne	t0,ra,2fa4 <__isr_vec_space+0x2f84>
    2fa4:	01000019 	multu	t0,zero
    2fa8:	011c069b 	0x11c069b
    2fac:	5ce00000 	bgtzl	a3,2fb0 <__isr_vec_space+0x2f90>
    2fb0:	00d48000 	0xd48000
    2fb4:	9c010000 	0x9c010000
    2fb8:	00000a43 	sra	at,zero,0x9
    2fbc:	0002a615 	0x2a615
    2fc0:	069b0100 	0x69b0100
    2fc4:	00000a43 	sra	at,zero,0x9
    2fc8:	16009102 	bnez	s0,fffe73d4 <__flash_start+0x403e73d4>
    2fcc:	0000113d 	0x113d
    2fd0:	1c069d01 	0x1c069d01
    2fd4:	02000001 	movf	zero,s0,$fcc0
    2fd8:	d1167091 	0xd1167091
    2fdc:	0100001b 	divu	zero,t0,zero
    2fe0:	0808069e 	j	201a78 <__memory_size+0x1e2278>
    2fe4:	91020000 	lbu	v0,0(t0)
    2fe8:	00461a74 	teq	v0,a2,0x69
    2fec:	4e010000 	lwxc1	$f0,at(s0)
    2ff0:	00003703 	sra	a2,zero,0x1c
    2ff4:	00001b00 	sll	v1,zero,0xc
    2ff8:	00021b07 	0x21b07
    2ffc:	183e1c00 	0x183e1c00
    3000:	c9010000 	lwc2	$1,0(t0)
    3004:	005db406 	0x5db406
    3008:	00014480 	sll	t0,at,0x12
    300c:	c09c0100 	ll	gp,256(a0)
    3010:	1500000a 	bnez	t0,303c <__isr_vec_space+0x301c>
    3014:	0000139a 	0x139a
    3018:	1b06c901 	0x1b06c901
    301c:	02000002 	0x2000002
    3020:	d1160091 	0xd1160091
    3024:	0100001b 	divu	zero,t0,zero
    3028:	0ac006cb 	j	b001b2c <__memory_size+0xafe232c>
    302c:	91020000 	lbu	v0,0(t0)
    3030:	00461d70 	tge	v0,a2,0x75
    3034:	4e010000 	lwxc1	$f0,at(s0)
    3038:	00003703 	sra	a2,zero,0x1c
    303c:	000a8e00 	sll	s1,t2,0x18
    3040:	17001b00 	bnez	t8,9c44 <__isr_vec_space+0x9c24>
    3044:	80005eb0 	lb	zero,24240(zero)
    3048:	00000028 	0x28
    304c:	000cb516 	0xcb516
    3050:	06e50100 	0x6e50100
    3054:	000000de 	0xde
    3058:	17749102 	bne	k1,s4,fffe7464 <__flash_start+0x403e7464>
    305c:	80005eb0 	lb	zero,24240(zero)
    3060:	0000000c 	syscall
    3064:	725f5f19 	d32accm	xr12,xr7,xr13,xr7,SA
    3068:	06e50100 	0x6e50100
    306c:	00000030 	tge	zero,zero
    3070:	00006f01 	0x6f01
    3074:	04920700 	bltzall	a0,4c78 <__isr_vec_space+0x4c58>
    3078:	b5140000 	0xb5140000
    307c:	01000014 	0x1000014
    3080:	011c06ff 	0x11c06ff
    3084:	5ef80000 	0x5ef80000
    3088:	01488000 	0x1488000
    308c:	9c010000 	0x9c010000
    3090:	00000b2a 	0xb2a
    3094:	00139a15 	0x139a15
    3098:	06ff0100 	synci	256(s7)
    309c:	0000021b 	0x21b
    30a0:	16009102 	bnez	s0,fffe74ac <__flash_start+0x403e74ac>
    30a4:	000013d4 	0x13d4
    30a8:	1c070101 	0x1c070101
    30ac:	02000001 	movf	zero,s0,$fcc0
    30b0:	d1166891 	0xd1166891
    30b4:	0100001b 	divu	zero,t0,zero
    30b8:	0ac00702 	j	b001c08 <__memory_size+0xafe2408>
    30bc:	91020000 	lbu	v0,0(t0)
    30c0:	1145166c 	beq	t2,a1,8a74 <__isr_vec_space+0x8a54>
    30c4:	03010000 	0x3010000
    30c8:	00012707 	0x12707
    30cc:	70910200 	0x70910200
    30d0:	0000461a 	0x461a
    30d4:	034e0100 	0x34e0100
    30d8:	00000037 	0x37
    30dc:	1c00001b 	bgtz	zero,314c <__isr_vec_space+0x312c>
    30e0:	000019e0 	0x19e0
    30e4:	40074501 	0x40074501
    30e8:	18800060 	blez	a0,326c <__isr_vec_space+0x324c>
    30ec:	01000001 	movf	zero,t0,$fcc0
    30f0:	000b9d9c 	0xb9d9c
    30f4:	113d1600 	beq	t1,sp,88f8 <__isr_vec_space+0x88d8>
    30f8:	47010000 	bz.b	$w1,30fc <__isr_vec_space+0x30dc>
    30fc:	00011c07 	0x11c07
    3100:	70910200 	0x70910200
    3104:	0060ac1e 	0x60ac1e
    3108:	00004c80 	sll	t1,zero,0x12
    310c:	000b8400 	sll	s0,t3,0x10
    3110:	02e21600 	0x2e21600
    3114:	83010000 	lb	at,0(t8)
    3118:	0000de07 	0xde07
    311c:	74910200 	jalx	2440800 <__memory_size+0x2421000>
    3120:	0060ac17 	0x60ac17
    3124:	00000c80 	sll	at,zero,0x12
    3128:	5f5f1900 	0x5f5f1900
    312c:	83010072 	lb	at,114(t8)
    3130:	00003007 	srav	a2,zero,zero
    3134:	006f0100 	0x6f0100
    3138:	611c1700 	0x611c1700
    313c:	00248000 	0x248000
    3140:	461a0000 	add.s	$f0,$f0,$f26
    3144:	01000000 	0x1000000
    3148:	0037034e 	0x37034e
    314c:	001b0000 	sll	zero,k1,0x0
    3150:	341c0000 	li	gp,0x0
    3154:	01000015 	0x1000015
    3158:	615807b0 	0x615807b0
    315c:	00808000 	0x808000
    3160:	9c010000 	0x9c010000
    3164:	00000be5 	0xbe5
    3168:	00616817 	0x616817
    316c:	00004c80 	sll	t1,zero,0x12
    3170:	02e21600 	0x2e21600
    3174:	b5010000 	0xb5010000
    3178:	0000de07 	0xde07
    317c:	70910200 	0x70910200
    3180:	00616817 	0x616817
    3184:	00000c80 	sll	at,zero,0x12
    3188:	5f5f1900 	0x5f5f1900
    318c:	b5010072 	0xb5010072
    3190:	00003007 	srav	a2,zero,zero
    3194:	006f0100 	0x6f0100
    3198:	c8200000 	lwc2	$0,0(at)
    319c:	01000014 	0x1000014
    31a0:	61d807bb 	0x61d807bb
    31a4:	002c8000 	0x2c8000
    31a8:	9c010000 	0x9c010000
    31ac:	0018dd14 	0x18dd14
    31b0:	08040100 	j	100400 <__memory_size+0xe0c00>
    31b4:	0000011c 	0x11c
    31b8:	80006204 	lb	zero,25092(zero)
    31bc:	000001f0 	tge	zero,zero,0x7
    31c0:	0c909c01 	jal	2427004 <__memory_size+0x2407804>
    31c4:	d1160000 	0xd1160000
    31c8:	0100001b 	divu	zero,t0,zero
    31cc:	04920806 	bltzall	a0,51e8 <__isr_vec_space+0x51c8>
    31d0:	91020000 	lbu	v0,0(t0)
    31d4:	11d71668 	beq	t6,s7,8b78 <__isr_vec_space+0x8b58>
    31d8:	07010000 	bgez	t8,31dc <__isr_vec_space+0x31bc>
    31dc:	00011c08 	0x11c08
    31e0:	6c910200 	0x6c910200
    31e4:	0000461d 	0x461d
    31e8:	034e0100 	0x34e0100
    31ec:	00000037 	0x37
    31f0:	00000c41 	0xc41
    31f4:	4c1e001b 	0x4c1e001b
    31f8:	48800063 	0x48800063
    31fc:	5e000000 	bgtzl	s0,3200 <__isr_vec_space+0x31e0>
    3200:	1600000c 	bnez	s0,3234 <__isr_vec_space+0x3214>
    3204:	0000121a 	0x121a
    3208:	27083f01 	addiu	t0,t8,16129
    320c:	02000001 	movf	zero,s0,$fcc0
    3210:	17007091 	bnez	t8,1f458 <__isr_vec_space+0x1f438>
    3214:	800063a8 	lb	zero,25512(zero)
    3218:	00000028 	0x28
    321c:	000cb516 	0xcb516
    3220:	085f0100 	j	17c0400 <__memory_size+0x17a0c00>
    3224:	000000de 	0xde
    3228:	17749102 	bne	k1,s4,fffe7634 <__flash_start+0x403e7634>
    322c:	800063a8 	lb	zero,25512(zero)
    3230:	0000000c 	syscall
    3234:	725f5f19 	d32accm	xr12,xr7,xr13,xr7,SA
    3238:	085f0100 	j	17c0400 <__memory_size+0x17a0c00>
    323c:	00000030 	tge	zero,zero
    3240:	00006f01 	0x6f01
    3244:	17e22100 	bne	ra,v0,b648 <__isr_vec_space+0xb628>
    3248:	72010000 	madd	s0,at
    324c:	00013208 	0x13208
    3250:	0063f400 	0x63f400
    3254:	00002c80 	sll	a1,zero,0x12
    3258:	ba9c0100 	swr	gp,256(s4)
    325c:	1600000c 	bnez	s0,3290 <__isr_vec_space+0x3270>
    3260:	000019d9 	0x19d9
    3264:	32087401 	andi	t0,s0,0x7401
    3268:	02000001 	movf	zero,s0,$fcc0
    326c:	21007091 	addi	zero,t0,28817
    3270:	0000143b 	0x143b
    3274:	32088101 	andi	t0,s0,0x8101
    3278:	20000001 	addi	zero,zero,1
    327c:	30800064 	andi	zero,a0,0x64
    3280:	01000000 	0x1000000
    3284:	000cf39c 	0xcf39c
    3288:	113d1600 	beq	t1,sp,8a8c <__isr_vec_space+0x8a6c>
    328c:	83010000 	lb	at,0(t8)
    3290:	00013208 	0x13208
    3294:	74910200 	jalx	2440800 <__memory_size+0x2421000>
    3298:	00114516 	0x114516
    329c:	08840100 	j	2100400 <__memory_size+0x20e0c00>
    32a0:	00000127 	0x127
    32a4:	00709102 	0x709102
    32a8:	0013a822 	neg	s5,s3
    32ac:	08a00100 	j	2800400 <__memory_size+0x27e0c00>
    32b0:	00000127 	0x127
    32b4:	80006450 	lb	zero,25680(zero)
    32b8:	00000024 	and	zero,zero,zero
    32bc:	cb149c01 	lwc2	$20,-25599(t8)
    32c0:	01000019 	multu	t0,zero
    32c4:	00a008a8 	0xa008a8
    32c8:	64740000 	0x64740000
    32cc:	00748000 	0x748000
    32d0:	9c010000 	0x9c010000
    32d4:	00000d50 	0xd50
    32d8:	00185515 	0x185515
    32dc:	08a80100 	j	2a00400 <__memory_size+0x29e0c00>
    32e0:	0000021b 	0x21b
    32e4:	16009102 	bnez	s0,fffe76f0 <__flash_start+0x403e76f0>
    32e8:	00001bd1 	0x1bd1
    32ec:	9208aa01 	lbu	t0,-22015(s0)
    32f0:	02000004 	sllv	zero,zero,s0
    32f4:	461a7091 	c1	0x1a7091
    32f8:	01000000 	0x1000000
    32fc:	0037034e 	0x37034e
    3300:	001b0000 	sll	zero,k1,0x0
    3304:	133f1400 	beq	t9,ra,8308 <__isr_vec_space+0x82e8>
    3308:	e6010000 	swc1	$f1,0(s0)
    330c:	00011c09 	0x11c09
    3310:	0064e800 	0x64e800
    3314:	00027080 	sll	t6,v0,0x2
    3318:	d89c0100 	ldc2	$28,256(a0)
    331c:	1600000d 	bnez	s0,3354 <__isr_vec_space+0x3334>
    3320:	00001bd1 	0x1bd1
    3324:	9209e801 	lbu	t1,-6143(s0)
    3328:	02000004 	sllv	zero,zero,s0
    332c:	4d166c91 	0x4d166c91
    3330:	0100000c 	syscall	0x40000
    3334:	013209e9 	0x13209e9
    3338:	91020000 	lbu	v0,0(t0)
    333c:	192c1670 	0x192c1670
    3340:	ea010000 	swc2	$1,0(s0)
    3344:	00011c09 	0x11c09
    3348:	60910200 	0x60910200
    334c:	00650817 	0x650817
    3350:	00020480 	sll	zero,v0,0x12
    3354:	15581600 	bne	t2,t8,8b58 <__isr_vec_space+0x8b38>
    3358:	f4010000 	sdc1	$f1,0(zero)
    335c:	00071609 	0x71609
    3360:	64910200 	0x64910200
    3364:	00652817 	0x652817
    3368:	00005080 	sll	t2,zero,0x2
    336c:	0a741600 	j	9d05800 <__memory_size+0x9ce6000>
    3370:	fc010000 	sdc3	$1,0(zero)
    3374:	00080209 	0x80209
    3378:	68910200 	0x68910200
    337c:	0000461a 	0x461a
    3380:	034e0100 	0x34e0100
    3384:	00000037 	0x37
    3388:	0000001b 	divu	zero,zero,zero
    338c:	18aa1c00 	0x18aa1c00
    3390:	ec010000 	swc3	$1,0(zero)
    3394:	0067580a 	movz	t3,v1,a3
    3398:	00019880 	sll	s3,at,0x2
    339c:	5f9c0100 	0x5f9c0100
    33a0:	1e00000e 	bgtz	s0,33dc <__isr_vec_space+0x33bc>
    33a4:	80006788 	lb	zero,26504(zero)
    33a8:	00000090 	0x90
    33ac:	00000e1a 	0xe1a
    33b0:	001a0a16 	0x1a0a16
    33b4:	0b150100 	j	c540400 <__memory_size+0xc520c00>
    33b8:	00000e5f 	0xe5f
    33bc:	16689102 	bne	s3,t0,fffe77c8 <__flash_start+0x403e77c8>
    33c0:	0000175a 	0x175a
    33c4:	5b0b1501 	0x5b0b1501
    33c8:	02000005 	lsa	zero,s0,zero,0x1
    33cc:	17006c91 	bnez	t8,1e614 <__isr_vec_space+0x1e5f4>
    33d0:	80006818 	lb	zero,26648(zero)
    33d4:	000000c0 	ehb
    33d8:	001a9416 	0x1a9416
    33dc:	0b190100 	j	c640400 <__memory_size+0xc620c00>
    33e0:	00000127 	0x127
    33e4:	1d709102 	0x1d709102
    33e8:	00000046 	rorv	zero,zero,zero
    33ec:	37034e01 	ori	v1,t8,0x4e01
    33f0:	44000000 	mfc1	zero,$f0
    33f4:	1b00000e 	blez	t8,3430 <__isr_vec_space+0x3410>
    33f8:	68681700 	0x68681700
    33fc:	00708000 	0x708000
    3400:	02160000 	0x2160000
    3404:	01000012 	0x1000012
    3408:	0e6a0b19 	jal	9a82c64 <__memory_size+0x9a63464>
    340c:	91020000 	lbu	v0,0(t0)
    3410:	00000074 	teq	zero,zero,0x1
    3414:	000e6407 	0xe6407
    3418:	5b040600 	0x5b040600
    341c:	07000005 	bltz	t8,3434 <__isr_vec_space+0x3414>
    3420:	00000802 	srl	at,zero,0x0
    3424:	0015b81c 	0x15b81c
    3428:	0b270100 	j	c9c0400 <__memory_size+0xc9a0c00>
    342c:	800068f0 	lb	zero,26864(zero)
    3430:	00000078 	0x78
    3434:	0eb29c01 	jal	aca7004 <__memory_size+0xac87804>
    3438:	86150000 	lh	s5,0(s0)
    343c:	01000012 	0x1000012
    3440:	0e6a0b27 	jal	9a82c9c <__memory_size+0x9a6349c>
    3444:	91020000 	lbu	v0,0(t0)
    3448:	1a871500 	0x1a871500
    344c:	27010000 	addiu	at,t8,0
    3450:	0007160b 	0x7160b
    3454:	04910200 	bgezal	a0,3c58 <__isr_vec_space+0x3c38>
    3458:	0000461a 	0x461a
    345c:	034e0100 	0x34e0100
    3460:	00000037 	0x37
    3464:	1c00001b 	bgtz	zero,34d4 <__isr_vec_space+0x34b4>
    3468:	00001a2f 	0x1a2f
    346c:	680b3801 	0x680b3801
    3470:	b0800069 	0xb0800069
    3474:	01000000 	0x1000000
    3478:	000f049c 	0xf049c
    347c:	12861500 	beq	s4,a2,8880 <__isr_vec_space+0x8860>
    3480:	38010000 	xori	at,zero,0x0
    3484:	0008020b 	0x8020b
    3488:	00910200 	0x910200
    348c:	000c4d15 	0xc4d15
    3490:	0b380100 	j	ce00400 <__memory_size+0xcde0c00>
    3494:	00000716 	0x716
    3498:	15049102 	bne	t0,a0,fffe78a4 <__flash_start+0x403e78a4>
    349c:	00001a87 	0x1a87
    34a0:	160b3801 	bne	s0,t3,114a8 <__isr_vec_space+0x11488>
    34a4:	02000007 	srav	zero,zero,s0
    34a8:	461a0891 	c1	0x1a0891
    34ac:	01000000 	0x1000000
    34b0:	0037034e 	0x37034e
    34b4:	001b0000 	sll	zero,k1,0x0
    34b8:	16b41c00 	bne	s5,s4,a4bc <__isr_vec_space+0xa49c>
    34bc:	52010000 	beql	s0,at,34c0 <__isr_vec_space+0x34a0>
    34c0:	006a180b 	movn	v1,v1,t2
    34c4:	00009080 	sll	s2,zero,0x2
    34c8:	569c0100 	bnel	s4,gp,38cc <__isr_vec_space+0x38ac>
    34cc:	1500000f 	bnez	t0,350c <__isr_vec_space+0x34ec>
    34d0:	00001286 	0x1286
    34d4:	6a0b5201 	0x6a0b5201
    34d8:	0200000e 	0x200000e
    34dc:	87150091 	lh	s5,145(t8)
    34e0:	0100001a 	div	zero,t0,zero
    34e4:	01320b52 	0x1320b52
    34e8:	91020000 	lbu	v0,0(t0)
    34ec:	12fe1504 	beq	s7,s8,8900 <__isr_vec_space+0x88e0>
    34f0:	52010000 	beql	s0,at,34f4 <__isr_vec_space+0x34d4>
    34f4:	000f560b 	0xf560b
    34f8:	08910200 	j	2440800 <__memory_size+0x2421000>
    34fc:	0000461a 	0x461a
    3500:	034e0100 	0x34e0100
    3504:	00000037 	0x37
    3508:	0700001b 	bltz	t8,3578 <__isr_vec_space+0x3558>
    350c:	0000011c 	0x11c
    3510:	00162d14 	0x162d14
    3514:	0b710100 	j	dc40400 <__memory_size+0xdc20c00>
    3518:	0000011c 	0x11c
    351c:	80006aa8 	lb	zero,27304(zero)
    3520:	00000148 	0x148
    3524:	0fb19c01 	jal	ec67004 <__memory_size+0xec47804>
    3528:	86150000 	lh	s5,0(s0)
    352c:	01000012 	0x1000012
    3530:	0fb10b71 	jal	ec42dc4 <__memory_size+0xec235c4>
    3534:	91020000 	lbu	v0,0(t0)
    3538:	13f61600 	beq	ra,s6,8d3c <__isr_vec_space+0x8d1c>
    353c:	73010000 	madd	t8,at
    3540:	0004920b 	0x4920b
    3544:	74910200 	jalx	2440800 <__memory_size+0x2421000>
    3548:	00113d16 	0x113d16
    354c:	0b740100 	j	dd00400 <__memory_size+0xdce0c00>
    3550:	0000011c 	0x11c
    3554:	1a709102 	0x1a709102
    3558:	00000046 	rorv	zero,zero,zero
    355c:	37034e01 	ori	v1,t8,0x4e01
    3560:	1b000000 	blez	t8,3564 <__isr_vec_space+0x3544>
    3564:	b6070000 	0xb6070000
    3568:	0600000f 	bltz	s0,35a8 <__isr_vec_space+0x3588>
    356c:	000fbc04 	0xfbc04
    3570:	02100700 	0x2100700
    3574:	4e140000 	lwxc1	$f0,s4(s0)
    3578:	0100001a 	div	zero,t0,zero
    357c:	011c0bb5 	0x11c0bb5
    3580:	6bf00000 	0x6bf00000
    3584:	01448000 	0x1448000
    3588:	9c010000 	0x9c010000
    358c:	00001026 	xor	v0,zero,zero
    3590:	001c3715 	0x1c3715
    3594:	0bb50100 	j	ed40400 <__memory_size+0xed20c00>
    3598:	0000020a 	0x20a
    359c:	15009102 	bnez	t0,fffe79a8 <__flash_start+0x403e79a8>
    35a0:	00000c4d 	break	0x0,0x31
    35a4:	160bb501 	bne	s0,t3,ffff09ac <__flash_start+0x403f09ac>
    35a8:	02000007 	srav	zero,zero,s0
    35ac:	f6160491 	sdc1	$f22,1169(s0)
    35b0:	01000013 	mtlo	t0
    35b4:	04920bb7 	bltzall	a0,6494 <__isr_vec_space+0x6474>
    35b8:	91020000 	lbu	v0,0(t0)
    35bc:	113d1674 	beq	t1,sp,8f90 <__isr_vec_space+0x8f70>
    35c0:	b8010000 	swr	at,0(zero)
    35c4:	00011c0b 	0x11c0b
    35c8:	70910200 	0x70910200
    35cc:	0000461a 	0x461a
    35d0:	034e0100 	0x34e0100
    35d4:	00000037 	0x37
    35d8:	1c00001b 	bgtz	zero,3648 <__isr_vec_space+0x3628>
    35dc:	00001310 	0x1310
    35e0:	340be201 	li	t3,0xe201
    35e4:	6480006d 	0x6480006d
    35e8:	01000000 	0x1000000
    35ec:	00105a9c 	0x105a9c
    35f0:	17bf1500 	bne	sp,ra,89f4 <__isr_vec_space+0x89d4>
    35f4:	e2010000 	sc	at,0(s0)
    35f8:	00105a0b 	0x105a0b
    35fc:	00910200 	0x910200
    3600:	0000461a 	0x461a
    3604:	034e0100 	0x34e0100
    3608:	00000037 	0x37
    360c:	0700001b 	bltz	t8,367c <__isr_vec_space+0x365c>
    3610:	0000105f 	0x105f
    3614:	02b50406 	0x2b50406
    3618:	6f140000 	0x6f140000
    361c:	01000019 	multu	t0,zero
    3620:	011c0bea 	0x11c0bea
    3624:	6d980000 	0x6d980000
    3628:	01508000 	0x1508000
    362c:	9c010000 	0x9c010000
    3630:	000010d8 	0x10d8
    3634:	0017bf15 	0x17bf15
    3638:	0bea0100 	j	fa80400 <__memory_size+0xfa60c00>
    363c:	0000105a 	0x105a
    3640:	15009102 	bnez	t0,fffe7a4c <__flash_start+0x403e7a4c>
    3644:	00001a86 	0x1a86
    3648:	0b0bea01 	j	c2fa804 <__memory_size+0xc2db004>
    364c:	02000007 	srav	zero,zero,s0
    3650:	3d160491 	0x3d160491
    3654:	01000011 	mthi	t0
    3658:	011c0bec 	0x11c0bec
    365c:	91020000 	lbu	v0,0(t0)
    3660:	00461d70 	tge	v0,a2,0x75
    3664:	4e010000 	lwxc1	$f0,at(s0)
    3668:	00003703 	sra	a2,zero,0x1c
    366c:	0010be00 	sll	s7,s0,0x18
    3670:	17001b00 	bnez	t8,a274 <__isr_vec_space+0xa254>
    3674:	80006df8 	lb	zero,28152(zero)
    3678:	000000cc 	syscall	0x3
    367c:	00155816 	0x155816
    3680:	0bf40100 	j	fd00400 <__memory_size+0xfce0c00>
    3684:	00000716 	0x716
    3688:	00749102 	0x749102
    368c:	19ac2000 	0x19ac2000
    3690:	27010000 	addiu	at,t8,0
    3694:	006ee80c 	syscall	0x1bba0
    3698:	00002880 	sll	a1,zero,0x2
    369c:	189c0100 	0x189c0100
    36a0:	0000168a 	0x168a
    36a4:	100c5e01 	beq	zero,t4,1aeac <__isr_vec_space+0x1ae8c>
    36a8:	6080006f 	0x6080006f
    36ac:	01000000 	0x1000000
    36b0:	0011419c 	0x11419c
    36b4:	00e91500 	0xe91500
    36b8:	5e010000 	0x5e010000
    36bc:	00009e0c 	syscall	0x278
    36c0:	00910200 	0x910200
    36c4:	006f4017 	0x6f4017
    36c8:	00002880 	sll	a1,zero,0x2
    36cc:	0cb51600 	jal	2d45800 <__memory_size+0x2d26000>
    36d0:	83010000 	lb	at,0(t8)
    36d4:	0000de0c 	syscall	0x378
    36d8:	70910200 	0x70910200
    36dc:	006f4017 	0x6f4017
    36e0:	00000c80 	sll	at,zero,0x12
    36e4:	5f5f1900 	0x5f5f1900
    36e8:	83010072 	lb	at,114(t8)
    36ec:	0000300c 	syscall	0xc0
    36f0:	006f0100 	0x6f0100
    36f4:	20180000 	addi	t8,zero,0
    36f8:	0100001c 	0x100001c
    36fc:	6f700d28 	0x6f700d28
    3700:	00e08000 	0xe08000
    3704:	9c010000 	0x9c010000
    3708:	00001167 	0x1167
    370c:	00039a16 	0x39a16
    3710:	0d2a0100 	jal	4a80400 <__memory_size+0x4a60c00>
    3714:	00000127 	0x127
    3718:	00709102 	0x709102
    371c:	001c5518 	0x1c5518
    3720:	0d480100 	jal	5200400 <__memory_size+0x51e0c00>
    3724:	80007050 	lb	zero,28752(zero)
    3728:	000000c8 	0xc8
    372c:	11b09c01 	beq	t5,s0,fffea734 <__flash_start+0x403ea734>
    3730:	60170000 	0x60170000
    3734:	a0800070 	sb	zero,112(a0)
    3738:	16000000 	bnez	s0,373c <__isr_vec_space+0x371c>
    373c:	00001696 	0x1696
    3740:	1c0d4f01 	0x1c0d4f01
    3744:	02000001 	movf	zero,s0,$fcc0
    3748:	98177091 	lwr	s7,28817(zero)
    374c:	5c800070 	bgtzl	a0,3910 <__isr_vec_space+0x38f0>
    3750:	16000000 	bnez	s0,3754 <__isr_vec_space+0x3734>
    3754:	00001bd1 	0x1bd1
    3758:	920d5d01 	lbu	t5,23809(s0)
    375c:	02000004 	sllv	zero,zero,s0
    3760:	00007491 	0x7491
    3764:	1b242300 	0x1b242300
    3768:	f0010000 	0xf0010000
    376c:	0000d30d 	break	0x0,0x34c
    3770:	00711800 	0x711800
    3774:	00007080 	sll	t6,zero,0x2
    3778:	e99c0100 	swc2	$28,256(t4)
    377c:	15000011 	bnez	t0,37c4 <__isr_vec_space+0x37a4>
    3780:	00001527 	0x1527
    3784:	e90df001 	swc2	$13,-4095(t0)
    3788:	02000011 	mthi	s0
    378c:	82160091 	lb	s6,145(s0)
    3790:	01000015 	0x1000015
    3794:	00de0df2 	tlt	a2,s8,0x37
    3798:	91020000 	lbu	v0,0(t0)
    379c:	04060070 	0x4060070
    37a0:	000011ef 	0x11ef
    37a4:	0000c807 	srav	t9,zero,zero
    37a8:	14d81400 	bne	a2,t8,87ac <__isr_vec_space+0x878c>
    37ac:	04010000 	b	37b0 <__isr_vec_space+0x3790>
    37b0:	0001270e 	0x1270e
    37b4:	00718800 	0x718800
    37b8:	00006c80 	sll	t5,zero,0x12
    37bc:	4b9c0100 	c2	0x19c0100
    37c0:	15000012 	bnez	t0,380c <__isr_vec_space+0x37ec>
    37c4:	000002a6 	0x2a6
    37c8:	1b0e0401 	0x1b0e0401
    37cc:	02000002 	0x2000002
    37d0:	d1160091 	0xd1160091
    37d4:	0100001b 	divu	zero,t0,zero
    37d8:	04920e06 	bltzall	a0,6ff4 <__isr_vec_space+0x6fd4>
    37dc:	91020000 	lbu	v0,0(t0)
    37e0:	19bd1668 	0x19bd1668
    37e4:	07010000 	bgez	t8,37e8 <__isr_vec_space+0x37c8>
    37e8:	00013d0e 	0x13d0e
    37ec:	6c910200 	0x6c910200
    37f0:	00113c16 	0x113c16
    37f4:	0e080100 	jal	8200400 <__memory_size+0x81e0c00>
    37f8:	00000127 	0x127
    37fc:	00709102 	0x709102
    3800:	001add18 	0x1add18
    3804:	0e200100 	jal	8800400 <__memory_size+0x87e0c00>
    3808:	800071f4 	lb	zero,29172(zero)
    380c:	0000004c 	syscall	0x1
    3810:	12719c01 	beq	s3,s1,fffea818 <__flash_start+0x403ea818>
    3814:	d1150000 	0xd1150000
    3818:	0100001b 	divu	zero,t0,zero
    381c:	04920e20 	bltzall	a0,70a0 <__isr_vec_space+0x7080>
    3820:	91020000 	lbu	v0,0(t0)
    3824:	67240000 	0x67240000
    3828:	01000017 	0x1000017
    382c:	72400e56 	udi6	s2,zero,at,0x19
    3830:	00748000 	0x748000
    3834:	9c010000 	0x9c010000
    3838:	00001297 	0x1297
    383c:	001bd116 	0x1bd116
    3840:	0e580100 	jal	9600400 <__memory_size+0x95e0c00>
    3844:	00000492 	0x492
    3848:	00709102 	0x709102
    384c:	001af721 	0x1af721
    3850:	0e700100 	jal	9c00400 <__memory_size+0x9be0c00>
    3854:	0000021b 	0x21b
    3858:	800072b4 	lb	zero,29364(zero)
    385c:	0000002c 	0x2c
    3860:	12c19c01 	beq	s6,at,fffea868 <__flash_start+0x403ea868>
    3864:	3d160000 	0x3d160000
    3868:	01000011 	mthi	t0
    386c:	021b0e72 	tlt	s0,k1,0x39
    3870:	91020000 	lbu	v0,0(t0)
    3874:	52210070 	beql	s1,at,3a38 <__isr_vec_space+0x3a18>
    3878:	01000012 	0x1000012
    387c:	011c0e81 	0x11c0e81
    3880:	72e00000 	madd	s7,zero
    3884:	00608000 	0x608000
    3888:	9c010000 	0x9c010000
    388c:	000012eb 	0x12eb
    3890:	00113d16 	0x113d16
    3894:	0e830100 	jal	a0c0400 <__memory_size+0xa0a0c00>
    3898:	0000011c 	0x11c
    389c:	00709102 	0x709102
    38a0:	0012a41c 	0x12a41c
    38a4:	0e9d0100 	jal	a740400 <__memory_size+0xa720c00>
    38a8:	80007340 	lb	zero,29504(zero)
    38ac:	000001b8 	0x1b8
    38b0:	13209c01 	beqz	t9,fffea8b8 <__flash_start+0x403ea8b8>
    38b4:	3c150000 	lui	s5,0x0
    38b8:	01000019 	multu	t0,zero
    38bc:	0a430e9d 	j	90c3a74 <__memory_size+0x90a4274>
    38c0:	91020000 	lbu	v0,0(t0)
    38c4:	1bd11600 	0x1bd11600
    38c8:	9f010000 	0x9f010000
    38cc:	000ac00e 	0xac00e
    38d0:	70910200 	0x70910200
    38d4:	16151400 	bne	s0,s5,88d8 <__isr_vec_space+0x88b8>
    38d8:	df010000 	ldc3	$1,0(t8)
    38dc:	00011c0e 	0x11c0e
    38e0:	0074f800 	0x74f800
    38e4:	0001c080 	sll	t8,at,0x2
    38e8:	809c0100 	lb	gp,256(a0)
    38ec:	15000013 	bnez	t0,393c <__isr_vec_space+0x391c>
    38f0:	0000193c 	0x193c
    38f4:	430edf01 	c0	0x10edf01
    38f8:	0200000a 	movz	zero,s0,zero
    38fc:	d1160091 	0xd1160091
    3900:	0100001b 	divu	zero,t0,zero
    3904:	0ac00ee1 	j	b003b84 <__memory_size+0xafe4384>
    3908:	91020000 	lbu	v0,0(t0)
    390c:	113d1674 	beq	t1,sp,92e0 <__isr_vec_space+0x92c0>
    3910:	e2010000 	sc	at,0(s0)
    3914:	00011c0e 	0x11c0e
    3918:	70910200 	0x70910200
    391c:	00752417 	0x752417
    3920:	00017880 	sll	t7,at,0x2
    3924:	00461a00 	0x461a00
    3928:	4e010000 	lwxc1	$f0,at(s0)
    392c:	00003703 	sra	a2,zero,0x1c
    3930:	00001b00 	sll	v1,zero,0xc
    3934:	1b111c00 	0x1b111c00
    3938:	30010000 	andi	at,zero,0x0
    393c:	0076b80f 	0x76b80f
    3940:	0000d480 	sll	k0,zero,0x12
    3944:	e49c0100 	swc1	$f28,256(a0)
    3948:	1e000013 	bgtz	s0,3998 <__isr_vec_space+0x3978>
    394c:	800076cc 	lb	zero,30412(zero)
    3950:	0000004c 	syscall	0x1
    3954:	000013cb 	0x13cb
    3958:	0002e216 	0x2e216
    395c:	0f320100 	jal	cc80400 <__memory_size+0xcc60c00>
    3960:	000000de 	0xde
    3964:	17689102 	bne	k1,t0,fffe7d70 <__flash_start+0x403e7d70>
    3968:	800076cc 	lb	zero,30412(zero)
    396c:	0000000c 	syscall
    3970:	725f5f19 	d32accm	xr12,xr7,xr13,xr7,SA
    3974:	0f320100 	jal	cc80400 <__memory_size+0xcc60c00>
    3978:	00000030 	tge	zero,zero
    397c:	00006001 	movf	t4,zero,$fcc0
    3980:	00774817 	0x774817
    3984:	00002080 	sll	a0,zero,0x2
    3988:	00461a00 	0x461a00
    398c:	4e010000 	lwxc1	$f0,at(s0)
    3990:	00003703 	sra	a2,zero,0x1c
    3994:	00001b00 	sll	v1,zero,0xc
    3998:	14f42500 	bne	a3,s4,cd9c <__isr_vec_space+0xcd7c>
    399c:	4e010000 	lwxc1	$f0,at(s0)
    39a0:	00778c0f 	0x778c0f
    39a4:	00008c80 	sll	s1,zero,0x12
    39a8:	2c9c0100 	sltiu	gp,a0,256
    39ac:	17000014 	bnez	t8,3a00 <__isr_vec_space+0x39e0>
    39b0:	800077d8 	lb	zero,30680(zero)
    39b4:	00000028 	0x28
    39b8:	0002e216 	0x2e216
    39bc:	0f580100 	jal	d600400 <__memory_size+0xd5e0c00>
    39c0:	000000de 	0xde
    39c4:	17709102 	bne	k1,s0,fffe7dd0 <__flash_start+0x403e7dd0>
    39c8:	800077d8 	lb	zero,30680(zero)
    39cc:	0000000c 	syscall
    39d0:	725f5f19 	d32accm	xr12,xr7,xr13,xr7,SA
    39d4:	0f580100 	jal	d600400 <__memory_size+0xd5e0c00>
    39d8:	00000030 	tge	zero,zero
    39dc:	00006001 	movf	t4,zero,$fcc0
    39e0:	18132100 	0x18132100
    39e4:	65010000 	0x65010000
    39e8:	00013210 	0x13210
    39ec:	00781800 	0x781800
    39f0:	00004880 	sll	t1,zero,0x2
    39f4:	569c0100 	bnel	s4,gp,3df8 <__isr_vec_space+0x3dd8>
    39f8:	16000014 	bnez	s0,3a4c <__isr_vec_space+0x3a2c>
    39fc:	0000113c 	0x113c
    3a00:	32106701 	andi	s0,s0,0x6701
    3a04:	02000001 	movf	zero,s0,$fcc0
    3a08:	22007091 	addi	zero,s0,28817
    3a0c:	000015d9 	0x15d9
    3a10:	9e107501 	0x9e107501
    3a14:	60000000 	0x60000000
    3a18:	40800078 	0x40800078
    3a1c:	01000000 	0x1000000
    3a20:	16a3149c 	bne	s5,v1,8c94 <__isr_vec_space+0x8c74>
    3a24:	86010000 	lh	at,0(s0)
    3a28:	0000de10 	0xde10
    3a2c:	0078a000 	0x78a000
    3a30:	00010080 	sll	zero,at,0x2
    3a34:	e59c0100 	swc1	$f28,256(t4)
    3a38:	15000014 	bnez	t0,3a8c <__isr_vec_space+0x3a6c>
    3a3c:	00001412 	0x1412
    3a40:	1c108601 	0x1c108601
    3a44:	02000001 	movf	zero,s0,$fcc0
    3a48:	87150091 	lh	s5,145(t8)
    3a4c:	0100001a 	div	zero,t0,zero
    3a50:	01321086 	0x1321086
    3a54:	91020000 	lbu	v0,0(t0)
    3a58:	1c751604 	0x1c751604
    3a5c:	88010000 	lwl	at,0(zero)
    3a60:	0000de10 	0xde10
    3a64:	74910200 	jalx	2440800 <__memory_size+0x2421000>
    3a68:	0078f817 	0x78f817
    3a6c:	00002880 	sll	a1,zero,0x2
    3a70:	0cb51600 	jal	2d45800 <__memory_size+0x2d26000>
    3a74:	9b010000 	lwr	at,0(t8)
    3a78:	0000de10 	0xde10
    3a7c:	70910200 	0x70910200
    3a80:	0078f817 	0x78f817
    3a84:	00000c80 	sll	at,zero,0x12
    3a88:	5f5f1900 	0x5f5f1900
    3a8c:	9b010072 	lwr	at,114(t8)
    3a90:	00003010 	mfhi	a2
    3a94:	006f0100 	0x6f0100
    3a98:	60140000 	0x60140000
    3a9c:	01000016 	0x1000016
    3aa0:	011c10ca 	0x11c10ca
    3aa4:	79a00000 	ori.b	$w0,$w0,0xa0
    3aa8:	01448000 	0x1448000
    3aac:	9c010000 	0x9c010000
    3ab0:	0000157c 	0x157c
    3ab4:	00146a15 	0x146a15
    3ab8:	10ca0100 	beq	a2,t2,3ebc <__isr_vec_space+0x3e9c>
    3abc:	000000de 	0xde
    3ac0:	15009102 	bnez	t0,fffe7ecc <__flash_start+0x403e7ecc>
    3ac4:	00001229 	0x1229
    3ac8:	de10ca01 	ldc3	$16,-13823(s0)
    3acc:	02000000 	0x2000000
    3ad0:	97150491 	lhu	s5,1169(t8)
    3ad4:	01000019 	multu	t0,zero
    3ad8:	157c10ca 	bne	t3,gp,7e04 <__isr_vec_space+0x7de4>
    3adc:	91020000 	lbu	v0,0(t0)
    3ae0:	1a871508 	0x1a871508
    3ae4:	ca010000 	lwc2	$1,0(s0)
    3ae8:	00013210 	0x13210
    3aec:	0c910200 	jal	2440800 <__memory_size+0x2421000>
    3af0:	00113d16 	0x113d16
    3af4:	10cc0100 	beq	a2,t4,3ef8 <__isr_vec_space+0x3ed8>
    3af8:	0000011c 	0x11c
    3afc:	17709102 	bne	k1,s0,fffe7f08 <__flash_start+0x403e7f08>
    3b00:	80007a20 	lb	zero,31264(zero)
    3b04:	00000028 	0x28
    3b08:	000cb516 	0xcb516
    3b0c:	10e40100 	beq	a3,a0,3f10 <__isr_vec_space+0x3ef0>
    3b10:	000000de 	0xde
    3b14:	17749102 	bne	k1,s4,fffe7f20 <__flash_start+0x403e7f20>
    3b18:	80007a20 	lb	zero,31264(zero)
    3b1c:	0000000c 	syscall
    3b20:	725f5f19 	d32accm	xr12,xr7,xr13,xr7,SA
    3b24:	10e40100 	beq	a3,a0,3f28 <__isr_vec_space+0x3f08>
    3b28:	00000030 	tge	zero,zero
    3b2c:	00006f01 	0x6f01
    3b30:	de040600 	ldc3	$4,1536(s0)
    3b34:	14000000 	bnez	zero,3b38 <__isr_vec_space+0x3b18>
    3b38:	000013e3 	0x13e3
    3b3c:	1c111a01 	0x1c111a01
    3b40:	e4000001 	swc1	$f0,1(zero)
    3b44:	4880007a 	0x4880007a
    3b48:	01000002 	0x1000002
    3b4c:	0016499c 	0x16499c
    3b50:	18621500 	0x18621500
    3b54:	1a010000 	0x1a010000
    3b58:	00021b11 	0x21b11
    3b5c:	00910200 	0x910200
    3b60:	00033615 	0x33615
    3b64:	111a0100 	beq	t0,k0,3f68 <__isr_vec_space+0x3f48>
    3b68:	000000de 	0xde
    3b6c:	15049102 	bne	t0,a0,fffe7f78 <__flash_start+0x403e7f78>
    3b70:	0000180b 	movn	v1,zero,zero
    3b74:	85111a01 	lh	s1,6657(t0)
    3b78:	02000002 	0x2000002
    3b7c:	a2150891 	sb	s5,2193(s0)
    3b80:	01000017 	0x1000017
    3b84:	157c111a 	bne	t3,gp,7ff0 <__isr_vec_space+0x7fd0>
    3b88:	91020000 	lbu	v0,0(t0)
    3b8c:	1bd1160c 	0x1bd1160c
    3b90:	1c010000 	0x1c010000
    3b94:	00049211 	0x49211
    3b98:	6c910200 	0x6c910200
    3b9c:	00113d16 	0x113d16
    3ba0:	111d0100 	beq	t0,sp,3fa4 <__isr_vec_space+0x3f84>
    3ba4:	0000011c 	0x11c
    3ba8:	16689102 	bne	s3,t0,fffe7fb4 <__flash_start+0x403e7fb4>
    3bac:	00001879 	0x1879
    3bb0:	c8111e01 	lwc2	$17,7681(zero)
    3bb4:	02000000 	0x2000000
    3bb8:	461d7091 	movt.s	$f2,$f14,$fcc7
    3bbc:	01000000 	0x1000000
    3bc0:	0037034e 	0x37034e
    3bc4:	16170000 	bne	s0,s7,3bc8 <__isr_vec_space+0x3ba8>
    3bc8:	001b0000 	sll	zero,k1,0x0
    3bcc:	007ce017 	0x7ce017
    3bd0:	00002880 	sll	a1,zero,0x2
    3bd4:	0cb51600 	jal	2d45800 <__memory_size+0x2d26000>
    3bd8:	6e010000 	0x6e010000
    3bdc:	0000de11 	0xde11
    3be0:	74910200 	jalx	2440800 <__memory_size+0x2421000>
    3be4:	007ce017 	0x7ce017
    3be8:	00000c80 	sll	at,zero,0x12
    3bec:	5f5f1900 	0x5f5f1900
    3bf0:	6e010072 	0x6e010072
    3bf4:	00003011 	0x3011
    3bf8:	006f0100 	0x6f0100
    3bfc:	25140000 	addiu	s4,t0,0
    3c00:	01000013 	mtlo	t0
    3c04:	011c1184 	0x11c1184
    3c08:	7d2c0000 	ext	t4,t1,0x0,0x1
    3c0c:	02808000 	0x2808000
    3c10:	9c010000 	0x9c010000
    3c14:	000016f9 	0x16f9
    3c18:	00186215 	0x186215
    3c1c:	11840100 	beq	t4,a0,4020 <__isr_vec_space+0x4000>
    3c20:	0000021b 	0x21b
    3c24:	15009102 	bnez	t0,fffe8030 <__flash_start+0x403e8030>
    3c28:	00000336 	tne	zero,zero,0xc
    3c2c:	de118401 	ldc3	$17,-31743(s0)
    3c30:	02000000 	0x2000000
    3c34:	0b150491 	j	c541244 <__memory_size+0xc521a44>
    3c38:	01000018 	mult	t0,zero
    3c3c:	02851184 	0x2851184
    3c40:	91020000 	lbu	v0,0(t0)
    3c44:	17a21508 	bne	sp,v0,9068 <__isr_vec_space+0x9048>
    3c48:	84010000 	lh	at,0(zero)
    3c4c:	00157c11 	0x157c11
    3c50:	0c910200 	jal	2440800 <__memory_size+0x2421000>
    3c54:	000ea915 	0xea915
    3c58:	11840100 	beq	t4,a0,405c <__isr_vec_space+0x403c>
    3c5c:	000016f9 	0x16f9
    3c60:	16109102 	bne	s0,s0,fffe806c <__flash_start+0x403e806c>
    3c64:	00001bd1 	0x1bd1
    3c68:	92118601 	lbu	s1,-31231(s0)
    3c6c:	02000004 	sllv	zero,zero,s0
    3c70:	79166c91 	subsus_u.b	$w18,$w13,$w22
    3c74:	01000018 	mult	t0,zero
    3c78:	00c81187 	0xc81187
    3c7c:	91020000 	lbu	v0,0(t0)
    3c80:	113d1674 	beq	t1,sp,9654 <__isr_vec_space+0x9634>
    3c84:	88010000 	lwl	at,0(zero)
    3c88:	00011c11 	0x11c11
    3c8c:	68910200 	0x68910200
    3c90:	00114516 	0x114516
    3c94:	11890100 	beq	t4,t1,4098 <__isr_vec_space+0x4078>
    3c98:	00000127 	0x127
    3c9c:	1a709102 	0x1a709102
    3ca0:	00000046 	rorv	zero,zero,zero
    3ca4:	37034e01 	ori	v1,t8,0x4e01
    3ca8:	1b000000 	blez	t8,3cac <__isr_vec_space+0x3c8c>
    3cac:	04060000 	0x4060000
    3cb0:	0000011c 	0x11c
    3cb4:	0018ec1c 	0x18ec1c
    3cb8:	12000100 	beqz	s0,40bc <__isr_vec_space+0x409c>
    3cbc:	80007fac 	lb	zero,32684(zero)
    3cc0:	000001b0 	tge	zero,zero,0x6
    3cc4:	176f9c01 	bne	k1,t7,fffeaccc <__flash_start+0x403eaccc>
    3cc8:	62150000 	0x62150000
    3ccc:	01000018 	mult	t0,zero
    3cd0:	021b1200 	0x21b1200
    3cd4:	91020000 	lbu	v0,0(t0)
    3cd8:	0ea91500 	jal	aa45400 <__memory_size+0xaa25c00>
    3cdc:	00010000 	sll	zero,at,0x0
    3ce0:	0016f912 	0x16f912
    3ce4:	04910200 	bgezal	a0,44e8 <__isr_vec_space+0x44c8>
    3ce8:	001bd116 	0x1bd116
    3cec:	12020100 	beq	s0,v0,40f0 <__isr_vec_space+0x40d0>
    3cf0:	00000492 	0x492
    3cf4:	16689102 	bne	s3,t0,fffe8100 <__flash_start+0x403e8100>
    3cf8:	00001879 	0x1879
    3cfc:	c8120301 	lwc2	$18,769(zero)
    3d00:	02000000 	0x2000000
    3d04:	45167091 	bc1fl	$fcc5,1ff4c <__memory_size+0x74c>
    3d08:	01000011 	mthi	t0
    3d0c:	01271204 	0x1271204
    3d10:	91020000 	lbu	v0,0(t0)
    3d14:	00461a6c 	0x461a6c
    3d18:	4e010000 	lwxc1	$f0,at(s0)
    3d1c:	00003703 	sra	a2,zero,0x1c
    3d20:	00001b00 	sll	v1,zero,0xc
    3d24:	001a7014 	0x1a7014
    3d28:	12590100 	beq	s2,t9,412c <__isr_vec_space+0x410c>
    3d2c:	0000011c 	0x11c
    3d30:	8000815c 	lb	zero,-32420(zero)
    3d34:	00000094 	0x94
    3d38:	17b79c01 	bne	sp,s7,fffead40 <__flash_start+0x403ead40>
    3d3c:	a6150000 	sh	s5,0(s0)
    3d40:	01000002 	0x1000002
    3d44:	021b1259 	0x21b1259
    3d48:	91020000 	lbu	v0,0(t0)
    3d4c:	1bd11600 	0x1bd11600
    3d50:	5b010000 	0x5b010000
    3d54:	00049212 	0x49212
    3d58:	74910200 	jalx	2440800 <__memory_size+0x2421000>
    3d5c:	00113d16 	0x113d16
    3d60:	125c0100 	beq	s2,gp,4164 <__isr_vec_space+0x4144>
    3d64:	0000011c 	0x11c
    3d68:	00709102 	0x709102
    3d6c:	001b4818 	0x1b4818
    3d70:	12770100 	beq	s3,s7,4174 <__isr_vec_space+0x4154>
    3d74:	800081f0 	lb	zero,-32272(zero)
    3d78:	00000144 	0x144
    3d7c:	180a9c01 	0x180a9c01
    3d80:	87150000 	lh	s5,0(t8)
    3d84:	0100001a 	div	zero,t0,zero
    3d88:	01321277 	0x1321277
    3d8c:	91020000 	lbu	v0,0(t0)
    3d90:	19f41500 	0x19f41500
    3d94:	77010000 	jalx	c040000 <__memory_size+0xc020800>
    3d98:	000f5612 	0xf5612
    3d9c:	04910200 	bgezal	a0,45a0 <__isr_vec_space+0x4580>
    3da0:	001ba816 	0x1ba816
    3da4:	12790100 	beq	s3,t9,41a8 <__isr_vec_space+0x4188>
    3da8:	00000132 	tlt	zero,zero,0x4
    3dac:	16749102 	bne	s3,s4,fffe81b8 <__flash_start+0x403e81b8>
    3db0:	00001558 	0x1558
    3db4:	16127a01 	bne	s0,s2,225bc <__memory_size+0x2dbc>
    3db8:	02000007 	srav	zero,zero,s0
    3dbc:	08007091 	j	1c244 <__isr_vec_space+0x1c224>
    3dc0:	00000210 	0x210
    3dc4:	0000181a 	0x181a
    3dc8:	00009709 	0x9709
    3dcc:	16000400 	bnez	s0,4dd0 <__isr_vec_space+0x4db0>
    3dd0:	000012ec 	0x12ec
    3dd4:	0a017901 	j	805e404 <__memory_size+0x803ec04>
    3dd8:	05000018 	bltz	t0,3e3c <__isr_vec_space+0x3e1c>
    3ddc:	00c3a803 	0xc3a803
    3de0:	13521680 	beq	k0,s2,97e4 <__isr_vec_space+0x97c4>
    3de4:	7a010000 	nori.b	$w0,$w0,0x1
    3de8:	00021001 	0x21001
    3dec:	0c030500 	jal	c1400 <__memory_size+0xa1c00>
    3df0:	168000c4 	bnez	s4,4104 <__isr_vec_space+0x40e4>
    3df4:	00001364 	0x1364
    3df8:	10017b01 	beq	zero,at,22a00 <__memory_size+0x3200>
    3dfc:	05000002 	bltz	t0,3e08 <__isr_vec_space+0x3de8>
    3e00:	00c42003 	0xc42003
    3e04:	19031680 	0x19031680
    3e08:	7c010000 	ext	at,zero,0x0,0x1
    3e0c:	00186201 	0x186201
    3e10:	e0030500 	sc	v1,1280(zero)
    3e14:	138000c2 	beqz	gp,4120 <__isr_vec_space+0x4100>
    3e18:	00000802 	srl	at,zero,0x0
    3e1c:	00159e16 	0x159e16
    3e20:	017d0100 	0x17d0100
    3e24:	00001862 	0x1862
    3e28:	c2e40305 	ll	a0,773(s7)
    3e2c:	7f168000 	ext	s6,t8,0x0,0x11
    3e30:	01000014 	0x1000014
    3e34:	0210017e 	0x210017e
    3e38:	03050000 	0x3050000
    3e3c:	8000c434 	lb	zero,-15308(zero)
    3e40:	00149116 	0x149116
    3e44:	01820100 	0x1820100
    3e48:	00000210 	0x210
    3e4c:	c4480305 	lwc1	$f8,773(v0)
    3e50:	cf168000 	pref	0x16,-32768(t8)
    3e54:	01000012 	0x1000012
    3e58:	18af0183 	0x18af0183
    3e5c:	03050000 	0x3050000
    3e60:	8000c2e8 	lb	zero,-15640(zero)
    3e64:	00012713 	0x12713
    3e68:	15681600 	bne	t3,t0,966c <__isr_vec_space+0x964c>
    3e6c:	89010000 	lwl	at,0(t0)
    3e70:	00021001 	0x21001
    3e74:	5c030500 	0x5c030500
    3e78:	168000c4 	bnez	s4,418c <__isr_vec_space+0x416c>
    3e7c:	00001b82 	srl	v1,zero,0xe
    3e80:	af018e01 	sw	at,-29183(t8)
    3e84:	05000018 	bltz	t0,3ee8 <__isr_vec_space+0x3ec8>
    3e88:	00c2ec03 	0xc2ec03
    3e8c:	173f1680 	bne	t9,ra,9890 <__isr_vec_space+0x9870>
    3e90:	8f010000 	lw	at,0(t8)
    3e94:	0018ea01 	0x18ea01
    3e98:	f0030500 	0xf0030500
    3e9c:	138000c2 	beqz	gp,41a8 <__isr_vec_space+0x4188>
    3ea0:	00000132 	tlt	zero,zero,0x4
    3ea4:	00127316 	0x127316
    3ea8:	01900100 	0x1900100
    3eac:	000018af 	0x18af
    3eb0:	c2f40305 	ll	s4,773(s7)
    3eb4:	92168000 	lbu	s6,-32768(s0)
    3eb8:	01000012 	0x1000012
    3ebc:	19130191 	0x19130191
    3ec0:	03050000 	0x3050000
    3ec4:	8000c2f8 	lb	zero,-15624(zero)
    3ec8:	00011c13 	0x11c13
    3ecc:	1bc31600 	0x1bc31600
    3ed0:	92010000 	lbu	at,0(s0)
    3ed4:	0018af01 	0x18af01
    3ed8:	fc030500 	sdc3	$3,1280(zero)
    3edc:	168000c2 	bnez	s4,41e8 <__isr_vec_space+0x41c8>
    3ee0:	00001c94 	0x1c94
    3ee4:	13019301 	beq	t8,at,fffe8aec <__flash_start+0x403e8aec>
    3ee8:	05000019 	bltz	t0,3f50 <__isr_vec_space+0x3f30>
    3eec:	00c30003 	0xc30003
    3ef0:	18bd1680 	0x18bd1680
    3ef4:	94010000 	lhu	at,0(zero)
    3ef8:	00191301 	0x191301
    3efc:	04030500 	bgezl	zero,5300 <__isr_vec_space+0x52e0>
    3f00:	168000c3 	bnez	s4,4210 <__isr_vec_space+0x41f0>
    3f04:	000017fe 	0x17fe
    3f08:	27019501 	addiu	at,t8,-27391
    3f0c:	05000001 	bltz	t0,3f14 <__isr_vec_space+0x3ef4>
    3f10:	00c30803 	0xc30803
    3f14:	172a1680 	bne	t9,t2,9918 <__isr_vec_space+0x98f8>
    3f18:	96010000 	lhu	at,0(s0)
    3f1c:	0018ea01 	0x18ea01
    3f20:	0c030500 	jal	c1400 <__memory_size+0xa1c00>
    3f24:	168000c3 	bnez	s4,4234 <__isr_vec_space+0x4214>
    3f28:	000018cd 	break	0x0,0x63
    3f2c:	1b019701 	0x1b019701
    3f30:	05000002 	bltz	t0,3f3c <__isr_vec_space+0x3f1c>
    3f34:	00c31003 	0xc31003
    3f38:	1bec1680 	0x1bec1680
    3f3c:	a1010000 	sb	at,0(t0)
    3f40:	0018af01 	0x18af01
    3f44:	14030500 	bne	zero,v1,5348 <__isr_vec_space+0x5328>
    3f48:	268000c3 	addiu	zero,s4,195
    3f4c:	000000b8 	0xb8
    3f50:	19a14a01 	0x19a14a01
    3f54:	04060000 	0x4060000
    3f58:	000019a7 	0x19a7
    3f5c:	00003713 	0x3713
    3f60:	15062600 	bne	t0,a2,d764 <__isr_vec_space+0xd744>
    3f64:	ee070000 	swc3	$7,0(s0)
    3f68:	000018af 	0x18af
    3f6c:	001b6727 	0x1b6727
    3f70:	01760100 	0x1760100
    3f74:	000019c9 	0x19c9
    3f78:	c2dc0305 	ll	gp,773(s6)
    3f7c:	92138000 	lbu	s3,-32768(s0)
    3f80:	00000004 	sllv	zero,zero,zero
    3f84:	00001109 	0x1109
    3f88:	0c060004 	jal	180010 <__memory_size+0x160810>
    3f8c:	01040000 	0x1040000
    3f90:	000001a5 	0x1a5
    3f94:	001eb001 	0x1eb001
    3f98:	00016300 	sll	t4,at,0xc
    3f9c:	00833400 	0x833400
    3fa0:	00208880 	0x208880
    3fa4:	001f7500 	sll	t6,ra,0x14
    3fa8:	04720200 	bltzall	v1,47ac <__isr_vec_space+0x478c>
    3fac:	d4020000 	ldc1	$f2,0(zero)
    3fb0:	00000030 	tge	zero,zero
    3fb4:	09070403 	j	41c100c <__memory_size+0x41a180c>
    3fb8:	04000001 	bltz	zero,3fc0 <__isr_vec_space+0x3fa0>
    3fbc:	6e690504 	0x6e690504
    3fc0:	04030074 	bgezl	zero,4194 <__isr_vec_space+0x4174>
    3fc4:	00015a05 	0x15a05
    3fc8:	1f6c0200 	0x1f6c0200
    3fcc:	1b030000 	0x1b030000
    3fd0:	00000050 	0x50
    3fd4:	6a060103 	0x6a060103
    3fd8:	02000000 	0x2000000
    3fdc:	00000000 	nop
    3fe0:	00621c03 	0x621c03
    3fe4:	01030000 	0x1030000
    3fe8:	00006808 	0x6808
    3fec:	05020300 	bltzl	t0,4bf0 <__isr_vec_space+0x4bd0>
    3ff0:	0000019b 	0x19b
    3ff4:	93070203 	lbu	a3,515(t8)
    3ff8:	02000000 	0x2000000
    3ffc:	000000de 	0xde
    4000:	00303803 	0x303803
    4004:	08030000 	j	c0000 <__memory_size+0xa0800>
    4008:	00015505 	0x15505
    400c:	07080300 	tgei	t8,768
    4010:	00000104 	0x104
    4014:	0e070403 	jal	81c100c <__memory_size+0x81a180c>
    4018:	03000001 	movf	zero,t8,$fcc0
    401c:	01320704 	0x1320704
    4020:	04050000 	0x4050000
    4024:	71080103 	0x71080103
    4028:	06000000 	bltz	s0,402c <__isr_vec_space+0x400c>
    402c:	0000ad04 	0xad04
    4030:	6e020700 	0x6e020700
    4034:	0400001f 	bltz	zero,40b4 <__isr_vec_space+0x4094>
    4038:	00004529 	0x4529
    403c:	00020200 	sll	zero,v0,0x8
    4040:	2a040000 	slti	a0,s0,0
    4044:	00000057 	0x57
    4048:	0000e002 	srl	gp,zero,0x0
    404c:	77420400 	jalx	d081000 <__memory_size+0xd061800>
    4050:	08000000 	j	0 <hardware_exit_hook>
    4054:	00000246 	0x246
    4058:	90039305 	lbu	v1,-27899(zero)
    405c:	02000000 	0x2000000
    4060:	00000213 	0x213
    4064:	003e6c06 	0x3e6c06
    4068:	12020000 	beq	s0,v0,406c <__isr_vec_space+0x404c>
    406c:	06000002 	bltz	s0,4078 <__isr_vec_space+0x4058>
    4070:	0000306d 	0x306d
    4074:	000a0200 	sll	zero,t2,0x8
    4078:	73060000 	madd	t8,a2
    407c:	000000c4 	0xc4
    4080:	00b90406 	0xb90406
    4084:	aa090000 	swl	t1,0(s0)
    4088:	1400000c 	bnez	zero,40bc <__isr_vec_space+0x409c>
    408c:	014bb507 	0x14bb507
    4090:	4d0a0000 	lwxc1	$f0,t2(t0)
    4094:	0700000c 	bltz	t8,40c8 <__isr_vec_space+0x40a8>
    4098:	0000f1b8 	0xf1b8
    409c:	880a0000 	lwl	t2,0(zero)
    40a0:	0700000d 	bltz	t8,40d8 <__isr_vec_space+0x40b8>
    40a4:	00014bb9 	0x14bb9
    40a8:	ce0a0400 	pref	0xa,1024(s0)
    40ac:	0700000a 	bltz	t8,40d8 <__isr_vec_space+0x40b8>
    40b0:	00014bba 	0x14bba
    40b4:	d40a0800 	ldc1	$f10,2048(zero)
    40b8:	0700000e 	bltz	t8,40f4 <__isr_vec_space+0x40d4>
    40bc:	00009ebb 	0x9ebb
    40c0:	2f0a0c00 	sltiu	t2,t8,3072
    40c4:	0700000d 	bltz	t8,40fc <__isr_vec_space+0x40dc>
    40c8:	00009ebc 	0x9ebc
    40cc:	06001000 	bltz	s0,80d0 <__isr_vec_space+0x80b0>
    40d0:	00010204 	0x10204
    40d4:	0bec0200 	j	fb00800 <__memory_size+0xfae1000>
    40d8:	bf070000 	cache	0x7,0(t8)
    40dc:	00000102 	srl	zero,zero,0x4
    40e0:	000f6809 	0xf6809
    40e4:	c1070c00 	ll	a3,3072(t0)
    40e8:	0000018d 	break	0x0,0x6
    40ec:	000c4d0a 	0xc4d0a
    40f0:	f1c40700 	0xf1c40700
    40f4:	00000000 	nop
    40f8:	000d880a 	movz	s1,zero,t5
    40fc:	4bc50700 	c2	0x1c50700
    4100:	04000001 	bltz	zero,4108 <__isr_vec_space+0x40e8>
    4104:	000ace0a 	0xace0a
    4108:	4bc60700 	c2	0x1c60700
    410c:	08000001 	j	4 <ABIFlags_gpr_size>
    4110:	0be80200 	j	fa00800 <__memory_size+0xf9e1000>
    4114:	c8070000 	lwc2	$7,0(zero)
    4118:	0000015c 	0x15c
    411c:	000c2b09 	0xc2b09
    4120:	cd071400 	pref	0x7,5120(t0)
    4124:	000001c9 	0x1c9
    4128:	000e300a 	movz	a2,zero,t6
    412c:	e6d00700 	swc1	$f16,1792(s6)
    4130:	00000000 	nop
    4134:	000f370a 	0xf370a
    4138:	c9d10700 	lwc2	$17,1792(t6)
    413c:	04000001 	bltz	zero,4144 <__isr_vec_space+0x4124>
    4140:	000fc00a 	movz	t8,zero,t7
    4144:	8dd20700 	lw	s2,1792(t6)
    4148:	08000001 	j	4 <ABIFlags_gpr_size>
    414c:	51040600 	beql	t0,a0,5950 <__isr_vec_space+0x5930>
    4150:	02000001 	movf	zero,s0,$fcc0
    4154:	00000be1 	0xbe1
    4158:	0198d407 	0x198d407
    415c:	c5090000 	lwc1	$f9,0(t0)
    4160:	08000012 	j	48 <__isr_vec_space+0x28>
    4164:	01ff8708 	0x1ff8708
    4168:	760a0000 	jalx	8280000 <__memory_size+0x8260800>
    416c:	08000013 	j	4c <__isr_vec_space+0x2c>
    4170:	0000db89 	0xdb89
    4174:	830a0000 	lb	t2,0(t8)
    4178:	08000017 	j	5c <__isr_vec_space+0x3c>
    417c:	0000f18a 	0xf18a
    4180:	02000400 	0x2000400
    4184:	000017f4 	teq	zero,zero,0x5f
    4188:	01da8b08 	0x1da8b08
    418c:	38020000 	xori	v0,zero,0x0
    4190:	09000000 	j	4000000 <__memory_size+0x3fe0800>
    4194:	00009e58 	0x9e58
    4198:	04fe0200 	0x4fe0200
    419c:	5f090000 	0x5f090000
    41a0:	0000009e 	0x9e
    41a4:	00052e02 	srl	a1,a1,0x18
    41a8:	9e660900 	0x9e660900
    41ac:	0b000000 	j	c000000 <__memory_size+0xbfe0800>
    41b0:	4a880104 	c2	0x880104
    41b4:	0c000002 	jal	8 <ABIFlags_isa_ext>
    41b8:	00001d52 	0x1d52
    41bc:	024a8a01 	0x24a8a01
    41c0:	280c0000 	slti	t4,zero,0
    41c4:	01000020 	add	zero,t0,zero
    41c8:	0000e68b 	0xe68b
    41cc:	04060000 	0x4060000
    41d0:	000000ae 	0xae
    41d4:	001d7f09 	0x1d7f09
    41d8:	82014c00 	lb	at,19456(s0)
    41dc:	000002eb 	0x2eb
    41e0:	0020780a 	movz	t7,at,zero
    41e4:	4a840100 	c2	0x840100
    41e8:	00000002 	srl	zero,zero,0x0
    41ec:	0020190a 	0x20190a
    41f0:	4a850100 	c2	0x850100
    41f4:	04000002 	bltz	zero,4200 <__isr_vec_space+0x41e0>
    41f8:	001f620a 	0x1f620a
    41fc:	4a860100 	c2	0x860100
    4200:	08000002 	j	8 <ABIFlags_isa_ext>
    4204:	0100750d 	break	0x100,0x1d4
    4208:	00022b8c 	syscall	0x8ae
    420c:	fc0a0c00 	sdc3	$10,3072(zero)
    4210:	0100001c 	0x100001c
    4214:	0001cf8e 	0x1cf8e
    4218:	d20a1000 	0xd20a1000
    421c:	0100001c 	0x100001c
    4220:	0001cf8f 	0x1cf8f
    4224:	bd0a2400 	cache	0xa,9216(t0)
    4228:	0100001d 	0x100001d
    422c:	0002eb91 	0x2eb91
    4230:	8e0a3800 	lw	t2,14336(s0)
    4234:	0100001f 	0x100001f
    4238:	0000e692 	0xe692
    423c:	230a3c00 	addi	t2,t8,15360
    4240:	0100001e 	0x100001e
    4244:	0000e693 	0xe693
    4248:	080a4000 	j	290000 <__memory_size+0x270800>
    424c:	01000021 	move	zero,t0
    4250:	0002f095 	0x2f095
    4254:	270a4400 	addiu	t2,t8,17408
    4258:	0100001d 	0x100001d
    425c:	0002f096 	0x2f096
    4260:	db0a4500 	ldc2	$10,17664(t8)
    4264:	01000020 	add	zero,t0,zero
    4268:	0002f59d 	0x2f59d
    426c:	0e004800 	jal	8012000 <__memory_size+0x7ff2800>
    4270:	000000e6 	0xe6
    4274:	0000ae0e 	0xae0e
    4278:	50040600 	beql	zero,a0,5a7c <__isr_vec_space+0x5a5c>
    427c:	02000002 	0x2000002
    4280:	000020d4 	0x20d4
    4284:	0250a501 	0x250a501
    4288:	2f020000 	sltiu	v0,t8,0
    428c:	0100001d 	0x100001d
    4290:	0002fba9 	0x2fba9
    4294:	20a70f00 	addi	a3,a1,3840
    4298:	17010000 	bne	t8,at,429c <__isr_vec_space+0x427c>
    429c:	0000db01 	0xdb01
    42a0:	00833400 	0x833400
    42a4:	00018880 	sll	s1,at,0x2
    42a8:	9c9c0100 	0x9c9c0100
    42ac:	10000003 	b	42bc <__isr_vec_space+0x429c>
    42b0:	00002021 	move	a0,zero
    42b4:	0a011701 	j	8045c04 <__memory_size+0x8026404>
    42b8:	02000002 	0x2000002
    42bc:	f2100091 	0xf2100091
    42c0:	0100001c 	0x100001c
    42c4:	00db0117 	0xdb0117
    42c8:	91020000 	lbu	v0,0(t0)
    42cc:	20201104 	addi	zero,at,4356
    42d0:	19010000 	0x19010000
    42d4:	00039c01 	0x39c01
    42d8:	70910200 	0x70910200
    42dc:	00004612 	0x4612
    42e0:	011b0100 	0x11b0100
    42e4:	00000037 	0x37
    42e8:	0000036a 	0x36a
    42ec:	40140013 	0x40140013
    42f0:	28800084 	slti	zero,a0,132
    42f4:	11000000 	beqz	t0,42f8 <__isr_vec_space+0x42d8>
    42f8:	00000cb5 	0xcb5
    42fc:	c4013101 	lwc1	$f1,12545(zero)
    4300:	02000000 	0x2000000
    4304:	40147491 	0x40147491
    4308:	0c800084 	jal	2000210 <__memory_size+0x1fe0a10>
    430c:	15000000 	bnez	t0,4310 <__isr_vec_space+0x42f0>
    4310:	00725f5f 	0x725f5f
    4314:	30013101 	andi	at,zero,0x3101
    4318:	01000000 	0x1000000
    431c:	0000006f 	0x6f
    4320:	0003a116 	0x3a116
    4324:	06040600 	0x6040600
    4328:	0f000003 	jal	c00000c <__memory_size+0xbfe080c>
    432c:	00001e8a 	0x1e8a
    4330:	0a018201 	j	8060804 <__memory_size+0x8041004>
    4334:	bc000002 	cache	0x0,2(zero)
    4338:	dc800084 	ldc3	$0,132(a0)
    433c:	01000000 	0x1000000
    4340:	00042a9c 	0x42a9c
    4344:	03c91000 	0x3c91000
    4348:	82010000 	lb	at,0(s0)
    434c:	00042a01 	0x42a01
    4350:	00910200 	0x910200
    4354:	001e2310 	0x1e2310
    4358:	01820100 	0x1820100
    435c:	0000042a 	0x42a
    4360:	10049102 	beq	zero,a0,fffe876c <__flash_start+0x403e876c>
    4364:	00001f49 	0x1f49
    4368:	2f018201 	sltiu	at,t8,-32255
    436c:	02000004 	sllv	zero,zero,s0
    4370:	f1110891 	0xf1110891
    4374:	0100001c 	0x100001c
    4378:	03a10184 	0x3a10184
    437c:	91020000 	lbu	v0,0(t0)
    4380:	1fc9116c 	0x1fc9116c
    4384:	85010000 	lh	at,0(t0)
    4388:	00002501 	0x2501
    438c:	68910200 	0x68910200
    4390:	001ef311 	0x1ef311
    4394:	01860100 	0x1860100
    4398:	000000fc 	0xfc
    439c:	17709102 	bne	k1,s0,fffe87a8 <__flash_start+0x403e87a8>
    43a0:	00000046 	rorv	zero,zero,zero
    43a4:	37011b01 	ori	at,t8,0x1b01
    43a8:	13000000 	beqz	t8,43ac <__isr_vec_space+0x438c>
    43ac:	e6160000 	swc1	$f22,0(s0)
    43b0:	16000000 	bnez	s0,43b4 <__isr_vec_space+0x4394>
    43b4:	000000b9 	0xb9
    43b8:	001d5d18 	0x1d5d18
    43bc:	01b00100 	0x1b00100
    43c0:	80008598 	lb	zero,-31336(zero)
    43c4:	00000098 	0x98
    43c8:	04969c01 	0x4969c01
    43cc:	c9100000 	lwc2	$16,0(t0)
    43d0:	01000003 	0x1000003
    43d4:	042a01b0 	tlti	at,432
    43d8:	91020000 	lbu	v0,0(t0)
    43dc:	1e231000 	0x1e231000
    43e0:	b0010000 	0xb0010000
    43e4:	00042a01 	0x42a01
    43e8:	04910200 	bgezal	a0,4bec <__isr_vec_space+0x4bcc>
    43ec:	001ef310 	0x1ef310
    43f0:	01b00100 	0x1b00100
    43f4:	000000fc 	0xfc
    43f8:	10089102 	beq	zero,t0,fffe8804 <__flash_start+0x403e8804>
    43fc:	00001f49 	0x1f49
    4400:	2f01b001 	sltiu	at,t8,-20479
    4404:	02000004 	sllv	zero,zero,s0
    4408:	f1100c91 	0xf1100c91
    440c:	0100001c 	0x100001c
    4410:	03a101b0 	tge	sp,at,0x6
    4414:	91020000 	lbu	v0,0(t0)
    4418:	e0180010 	sc	t8,16(zero)
    441c:	0100001e 	0x100001e
    4420:	863001dc 	lh	s0,476(s1)
    4424:	00688000 	0x688000
    4428:	9c010000 	0x9c010000
    442c:	000004bc 	0x4bc
    4430:	001cf110 	0x1cf110
    4434:	01dc0100 	0x1dc0100
    4438:	000003a1 	0x3a1
    443c:	00009102 	srl	s2,zero,0x4
    4440:	001e9e0f 	0x1e9e0f
    4444:	01fa0100 	0x1fa0100
    4448:	0000020a 	0x20a
    444c:	80008698 	lb	zero,-31080(zero)
    4450:	00000068 	0x68
    4454:	05139c01 	bgezall	t0,fffeb45c <__flash_start+0x403eb45c>
    4458:	49100000 	bc2f	$cc4,445c <__isr_vec_space+0x443c>
    445c:	0100001f 	0x100001f
    4460:	042f01fa 	0x42f01fa
    4464:	91020000 	lbu	v0,0(t0)
    4468:	1cf11100 	0x1cf11100
    446c:	fc010000 	sdc3	$1,0(zero)
    4470:	0003a101 	0x3a101
    4474:	70910200 	0x70910200
    4478:	001e3d11 	0x1e3d11
    447c:	01fd0100 	0x1fd0100
    4480:	0000042a 	0x42a
    4484:	11689102 	beq	t3,t0,fffe8890 <__flash_start+0x403e8890>
    4488:	00001d73 	tltu	zero,zero,0x75
    448c:	2a01fd01 	slti	at,s0,-767
    4490:	02000004 	sllv	zero,zero,s0
    4494:	0f006c91 	jal	c01b244 <__memory_size+0xbffba44>
    4498:	0000207f 	0x207f
    449c:	db023c01 	ldc2	$2,15361(t8)
    44a0:	00000000 	nop
    44a4:	c8800087 	lwc2	$0,135(a0)
    44a8:	01000000 	0x1000000
    44ac:	0005699c 	0x5699c
    44b0:	1cea1000 	0x1cea1000
    44b4:	3c010000 	lui	at,0x0
    44b8:	00020a02 	srl	at,v0,0x8
    44bc:	00910200 	0x910200
    44c0:	00113d11 	0x113d11
    44c4:	023e0100 	0x23e0100
    44c8:	000000db 	0xdb
    44cc:	11689102 	beq	t3,t0,fffe88d8 <__flash_start+0x403e88d8>
    44d0:	00001ce9 	0x1ce9
    44d4:	9c023f01 	0x9c023f01
    44d8:	02000003 	0x2000003
    44dc:	46176c91 	c1	0x176c91
    44e0:	01000000 	0x1000000
    44e4:	0037011b 	0x37011b
    44e8:	00130000 	sll	zero,s3,0x0
    44ec:	1f750f00 	0x1f750f00
    44f0:	73010000 	madd	t8,at
    44f4:	0000db02 	srl	k1,zero,0xc
    44f8:	0087c800 	0x87c800
    44fc:	0000dc80 	sll	k1,zero,0x12
    4500:	ce9c0100 	pref	0x1c,256(s4)
    4504:	10000005 	b	451c <__isr_vec_space+0x44fc>
    4508:	00001cea 	0x1cea
    450c:	0a027301 	j	809cc04 <__memory_size+0x807d404>
    4510:	02000002 	0x2000002
    4514:	87100091 	lh	s0,145(t8)
    4518:	0100001a 	div	zero,t0,zero
    451c:	00f10273 	tltu	a3,s1,0x9
    4520:	91020000 	lbu	v0,0(t0)
    4524:	113d1104 	beq	t1,sp,8938 <__isr_vec_space+0x8918>
    4528:	75010000 	jalx	4040000 <__memory_size+0x4020800>
    452c:	0000db02 	srl	k1,zero,0xc
    4530:	68910200 	0x68910200
    4534:	001ce911 	0x1ce911
    4538:	02760100 	0x2760100
    453c:	0000039c 	0x39c
    4540:	176c9102 	bne	k1,t4,fffe894c <__flash_start+0x403e894c>
    4544:	00000046 	rorv	zero,zero,zero
    4548:	37011b01 	ori	at,t8,0x1b01
    454c:	13000000 	beqz	t8,4550 <__isr_vec_space+0x4530>
    4550:	230f0000 	addi	t7,t8,0
    4554:	01000021 	move	zero,t0
    4558:	020a02b9 	0x20a02b9
    455c:	88a40000 	lwl	a0,0(a1)
    4560:	00ac8000 	0xac8000
    4564:	9c010000 	0x9c010000
    4568:	00000624 	0x624
    456c:	001f1710 	0x1f1710
    4570:	02b90100 	0x2b90100
    4574:	0000042a 	0x42a
    4578:	10009102 	b	fffe8984 <__flash_start+0x403e8984>
    457c:	00001e2e 	0x1e2e
    4580:	2a02b901 	slti	v0,s0,-18175
    4584:	02000004 	sllv	zero,zero,s0
    4588:	dd110491 	ldc3	$17,1169(t0)
    458c:	0100001d 	0x100001d
    4590:	020a02bb 	0x20a02bb
    4594:	91020000 	lbu	v0,0(t0)
    4598:	00461770 	tge	v0,a2,0x5d
    459c:	1b010000 	0x1b010000
    45a0:	00003701 	0x3701
    45a4:	00001300 	sll	v0,zero,0xc
    45a8:	001e110f 	0x1e110f
    45ac:	02d30100 	0x2d30100
    45b0:	000000db 	0xdb
    45b4:	80008950 	lb	zero,-30384(zero)
    45b8:	00000410 	0x410
    45bc:	07999c01 	0x7999c01
    45c0:	21100000 	addi	s0,t0,0
    45c4:	01000020 	add	zero,t0,zero
    45c8:	020a02d3 	0x20a02d3
    45cc:	91020000 	lbu	v0,0(t0)
    45d0:	1fdb1000 	0x1fdb1000
    45d4:	d3010000 	0xd3010000
    45d8:	00079902 	srl	s3,a3,0x4
    45dc:	04910200 	bgezal	a0,4de0 <__isr_vec_space+0x4dc0>
    45e0:	001a8710 	0x1a8710
    45e4:	02d30100 	0x2d30100
    45e8:	000000f1 	tgeu	zero,zero,0x3
    45ec:	10089102 	beq	zero,t0,fffe89f8 <__flash_start+0x403e89f8>
    45f0:	00001d37 	0x1d37
    45f4:	9e02d301 	0x9e02d301
    45f8:	02000007 	srav	zero,zero,s0
    45fc:	cf110c91 	pref	0x11,3217(t8)
    4600:	0100001d 	0x100001d
    4604:	00db02d5 	0xdb02d5
    4608:	91020000 	lbu	v0,0(t0)
    460c:	13d41150 	beq	s8,s4,8b50 <__isr_vec_space+0x8b30>
    4610:	d5010000 	ldc1	$f1,0(t0)
    4614:	0000db02 	srl	k1,zero,0xc
    4618:	5c910200 	0x5c910200
    461c:	0017c011 	0x17c011
    4620:	02d60100 	0x2d60100
    4624:	000001ff 	0x1ff
    4628:	116c9102 	beq	t3,t4,fffe8a34 <__flash_start+0x403e8a34>
    462c:	00002020 	add	a0,zero,zero
    4630:	9c02d701 	0x9c02d701
    4634:	02000003 	0x2000003
    4638:	46125491 	c1	0x125491
    463c:	01000000 	0x1000000
    4640:	0037011b 	0x37011b
    4644:	06c80000 	tgei	s6,0
    4648:	00130000 	sll	zero,s3,0x0
    464c:	008af019 	0x8af019
    4650:	00002880 	sll	a1,zero,0x2
    4654:	0006fd00 	sll	ra,a2,0x14
    4658:	0cb51100 	jal	2d44400 <__memory_size+0x2d24c00>
    465c:	fc010000 	sdc3	$1,0(zero)
    4660:	0000c402 	srl	t8,zero,0x10
    4664:	60910200 	0x60910200
    4668:	008af014 	0x8af014
    466c:	00000c80 	sll	at,zero,0x12
    4670:	5f5f1500 	0x5f5f1500
    4674:	fc010072 	sdc3	$1,114(zero)
    4678:	00003002 	srl	a2,zero,0x0
    467c:	006f0100 	0x6f0100
    4680:	8b4c1900 	lwl	t4,6400(k0)
    4684:	00288000 	0x288000
    4688:	07320000 	bltzall	t9,468c <__isr_vec_space+0x466c>
    468c:	b5110000 	0xb5110000
    4690:	0100000c 	syscall	0x40000
    4694:	00c4030f 	0xc4030f
    4698:	91020000 	lbu	v0,0(t0)
    469c:	8b4c1464 	lwl	t4,5220(k0)
    46a0:	000c8000 	sll	s0,t4,0x0
    46a4:	5f150000 	0x5f150000
    46a8:	0100725f 	0x100725f
    46ac:	0030030f 	0x30030f
    46b0:	6f010000 	0x6f010000
    46b4:	88190000 	lwl	t9,0(zero)
    46b8:	2880008b 	slti	zero,a0,139
    46bc:	67000000 	0x67000000
    46c0:	11000007 	beqz	t0,46e0 <__isr_vec_space+0x46c0>
    46c4:	00000cb5 	0xcb5
    46c8:	c4031c01 	lwc1	$f3,7169(zero)
    46cc:	02000000 	0x2000000
    46d0:	88146891 	lwl	s4,26769(zero)
    46d4:	0c80008b 	jal	200022c <__memory_size+0x1fe0a2c>
    46d8:	15000000 	bnez	t0,46dc <__isr_vec_space+0x46bc>
    46dc:	00725f5f 	0x725f5f
    46e0:	30031c01 	andi	v1,zero,0x1c01
    46e4:	01000000 	0x1000000
    46e8:	1400006f 	bnez	zero,48a8 <__isr_vec_space+0x4888>
    46ec:	80008cd4 	lb	zero,-29484(zero)
    46f0:	00000028 	0x28
    46f4:	000cb511 	0xcb511
    46f8:	03820100 	0x3820100
    46fc:	000000c4 	0xc4
    4700:	14589102 	bne	v0,t8,fffe8b0c <__flash_start+0x403e8b0c>
    4704:	80008cd4 	lb	zero,-29484(zero)
    4708:	0000000c 	syscall
    470c:	725f5f15 	s32sdir	xr12,s2,-164
    4710:	03820100 	0x3820100
    4714:	00000030 	tge	zero,zero
    4718:	00006f01 	0x6f01
    471c:	00a71600 	0xa71600
    4720:	db160000 	ldc2	$22,0(t8)
    4724:	0f000000 	jal	c000000 <__memory_size+0xbfe0800>
    4728:	00001de5 	0x1de5
    472c:	db039901 	ldc2	$3,-26367(t8)
    4730:	60000000 	0x60000000
    4734:	3080008d 	andi	zero,a0,0x8d
    4738:	01000002 	0x1000002
    473c:	0008529c 	0x8529c
    4740:	20211000 	addi	at,at,4096
    4744:	99010000 	lwr	at,0(t0)
    4748:	00020a03 	sra	at,v0,0x8
    474c:	00910200 	0x910200
    4750:	001fdb10 	0x1fdb10
    4754:	03990100 	0x3990100
    4758:	00000799 	0x799
    475c:	10049102 	beq	zero,a0,fffe8b68 <__flash_start+0x403e8b68>
    4760:	00000ea9 	0xea9
    4764:	52039901 	beql	s0,v1,fffeab6c <__flash_start+0x403eab6c>
    4768:	02000008 	jr	s0
    476c:	37100891 	ori	s0,t8,0x891
    4770:	0100001d 	0x100001d
    4774:	079e0399 	0x79e0399
    4778:	91020000 	lbu	v0,0(t0)
    477c:	113d110c 	beq	t1,sp,8bb0 <__isr_vec_space+0x8b90>
    4780:	9b010000 	lwr	at,0(t8)
    4784:	0000db03 	sra	k1,zero,0xc
    4788:	68910200 	0x68910200
    478c:	00114511 	0x114511
    4790:	039c0100 	0x39c0100
    4794:	000000e6 	0xe6
    4798:	11709102 	beq	t3,s0,fffe8ba4 <__flash_start+0x403e8ba4>
    479c:	00002020 	add	a0,zero,zero
    47a0:	9c039d01 	0x9c039d01
    47a4:	02000003 	0x2000003
    47a8:	46126c91 	c1	0x126c91
    47ac:	01000000 	0x1000000
    47b0:	0037011b 	0x37011b
    47b4:	08380000 	j	e00000 <__memory_size+0xde0800>
    47b8:	00130000 	sll	zero,s3,0x0
    47bc:	008e7814 	0x8e7814
    47c0:	0000e480 	sll	gp,zero,0x12
    47c4:	1d271100 	0x1d271100
    47c8:	bc010000 	cache	0x1,0(zero)
    47cc:	00085d03 	sra	t3,t0,0x14
    47d0:	74910200 	jalx	2440800 <__memory_size+0x2421000>
    47d4:	57160000 	bnel	t8,s6,47d8 <__isr_vec_space+0x47b8>
    47d8:	06000008 	bltz	s0,47fc <__isr_vec_space+0x47dc>
    47dc:	0000db04 	0xdb04
    47e0:	00ae1600 	0xae1600
    47e4:	5a0f0000 	0x5a0f0000
    47e8:	0100001e 	0x100001e
    47ec:	00db0430 	tge	a2,k1,0x10
    47f0:	8f900000 	lw	s0,0(gp)
    47f4:	01f48000 	0x1f48000
    47f8:	9c010000 	0x9c010000
    47fc:	0000090c 	syscall	0x24
    4800:	00202110 	0x202110
    4804:	04300100 	bltzal	at,4c08 <__isr_vec_space+0x4be8>
    4808:	0000020a 	0x20a
    480c:	10009102 	b	fffe8c18 <__flash_start+0x403e8c18>
    4810:	00000ea9 	0xea9
    4814:	52043001 	beql	s0,a0,1081c <__isr_vec_space+0x107fc>
    4818:	02000008 	jr	s0
    481c:	3d110491 	0x3d110491
    4820:	01000011 	mthi	t0
    4824:	00db0432 	tlt	a2,k1,0x10
    4828:	91020000 	lbu	v0,0(t0)
    482c:	11451160 	beq	t2,a1,8db0 <__isr_vec_space+0x8d90>
    4830:	33010000 	andi	at,t8,0x0
    4834:	0000e604 	0xe604
    4838:	68910200 	0x68910200
    483c:	00202011 	0x202011
    4840:	04340100 	0x4340100
    4844:	0000039c 	0x39c
    4848:	12649102 	beq	s3,a0,fffe8c54 <__flash_start+0x403e8c54>
    484c:	00000046 	rorv	zero,zero,zero
    4850:	37011b01 	ori	at,t8,0x1b01
    4854:	d9000000 	ldc2	$0,0(t0)
    4858:	13000008 	beqz	t8,487c <__isr_vec_space+0x485c>
    485c:	904c1400 	lbu	t4,5120(v0)
    4860:	01108000 	0x1108000
    4864:	bd110000 	cache	0x11,0(t0)
    4868:	0100001d 	0x100001d
    486c:	042a0459 	tlti	at,1113
    4870:	91020000 	lbu	v0,0(t0)
    4874:	9070146c 	lbu	s0,5228(v1)
    4878:	00e08000 	0xe08000
    487c:	27110000 	addiu	s1,t8,0
    4880:	0100001d 	0x100001d
    4884:	085d0460 	j	1741180 <__memory_size+0x1721980>
    4888:	91020000 	lbu	v0,0(t0)
    488c:	00000070 	tge	zero,zero,0x1
    4890:	001d8f0f 	0x1d8f0f
    4894:	04d50100 	0x4d50100
    4898:	000000db 	0xdb
    489c:	80009184 	lb	zero,-28284(zero)
    48a0:	0000040c 	syscall	0x10
    48a4:	0a659c01 	j	9967004 <__memory_size+0x9947804>
    48a8:	21100000 	addi	s0,t0,0
    48ac:	01000020 	add	zero,t0,zero
    48b0:	020a04d5 	0x20a04d5
    48b4:	91020000 	lbu	v0,0(t0)
    48b8:	1db41000 	0x1db41000
    48bc:	d5010000 	ldc1	$f1,0(t0)
    48c0:	000a6504 	0xa6504
    48c4:	04910200 	bgezal	a0,50c8 <__isr_vec_space+0x50a8>
    48c8:	001a8710 	0x1a8710
    48cc:	04d50100 	0x4d50100
    48d0:	000000f1 	tgeu	zero,zero,0x3
    48d4:	10089102 	beq	zero,t0,fffe8ce0 <__flash_start+0x403e8ce0>
    48d8:	00001f55 	0x1f55
    48dc:	9e04d501 	0x9e04d501
    48e0:	02000007 	srav	zero,zero,s0
    48e4:	cf110c91 	pref	0x11,3217(t8)
    48e8:	0100001d 	0x100001d
    48ec:	00db04d7 	0xdb04d7
    48f0:	91020000 	lbu	v0,0(t0)
    48f4:	17c01150 	bnez	s8,8e38 <__isr_vec_space+0x8e18>
    48f8:	d8010000 	ldc2	$1,0(zero)
    48fc:	0001ff04 	0x1ff04
    4900:	6c910200 	0x6c910200
    4904:	001f3211 	0x1f3211
    4908:	04d90100 	0x4d90100
    490c:	0000024a 	0x24a
    4910:	11609102 	beqz	t3,fffe8d1c <__flash_start+0x403e8d1c>
    4914:	00002020 	add	a0,zero,zero
    4918:	9c04da01 	0x9c04da01
    491c:	02000003 	0x2000003
    4920:	46125491 	c1	0x125491
    4924:	01000000 	0x1000000
    4928:	0037011b 	0x37011b
    492c:	09b00000 	j	6c00000 <__memory_size+0x6be0800>
    4930:	00130000 	sll	zero,s3,0x0
    4934:	00926819 	0x926819
    4938:	00018880 	sll	s1,at,0x2
    493c:	000a3300 	sll	a2,t2,0xc
    4940:	1dbd1100 	0x1dbd1100
    4944:	ec010000 	swc3	$1,0(zero)
    4948:	00042a04 	0x42a04
    494c:	58910200 	0x58910200
    4950:	00930819 	multu	$ac1,a0,s3
    4954:	00002880 	sll	a1,zero,0x2
    4958:	000a0100 	sll	zero,t2,0x4
    495c:	0cb51100 	jal	2d44400 <__memory_size+0x2d24c00>
    4960:	12010000 	beq	s0,at,4964 <__isr_vec_space+0x4944>
    4964:	0000c405 	0xc405
    4968:	64910200 	0x64910200
    496c:	00930814 	0x930814
    4970:	00000c80 	sll	at,zero,0x12
    4974:	5f5f1500 	0x5f5f1500
    4978:	12010072 	beq	s0,at,4b44 <__isr_vec_space+0x4b24>
    497c:	00003005 	lsa	a2,zero,zero,0x1
    4980:	006f0100 	0x6f0100
    4984:	93701400 	lbu	s0,5120(k1)
    4988:	00288000 	0x288000
    498c:	b5110000 	0xb5110000
    4990:	0100000c 	syscall	0x40000
    4994:	00c4052d 	0xc4052d
    4998:	91020000 	lbu	v0,0(t0)
    499c:	93701468 	lbu	s0,5224(k1)
    49a0:	000c8000 	sll	s0,t4,0x0
    49a4:	5f150000 	0x5f150000
    49a8:	0100725f 	0x100725f
    49ac:	0030052d 	0x30052d
    49b0:	6f010000 	0x6f010000
    49b4:	14000000 	bnez	zero,49b8 <__isr_vec_space+0x4998>
    49b8:	800094f0 	lb	zero,-27408(zero)
    49bc:	00000028 	0x28
    49c0:	000cb511 	0xcb511
    49c4:	05790100 	0x5790100
    49c8:	000000c4 	0xc4
    49cc:	145c9102 	bne	v0,gp,fffe8dd8 <__flash_start+0x403e8dd8>
    49d0:	800094f0 	lb	zero,-27408(zero)
    49d4:	0000000c 	syscall
    49d8:	725f5f15 	s32sdir	xr12,s2,-164
    49dc:	05790100 	0x5790100
    49e0:	00000030 	tge	zero,zero
    49e4:	00006f01 	0x6f01
    49e8:	009e1600 	0x9e1600
    49ec:	bd0f0000 	cache	0xf,0(t0)
    49f0:	0100001c 	0x100001c
    49f4:	00db059a 	0xdb059a
    49f8:	95900000 	lhu	s0,0(t4)
    49fc:	018c8000 	0x18c8000
    4a00:	9c010000 	0x9c010000
    4a04:	00000b23 	0xb23
    4a08:	00202110 	0x202110
    4a0c:	059a0100 	0x59a0100
    4a10:	0000020a 	0x20a
    4a14:	10009102 	b	fffe8e20 <__flash_start+0x403e8e20>
    4a18:	00001db4 	teq	zero,zero,0x76
    4a1c:	65059a01 	0x65059a01
    4a20:	0200000a 	movz	zero,s0,zero
    4a24:	a9100491 	swl	s0,1169(t0)
    4a28:	0100000e 	0x100000e
    4a2c:	0852059a 	j	1481668 <__memory_size+0x1461e68>
    4a30:	91020000 	lbu	v0,0(t0)
    4a34:	113d1108 	beq	t1,sp,8e58 <__isr_vec_space+0x8e38>
    4a38:	9c010000 	0x9c010000
    4a3c:	0000db05 	0xdb05
    4a40:	60910200 	0x60910200
    4a44:	00114511 	0x114511
    4a48:	059d0100 	0x59d0100
    4a4c:	000000e6 	0xe6
    4a50:	11689102 	beq	t3,t0,fffe8e5c <__flash_start+0x403e8e5c>
    4a54:	00002020 	add	a0,zero,zero
    4a58:	9c059e01 	0x9c059e01
    4a5c:	02000003 	0x2000003
    4a60:	46126491 	c1	0x126491
    4a64:	01000000 	0x1000000
    4a68:	0037011b 	0x37011b
    4a6c:	0af00000 	j	bc00000 <__memory_size+0xbbe0800>
    4a70:	00130000 	sll	zero,s3,0x0
    4a74:	00962814 	0x962814
    4a78:	0000cc80 	sll	t9,zero,0x12
    4a7c:	1dbd1100 	0x1dbd1100
    4a80:	b5010000 	0xb5010000
    4a84:	00042a05 	0x42a05
    4a88:	6c910200 	0x6c910200
    4a8c:	00964014 	0x964014
    4a90:	0000a880 	sll	s5,zero,0x2
    4a94:	21081100 	addi	t0,t0,4352
    4a98:	ba010000 	swr	at,0(s0)
    4a9c:	00085d05 	0x85d05
    4aa0:	70910200 	0x70910200
    4aa4:	0f000000 	jal	c000000 <__memory_size+0xbfe0800>
    4aa8:	00002051 	0x2051
    4aac:	db05f501 	ldc2	$5,-2815(t8)
    4ab0:	1c000000 	bgtz	zero,4ab4 <__isr_vec_space+0x4a94>
    4ab4:	2c800097 	sltiu	zero,a0,151
    4ab8:	01000001 	movf	zero,t0,$fcc0
    4abc:	000ba69c 	0xba69c
    4ac0:	20211000 	addi	at,at,4096
    4ac4:	f5010000 	sdc1	$f1,0(t0)
    4ac8:	00020a05 	0x20a05
    4acc:	00910200 	0x910200
    4ad0:	001db410 	0x1db410
    4ad4:	05f50100 	0x5f50100
    4ad8:	00000a65 	0xa65
    4adc:	11049102 	beq	t0,a0,fffe8ee8 <__flash_start+0x403e8ee8>
    4ae0:	0000113d 	0x113d
    4ae4:	db05f701 	ldc2	$5,-2303(t8)
    4ae8:	02000000 	0x2000000
    4aec:	45116891 	bc1t	$fcc4,1ed34 <__isr_vec_space+0x1ed14>
    4af0:	01000011 	mthi	t0
    4af4:	00e605f8 	0xe605f8
    4af8:	91020000 	lbu	v0,0(t0)
    4afc:	1f321170 	0x1f321170
    4b00:	f9010000 	sdc2	$1,0(t0)
    4b04:	00024a05 	0x24a05
    4b08:	74910200 	jalx	2440800 <__memory_size+0x2421000>
    4b0c:	00202011 	0x202011
    4b10:	05fa0100 	0x5fa0100
    4b14:	0000039c 	0x39c
    4b18:	176c9102 	bne	k1,t4,fffe8f24 <__flash_start+0x403e8f24>
    4b1c:	00000046 	rorv	zero,zero,zero
    4b20:	37011b01 	ori	at,t8,0x1b01
    4b24:	13000000 	beqz	t8,4b28 <__isr_vec_space+0x4b08>
    4b28:	020f0000 	0x20f0000
    4b2c:	01000020 	add	zero,t0,zero
    4b30:	00e6062b 	0xe6062b
    4b34:	98480000 	lwr	t0,0(v0)
    4b38:	006c8000 	0x6c8000
    4b3c:	9c010000 	0x9c010000
    4b40:	00000bed 	0xbed
    4b44:	00202110 	0x202110
    4b48:	062b0100 	tltiu	s1,256
    4b4c:	00000bed 	0xbed
    4b50:	11009102 	beqz	t0,fffe8f5c <__flash_start+0x403e8f5c>
    4b54:	0000113c 	0x113c
    4b58:	e6062d01 	swc1	$f6,11521(s0)
    4b5c:	02000000 	0x2000000
    4b60:	46177091 	c1	0x177091
    4b64:	01000000 	0x1000000
    4b68:	0037011b 	0x37011b
    4b6c:	00130000 	sll	zero,s3,0x0
    4b70:	020a1600 	0x20a1600
    4b74:	100f0000 	beq	zero,t7,4b78 <__isr_vec_space+0x4b58>
    4b78:	0100001d 	0x100001d
    4b7c:	00e6063b 	0xe6063b
    4b80:	98b40000 	lwr	s4,0(a1)
    4b84:	00808000 	0x808000
    4b88:	9c010000 	0x9c010000
    4b8c:	00000c48 	0xc48
    4b90:	00202110 	0x202110
    4b94:	063b0100 	0x63b0100
    4b98:	00000bed 	0xbed
    4b9c:	11009102 	beqz	t0,fffe8fa8 <__flash_start+0x403e8fa8>
    4ba0:	0000113c 	0x113c
    4ba4:	e6063d01 	swc1	$f6,15617(s0)
    4ba8:	02000000 	0x2000000
    4bac:	20117491 	addi	s1,zero,29841
    4bb0:	01000020 	add	zero,t0,zero
    4bb4:	03a1063e 	0x3a1063e
    4bb8:	91020000 	lbu	v0,0(t0)
    4bbc:	00461770 	tge	v0,a2,0x5d
    4bc0:	1b010000 	0x1b010000
    4bc4:	00003701 	0x3701
    4bc8:	00001300 	sll	v0,zero,0xc
    4bcc:	001e6c0f 	0x1e6c0f
    4bd0:	064d0100 	0x64d0100
    4bd4:	000000e6 	0xe6
    4bd8:	80009934 	lb	zero,-26316(zero)
    4bdc:	0000005c 	0x5c
    4be0:	0c8f9c01 	jal	23e7004 <__memory_size+0x23c7804>
    4be4:	21100000 	addi	s0,t0,0
    4be8:	01000020 	add	zero,t0,zero
    4bec:	0bed064d 	j	fb41934 <__memory_size+0xfb22134>
    4bf0:	91020000 	lbu	v0,0(t0)
    4bf4:	113c1100 	beq	t1,gp,8ff8 <__isr_vec_space+0x8fd8>
    4bf8:	4f010000 	lwxc1	$f0,at(t8)
    4bfc:	0000e606 	0xe606
    4c00:	70910200 	0x70910200
    4c04:	00004617 	0x4617
    4c08:	011b0100 	0x11b0100
    4c0c:	00000037 	0x37
    4c10:	1a000013 	blez	s0,4c60 <__isr_vec_space+0x4c40>
    4c14:	00001d45 	0x1d45
    4c18:	90065901 	lbu	a2,22785(zero)
    4c1c:	60800099 	0x60800099
    4c20:	01000000 	0x1000000
    4c24:	000cd29c 	0xcd29c
    4c28:	20211000 	addi	at,at,4096
    4c2c:	59010000 	0x59010000
    4c30:	00020a06 	0x20a06
    4c34:	00910200 	0x910200
    4c38:	00202011 	0x202011
    4c3c:	065b0100 	0x65b0100
    4c40:	0000039c 	0x39c
    4c44:	17709102 	bne	k1,s0,fffe9050 <__flash_start+0x403e9050>
    4c48:	00000046 	rorv	zero,zero,zero
    4c4c:	37011b01 	ori	at,t8,0x1b01
    4c50:	13000000 	beqz	t8,4c54 <__isr_vec_space+0x4c34>
    4c54:	fe1b0000 	sdc3	$27,0(s0)
    4c58:	0100001d 	0x100001d
    4c5c:	00db06a1 	0xdb06a1
    4c60:	99f00000 	lwr	s0,0(t7)
    4c64:	01c88000 	0x1c88000
    4c68:	9c010000 	0x9c010000
    4c6c:	00000d38 	0xd38
    4c70:	00202010 	mfhi	a0,$ac1
    4c74:	06a10100 	bgez	s5,5078 <__isr_vec_space+0x5058>
    4c78:	0000039c 	0x39c
    4c7c:	10009102 	b	fffe9088 <__flash_start+0x403e9088>
    4c80:	00001fdb 	0x1fdb
    4c84:	a706a101 	sh	a2,-24319(t8)
    4c88:	02000000 	0x2000000
    4c8c:	ef100491 	swc3	$16,1169(t8)
    4c90:	01000020 	add	zero,t0,zero
    4c94:	079e06a1 	0x79e06a1
    4c98:	91020000 	lbu	v0,0(t0)
    4c9c:	113d1108 	beq	t1,sp,90c0 <__isr_vec_space+0x90a0>
    4ca0:	a3010000 	sb	at,0(t8)
    4ca4:	0000db06 	0xdb06
    4ca8:	70910200 	0x70910200
    4cac:	001dbd11 	0x1dbd11
    4cb0:	06a40100 	0x6a40100
    4cb4:	000000e6 	0xe6
    4cb8:	00749102 	0x749102
    4cbc:	00206318 	0x206318
    4cc0:	06f00100 	bltzal	s7,50c4 <__isr_vec_space+0x50a4>
    4cc4:	80009bb8 	lb	zero,-25672(zero)
    4cc8:	000000ac 	0xac
    4ccc:	0d6d9c01 	jal	5b67004 <__memory_size+0x5b47804>
    4cd0:	20100000 	addi	s0,zero,0
    4cd4:	01000020 	add	zero,t0,zero
    4cd8:	039c06f0 	tge	gp,gp,0x1b
    4cdc:	91020000 	lbu	v0,0(t0)
    4ce0:	1db41000 	0x1db41000
    4ce4:	f0010000 	0xf0010000
    4ce8:	000a6506 	0xa6506
    4cec:	04910200 	bgezal	a0,54f0 <__isr_vec_space+0x54d0>
    4cf0:	20981800 	addi	t8,a0,6144
    4cf4:	02010000 	0x2010000
    4cf8:	009c6407 	0x9c6407
    4cfc:	00018480 	sll	s0,at,0x12
    4d00:	c99c0100 	lwc2	$28,256(t4)
    4d04:	1000000d 	b	4d3c <__isr_vec_space+0x4d1c>
    4d08:	00002020 	add	a0,zero,zero
    4d0c:	9c070201 	0x9c070201
    4d10:	02000003 	0x2000003
    4d14:	80190091 	lb	t9,145(zero)
    4d18:	b880009c 	swr	zero,156(a0)
    4d1c:	af000000 	sw	zero,0(t8)
    4d20:	1100000d 	beqz	t0,4d58 <__isr_vec_space+0x4d38>
    4d24:	00001d27 	0x1d27
    4d28:	ae070c01 	sw	a3,3073(s0)
    4d2c:	02000000 	0x2000000
    4d30:	14007091 	bnez	zero,20f78 <__memory_size+0x1778>
    4d34:	80009d48 	lb	zero,-25272(zero)
    4d38:	00000080 	sll	zero,zero,0x2
    4d3c:	00210811 	0x210811
    4d40:	075d0100 	0x75d0100
    4d44:	000000ae 	0xae
    4d48:	00719102 	0x719102
    4d4c:	1da41b00 	0x1da41b00
    4d50:	7a010000 	nori.b	$w0,$w0,0x1
    4d54:	0000db07 	0xdb07
    4d58:	009de800 	0x9de800
    4d5c:	00006480 	sll	t4,zero,0x12
    4d60:	029c0100 	0x29c0100
    4d64:	1000000e 	b	4da0 <__isr_vec_space+0x4d80>
    4d68:	00002020 	add	a0,zero,zero
    4d6c:	02077a01 	0x2077a01
    4d70:	0200000e 	0x200000e
    4d74:	3d110091 	0x3d110091
    4d78:	01000011 	mthi	t0
    4d7c:	00db077c 	0xdb077c
    4d80:	91020000 	lbu	v0,0(t0)
    4d84:	04060070 	0x4060070
    4d88:	00000e08 	0xe08
    4d8c:	00030616 	0x30616
    4d90:	20ba0f00 	addi	k0,a1,3840
    4d94:	8f010000 	lw	at,0(t8)
    4d98:	0000db07 	0xdb07
    4d9c:	009e4c00 	0x9e4c00
    4da0:	00007480 	sll	t6,zero,0x12
    4da4:	549c0100 	bnel	a0,gp,51a8 <__isr_vec_space+0x5188>
    4da8:	1000000e 	b	4de4 <__isr_vec_space+0x4dc4>
    4dac:	00002021 	move	a0,zero
    4db0:	ed078f01 	swc3	$7,-28927(t0)
    4db4:	0200000b 	movn	zero,s0,zero
    4db8:	3d110091 	0x3d110091
    4dbc:	01000011 	mthi	t0
    4dc0:	00db0791 	0xdb0791
    4dc4:	91020000 	lbu	v0,0(t0)
    4dc8:	00461770 	tge	v0,a2,0x5d
    4dcc:	1b010000 	0x1b010000
    4dd0:	00003701 	0x3701
    4dd4:	00001300 	sll	v0,zero,0xc
    4dd8:	001e4b1b 	0x1e4b1b
    4ddc:	07a10100 	bgez	sp,51e0 <__isr_vec_space+0x51c0>
    4de0:	000000db 	0xdb
    4de4:	80009ec0 	lb	zero,-24896(zero)
    4de8:	0000006c 	0x6c
    4dec:	0e8d9c01 	jal	a367004 <__memory_size+0xa347804>
    4df0:	20100000 	addi	s0,zero,0
    4df4:	01000020 	add	zero,t0,zero
    4df8:	0e0207a1 	jal	8081e84 <__memory_size+0x8062684>
    4dfc:	91020000 	lbu	v0,0(t0)
    4e00:	113d1100 	beq	t1,sp,9204 <__isr_vec_space+0x91e4>
    4e04:	a3010000 	sb	at,0(t8)
    4e08:	0000db07 	0xdb07
    4e0c:	70910200 	0x70910200
    4e10:	1fe90f00 	0x1fe90f00
    4e14:	b6010000 	0xb6010000
    4e18:	0000db07 	0xdb07
    4e1c:	009f2c00 	0x9f2c00
    4e20:	00007c80 	sll	t7,zero,0x12
    4e24:	d49c0100 	ldc1	$f28,256(a0)
    4e28:	1000000e 	b	4e64 <__isr_vec_space+0x4e44>
    4e2c:	00002021 	move	a0,zero
    4e30:	ed07b601 	swc3	$7,-18943(t0)
    4e34:	0200000b 	movn	zero,s0,zero
    4e38:	3d110091 	0x3d110091
    4e3c:	01000011 	mthi	t0
    4e40:	00db07b8 	0xdb07b8
    4e44:	91020000 	lbu	v0,0(t0)
    4e48:	00461770 	tge	v0,a2,0x5d
    4e4c:	1b010000 	0x1b010000
    4e50:	00003701 	0x3701
    4e54:	00001300 	sll	v0,zero,0xc
    4e58:	001f971a 	0x1f971a
    4e5c:	09360100 	j	4d80400 <__memory_size+0x4d60c00>
    4e60:	80009fa8 	lb	zero,-24664(zero)
    4e64:	000000c4 	0xc4
    4e68:	0f279c01 	jal	c9e7004 <__memory_size+0xc9c7804>
    4e6c:	21100000 	addi	s0,t0,0
    4e70:	01000020 	add	zero,t0,zero
    4e74:	020a0936 	tne	s0,t2,0x24
    4e78:	91020000 	lbu	v0,0(t0)
    4e7c:	1a871000 	0x1a871000
    4e80:	36010000 	ori	at,s0,0x0
    4e84:	0000f109 	0xf109
    4e88:	04910200 	bgezal	a0,568c <__isr_vec_space+0x566c>
    4e8c:	0012fe10 	0x12fe10
    4e90:	09360100 	j	4d80400 <__memory_size+0x4d60c00>
    4e94:	0000079e 	0x79e
    4e98:	11089102 	beq	t0,t0,fffe92a4 <__flash_start+0x403e92a4>
    4e9c:	00002020 	add	a0,zero,zero
    4ea0:	9c093801 	0x9c093801
    4ea4:	02000003 	0x2000003
    4ea8:	0f007091 	jal	c01c244 <__memory_size+0xbffca44>
    4eac:	00001f22 	0x1f22
    4eb0:	15095a01 	bne	t0,t1,1b6b8 <__isr_vec_space+0x1b698>
    4eb4:	6c000002 	0x6c000002
    4eb8:	488000a0 	0x488000a0
    4ebc:	01000000 	0x1000000
    4ec0:	000f609c 	0xf609c
    4ec4:	21101000 	addi	s0,t0,4096
    4ec8:	5a010000 	0x5a010000
    4ecc:	00042a09 	0x42a09
    4ed0:	00910200 	0x910200
    4ed4:	00202011 	0x202011
    4ed8:	095c0100 	j	5700400 <__memory_size+0x56e0c00>
    4edc:	00000215 	0x215
    4ee0:	00709102 	0x709102
    4ee4:	0020f90f 	0x20f90f
    4ee8:	09680100 	j	5a00400 <__memory_size+0x59e0c00>
    4eec:	000000db 	0xdb
    4ef0:	8000a0b4 	lb	zero,-24396(zero)
    4ef4:	00000090 	0x90
    4ef8:	0fa89c01 	jal	ea27004 <__memory_size+0xea07804>
    4efc:	b7100000 	0xb7100000
    4f00:	0100001f 	0x100001f
    4f04:	02200968 	0x2200968
    4f08:	91020000 	lbu	v0,0(t0)
    4f0c:	044d1000 	0x44d1000
    4f10:	68010000 	0x68010000
    4f14:	00021509 	0x21509
    4f18:	04910200 	bgezal	a0,571c <__isr_vec_space+0x56fc>
    4f1c:	00113d11 	0x113d11
    4f20:	096a0100 	j	5a80400 <__memory_size+0x5a60c00>
    4f24:	000000db 	0xdb
    4f28:	00709102 	0x709102
    4f2c:	001f030f 	0x1f030f
    4f30:	09890100 	j	6240400 <__memory_size+0x6220c00>
    4f34:	000000db 	0xdb
    4f38:	8000a144 	lb	zero,-24252(zero)
    4f3c:	00000098 	0x98
    4f40:	0fff9c01 	jal	ffe7004 <__memory_size+0xffc7804>
    4f44:	b7100000 	0xb7100000
    4f48:	0100001f 	0x100001f
    4f4c:	02200989 	0x2200989
    4f50:	91020000 	lbu	v0,0(t0)
    4f54:	044d1000 	0x44d1000
    4f58:	89010000 	lwl	at,0(t0)
    4f5c:	00021509 	0x21509
    4f60:	04910200 	bgezal	a0,5764 <__isr_vec_space+0x5744>
    4f64:	00113d11 	0x113d11
    4f68:	098b0100 	j	62c0400 <__memory_size+0x62a0c00>
    4f6c:	000000db 	0xdb
    4f70:	11709102 	beq	t3,s0,fffe937c <__flash_start+0x403e937c>
    4f74:	00001fb6 	tne	zero,zero,0x7e
    4f78:	9c098c01 	0x9c098c01
    4f7c:	02000003 	0x2000003
    4f80:	0f007491 	jal	c01d244 <__memory_size+0xbffda44>
    4f84:	0000203d 	0x203d
    4f88:	2009ad01 	addi	t1,zero,-21247
    4f8c:	dc000002 	ldc3	$0,2(zero)
    4f90:	548000a1 	bnezl	a0,5218 <__isr_vec_space+0x51f8>
    4f94:	01000000 	0x1000000
    4f98:	0010479c 	0x10479c
    4f9c:	044d1000 	0x44d1000
    4fa0:	ad010000 	sw	at,0(t0)
    4fa4:	00021509 	0x21509
    4fa8:	00910200 	0x910200
    4fac:	001a8710 	0x1a8710
    4fb0:	09ad0100 	j	6b40400 <__memory_size+0x6b20c00>
    4fb4:	00001047 	0x1047
    4fb8:	11049102 	beq	t0,a0,fffe93c4 <__flash_start+0x403e93c4>
    4fbc:	0000113d 	0x113d
    4fc0:	2009af01 	addi	t1,zero,-20735
    4fc4:	02000002 	0x2000002
    4fc8:	16007091 	bnez	s0,21210 <__memory_size+0x1a10>
    4fcc:	000000f1 	tgeu	zero,zero,0x3
    4fd0:	001ec50f 	0x1ec50f
    4fd4:	09ba0100 	j	6e80400 <__memory_size+0x6e60c00>
    4fd8:	00000220 	0x220
    4fdc:	8000a230 	lb	zero,-24016(zero)
    4fe0:	0000004c 	syscall	0x1
    4fe4:	10859c01 	beq	a0,a1,fffebfec <__flash_start+0x403ebfec>
    4fe8:	4d100000 	lwxc1	$f0,s0(t0)
    4fec:	01000004 	sllv	zero,zero,t0
    4ff0:	021509ba 	0x21509ba
    4ff4:	91020000 	lbu	v0,0(t0)
    4ff8:	113d1100 	beq	t1,sp,93fc <__isr_vec_space+0x93dc>
    4ffc:	bc010000 	cache	0x1,0(zero)
    5000:	00022009 	0x22009
    5004:	70910200 	0x70910200
    5008:	1ca21b00 	0x1ca21b00
    500c:	c7010000 	lwc1	$f1,0(t8)
    5010:	0000db09 	0xdb09
    5014:	00a27c00 	0xa27c00
    5018:	00014080 	sll	t0,at,0x2
    501c:	079c0100 	0x79c0100
    5020:	10000011 	b	5068 <__isr_vec_space+0x5048>
    5024:	00002020 	add	a0,zero,zero
    5028:	0709c701 	tgeiu	t8,-14591
    502c:	02000011 	mthi	s0
    5030:	37100091 	ori	s0,t8,0x91
    5034:	0100001d 	0x100001d
    5038:	079e09c7 	0x79e09c7
    503c:	91020000 	lbu	v0,0(t0)
    5040:	20db1104 	addi	k1,a2,4356
    5044:	c9010000 	lwc2	$1,0(t0)
    5048:	0003a109 	0x3a109
    504c:	6c910200 	0x6c910200
    5050:	00113d11 	0x113d11
    5054:	09ca0100 	j	7280400 <__memory_size+0x7260c00>
    5058:	000000db 	0xdb
    505c:	12689102 	beq	s3,t0,fffe9468 <__flash_start+0x403e9468>
    5060:	00000046 	rorv	zero,zero,zero
    5064:	37011b01 	ori	at,t8,0x1b01
    5068:	ed000000 	swc3	$0,0(t0)
    506c:	13000010 	beqz	t8,50b0 <__isr_vec_space+0x5090>
    5070:	a3101400 	sb	s0,5120(t8)
    5074:	00888000 	0x888000
    5078:	27110000 	addiu	s1,t8,0
    507c:	0100001d 	0x100001d
    5080:	085d09d3 	j	174274c <__memory_size+0x1722f4c>
    5084:	91020000 	lbu	v0,0(t0)
    5088:	16000070 	bnez	s0,524c <__isr_vec_space+0x522c>
    508c:	00000e02 	srl	at,zero,0x18
    5090:	00029900 	sll	s3,v0,0x4
    5094:	86000400 	lh	zero,1024(s0)
    5098:	0400000d 	bltz	zero,50d0 <__isr_vec_space+0x50b0>
    509c:	0001a501 	0x1a501
    50a0:	219c0100 	addi	gp,t4,256
    50a4:	01630000 	0x1630000
    50a8:	a3bc0000 	sb	gp,0(sp)
    50ac:	02ac8000 	0x2ac8000
    50b0:	267d0000 	addiu	sp,s3,0
    50b4:	04020000 	bltzl	zero,50b8 <__isr_vec_space+0x5098>
    50b8:	00010907 	0x10907
    50bc:	05040300 	0x5040300
    50c0:	00746e69 	0x746e69
    50c4:	5a050402 	0x5a050402
    50c8:	02000001 	movf	zero,s0,$fcc0
    50cc:	006a0601 	0x6a0601
    50d0:	01020000 	0x1020000
    50d4:	00006808 	0x6808
    50d8:	05020200 	bltzl	t0,58dc <__isr_vec_space+0x58bc>
    50dc:	0000019b 	0x19b
    50e0:	93070202 	lbu	a3,514(t8)
    50e4:	04000000 	bltz	zero,50e8 <__isr_vec_space+0x50c8>
    50e8:	000000de 	0xde
    50ec:	00253802 	ror	a3,a1,0x0
    50f0:	08020000 	j	80000 <__memory_size+0x60800>
    50f4:	00015505 	0x15505
    50f8:	07080200 	tgei	t8,512
    50fc:	00000104 	0x104
    5100:	0e070402 	jal	81c1008 <__memory_size+0x81a1808>
    5104:	02000001 	movf	zero,s0,$fcc0
    5108:	01320704 	0x1320704
    510c:	04050000 	0x4050000
    5110:	71080102 	0x71080102
    5114:	04000000 	bltz	zero,5118 <__isr_vec_space+0x50f8>
    5118:	000000e0 	0xe0
    511c:	00564203 	0x564203
    5120:	12040000 	beq	s0,a0,5124 <__isr_vec_space+0x5104>
    5124:	04000002 	bltz	zero,5130 <__isr_vec_space+0x5110>
    5128:	0000256d 	0x256d
    512c:	000a0400 	sll	zero,t2,0x10
    5130:	73040000 	madd	t8,a0
    5134:	00000086 	0x86
    5138:	000caa06 	0xcaa06
    513c:	b5051400 	0xb5051400
    5140:	000000f0 	tge	zero,zero,0x3
    5144:	000c4d07 	0xc4d07
    5148:	9cb80500 	0x9cb80500
    514c:	00000000 	nop
    5150:	000d8807 	srav	s1,t5,zero
    5154:	f0b90500 	0xf0b90500
    5158:	04000000 	bltz	zero,515c <__isr_vec_space+0x513c>
    515c:	000ace07 	0xace07
    5160:	f0ba0500 	0xf0ba0500
    5164:	08000000 	j	0 <hardware_exit_hook>
    5168:	000ed407 	0xed407
    516c:	7dbb0500 	ext	k1,t5,0x14,0x1
    5170:	0c000000 	jal	0 <hardware_exit_hook>
    5174:	000d2f07 	0xd2f07
    5178:	7dbc0500 	ext	gp,t5,0x14,0x1
    517c:	10000000 	b	5180 <__isr_vec_space+0x5160>
    5180:	a7040800 	sh	a0,2048(t8)
    5184:	04000000 	bltz	zero,5188 <__isr_vec_space+0x5168>
    5188:	00000bec 	0xbec
    518c:	00a7bf05 	0xa7bf05
    5190:	68060000 	0x68060000
    5194:	0c00000f 	jal	3c <__isr_vec_space+0x1c>
    5198:	0132c105 	0x132c105
    519c:	4d070000 	lwxc1	$f0,a3(t0)
    51a0:	0500000c 	bltz	t0,51d4 <__isr_vec_space+0x51b4>
    51a4:	00009cc4 	0x9cc4
    51a8:	88070000 	lwl	a3,0(zero)
    51ac:	0500000d 	bltz	t0,51e4 <__isr_vec_space+0x51c4>
    51b0:	0000f0c5 	lsa	s8,zero,zero,0x4
    51b4:	ce070400 	pref	0x7,1024(s0)
    51b8:	0500000a 	bltz	t0,51e4 <__isr_vec_space+0x51c4>
    51bc:	0000f0c6 	0xf0c6
    51c0:	04000800 	bltz	zero,71c4 <__isr_vec_space+0x71a4>
    51c4:	00000be8 	0xbe8
    51c8:	0101c805 	lsa	t9,t0,at,0x1
    51cc:	2b060000 	slti	a2,t8,0
    51d0:	1400000c 	bnez	zero,5204 <__isr_vec_space+0x51e4>
    51d4:	016ecd05 	0x16ecd05
    51d8:	30070000 	andi	a3,zero,0x0
    51dc:	0500000e 	bltz	t0,5218 <__isr_vec_space+0x51f8>
    51e0:	000091d0 	0x91d0
    51e4:	37070000 	ori	a3,t8,0x0
    51e8:	0500000f 	bltz	t0,5228 <__isr_vec_space+0x5208>
    51ec:	00016ed1 	0x16ed1
    51f0:	c0070400 	ll	a3,1024(zero)
    51f4:	0500000f 	bltz	t0,5234 <__isr_vec_space+0x5214>
    51f8:	000132d2 	0x132d2
    51fc:	08000800 	j	2000 <__isr_vec_space+0x1fe0>
    5200:	0000f604 	0xf604
    5204:	0be10400 	j	f841000 <__memory_size+0xf821800>
    5208:	d4050000 	ldc1	$f5,0(zero)
    520c:	0000013d 	0x13d
    5210:	00217309 	0x217309
    5214:	bc4f0100 	cache	0xf,256(v0)
    5218:	688000a3 	0x688000a3
    521c:	01000000 	0x1000000
    5220:	0001a39c 	0x1a39c
    5224:	10370a00 	beq	at,s7,7a28 <__isr_vec_space+0x7a08>
    5228:	4f010000 	lwxc1	$f0,at(t8)
    522c:	000001a3 	0x1a3
    5230:	00009102 	srl	s2,zero,0x4
    5234:	0001a80b 	movn	s5,zero,at
    5238:	74040800 	jalx	102000 <__memory_size+0xe2800>
    523c:	09000001 	j	4000004 <__memory_size+0x3fe0804>
    5240:	00002150 	0x2150
    5244:	a4246801 	sh	a0,26625(at)
    5248:	002c8000 	0x2c8000
    524c:	9c010000 	0x9c010000
    5250:	000001d2 	0x1d2
    5254:	0021950a 	0x21950a
    5258:	d2680100 	0xd2680100
    525c:	02000001 	movf	zero,s0,$fcc0
    5260:	0b000091 	j	c000244 <__memory_size+0xbfe0a44>
    5264:	0000016e 	0x16e
    5268:	00216409 	0x216409
    526c:	50740100 	beql	v1,s4,5670 <__isr_vec_space+0x5650>
    5270:	8c8000a4 	lw	zero,164(a0)
    5274:	01000000 	0x1000000
    5278:	0002179c 	0x2179c
    527c:	10370a00 	beq	at,s7,7a80 <__isr_vec_space+0x7a60>
    5280:	74010000 	jalx	40000 <__memory_size+0x20800>
    5284:	000001a3 	0x1a3
    5288:	0a009102 	j	8024408 <__memory_size+0x8004c08>
    528c:	000021c8 	0x21c8
    5290:	01d27401 	0x1d27401
    5294:	91020000 	lbu	v0,0(t0)
    5298:	0f370c04 	jal	cdc3010 <__memory_size+0xcda3810>
    529c:	76010000 	jalx	8040000 <__memory_size+0x8020800>
    52a0:	000001d2 	0x1d2
    52a4:	00709102 	0x709102
    52a8:	0021d609 	0x21d609
    52ac:	dc910100 	ldc3	$17,256(a0)
    52b0:	ec8000a4 	swc3	$0,164(a0)
    52b4:	01000000 	0x1000000
    52b8:	0002659c 	0x2659c
    52bc:	10370a00 	beq	at,s7,7ac0 <__isr_vec_space+0x7aa0>
    52c0:	91010000 	lbu	at,0(t0)
    52c4:	000001a3 	0x1a3
    52c8:	0a009102 	j	8024408 <__memory_size+0x8004c08>
    52cc:	000021c8 	0x21c8
    52d0:	01d29101 	0x1d29101
    52d4:	91020000 	lbu	v0,0(t0)
    52d8:	21b00c04 	addi	s0,t5,3076
    52dc:	93010000 	lbu	at,0(t8)
    52e0:	0000016e 	0x16e
    52e4:	0c709102 	jal	1c24408 <__memory_size+0x1c04c08>
    52e8:	00002183 	sra	a0,zero,0x6
    52ec:	02659401 	0x2659401
    52f0:	91020000 	lbu	v0,0(t0)
    52f4:	9c0b0074 	0x9c0b0074
    52f8:	0d000000 	jal	4000000 <__memory_size+0x3fe0800>
    52fc:	000021bb 	0x21bb
    5300:	0091d401 	0x91d401
    5304:	a5c80000 	sh	t0,0(t6)
    5308:	00a08000 	0xa08000
    530c:	9c010000 	0x9c010000
    5310:	0021410a 	0x21410a
    5314:	d2d40100 	0xd2d40100
    5318:	02000001 	movf	zero,s0,$fcc0
    531c:	370c0091 	ori	t4,t8,0x91
    5320:	01000010 	0x1000010
    5324:	0001a3d8 	0x1a3d8
    5328:	70910200 	0x70910200
    532c:	04f50000 	0x4f50000
    5330:	00040000 	sll	zero,a0,0x0
    5334:	00000e44 	0xe44
    5338:	01a50104 	0x1a50104
    533c:	84010000 	lh	at,0(zero)
    5340:	63000022 	0x63000022
    5344:	68000001 	0x68000001
    5348:	588000a6 	blezl	a0,55e4 <__isr_vec_space+0x55c4>
    534c:	11000005 	beqz	t0,5364 <__isr_vec_space+0x5344>
    5350:	02000028 	0x2000028
    5354:	01090704 	0x1090704
    5358:	04030000 	bgezl	zero,535c <__isr_vec_space+0x533c>
    535c:	746e6905 	jalx	1b9a414 <__memory_size+0x1b7ac14>
    5360:	05040200 	0x5040200
    5364:	0000015a 	0x15a
    5368:	6a060102 	0x6a060102
    536c:	04000000 	bltz	zero,5370 <__isr_vec_space+0x5350>
    5370:	00000000 	nop
    5374:	004c1c02 	0x4c1c02
    5378:	01020000 	0x1020000
    537c:	00006808 	0x6808
    5380:	05020200 	bltzl	t0,5b84 <__isr_vec_space+0x5b64>
    5384:	0000019b 	0x19b
    5388:	93070202 	lbu	a3,514(t8)
    538c:	04000000 	bltz	zero,5390 <__isr_vec_space+0x5370>
    5390:	000000de 	0xde
    5394:	00253802 	ror	a3,a1,0x0
    5398:	08020000 	j	80000 <__memory_size+0x60800>
    539c:	00015505 	0x15505
    53a0:	07080200 	tgei	t8,512
    53a4:	00000104 	0x104
    53a8:	0e070402 	jal	81c1008 <__memory_size+0x81a1808>
    53ac:	02000001 	movf	zero,s0,$fcc0
    53b0:	01320704 	0x1320704
    53b4:	04050000 	0x4050000
    53b8:	71080102 	0x71080102
    53bc:	06000000 	bltz	s0,53c0 <__isr_vec_space+0x53a0>
    53c0:	00000246 	0x246
    53c4:	7a039303 	0x7a039303
    53c8:	04000000 	bltz	zero,53cc <__isr_vec_space+0x53ac>
    53cc:	00000002 	srl	zero,zero,0x0
    53d0:	00412a04 	0x412a04
    53d4:	e0040000 	sc	a0,0(zero)
    53d8:	04000000 	bltz	zero,53dc <__isr_vec_space+0x53bc>
    53dc:	00006142 	srl	t4,zero,0x5
    53e0:	17930400 	bne	gp,s3,63e4 <__isr_vec_space+0x63c4>
    53e4:	4d050000 	lwxc1	$f0,a1(t0)
    53e8:	000000be 	0xbe
    53ec:	00c40407 	0xc40407
    53f0:	cf080000 	pref	0x8,0(t8)
    53f4:	09000000 	j	4000000 <__memory_size+0x3fe0800>
    53f8:	00000088 	0x88
    53fc:	12b90400 	beq	s5,t9,6400 <__isr_vec_space+0x63e0>
    5400:	6b060000 	0x6b060000
    5404:	000000a8 	0xa8
    5408:	00021304 	0x21304
    540c:	336c0600 	andi	t4,k1,0x600
    5410:	04000000 	bltz	zero,5414 <__isr_vec_space+0x53f4>
    5414:	00000212 	0x212
    5418:	00256d06 	0x256d06
    541c:	0a040000 	j	8100000 <__memory_size+0x80e0800>
    5420:	06000000 	bltz	s0,5424 <__isr_vec_space+0x5404>
    5424:	0000a873 	tltu	zero,zero,0x2a1
    5428:	cf040700 	pref	0x4,1792(t8)
    542c:	0a000000 	j	8000000 <__memory_size+0x7fe0800>
    5430:	0000224e 	0x224e
    5434:	a668a001 	sh	t0,-24575(s3)
    5438:	00548000 	0x548000
    543c:	9c010000 	0x9c010000
    5440:	0000012e 	0x12e
    5444:	00a68c0b 	0xa68c0b
    5448:	00000c80 	sll	at,zero,0x12
    544c:	5f5f0c00 	0x5f5f0c00
    5450:	a4010072 	sh	at,114(zero)
    5454:	00000025 	move	zero,zero
    5458:	00006001 	movf	t4,zero,$fcc0
    545c:	0022bb0d 	break	0x22,0x2ec
    5460:	bca70100 	cache	0x7,256(a1)
    5464:	ac8000a6 	sw	zero,166(a0)
    5468:	01000000 	0x1000000
    546c:	0001a29c 	0x1a29c
    5470:	22f50e00 	addi	s5,s7,3584
    5474:	a9010000 	swl	at,0(t0)
    5478:	000000e5 	0xe5
    547c:	0f709102 	jal	dc24408 <__memory_size+0xdc04c08>
    5480:	000022b4 	teq	zero,zero,0x8a
    5484:	002c0007 	srav	zero,t4,at
    5488:	01620000 	0x1620000
    548c:	00100000 	sll	zero,s0,0x0
    5490:	0000460f 	0x460f
    5494:	2cb60100 	sltiu	s6,a1,256
    5498:	73000000 	madd	t8,zero
    549c:	10000001 	b	54a4 <__isr_vec_space+0x5484>
    54a0:	a6e80b00 	sh	t0,2816(s7)
    54a4:	001c8000 	sll	s0,gp,0x0
    54a8:	5f0c0000 	0x5f0c0000
    54ac:	01006f5f 	0x1006f5f
    54b0:	000091b0 	tge	zero,zero,0x246
    54b4:	0b6f0100 	j	dbc0400 <__memory_size+0xdba0c00>
    54b8:	8000a6e8 	lb	zero,-22808(zero)
    54bc:	0000000c 	syscall
    54c0:	725f5f0c 	d16madl	xr12,xr7,xr13,xr7,SA,LW
    54c4:	25b00100 	addiu	s0,t5,256
    54c8:	01000000 	0x1000000
    54cc:	0000006f 	0x6f
    54d0:	00236b11 	0x236b11
    54d4:	68bc0100 	0x68bc0100
    54d8:	308000a7 	andi	zero,a0,0xa7
    54dc:	01000000 	0x1000000
    54e0:	0001c69c 	0x1c69c
    54e4:	231c1200 	addi	gp,t8,4608
    54e8:	bc010000 	cache	0x1,0(zero)
    54ec:	000000e5 	0xe5
    54f0:	00009102 	srl	s2,zero,0x4
    54f4:	00230a0d 	break	0x23,0x28
    54f8:	98c10100 	lwr	at,256(a2)
    54fc:	4c8000a7 	0x4c8000a7
    5500:	01000000 	0x1000000
    5504:	0001e99c 	0x1e99c
    5508:	00461300 	0x461300
    550c:	b6010000 	0xb6010000
    5510:	0000002c 	0x2c
    5514:	14000010 	bnez	zero,5558 <__isr_vec_space+0x5538>
    5518:	00002347 	0x2347
    551c:	a7e4cb01 	sh	a0,-13567(ra)
    5520:	00308000 	0x308000
    5524:	9c010000 	0x9c010000
    5528:	0021e215 	0x21e215
    552c:	dad40100 	ldc2	$20,256(s6)
    5530:	14000000 	bnez	zero,5534 <__isr_vec_space+0x5514>
    5534:	788000a8 	0x788000a8
    5538:	01000000 	0x1000000
    553c:	00024b9c 	0x24b9c
    5540:	00541600 	0x541600
    5544:	d6010000 	ldc1	$f1,0(s0)
    5548:	001b6717 	0x1b6717
    554c:	88d70100 	lwl	s7,256(a2)
    5550:	0b000000 	j	c000000 <__memory_size+0xbfe0800>
    5554:	8000a824 	lb	zero,-22492(zero)
    5558:	00000018 	mult	zero,zero
    555c:	0022d818 	0x22d818
    5560:	88000700 	lwl	zero,1792(zero)
    5564:	09000000 	j	4000000 <__memory_size+0x3fe0800>
    5568:	00000088 	0x88
    556c:	00002c09 	jalr.hb	a1,zero
    5570:	00250900 	0x250900
    5574:	00000000 	nop
    5578:	221f1900 	addi	ra,s0,6400
    557c:	00010000 	sll	zero,at,0x0
    5580:	0000e501 	0xe501
    5584:	00a88c00 	0xa88c00
    5588:	00005880 	sll	t3,zero,0x2
    558c:	8d9c0100 	lw	gp,256(t4)
    5590:	1a000002 	blez	s0,559c <__isr_vec_space+0x557c>
    5594:	0000231c 	0x231c
    5598:	e5010201 	swc1	$f1,513(t0)
    559c:	02000000 	0x2000000
    55a0:	a00b7091 	sb	t3,28817(zero)
    55a4:	0c8000a8 	jal	20002a0 <__memory_size+0x1fe0aa0>
    55a8:	1b000000 	blez	t8,55ac <__isr_vec_space+0x558c>
    55ac:	00725f5f 	0x725f5f
    55b0:	25010601 	addiu	at,t0,1537
    55b4:	01000000 	0x1000000
    55b8:	19000060 	blez	t0,573c <__isr_vec_space+0x571c>
    55bc:	000023a9 	0x23a9
    55c0:	fb011201 	sdc2	$1,4609(t8)
    55c4:	e4000000 	swc1	$f0,0(zero)
    55c8:	288000a8 	slti	zero,a0,168
    55cc:	01000001 	movf	zero,t0,$fcc0
    55d0:	0002ed9c 	0x2ed9c
    55d4:	1c011c00 	0x1c011c00
    55d8:	12010000 	beq	s0,at,55dc <__isr_vec_space+0x55bc>
    55dc:	0000fb01 	0xfb01
    55e0:	00910200 	0x910200
    55e4:	0023a21c 	0x23a21c
    55e8:	01120100 	0x1120100
    55ec:	000000b3 	tltu	zero,zero,0x2
    55f0:	1c049102 	0x1c049102
    55f4:	000000e9 	0xe9
    55f8:	88011201 	lwl	at,4609(zero)
    55fc:	02000000 	0x2000000
    5600:	500b0891 	beql	zero,t3,7848 <__isr_vec_space+0x7828>
    5604:	0c8000a9 	jal	20002a4 <__memory_size+0x1fe0aa4>
    5608:	1b000000 	blez	t8,560c <__isr_vec_space+0x55ec>
    560c:	00725f5f 	0x725f5f
    5610:	25011f01 	addiu	at,t0,7937
    5614:	01000000 	0x1000000
    5618:	1d000060 	bgtz	t0,579c <__isr_vec_space+0x577c>
    561c:	0000223d 	0x223d
    5620:	0c013701 	jal	4dc04 <__memory_size+0x2e404>
    5624:	848000aa 	lh	zero,170(a0)
    5628:	01000000 	0x1000000
    562c:	0003469c 	0x3469c
    5630:	00460f00 	0x460f00
    5634:	b6010000 	0xb6010000
    5638:	0000002c 	0x2c
    563c:	00000314 	0x314
    5640:	3c0b0010 	lui	t3,0x10
    5644:	4c8000aa 	0x4c8000aa
    5648:	1a000000 	blez	s0,564c <__isr_vec_space+0x562c>
    564c:	000002e2 	0x2e2
    5650:	a8014001 	swl	at,16385(zero)
    5654:	02000000 	0x2000000
    5658:	3c0b7091 	lui	t3,0x7091
    565c:	0c8000aa 	jal	20002a8 <__memory_size+0x1fe0aa8>
    5660:	1b000000 	blez	t8,5664 <__isr_vec_space+0x5644>
    5664:	00725f5f 	0x725f5f
    5668:	25014001 	addiu	at,t0,16385
    566c:	01000000 	0x1000000
    5670:	0000006f 	0x6f
    5674:	00220f1e 	0x220f1e
    5678:	01450100 	0x1450100
    567c:	8000aa90 	lb	zero,-21872(zero)
    5680:	00000028 	0x28
    5684:	037b9c01 	0x37b9c01
    5688:	631f0000 	0x631f0000
    568c:	01007874 	teq	t0,zero,0x1e1
    5690:	00880145 	0x880145
    5694:	91020000 	lbu	v0,0(t0)
    5698:	22df1c00 	addi	ra,s6,7168
    569c:	45010000 	bc1t	56a0 <__isr_vec_space+0x5680>
    56a0:	00002c01 	0x2c01
    56a4:	04910200 	bgezal	a0,5ea8 <__isr_vec_space+0x5e88>
    56a8:	23d71e00 	addi	s7,s8,7680
    56ac:	4d010000 	lwxc1	$f0,at(t0)
    56b0:	00aab801 	0xaab801
    56b4:	00002880 	sll	a1,zero,0x2
    56b8:	b09c0100 	0xb09c0100
    56bc:	1f000003 	bgtz	t8,56cc <__isr_vec_space+0x56ac>
    56c0:	00787463 	0x787463
    56c4:	88014d01 	lwl	at,19713(zero)
    56c8:	02000000 	0x2000000
    56cc:	df1c0091 	ldc3	$28,145(t8)
    56d0:	01000022 	sub	zero,t0,zero
    56d4:	002c014d 	break	0x2c,0x5
    56d8:	91020000 	lbu	v0,0(t0)
    56dc:	ce200004 	pref	0x0,4(s1)
    56e0:	01000022 	sub	zero,t0,zero
    56e4:	002c0154 	0x2c0154
    56e8:	aae00000 	swl	zero,0(s7)
    56ec:	002c8000 	0x2c8000
    56f0:	9c010000 	0x9c010000
    56f4:	000003da 	0x3da
    56f8:	0022071a 	0x22071a
    56fc:	01560100 	0x1560100
    5700:	0000002c 	0x2c
    5704:	00709102 	0x709102
    5708:	0023ee21 	0x23ee21
    570c:	01600100 	0x1600100
    5710:	8000ab0c 	lb	zero,-21748(zero)
    5714:	0000002c 	0x2c
    5718:	04009c01 	bltz	zero,fffec720 <__flash_start+0x403ec720>
    571c:	321c0000 	andi	gp,s0,0x0
    5720:	01000023 	subu	zero,t0,zero
    5724:	002c0160 	0x2c0160
    5728:	91020000 	lbu	v0,0(t0)
    572c:	f6220000 	sdc1	$f2,0(s1)
    5730:	01000021 	move	zero,t0
    5734:	ab38016a 	swl	t8,362(t9)
    5738:	00448000 	0x448000
    573c:	9c010000 	0x9c010000
    5740:	00000426 	0x426
    5744:	0023031a 	0x23031a
    5748:	016c0100 	0x16c0100
    574c:	0000002c 	0x2c
    5750:	00709102 	0x709102
    5754:	0022e622 	0x22e622
    5758:	01720100 	0x1720100
    575c:	8000ab7c 	lb	zero,-21636(zero)
    5760:	00000044 	0x44
    5764:	044c9c01 	teqi	v0,-25599
    5768:	031a0000 	0x31a0000
    576c:	01000023 	subu	zero,t0,zero
    5770:	002c0174 	teq	at,t4,0x5
    5774:	91020000 	lbu	v0,0(t0)
    5778:	9d230070 	0x9d230070
    577c:	5c000000 	bgtzl	zero,5780 <__isr_vec_space+0x5760>
    5780:	24000004 	li	zero,4
    5784:	00000081 	0x81
    5788:	6f0e0013 	0x6f0e0013
    578c:	01000022 	sub	zero,t0,zero
    5790:	00046d6f 	0x46d6f
    5794:	a8030500 	swl	v1,1280(zero)
    5798:	258000bd 	addiu	zero,t4,189
    579c:	0000044c 	syscall	0x11
    57a0:	0023940e 	0x23940e
    57a4:	f0990100 	0xf0990100
    57a8:	05000000 	bltz	t0,57ac <__isr_vec_space+0x578c>
    57ac:	00c31c03 	0xc31c03
    57b0:	15062680 	bne	t0,a2,f1b4 <__isr_vec_space+0xf194>
    57b4:	96010000 	lhu	at,0(s0)
    57b8:	00000494 	0x494
    57bc:	c2480305 	ll	t0,773(s2)
    57c0:	e5278000 	swc1	$f7,-32768(t1)
    57c4:	26000000 	addiu	zero,s0,0
    57c8:	000023bf 	0x23bf
    57cc:	00e58b01 	0xe58b01
    57d0:	03050000 	0x3050000
    57d4:	8000c318 	lb	zero,-15592(zero)
    57d8:	0000cf23 	0xcf23
    57dc:	0004bb00 	sll	s7,a0,0xc
    57e0:	00812800 	0x812800
    57e4:	018f0000 	0x18f0000
    57e8:	238a2600 	addi	t2,gp,9728
    57ec:	8e010000 	lw	at,0(s0)
    57f0:	000004aa 	0x4aa
    57f4:	c4700305 	lwc1	$f16,773(v1)
    57f8:	3a268000 	xori	a2,s1,0x8000
    57fc:	01000023 	subu	zero,t0,zero
    5800:	0004dd92 	0x4dd92
    5804:	44030500 	0x44030500
    5808:	258000c2 	addiu	zero,t4,194
    580c:	000004e2 	0x4e2
    5810:	04e80407 	tgei	a3,1031
    5814:	cf250000 	pref	0x5,0(t9)
    5818:	17000000 	bnez	t8,581c <__isr_vec_space+0x57fc>
    581c:	00001b67 	0x1b67
    5820:	0088d701 	0x88d701
    5824:	ed000000 	swc3	$0,0(t0)
    5828:	04000002 	bltz	zero,5834 <__isr_vec_space+0x5814>
    582c:	0010cc00 	sll	t9,s0,0x10
    5830:	a5010400 	sh	at,1024(t0)
    5834:	01000001 	movf	zero,t0,$fcc0
    5838:	000023f8 	0x23f8
    583c:	00000163 	0x163
    5840:	8000abc0 	lb	zero,-21568(zero)
    5844:	000003b4 	teq	zero,zero,0xe
    5848:	00002a4f 	0x2a4f
    584c:	00047202 	srl	t6,a0,0x8
    5850:	30d40200 	andi	s4,a2,0x200
    5854:	03000000 	0x3000000
    5858:	01090704 	0x1090704
    585c:	04040000 	0x4040000
    5860:	746e6905 	jalx	1b9a414 <__memory_size+0x1b7ac14>
    5864:	05040300 	0x5040300
    5868:	0000015a 	0x15a
    586c:	6a060103 	0x6a060103
    5870:	02000000 	0x2000000
    5874:	00000000 	nop
    5878:	00571c03 	0x571c03
    587c:	01030000 	0x1030000
    5880:	00006808 	0x6808
    5884:	05020300 	bltzl	t0,6488 <__isr_vec_space+0x6468>
    5888:	0000019b 	0x19b
    588c:	0014aa02 	srl	s5,s4,0x8
    5890:	70260300 	0x70260300
    5894:	03000000 	0x3000000
    5898:	00930702 	0x930702
    589c:	de020000 	ldc3	$2,0(s0)
    58a0:	03000000 	0x3000000
    58a4:	00003038 	0x3038
    58a8:	05080300 	tgei	t0,768
    58ac:	00000155 	0x155
    58b0:	04070803 	aclr	0x0,-2045(zero)
    58b4:	03000001 	movf	zero,t8,$fcc0
    58b8:	010e0704 	0x10e0704
    58bc:	04030000 	bgezl	zero,58c0 <__isr_vec_space+0x58a0>
    58c0:	00013207 	0x13207
    58c4:	03040500 	0x3040500
    58c8:	00710801 	movt	at,v1,$fcc4
    58cc:	02020000 	0x2020000
    58d0:	04000000 	bltz	zero,58d4 <__isr_vec_space+0x58b4>
    58d4:	00004c2a 	0x4c2a
    58d8:	14ac0200 	bne	a1,t4,60dc <__isr_vec_space+0x60bc>
    58dc:	36040000 	ori	a0,s0,0x0
    58e0:	00000065 	0x65
    58e4:	0000e002 	srl	gp,zero,0x0
    58e8:	77420400 	jalx	d081000 <__memory_size+0xd061800>
    58ec:	02000000 	0x2000000
    58f0:	00000213 	0x213
    58f4:	003e6c05 	0x3e6c05
    58f8:	04060000 	0x4060000
    58fc:	000000a7 	0xa7
    5900:	00243407 	0x243407
    5904:	73010800 	madd	$ac1,t8,at
    5908:	000000fe 	0xfe
    590c:	00253a08 	0x253a08
    5910:	fe750100 	sdc3	$21,256(s3)
    5914:	00000000 	nop
    5918:	00248d08 	0x248d08
    591c:	25760100 	addiu	s6,t3,256
    5920:	04000000 	bltz	zero,5924 <__isr_vec_space+0x5904>
    5924:	d9040600 	ldc2	$4,1536(t0)
    5928:	02000000 	0x2000000
    592c:	0000244d 	break	0x0,0x91
    5930:	00d97701 	0xd97701
    5934:	68090000 	0x68090000
    5938:	01000024 	and	zero,t0,zero
    593c:	00009ea0 	0x9ea0
    5940:	00abc000 	0xabc000
    5944:	00022880 	sll	a1,v0,0x2
    5948:	bb9c0100 	swr	gp,256(gp)
    594c:	0a000001 	j	8000004 <__memory_size+0x7fe0804>
    5950:	0000250b 	0x250b
    5954:	0025a001 	movt	s4,at,$fcc1
    5958:	91020000 	lbu	v0,0(t0)
    595c:	24590b00 	addiu	t9,v0,2816
    5960:	a2010000 	sb	at,0(s0)
    5964:	000001bb 	0x1bb
    5968:	0b609102 	j	d824408 <__memory_size+0xd804c08>
    596c:	000024b5 	0x24b5
    5970:	01bba201 	0x1bba201
    5974:	91020000 	lbu	v0,0(t0)
    5978:	24fc0b64 	addiu	gp,a3,2916
    597c:	a2010000 	sb	at,0(s0)
    5980:	000001bb 	0x1bb
    5984:	0b709102 	j	dc24408 <__memory_size+0xdc04c08>
    5988:	00002498 	0x2498
    598c:	00c8a301 	0xc8a301
    5990:	03050000 	0x3050000
    5994:	8000c330 	lb	zero,-15568(zero)
    5998:	000ca10b 	0xca10b
    599c:	9ea40100 	0x9ea40100
    59a0:	02000000 	0x2000000
    59a4:	3c0c6891 	lui	t4,0x6891
    59a8:	608000ad 	0x608000ad
    59ac:	a9000000 	swl	zero,0(t0)
    59b0:	0b000001 	j	c000004 <__memory_size+0xbfe0804>
    59b4:	000021b0 	tge	zero,zero,0x86
    59b8:	01bbe301 	0x1bbe301
    59bc:	91020000 	lbu	v0,0(t0)
    59c0:	248d0b6c 	addiu	t5,a0,2924
    59c4:	e3010000 	sc	at,0(t8)
    59c8:	00000025 	move	zero,zero
    59cc:	00749102 	0x749102
    59d0:	00adc40d 	break	0xad,0x310
    59d4:	00000880 	sll	at,zero,0x2
    59d8:	026f0e00 	0x26f0e00
    59dc:	f2010000 	0xf2010000
    59e0:	04060000 	0x4060000
    59e4:	00000104 	0x104
    59e8:	0024c50f 	0x24c50f
    59ec:	e8fc0100 	swc2	$28,256(a3)
    59f0:	e08000ad 	sc	zero,173(a0)
    59f4:	01000000 	0x1000000
    59f8:	0002289c 	0x2289c
    59fc:	76701000 	jalx	9c04000 <__memory_size+0x9be4800>
    5a00:	9efc0100 	0x9efc0100
    5a04:	02000000 	0x2000000
    5a08:	70110091 	s32stdr	xr2,zero,256
    5a0c:	01006375 	0x1006375
    5a10:	0000d3fe 	0xd3fe
    5a14:	6c910200 	0x6c910200
    5a18:	0024610b 	0x24610b
    5a1c:	bbff0100 	swr	ra,256(ra)
    5a20:	02000001 	movf	zero,s0,$fcc0
    5a24:	340d7091 	li	t5,0x7091
    5a28:	608000ae 	0x608000ae
    5a2c:	12000000 	beqz	s0,5a30 <__isr_vec_space+0x5a10>
    5a30:	000021b0 	tge	zero,zero,0x86
    5a34:	bb010e01 	swr	at,3585(t8)
    5a38:	02000001 	movf	zero,s0,$fcc0
    5a3c:	8d126891 	lw	s2,26769(t0)
    5a40:	01000024 	and	zero,t0,zero
    5a44:	0025010e 	0x25010e
    5a48:	91020000 	lbu	v0,0(t0)
    5a4c:	13000074 	beqz	t8,5c20 <__isr_vec_space+0x5c00>
    5a50:	0000241f 	0x241f
    5a54:	25011701 	addiu	at,t0,5889
    5a58:	c8000000 	lwc2	$0,0(zero)
    5a5c:	248000ae 	addiu	zero,a0,174
    5a60:	01000000 	0x1000000
    5a64:	24e6149c 	addiu	a2,a3,5276
    5a68:	1d010000 	0x1d010000
    5a6c:	00aeec01 	0xaeec01
    5a70:	00002080 	sll	a0,zero,0x2
    5a74:	159c0100 	bne	t4,gp,5e78 <__isr_vec_space+0x5e58>
    5a78:	00002441 	0x2441
    5a7c:	0c012301 	jal	48c04 <__memory_size+0x29404>
    5a80:	688000af 	0x688000af
    5a84:	01000000 	0x1000000
    5a88:	0002859c 	0x2859c
    5a8c:	24751200 	addiu	s5,v1,4608
    5a90:	25010000 	addiu	at,t0,0
    5a94:	0001bb01 	0x1bb01
    5a98:	74910200 	jalx	2440800 <__memory_size+0x2421000>
    5a9c:	00251712 	0x251712
    5aa0:	01260100 	0x1260100
    5aa4:	000000d3 	0xd3
    5aa8:	00709102 	0x709102
    5aac:	0000a716 	0xa716
    5ab0:	00029600 	sll	s2,v0,0x18
    5ab4:	00971700 	0x971700
    5ab8:	ea5f0000 	swc2	$31,0(s2)
    5abc:	24860b00 	addiu	a2,a0,2816
    5ac0:	6d010000 	0x6d010000
    5ac4:	00000285 	0x285
    5ac8:	cab00305 	lwc2	$16,773(s5)
    5acc:	cf0b8000 	pref	0xb,-32768(t8)
    5ad0:	01000024 	and	zero,t0,zero
    5ad4:	0002b87a 	0x2b87a
    5ad8:	4c030500 	lwxc1	$f20,v1(zero)
    5adc:	188000c2 	blez	a0,5de8 <__isr_vec_space+0x5dc8>
    5ae0:	000000b2 	tlt	zero,zero,0x2
    5ae4:	0024df0b 	0x24df0b
    5ae8:	047e0100 	0x47e0100
    5aec:	05000001 	bltz	t0,5af4 <__isr_vec_space+0x5ad4>
    5af0:	00c32003 	0xc32003
    5af4:	24b00b80 	addiu	s0,a1,2944
    5af8:	7e010000 	ext	at,s0,0x0,0x1
    5afc:	00000104 	0x104
    5b00:	c3280305 	ll	t0,773(t9)
    5b04:	260b8000 	addiu	t3,s0,-32768
    5b08:	01000025 	move	zero,t0
    5b0c:	00002582 	srl	a0,zero,0x16
    5b10:	50030500 	beql	zero,v1,6f14 <__isr_vec_space+0x6ef4>
    5b14:	008000c2 	0x8000c2
    5b18:	00000102 	srl	zero,zero,0x4
    5b1c:	123a0004 	beq	s1,k0,5b30 <__isr_vec_space+0x5b10>
    5b20:	01040000 	0x1040000
    5b24:	000025c5 	0x25c5
    5b28:	00255901 	0x255901
    5b2c:	00afbc00 	0xafbc00
    5b30:	00002880 	sll	a1,zero,0x2
    5b34:	002c7100 	0x2c7100
    5b38:	07040200 	0x7040200
    5b3c:	00000109 	0x109
    5b40:	69050403 	0x69050403
    5b44:	0200746e 	0x200746e
    5b48:	015a0504 	0x15a0504
    5b4c:	01020000 	0x1020000
    5b50:	00006a06 	0x6a06
    5b54:	08010200 	j	40800 <__memory_size+0x21000>
    5b58:	00000068 	0x68
    5b5c:	9b050202 	lwr	a1,514(t8)
    5b60:	02000001 	movf	zero,s0,$fcc0
    5b64:	00930702 	0x930702
    5b68:	08020000 	j	80000 <__memory_size+0x60800>
    5b6c:	00015505 	0x15505
    5b70:	07080200 	tgei	t8,512
    5b74:	00000104 	0x104
    5b78:	0e070402 	jal	81c1008 <__memory_size+0x81a1808>
    5b7c:	02000001 	movf	zero,s0,$fcc0
    5b80:	01320704 	0x1320704
    5b84:	04040000 	0x4040000
    5b88:	00760405 	0x760405
    5b8c:	02060000 	0x2060000
    5b90:	00710801 	movt	at,v1,$fcc4
    5b94:	4a070000 	c2	0x70000
    5b98:	04000025 	bltz	zero,5c30 <__isr_vec_space+0x5c10>
    5b9c:	009d0502 	0x9d0502
    5ba0:	76080000 	jalx	8200000 <__memory_size+0x81e0800>
    5ba4:	00000026 	xor	zero,zero,zero
    5ba8:	0025b908 	0x25b908
    5bac:	6d080100 	0x6d080100
    5bb0:	02000026 	xor	zero,s0,zero
    5bb4:	267b0900 	addiu	k1,s3,2304
    5bb8:	44030000 	mfc1	v1,$f0
    5bbc:	00000028 	0x28
    5bc0:	8000afbc 	lb	zero,-20548(zero)
    5bc4:	00000028 	0x28
    5bc8:	00e59c01 	0xe59c01
    5bcc:	660a0000 	0x660a0000
    5bd0:	3d01006e 	0x3d01006e
    5bd4:	00000070 	tge	zero,zero,0x1
    5bd8:	00000000 	nop
    5bdc:	00afd80b 	movn	k1,a1,t7
    5be0:	0000e580 	sll	gp,zero,0x16
    5be4:	57010c00 	bnel	t8,at,8be8 <__isr_vec_space+0x8bc8>
    5be8:	010c3001 	movf	a2,t0,$fcc3
    5bec:	0c300156 	jal	c00558 <__memory_size+0xbe0d58>
    5bf0:	f3035501 	0xf3035501
    5bf4:	010c5401 	0x10c5401
    5bf8:	00300154 	0x300154
    5bfc:	25a50d00 	addiu	a1,t5,3328
    5c00:	0d020000 	jal	4080000 <__memory_size+0x4060800>
    5c04:	00000028 	0x28
    5c08:	0000280e 	0x280e
    5c0c:	00700e00 	0x700e00
    5c10:	6e0e0000 	0x6e0e0000
    5c14:	0e000000 	jal	8000000 <__memory_size+0x7fe0800>
    5c18:	0000006e 	0x6e
    5c1c:	08dc0000 	j	3700000 <__memory_size+0x36e0800>
    5c20:	00040000 	sll	zero,a0,0x0
    5c24:	000012ed 	0x12ed
    5c28:	25c50104 	addiu	a1,t6,260
    5c2c:	c5010000 	lwc1	$f1,0(t0)
    5c30:	e4000028 	swc1	$f0,40(zero)
    5c34:	3c8000af 	0x3c8000af
    5c38:	4c000000 	lwxc1	$f0,zero(zero)
    5c3c:	0200002d 	0x200002d
    5c40:	01090704 	0x1090704
    5c44:	04030000 	bgezl	zero,5c48 <__isr_vec_space+0x5c28>
    5c48:	746e6905 	jalx	1b9a414 <__memory_size+0x1b7ac14>
    5c4c:	05040200 	0x5040200
    5c50:	0000015a 	0x15a
    5c54:	6a060102 	0x6a060102
    5c58:	02000000 	0x2000000
    5c5c:	00680801 	movf	at,v1,$fcc2
    5c60:	02020000 	0x2020000
    5c64:	00019b05 	0x19b05
    5c68:	07020200 	bltzl	t8,646c <__isr_vec_space+0x644c>
    5c6c:	00000093 	0x93
    5c70:	55050802 	bnel	t0,a1,7c7c <__isr_vec_space+0x7c5c>
    5c74:	02000001 	movf	zero,s0,$fcc0
    5c78:	01040708 	0x1040708
    5c7c:	7d040000 	ext	a0,t0,0x0,0x1
    5c80:	02000028 	0x2000028
    5c84:	00002807 	srav	a1,zero,zero
    5c88:	28500400 	slti	s0,v0,1024
    5c8c:	10030000 	beq	zero,v1,5c90 <__isr_vec_space+0x5c70>
    5c90:	0000002f 	0x2f
    5c94:	00298704 	0x298704
    5c98:	2f270300 	sltiu	a3,t9,768
    5c9c:	05000000 	bltz	t0,5ca0 <__isr_vec_space+0x5c80>
    5ca0:	00002815 	0x2815
    5ca4:	8d016104 	lw	at,24836(t0)
    5ca8:	02000000 	0x2000000
    5cac:	010e0704 	0x10e0704
    5cb0:	04060000 	0x4060000
    5cb4:	00b34a03 	0xb34a03
    5cb8:	0f070000 	jal	c1c0000 <__memory_size+0xc1a0800>
    5cbc:	03000028 	0x3000028
    5cc0:	0000814c 	syscall	0x205
    5cc4:	27c10700 	addiu	at,s8,1792
    5cc8:	4d030000 	lwxc1	$f0,v1(t0)
    5ccc:	000000b3 	tltu	zero,zero,0x2
    5cd0:	003d0800 	0x3d0800
    5cd4:	00c30000 	0xc30000
    5cd8:	c3090000 	ll	t1,0(t8)
    5cdc:	03000000 	0x3000000
    5ce0:	07040200 	0x7040200
    5ce4:	00000132 	tlt	zero,zero,0x4
    5ce8:	4703080a 	bz.b	$w3,7d14 <__isr_vec_space+0x7cf4>
    5cec:	000000eb 	0xeb
    5cf0:	0029710b 	0x29710b
    5cf4:	28490300 	slti	t1,v0,768
    5cf8:	00000000 	nop
    5cfc:	0029790b 	0x29790b
    5d00:	944e0300 	lhu	t6,768(v0)
    5d04:	04000000 	bltz	zero,5d08 <__isr_vec_space+0x5ce8>
    5d08:	28720400 	slti	s2,v1,1024
    5d0c:	4f030000 	lwxc1	$f0,v1(t8)
    5d10:	000000ca 	0xca
    5d14:	00278404 	0x278404
    5d18:	60530300 	0x60530300
    5d1c:	0c000000 	jal	0 <hardware_exit_hook>
    5d20:	29b90404 	slti	t9,t5,1028
    5d24:	16050000 	bne	s0,a1,5d28 <__isr_vec_space+0x5d08>
    5d28:	00000021 	move	zero,zero
    5d2c:	0027950d 	break	0x27,0x254
    5d30:	2d051800 	sltiu	a1,t0,6144
    5d34:	00000161 	0x161
    5d38:	0029250b 	0x29250b
    5d3c:	612f0500 	0x612f0500
    5d40:	00000001 	movf	zero,zero,$fcc0
    5d44:	006b5f0e 	0x6b5f0e
    5d48:	00283005 	lsa	a2,at,t0,0x1
    5d4c:	0b040000 	j	c100000 <__memory_size+0xc0e0800>
    5d50:	0000295c 	0x295c
    5d54:	00283005 	lsa	a2,at,t0,0x1
    5d58:	0b080000 	j	c200000 <__memory_size+0xc1e0800>
    5d5c:	0000277e 	0x277e
    5d60:	00283005 	lsa	a2,at,t0,0x1
    5d64:	0b0c0000 	j	c300000 <__memory_size+0xc2e0800>
    5d68:	00002a00 	sll	a1,zero,0x8
    5d6c:	00283005 	lsa	a2,at,t0,0x1
    5d70:	0e100000 	jal	8400000 <__memory_size+0x83e0800>
    5d74:	0500785f 	bltz	t0,23ef4 <__memory_size+0x46f4>
    5d78:	00016731 	tgeu	zero,at,0x19c
    5d7c:	0f001400 	jal	c005000 <__memory_size+0xbfe5800>
    5d80:	00010e04 	0x10e04
    5d84:	01030800 	0x1030800
    5d88:	01770000 	0x1770000
    5d8c:	c3090000 	ll	t1,0(t8)
    5d90:	00000000 	nop
    5d94:	27bc0d00 	addiu	gp,sp,3328
    5d98:	05240000 	0x5240000
    5d9c:	0001f035 	0x1f035
    5da0:	26e70b00 	addiu	a3,s7,2816
    5da4:	37050000 	ori	a1,t8,0x0
    5da8:	00000028 	0x28
    5dac:	298f0b00 	slti	t7,t4,2816
    5db0:	38050000 	xori	a1,zero,0x0
    5db4:	00000028 	0x28
    5db8:	26f60b04 	addiu	s6,s7,2820
    5dbc:	39050000 	xori	a1,t0,0x0
    5dc0:	00000028 	0x28
    5dc4:	288f0b08 	slti	t7,a0,2824
    5dc8:	3a050000 	xori	a1,s0,0x0
    5dcc:	00000028 	0x28
    5dd0:	283c0b0c 	slti	gp,at,2828
    5dd4:	3b050000 	xori	a1,t8,0x0
    5dd8:	00000028 	0x28
    5ddc:	282b0b10 	slti	t3,at,2832
    5de0:	3c050000 	lui	a1,0x0
    5de4:	00000028 	0x28
    5de8:	2a050b14 	slti	a1,s0,2836
    5dec:	3d050000 	0x3d050000
    5df0:	00000028 	0x28
    5df4:	28a70b18 	slti	a3,a1,2840
    5df8:	3e050000 	0x3e050000
    5dfc:	00000028 	0x28
    5e00:	2a400b1c 	slti	zero,s2,2844
    5e04:	3f050000 	0x3f050000
    5e08:	00000028 	0x28
    5e0c:	05100020 	bltzal	t0,5e90 <__isr_vec_space+0x5e70>
    5e10:	08000027 	j	9c <__isr_vec_space+0x7c>
    5e14:	30480501 	andi	t0,v0,0x501
    5e18:	0b000002 	j	c000008 <__memory_size+0xbfe0808>
    5e1c:	00002771 	tgeu	zero,zero,0x9d
    5e20:	02304905 	0x2304905
    5e24:	0b000000 	j	c000000 <__memory_size+0xbfe0800>
    5e28:	00002682 	srl	a0,zero,0x1a
    5e2c:	02304a05 	0x2304a05
    5e30:	11800000 	beqz	t4,5e34 <__isr_vec_space+0x5e14>
    5e34:	000029ab 	0x29ab
    5e38:	01034c05 	0x1034c05
    5e3c:	01000000 	0x1000000
    5e40:	00272a11 	0x272a11
    5e44:	034f0500 	0x34f0500
    5e48:	04000001 	bltz	zero,5e50 <__isr_vec_space+0x5e30>
    5e4c:	01080001 	movf	zero,t0,$fcc2
    5e50:	40000001 	mfc0	zero,c0_mvpcontrol
    5e54:	09000002 	j	4000008 <__memory_size+0x3fe0808>
    5e58:	000000c3 	sra	zero,zero,0x3
    5e5c:	7a10001f 	0x7a10001f
    5e60:	90000026 	lbu	zero,38(zero)
    5e64:	7e5b0501 	0x7e5b0501
    5e68:	0b000002 	j	c000008 <__memory_size+0xbfe0808>
    5e6c:	00002925 	0x2925
    5e70:	027e5c05 	0x27e5c05
    5e74:	0b000000 	j	c000000 <__memory_size+0xbfe0800>
    5e78:	0000293d 	0x293d
    5e7c:	00285d05 	0x285d05
    5e80:	0b040000 	j	c100000 <__memory_size+0xc0e0800>
    5e84:	00002779 	0x2779
    5e88:	02845f05 	0x2845f05
    5e8c:	0b080000 	j	c200000 <__memory_size+0xc1e0800>
    5e90:	00002705 	0x2705
    5e94:	01f06005 	lsa	t4,t7,s0,0x1
    5e98:	00880000 	0x880000
    5e9c:	0240040f 	0x240040f
    5ea0:	94080000 	lhu	t0,0(zero)
    5ea4:	94000002 	lhu	zero,2(zero)
    5ea8:	09000002 	j	4000008 <__memory_size+0x3fe0808>
    5eac:	000000c3 	sra	zero,zero,0x3
    5eb0:	040f001f 	0x40f001f
    5eb4:	0000029a 	0x29a
    5eb8:	28b10d12 	slti	s1,a1,3346
    5ebc:	05080000 	tgei	t0,0
    5ec0:	0002c073 	tltu	zero,v0,0x301
    5ec4:	2dac0b00 	sltiu	t4,t5,2816
    5ec8:	74050000 	jalx	140000 <__memory_size+0x120800>
    5ecc:	000002c0 	sll	zero,zero,0xb
    5ed0:	2d7a0b00 	sltiu	k0,t3,2816
    5ed4:	75050000 	jalx	4140000 <__memory_size+0x4120800>
    5ed8:	00000028 	0x28
    5edc:	040f0004 	0x40f0004
    5ee0:	0000003d 	0x3d
    5ee4:	00290f0d 	break	0x29,0x3c
    5ee8:	b3056800 	0xb3056800
    5eec:	000003f0 	tge	zero,zero,0xf
    5ef0:	00705f0e 	0x705f0e
    5ef4:	02c0b405 	0x2c0b405
    5ef8:	0e000000 	jal	8000000 <__memory_size+0x7fe0800>
    5efc:	0500725f 	bltz	t0,2287c <__memory_size+0x307c>
    5f00:	000028b5 	0x28b5
    5f04:	5f0e0400 	0x5f0e0400
    5f08:	b6050077 	0xb6050077
    5f0c:	00000028 	0x28
    5f10:	27230b08 	addiu	v1,t9,2824
    5f14:	b7050000 	0xb7050000
    5f18:	00000044 	0x44
    5f1c:	27d80b0c 	addiu	t8,s8,2828
    5f20:	b8050000 	swr	a1,0(zero)
    5f24:	00000044 	0x44
    5f28:	625f0e0e 	0x625f0e0e
    5f2c:	b9050066 	swr	a1,102(t0)
    5f30:	0000029b 	0x29b
    5f34:	26c10b10 	addiu	at,s6,2832
    5f38:	ba050000 	swr	a1,0(s0)
    5f3c:	00000028 	0x28
    5f40:	27130b18 	addiu	s3,t8,2840
    5f44:	c1050000 	ll	a1,0(t0)
    5f48:	00000101 	0x101
    5f4c:	27ac0b1c 	addiu	t4,sp,2844
    5f50:	c3050000 	ll	a1,0(t8)
    5f54:	00000553 	0x553
    5f58:	28240b20 	slti	a0,at,2848
    5f5c:	c5050000 	lwc1	$f5,0(t0)
    5f60:	00000582 	srl	zero,zero,0x16
    5f64:	29810b24 	slti	at,t4,2852
    5f68:	c8050000 	lwc2	$5,0(zero)
    5f6c:	000005a6 	0x5a6
    5f70:	2a5a0b28 	slti	k0,s2,2856
    5f74:	c9050000 	lwc2	$5,0(t0)
    5f78:	000005c0 	sll	zero,zero,0x17
    5f7c:	755f0e2c 	jalx	57c38b0 <__memory_size+0x57a40b0>
    5f80:	cc050062 	pref	0x5,98(zero)
    5f84:	0000029b 	0x29b
    5f88:	755f0e30 	jalx	57c38c0 <__memory_size+0x57a40c0>
    5f8c:	cd050070 	pref	0x5,112(t0)
    5f90:	000002c0 	sll	zero,zero,0xb
    5f94:	755f0e38 	jalx	57c38e0 <__memory_size+0x57a40e0>
    5f98:	ce050072 	pref	0x5,114(s0)
    5f9c:	00000028 	0x28
    5fa0:	26f00b3c 	addiu	s0,s7,2876
    5fa4:	d1050000 	0xd1050000
    5fa8:	000005c6 	0x5c6
    5fac:	2a320b40 	slti	s2,s1,2880
    5fb0:	d2050000 	0xd2050000
    5fb4:	000005d6 	0x5d6
    5fb8:	6c5f0e43 	0x6c5f0e43
    5fbc:	d5050062 	ldc1	$f5,98(t0)
    5fc0:	0000029b 	0x29b
    5fc4:	27390b44 	addiu	t9,t9,2884
    5fc8:	d8050000 	ldc2	$5,0(zero)
    5fcc:	00000028 	0x28
    5fd0:	274a0b4c 	addiu	t2,k0,2892
    5fd4:	d9050000 	ldc2	$5,0(t0)
    5fd8:	0000006b 	0x6b
    5fdc:	2a7f0b50 	slti	ra,s3,2896
    5fe0:	dc050000 	ldc3	$5,0(zero)
    5fe4:	0000040e 	0x40e
    5fe8:	2b850b54 	slti	a1,gp,2900
    5fec:	e0050000 	sc	a1,0(zero)
    5ff0:	000000f6 	tne	zero,zero,0x3
    5ff4:	29170b58 	slti	s7,t0,2904
    5ff8:	e2050000 	sc	a1,0(s0)
    5ffc:	000000eb 	0xeb
    6000:	281c0b5c 	slti	gp,zero,2908
    6004:	e3050000 	sc	a1,0(t8)
    6008:	00000028 	0x28
    600c:	28130064 	slti	s3,zero,100
    6010:	0e000000 	jal	8000000 <__memory_size+0x7fe0800>
    6014:	14000004 	bnez	zero,6028 <__isr_vec_space+0x6008>
    6018:	0000040e 	0x40e
    601c:	00010114 	0x10114
    6020:	05461400 	0x5461400
    6024:	28140000 	slti	s4,zero,0
    6028:	00000000 	nop
    602c:	0414040f 	0x414040f
    6030:	64150000 	0x64150000
    6034:	28000029 	slti	zero,zero,41
    6038:	02390504 	0x2390504
    603c:	00000546 	0x546
    6040:	0028a016 	0x28a016
    6044:	023b0500 	0x23b0500
    6048:	00000028 	0x28
    604c:	27321600 	addiu	s2,t9,5632
    6050:	40050000 	mfc0	a1,c0_index
    6054:	00062d02 	srl	a1,a2,0x14
    6058:	c8160400 	lwc2	$22,1024(zero)
    605c:	05000027 	bltz	t0,60fc <__isr_vec_space+0x60dc>
    6060:	062d0240 	0x62d0240
    6064:	16080000 	bne	s0,t0,6068 <__isr_vec_space+0x6048>
    6068:	0000278d 	break	0x0,0x9e
    606c:	2d024005 	sltiu	v0,t0,16389
    6070:	0c000006 	jal	18 <ABIFlags_flags2+0x4>
    6074:	00293816 	0x293816
    6078:	02420500 	0x2420500
    607c:	00000028 	0x28
    6080:	26961610 	addiu	s6,s4,5648
    6084:	43050000 	c0	0x1050000
    6088:	00080f02 	srl	at,t0,0x1c
    608c:	e1161400 	sc	s6,5120(t0)
    6090:	05000029 	bltz	t0,6138 <__isr_vec_space+0x6118>
    6094:	00280245 	0x280245
    6098:	16300000 	bne	s1,s0,609c <__isr_vec_space+0x607c>
    609c:	00002942 	srl	a1,zero,0x5
    60a0:	77024605 	jalx	c091814 <__memory_size+0xc072014>
    60a4:	34000005 	li	zero,0x5
    60a8:	00284516 	0x284516
    60ac:	02480500 	0x2480500
    60b0:	00000028 	0x28
    60b4:	29521638 	slti	s2,t2,5688
    60b8:	4a050000 	c2	0x50000
    60bc:	00082a02 	srl	a1,t0,0x8
    60c0:	07163c00 	0x7163c00
    60c4:	05000028 	bltz	t0,6168 <__isr_vec_space+0x6148>
    60c8:	0161024d 	break	0x161,0x9
    60cc:	16400000 	bnez	s2,60d0 <__isr_vec_space+0x60b0>
    60d0:	000027b2 	tlt	zero,zero,0x9e
    60d4:	28024e05 	slti	v0,zero,19973
    60d8:	44000000 	mfc1	zero,$f0
    60dc:	002a7416 	0x2a7416
    60e0:	024f0500 	0x24f0500
    60e4:	00000161 	0x161
    60e8:	28681648 	slti	t0,v1,5704
    60ec:	50050000 	beql	zero,a1,60f0 <__isr_vec_space+0x60d0>
    60f0:	00083002 	srl	a2,t0,0x0
    60f4:	d0164c00 	0xd0164c00
    60f8:	05000027 	bltz	t0,6198 <__isr_vec_space+0x6178>
    60fc:	00280253 	0x280253
    6100:	16500000 	bne	s2,s0,6104 <__isr_vec_space+0x60e4>
    6104:	00002742 	srl	a0,zero,0x1d
    6108:	46025405 	c1	0x25405
    610c:	54000005 	bnezl	zero,6124 <__isr_vec_space+0x6104>
    6110:	00289916 	0x289916
    6114:	02770500 	0x2770500
    6118:	000007ed 	0x7ed
    611c:	267a1758 	addiu	k0,s3,5976
    6120:	7b050000 	xori.b	$w0,$w0,0x5
    6124:	00027e02 	srl	t7,v0,0x18
    6128:	17014800 	bne	t8,at,1812c <__isr_vec_space+0x1810c>
    612c:	000027e5 	0x27e5
    6130:	40027c05 	0x40027c05
    6134:	4c000002 	mfc3	zero,$0,2
    6138:	2a281701 	slti	t0,s1,5889
    613c:	80050000 	lb	a1,0(zero)
    6140:	00084102 	srl	t0,t0,0x4
    6144:	1702dc00 	bne	t8,v0,ffffd148 <__flash_start+0x403fd148>
    6148:	0000271b 	0x271b
    614c:	f2028505 	0xf2028505
    6150:	e0000005 	sc	zero,5(zero)
    6154:	27001702 	addiu	zero,t8,5890
    6158:	86050000 	lh	a1,0(s0)
    615c:	00084d02 	srl	t1,t0,0x14
    6160:	0002ec00 	sll	sp,v0,0x10
    6164:	054c040f 	teqi	t2,1039
    6168:	01020000 	0x1020000
    616c:	00007108 	0x7108
    6170:	f0040f00 	0xf0040f00
    6174:	13000003 	beqz	t8,6184 <__isr_vec_space+0x6164>
    6178:	00000028 	0x28
    617c:	00000577 	0x577
    6180:	00040e14 	0x40e14
    6184:	01011400 	0x1011400
    6188:	77140000 	jalx	c500000 <__memory_size+0xc4e0800>
    618c:	14000005 	bnez	zero,61a4 <__isr_vec_space+0x6184>
    6190:	00000028 	0x28
    6194:	7d040f00 	ext	a0,t0,0x1c,0x2
    6198:	18000005 	blez	zero,61b0 <__isr_vec_space+0x6190>
    619c:	0000054c 	syscall	0x15
    61a0:	0559040f 	0x559040f
    61a4:	76130000 	jalx	84c0000 <__memory_size+0x84a0800>
    61a8:	a6000000 	sh	zero,0(s0)
    61ac:	14000005 	bnez	zero,61c4 <__isr_vec_space+0x61a4>
    61b0:	0000040e 	0x40e
    61b4:	00010114 	0x10114
    61b8:	00761400 	0x761400
    61bc:	28140000 	slti	s4,zero,0
    61c0:	00000000 	nop
    61c4:	0588040f 	tgei	t4,1039
    61c8:	28130000 	slti	s3,zero,0
    61cc:	c0000000 	ll	zero,0(zero)
    61d0:	14000005 	bnez	zero,61e8 <__isr_vec_space+0x61c8>
    61d4:	0000040e 	0x40e
    61d8:	00010114 	0x10114
    61dc:	040f0000 	0x40f0000
    61e0:	000005ac 	0x5ac
    61e4:	00003d08 	0x3d08
    61e8:	0005d600 	sll	k0,a1,0x18
    61ec:	00c30900 	0xc30900
    61f0:	00020000 	sll	zero,v0,0x0
    61f4:	00003d08 	0x3d08
    61f8:	0005e600 	sll	gp,a1,0x18
    61fc:	00c30900 	0xc30900
    6200:	00000000 	nop
    6204:	0028be05 	0x28be05
    6208:	011d0500 	0x11d0500
    620c:	000002c6 	0x2c6
    6210:	002a0f19 	0x2a0f19
    6214:	21050c00 	addi	a1,t0,3072
    6218:	00062701 	0x62701
    621c:	29251600 	slti	a1,t1,5632
    6220:	23050000 	addi	a1,t8,0
    6224:	00062701 	0x62701
    6228:	de160000 	ldc3	$22,0(s0)
    622c:	05000027 	bltz	t0,62cc <__isr_vec_space+0x62ac>
    6230:	00280124 	0x280124
    6234:	16040000 	bne	s0,a0,6238 <__isr_vec_space+0x6218>
    6238:	000028b8 	0x28b8
    623c:	2d012505 	sltiu	at,t0,9477
    6240:	08000006 	j	18 <ABIFlags_flags2+0x4>
    6244:	f2040f00 	0xf2040f00
    6248:	0f000005 	jal	c000014 <__memory_size+0xbfe0814>
    624c:	0005e604 	0x5e604
    6250:	268e1900 	addiu	t6,s4,6400
    6254:	050e0000 	tnei	t0,0
    6258:	0668013d 	tgei	s3,317
    625c:	6b160000 	0x6b160000
    6260:	05000029 	bltz	t0,6308 <__isr_vec_space+0x62e8>
    6264:	0668013e 	tgei	s3,318
    6268:	16000000 	bnez	s0,626c <__isr_vec_space+0x624c>
    626c:	00002998 	0x2998
    6270:	68013f05 	0x68013f05
    6274:	06000006 	bltz	s0,6290 <__isr_vec_space+0x6270>
    6278:	0029b416 	0x29b416
    627c:	01400500 	0x1400500
    6280:	0000004b 	0x4b
    6284:	4b08000c 	c2	0x108000c
    6288:	78000000 	andi.b	$w0,$w0,0x0
    628c:	09000006 	j	4000018 <__memory_size+0x3fe0818>
    6290:	000000c3 	sra	zero,zero,0x3
    6294:	d01a0002 	0xd01a0002
    6298:	79025805 	0x79025805
    629c:	16000007 	bnez	s0,62bc <__isr_vec_space+0x629c>
    62a0:	000029f3 	tltu	zero,zero,0xa7
    62a4:	8d025a05 	lw	v0,23045(t0)
    62a8:	00000000 	nop
    62ac:	00299e16 	0x299e16
    62b0:	025b0500 	0x25b0500
    62b4:	00000546 	0x546
    62b8:	27fa1604 	addiu	k0,ra,5636
    62bc:	5c050000 	0x5c050000
    62c0:	00077902 	srl	t7,a3,0x4
    62c4:	4b160800 	c2	0x1160800
    62c8:	0500002a 	bltz	t0,6374 <__isr_vec_space+0x6354>
    62cc:	0177025d 	0x177025d
    62d0:	16240000 	bne	s1,a0,62d4 <__isr_vec_space+0x62b4>
    62d4:	0000279d 	0x279d
    62d8:	28025e05 	slti	v0,zero,24069
    62dc:	48000000 	mfc2	zero,$0
    62e0:	00292016 	0x292016
    62e4:	025f0500 	0x25f0500
    62e8:	00000059 	0x59
    62ec:	2a611650 	slti	at,s3,5712
    62f0:	60050000 	0x60050000
    62f4:	00063302 	srl	a2,a2,0xc
    62f8:	2b165800 	slti	s6,t8,22528
    62fc:	05000029 	bltz	t0,63a4 <__isr_vec_space+0x6384>
    6300:	00eb0261 	0xeb0261
    6304:	16680000 	bne	s3,t0,6308 <__isr_vec_space+0x62e8>
    6308:	00002a66 	0x2a66
    630c:	eb026205 	swc2	$2,25093(t8)
    6310:	70000000 	madd	zero,zero
    6314:	0026d916 	0x26d916
    6318:	02630500 	0x2630500
    631c:	000000eb 	0xeb
    6320:	2a1e1678 	slti	s8,s0,5752
    6324:	64050000 	0x64050000
    6328:	00078902 	srl	s1,a3,0x4
    632c:	ee168000 	swc3	$22,-32768(s0)
    6330:	05000027 	bltz	t0,63d0 <__isr_vec_space+0x63b0>
    6334:	07990265 	0x7990265
    6338:	16880000 	bne	s4,t0,633c <__isr_vec_space+0x631c>
    633c:	000029c1 	0x29c1
    6340:	28026605 	slti	v0,zero,26117
    6344:	a0000000 	sb	zero,0(zero)
    6348:	00276316 	0x276316
    634c:	02670500 	0x2670500
    6350:	000000eb 	0xeb
    6354:	26ca16a4 	addiu	t2,s6,5796
    6358:	68050000 	0x68050000
    635c:	0000eb02 	srl	sp,zero,0xc
    6360:	5216ac00 	beql	s0,s6,ffff1364 <__flash_start+0x403f1364>
    6364:	05000027 	bltz	t0,6404 <__isr_vec_space+0x63e4>
    6368:	00eb0269 	0xeb0269
    636c:	16b40000 	bne	s5,s4,6370 <__isr_vec_space+0x6350>
    6370:	000026a1 	0x26a1
    6374:	eb026a05 	swc2	$2,27141(t8)
    6378:	bc000000 	cache	0x0,0(zero)
    637c:	0026b016 	0x26b016
    6380:	026b0500 	0x26b0500
    6384:	000000eb 	0xeb
    6388:	289e16c4 	slti	s8,a0,5828
    638c:	6c050000 	0x6c050000
    6390:	00002802 	srl	a1,zero,0x0
    6394:	0800cc00 	j	33000 <__memory_size+0x13800>
    6398:	0000054c 	syscall	0x15
    639c:	00000789 	0x789
    63a0:	0000c309 	0xc309
    63a4:	08001900 	j	6400 <__isr_vec_space+0x63e0>
    63a8:	0000054c 	syscall	0x15
    63ac:	00000799 	0x799
    63b0:	0000c309 	0xc309
    63b4:	08000700 	j	1c00 <__isr_vec_space+0x1be0>
    63b8:	0000054c 	syscall	0x15
    63bc:	000007a9 	0x7a9
    63c0:	0000c309 	0xc309
    63c4:	1a001700 	blez	s0,bfc8 <__isr_vec_space+0xbfa8>
    63c8:	027105f0 	tge	s3,s1,0x17
    63cc:	000007cd 	break	0x0,0x1f
    63d0:	00283516 	0x283516
    63d4:	02740500 	0x2740500
    63d8:	000007cd 	break	0x0,0x1f
    63dc:	2a151600 	slti	s5,s0,5632
    63e0:	75050000 	jalx	4140000 <__memory_size+0x4120800>
    63e4:	0007dd02 	srl	k1,a3,0x14
    63e8:	08007800 	j	1e000 <__isr_vec_space+0x1dfe0>
    63ec:	000002c0 	sll	zero,zero,0xb
    63f0:	000007dd 	0x7dd
    63f4:	0000c309 	0xc309
    63f8:	08001d00 	j	7400 <__isr_vec_space+0x73e0>
    63fc:	0000008d 	break	0x0,0x2
    6400:	000007ed 	0x7ed
    6404:	0000c309 	0xc309
    6408:	1b001d00 	blez	t8,d80c <__isr_vec_space+0xd7ec>
    640c:	025605f0 	tge	s2,s6,0x17
    6410:	0000080f 	0x80f
    6414:	0029641c 	0x29641c
    6418:	026d0500 	0x26d0500
    641c:	00000678 	0x678
    6420:	002a381c 	0x2a381c
    6424:	02760500 	0x2760500
    6428:	000007a9 	0x7a9
    642c:	054c0800 	teqi	t2,2048
    6430:	081f0000 	j	7c0000 <__memory_size+0x7a0800>
    6434:	c3090000 	ll	t1,0(t8)
    6438:	18000000 	blez	zero,643c <__isr_vec_space+0x641c>
    643c:	082a1d00 	j	a87400 <__memory_size+0xa67c00>
    6440:	0e140000 	jal	8500000 <__memory_size+0x84e0800>
    6444:	00000004 	sllv	zero,zero,zero
    6448:	081f040f 	j	7c103c <__memory_size+0x7a183c>
    644c:	040f0000 	0x40f0000
    6450:	00000161 	0x161
    6454:	0008411d 	0x8411d
    6458:	00281400 	0x281400
    645c:	0f000000 	jal	c000000 <__memory_size+0xbfe0800>
    6460:	00084704 	0x84704
    6464:	36040f00 	ori	a0,s0,0xf00
    6468:	08000008 	j	20 <__isr_vec_space>
    646c:	000005e6 	0x5e6
    6470:	0000085d 	0x85d
    6474:	0000c309 	0xc309
    6478:	1e000200 	bgtz	s0,6c7c <__isr_vec_space+0x6c5c>
    647c:	00002c48 	0x2c48
    6480:	afe45406 	sw	a0,21510(ra)
    6484:	003c8000 	0x3c8000
    6488:	9c010000 	0x9c010000
    648c:	000008ab 	0x8ab
    6490:	002c411f 	0x2c411f
    6494:	283a0100 	slti	k0,at,256
    6498:	2c000000 	sltiu	zero,zero,0
    649c:	20000000 	addi	zero,zero,0
    64a0:	8000affc 	lb	zero,-20484(zero)
    64a4:	000008bc 	0x8bc
    64a8:	0000089a 	0x89a
    64ac:	01550121 	0x1550121
    64b0:	54012130 	bnel	zero,at,e974 <__isr_vec_space+0xe954>
    64b4:	00008002 	srl	s0,zero,0x0
    64b8:	00b02022 	sub	a0,a1,s0
    64bc:	0008d280 	sll	k0,t0,0xa
    64c0:	54012100 	bnel	zero,at,e8c4 <__isr_vec_space+0xe8a4>
    64c4:	00008002 	srl	s0,zero,0x0
    64c8:	29ce2300 	slti	t6,t6,8960
    64cc:	fb050000 	sdc2	$5,0(t8)
    64d0:	0008b702 	srl	s6,t0,0x1c
    64d4:	040e1800 	tnei	zero,6144
    64d8:	57240000 	bnel	t9,a0,64dc <__isr_vec_space+0x64bc>
    64dc:	07000028 	bltz	t8,6580 <__isr_vec_space+0x6560>
    64e0:	0008d20c 	syscall	0x2348
    64e4:	00281400 	0x281400
    64e8:	01140000 	0x1140000
    64ec:	00000001 	movf	zero,zero,$fcc0
    64f0:	002c4725 	0x2c4725
    64f4:	14110800 	bne	zero,s1,84f8 <__isr_vec_space+0x84d8>
    64f8:	00000028 	0x28
    64fc:	088c0000 	j	2300000 <__memory_size+0x22e0800>
    6500:	00040000 	sll	zero,a0,0x0
    6504:	000014d1 	0x14d1
    6508:	25c50104 	addiu	a1,t6,260
    650c:	85010000 	lh	at,0(t0)
    6510:	f600002a 	sdc1	$f0,42(s0)
    6514:	0200002e 	0x200002e
    6518:	015a0504 	0x15a0504
    651c:	04020000 	bltzl	zero,6520 <__isr_vec_space+0x6500>
    6520:	00010907 	0x10907
    6524:	05040300 	0x5040300
    6528:	00746e69 	0x746e69
    652c:	6a060102 	0x6a060102
    6530:	02000000 	0x2000000
    6534:	00680801 	movf	at,v1,$fcc2
    6538:	02020000 	0x2020000
    653c:	00019b05 	0x19b05
    6540:	07020200 	bltzl	t8,6d44 <__isr_vec_space+0x6d24>
    6544:	00000093 	0x93
    6548:	55050802 	bnel	t0,a1,8554 <__isr_vec_space+0x8534>
    654c:	02000001 	movf	zero,s0,$fcc0
    6550:	01040708 	0x1040708
    6554:	7d040000 	ext	a0,t0,0x0,0x1
    6558:	01000028 	0x1000028
    655c:	00002707 	0x2707
    6560:	28500400 	slti	s0,v0,1024
    6564:	10020000 	beq	zero,v0,6568 <__isr_vec_space+0x6548>
    6568:	00000019 	multu	zero,zero
    656c:	00298704 	0x298704
    6570:	19270200 	0x19270200
    6574:	05000000 	bltz	t0,6578 <__isr_vec_space+0x6558>
    6578:	00002815 	0x2815
    657c:	85016103 	lh	at,24835(t0)
    6580:	02000000 	0x2000000
    6584:	010e0704 	0x10e0704
    6588:	04060000 	0x4060000
    658c:	00ab4a02 	0xab4a02
    6590:	0f070000 	jal	c1c0000 <__memory_size+0xc1a0800>
    6594:	02000028 	0x2000028
    6598:	0000794c 	syscall	0x1e5
    659c:	27c10700 	addiu	at,s8,1792
    65a0:	4d020000 	lwxc1	$f0,v0(t0)
    65a4:	000000ab 	0xab
    65a8:	00350800 	0x350800
    65ac:	00bb0000 	0xbb0000
    65b0:	bb090000 	swr	t1,0(t8)
    65b4:	03000000 	0x3000000
    65b8:	07040200 	0x7040200
    65bc:	00000132 	tlt	zero,zero,0x4
    65c0:	4702080a 	bz.b	$w2,85ec <__isr_vec_space+0x85cc>
    65c4:	000000e3 	0xe3
    65c8:	0029710b 	0x29710b
    65cc:	27490200 	addiu	t1,k0,512
    65d0:	00000000 	nop
    65d4:	0029790b 	0x29790b
    65d8:	8c4e0200 	lw	t6,512(v0)
    65dc:	04000000 	bltz	zero,65e0 <__isr_vec_space+0x65c0>
    65e0:	28720400 	slti	s2,v1,1024
    65e4:	4f020000 	lwxc1	$f0,v0(t8)
    65e8:	000000c2 	srl	zero,zero,0x3
    65ec:	00278404 	0x278404
    65f0:	58530200 	0x58530200
    65f4:	0c000000 	jal	0 <hardware_exit_hook>
    65f8:	29b90404 	slti	t9,t5,1028
    65fc:	16040000 	bne	s0,a0,6600 <__isr_vec_space+0x65e0>
    6600:	00000020 	add	zero,zero,zero
    6604:	0027950d 	break	0x27,0x254
    6608:	2d041800 	sltiu	a0,t0,6144
    660c:	00000159 	0x159
    6610:	0029250b 	0x29250b
    6614:	592f0400 	0x592f0400
    6618:	00000001 	movf	zero,zero,$fcc0
    661c:	006b5f0e 	0x6b5f0e
    6620:	00273004 	sllv	a2,a3,at
    6624:	0b040000 	j	c100000 <__memory_size+0xc0e0800>
    6628:	0000295c 	0x295c
    662c:	00273004 	sllv	a2,a3,at
    6630:	0b080000 	j	c200000 <__memory_size+0xc1e0800>
    6634:	0000277e 	0x277e
    6638:	00273004 	sllv	a2,a3,at
    663c:	0b0c0000 	j	c300000 <__memory_size+0xc2e0800>
    6640:	00002a00 	sll	a1,zero,0x8
    6644:	00273004 	sllv	a2,a3,at
    6648:	0e100000 	jal	8400000 <__memory_size+0x83e0800>
    664c:	0400785f 	bltz	zero,247cc <__memory_size+0x4fcc>
    6650:	00015f31 	tgeu	zero,at,0x17c
    6654:	0f001400 	jal	c005000 <__memory_size+0xbfe5800>
    6658:	00010604 	0x10604
    665c:	00fb0800 	0xfb0800
    6660:	016f0000 	0x16f0000
    6664:	bb090000 	swr	t1,0(t8)
    6668:	00000000 	nop
    666c:	27bc0d00 	addiu	gp,sp,3328
    6670:	04240000 	0x4240000
    6674:	0001e835 	0x1e835
    6678:	26e70b00 	addiu	a3,s7,2816
    667c:	37040000 	ori	a0,t8,0x0
    6680:	00000027 	nor	zero,zero,zero
    6684:	298f0b00 	slti	t7,t4,2816
    6688:	38040000 	xori	a0,zero,0x0
    668c:	00000027 	nor	zero,zero,zero
    6690:	26f60b04 	addiu	s6,s7,2820
    6694:	39040000 	xori	a0,t0,0x0
    6698:	00000027 	nor	zero,zero,zero
    669c:	288f0b08 	slti	t7,a0,2824
    66a0:	3a040000 	xori	a0,s0,0x0
    66a4:	00000027 	nor	zero,zero,zero
    66a8:	283c0b0c 	slti	gp,at,2828
    66ac:	3b040000 	xori	a0,t8,0x0
    66b0:	00000027 	nor	zero,zero,zero
    66b4:	282b0b10 	slti	t3,at,2832
    66b8:	3c040000 	lui	a0,0x0
    66bc:	00000027 	nor	zero,zero,zero
    66c0:	2a050b14 	slti	a1,s0,2836
    66c4:	3d040000 	0x3d040000
    66c8:	00000027 	nor	zero,zero,zero
    66cc:	28a70b18 	slti	a3,a1,2840
    66d0:	3e040000 	0x3e040000
    66d4:	00000027 	nor	zero,zero,zero
    66d8:	2a400b1c 	slti	zero,s2,2844
    66dc:	3f040000 	0x3f040000
    66e0:	00000027 	nor	zero,zero,zero
    66e4:	05100020 	bltzal	t0,6768 <__isr_vec_space+0x6748>
    66e8:	08000027 	j	9c <__isr_vec_space+0x7c>
    66ec:	28480401 	slti	t0,v0,1025
    66f0:	0b000002 	j	c000008 <__memory_size+0xbfe0808>
    66f4:	00002771 	tgeu	zero,zero,0x9d
    66f8:	02284904 	0x2284904
    66fc:	0b000000 	j	c000000 <__memory_size+0xbfe0800>
    6700:	00002682 	srl	a0,zero,0x1a
    6704:	02284a04 	0x2284a04
    6708:	11800000 	beqz	t4,670c <__isr_vec_space+0x66ec>
    670c:	000029ab 	0x29ab
    6710:	00fb4c04 	0xfb4c04
    6714:	01000000 	0x1000000
    6718:	00272a11 	0x272a11
    671c:	fb4f0400 	sdc2	$15,1024(k0)
    6720:	04000000 	bltz	zero,6724 <__isr_vec_space+0x6704>
    6724:	f9080001 	sdc2	$8,1(t0)
    6728:	38000000 	xori	zero,zero,0x0
    672c:	09000002 	j	4000008 <__memory_size+0x3fe0808>
    6730:	000000bb 	0xbb
    6734:	7a10001f 	0x7a10001f
    6738:	90000026 	lbu	zero,38(zero)
    673c:	765b0401 	jalx	96c1004 <__memory_size+0x96a1804>
    6740:	0b000002 	j	c000008 <__memory_size+0xbfe0808>
    6744:	00002925 	0x2925
    6748:	02765c04 	0x2765c04
    674c:	0b000000 	j	c000000 <__memory_size+0xbfe0800>
    6750:	0000293d 	0x293d
    6754:	00275d04 	0x275d04
    6758:	0b040000 	j	c100000 <__memory_size+0xc0e0800>
    675c:	00002779 	0x2779
    6760:	027c5f04 	0x27c5f04
    6764:	0b080000 	j	c200000 <__memory_size+0xc1e0800>
    6768:	00002705 	0x2705
    676c:	01e86004 	sllv	t4,t0,t7
    6770:	00880000 	0x880000
    6774:	0238040f 	0x238040f
    6778:	8c080000 	lw	t0,0(zero)
    677c:	8c000002 	lw	zero,2(zero)
    6780:	09000002 	j	4000008 <__memory_size+0x3fe0808>
    6784:	000000bb 	0xbb
    6788:	040f001f 	0x40f001f
    678c:	00000292 	0x292
    6790:	28b10d12 	slti	s1,a1,3346
    6794:	04080000 	tgei	zero,0
    6798:	0002b873 	tltu	zero,v0,0x2e1
    679c:	2dac0b00 	sltiu	t4,t5,2816
    67a0:	74040000 	jalx	100000 <__memory_size+0xe0800>
    67a4:	000002b8 	0x2b8
    67a8:	2d7a0b00 	sltiu	k0,t3,2816
    67ac:	75040000 	jalx	4100000 <__memory_size+0x40e0800>
    67b0:	00000027 	nor	zero,zero,zero
    67b4:	040f0004 	0x40f0004
    67b8:	00000035 	0x35
    67bc:	00290f0d 	break	0x29,0x3c
    67c0:	b3046800 	0xb3046800
    67c4:	000003e8 	0x3e8
    67c8:	00705f0e 	0x705f0e
    67cc:	02b8b404 	0x2b8b404
    67d0:	0e000000 	jal	8000000 <__memory_size+0x7fe0800>
    67d4:	0400725f 	bltz	zero,23154 <__memory_size+0x3954>
    67d8:	000027b5 	0x27b5
    67dc:	5f0e0400 	0x5f0e0400
    67e0:	b6040077 	0xb6040077
    67e4:	00000027 	nor	zero,zero,zero
    67e8:	27230b08 	addiu	v1,t9,2824
    67ec:	b7040000 	0xb7040000
    67f0:	0000003c 	0x3c
    67f4:	27d80b0c 	addiu	t8,s8,2828
    67f8:	b8040000 	swr	a0,0(zero)
    67fc:	0000003c 	0x3c
    6800:	625f0e0e 	0x625f0e0e
    6804:	b9040066 	swr	a0,102(t0)
    6808:	00000293 	0x293
    680c:	26c10b10 	addiu	at,s6,2832
    6810:	ba040000 	swr	a0,0(s0)
    6814:	00000027 	nor	zero,zero,zero
    6818:	27130b18 	addiu	s3,t8,2840
    681c:	c1040000 	ll	a0,0(t0)
    6820:	000000f9 	0xf9
    6824:	27ac0b1c 	addiu	t4,sp,2844
    6828:	c3040000 	ll	a0,0(t8)
    682c:	0000054b 	0x54b
    6830:	28240b20 	slti	a0,at,2848
    6834:	c5040000 	lwc1	$f4,0(t0)
    6838:	0000057a 	0x57a
    683c:	29810b24 	slti	at,t4,2852
    6840:	c8040000 	lwc2	$4,0(zero)
    6844:	0000059e 	0x59e
    6848:	2a5a0b28 	slti	k0,s2,2856
    684c:	c9040000 	lwc2	$4,0(t0)
    6850:	000005b8 	0x5b8
    6854:	755f0e2c 	jalx	57c38b0 <__memory_size+0x57a40b0>
    6858:	cc040062 	pref	0x4,98(zero)
    685c:	00000293 	0x293
    6860:	755f0e30 	jalx	57c38c0 <__memory_size+0x57a40c0>
    6864:	cd040070 	pref	0x4,112(t0)
    6868:	000002b8 	0x2b8
    686c:	755f0e38 	jalx	57c38e0 <__memory_size+0x57a40e0>
    6870:	ce040072 	pref	0x4,114(s0)
    6874:	00000027 	nor	zero,zero,zero
    6878:	26f00b3c 	addiu	s0,s7,2876
    687c:	d1040000 	0xd1040000
    6880:	000005be 	0x5be
    6884:	2a320b40 	slti	s2,s1,2880
    6888:	d2040000 	0xd2040000
    688c:	000005ce 	0x5ce
    6890:	6c5f0e43 	0x6c5f0e43
    6894:	d5040062 	ldc1	$f4,98(t0)
    6898:	00000293 	0x293
    689c:	27390b44 	addiu	t9,t9,2884
    68a0:	d8040000 	ldc2	$4,0(zero)
    68a4:	00000027 	nor	zero,zero,zero
    68a8:	274a0b4c 	addiu	t2,k0,2892
    68ac:	d9040000 	ldc2	$4,0(t0)
    68b0:	00000063 	0x63
    68b4:	2a7f0b50 	slti	ra,s3,2896
    68b8:	dc040000 	ldc3	$4,0(zero)
    68bc:	00000406 	0x406
    68c0:	2b850b54 	slti	a1,gp,2900
    68c4:	e0040000 	sc	a0,0(zero)
    68c8:	000000ee 	0xee
    68cc:	29170b58 	slti	s7,t0,2904
    68d0:	e2040000 	sc	a0,0(s0)
    68d4:	000000e3 	0xe3
    68d8:	281c0b5c 	slti	gp,zero,2908
    68dc:	e3040000 	sc	a0,0(t8)
    68e0:	00000027 	nor	zero,zero,zero
    68e4:	27130064 	addiu	s3,t8,100
    68e8:	06000000 	bltz	s0,68ec <__isr_vec_space+0x68cc>
    68ec:	14000004 	bnez	zero,6900 <__isr_vec_space+0x68e0>
    68f0:	00000406 	0x406
    68f4:	0000f914 	0xf914
    68f8:	053e1400 	0x53e1400
    68fc:	27140000 	addiu	s4,t8,0
    6900:	00000000 	nop
    6904:	040c040f 	teqi	zero,1039
    6908:	64150000 	0x64150000
    690c:	28000029 	slti	zero,zero,41
    6910:	02390404 	0x2390404
    6914:	0000053e 	0x53e
    6918:	0028a016 	0x28a016
    691c:	023b0400 	0x23b0400
    6920:	00000027 	nor	zero,zero,zero
    6924:	27321600 	addiu	s2,t9,5632
    6928:	40040000 	mfc0	a0,c0_index
    692c:	00062502 	srl	a0,a2,0x14
    6930:	c8160400 	lwc2	$22,1024(zero)
    6934:	04000027 	bltz	zero,69d4 <__isr_vec_space+0x69b4>
    6938:	06250240 	0x6250240
    693c:	16080000 	bne	s0,t0,6940 <__isr_vec_space+0x6920>
    6940:	0000278d 	break	0x0,0x9e
    6944:	25024004 	addiu	v0,t0,16388
    6948:	0c000006 	jal	18 <ABIFlags_flags2+0x4>
    694c:	00293816 	0x293816
    6950:	02420400 	0x2420400
    6954:	00000027 	nor	zero,zero,zero
    6958:	26961610 	addiu	s6,s4,5648
    695c:	43040000 	c0	0x1040000
    6960:	00080702 	srl	zero,t0,0x1c
    6964:	e1161400 	sc	s6,5120(t0)
    6968:	04000029 	bltz	zero,6a10 <__isr_vec_space+0x69f0>
    696c:	00270245 	0x270245
    6970:	16300000 	bne	s1,s0,6974 <__isr_vec_space+0x6954>
    6974:	00002942 	srl	a1,zero,0x5
    6978:	6f024604 	0x6f024604
    697c:	34000005 	li	zero,0x5
    6980:	00284516 	0x284516
    6984:	02480400 	0x2480400
    6988:	00000027 	nor	zero,zero,zero
    698c:	29521638 	slti	s2,t2,5688
    6990:	4a040000 	c2	0x40000
    6994:	00082202 	srl	a0,t0,0x8
    6998:	07163c00 	0x7163c00
    699c:	04000028 	bltz	zero,6a40 <__isr_vec_space+0x6a20>
    69a0:	0159024d 	break	0x159,0x9
    69a4:	16400000 	bnez	s2,69a8 <__isr_vec_space+0x6988>
    69a8:	000027b2 	tlt	zero,zero,0x9e
    69ac:	27024e04 	addiu	v0,t8,19972
    69b0:	44000000 	mfc1	zero,$f0
    69b4:	002a7416 	0x2a7416
    69b8:	024f0400 	0x24f0400
    69bc:	00000159 	0x159
    69c0:	28681648 	slti	t0,v1,5704
    69c4:	50040000 	beql	zero,a0,69c8 <__isr_vec_space+0x69a8>
    69c8:	00082802 	srl	a1,t0,0x0
    69cc:	d0164c00 	0xd0164c00
    69d0:	04000027 	bltz	zero,6a70 <__isr_vec_space+0x6a50>
    69d4:	00270253 	0x270253
    69d8:	16500000 	bne	s2,s0,69dc <__isr_vec_space+0x69bc>
    69dc:	00002742 	srl	a0,zero,0x1d
    69e0:	3e025404 	0x3e025404
    69e4:	54000005 	bnezl	zero,69fc <__isr_vec_space+0x69dc>
    69e8:	00289916 	0x289916
    69ec:	02770400 	0x2770400
    69f0:	000007e5 	0x7e5
    69f4:	267a1758 	addiu	k0,s3,5976
    69f8:	7b040000 	xori.b	$w0,$w0,0x4
    69fc:	00027602 	srl	t6,v0,0x18
    6a00:	17014800 	bne	t8,at,18a04 <__isr_vec_space+0x189e4>
    6a04:	000027e5 	0x27e5
    6a08:	38027c04 	xori	v0,zero,0x7c04
    6a0c:	4c000002 	mfc3	zero,$0,2
    6a10:	2a281701 	slti	t0,s1,5889
    6a14:	80040000 	lb	a0,0(zero)
    6a18:	00083902 	srl	a3,t0,0x4
    6a1c:	1702dc00 	bne	t8,v0,ffffda20 <__flash_start+0x403fda20>
    6a20:	0000271b 	0x271b
    6a24:	ea028504 	swc2	$2,-31484(s0)
    6a28:	e0000005 	sc	zero,5(zero)
    6a2c:	27001702 	addiu	zero,t8,5890
    6a30:	86040000 	lh	a0,0(s0)
    6a34:	00084502 	srl	t0,t0,0x14
    6a38:	0002ec00 	sll	sp,v0,0x10
    6a3c:	0544040f 	0x544040f
    6a40:	01020000 	0x1020000
    6a44:	00007108 	0x7108
    6a48:	e8040f00 	swc2	$4,3840(zero)
    6a4c:	13000003 	beqz	t8,6a5c <__isr_vec_space+0x6a3c>
    6a50:	00000027 	nor	zero,zero,zero
    6a54:	0000056f 	0x56f
    6a58:	00040614 	0x40614
    6a5c:	00f91400 	0xf91400
    6a60:	6f140000 	0x6f140000
    6a64:	14000005 	bnez	zero,6a7c <__isr_vec_space+0x6a5c>
    6a68:	00000027 	nor	zero,zero,zero
    6a6c:	75040f00 	jalx	4103c00 <__memory_size+0x40e4400>
    6a70:	18000005 	blez	zero,6a88 <__isr_vec_space+0x6a68>
    6a74:	00000544 	0x544
    6a78:	0551040f 	bgezal	t2,7ab8 <__isr_vec_space+0x7a98>
    6a7c:	6e130000 	0x6e130000
    6a80:	9e000000 	0x9e000000
    6a84:	14000005 	bnez	zero,6a9c <__isr_vec_space+0x6a7c>
    6a88:	00000406 	0x406
    6a8c:	0000f914 	0xf914
    6a90:	006e1400 	0x6e1400
    6a94:	27140000 	addiu	s4,t8,0
    6a98:	00000000 	nop
    6a9c:	0580040f 	bltz	t4,7adc <__isr_vec_space+0x7abc>
    6aa0:	27130000 	addiu	s3,t8,0
    6aa4:	b8000000 	swr	zero,0(zero)
    6aa8:	14000005 	bnez	zero,6ac0 <__isr_vec_space+0x6aa0>
    6aac:	00000406 	0x406
    6ab0:	0000f914 	0xf914
    6ab4:	040f0000 	0x40f0000
    6ab8:	000005a4 	0x5a4
    6abc:	00003508 	0x3508
    6ac0:	0005ce00 	sll	t9,a1,0x18
    6ac4:	00bb0900 	0xbb0900
    6ac8:	00020000 	sll	zero,v0,0x0
    6acc:	00003508 	0x3508
    6ad0:	0005de00 	sll	k1,a1,0x18
    6ad4:	00bb0900 	0xbb0900
    6ad8:	00000000 	nop
    6adc:	0028be05 	0x28be05
    6ae0:	011d0400 	0x11d0400
    6ae4:	000002be 	0x2be
    6ae8:	002a0f19 	0x2a0f19
    6aec:	21040c00 	addi	a0,t0,3072
    6af0:	00061f01 	0x61f01
    6af4:	29251600 	slti	a1,t1,5632
    6af8:	23040000 	addi	a0,t8,0
    6afc:	00061f01 	0x61f01
    6b00:	de160000 	ldc3	$22,0(s0)
    6b04:	04000027 	bltz	zero,6ba4 <__isr_vec_space+0x6b84>
    6b08:	00270124 	0x270124
    6b0c:	16040000 	bne	s0,a0,6b10 <__isr_vec_space+0x6af0>
    6b10:	000028b8 	0x28b8
    6b14:	25012504 	addiu	at,t0,9476
    6b18:	08000006 	j	18 <ABIFlags_flags2+0x4>
    6b1c:	ea040f00 	swc2	$4,3840(s0)
    6b20:	0f000005 	jal	c000014 <__memory_size+0xbfe0814>
    6b24:	0005de04 	0x5de04
    6b28:	268e1900 	addiu	t6,s4,6400
    6b2c:	040e0000 	tnei	zero,0
    6b30:	0660013d 	bltz	s3,7028 <__isr_vec_space+0x7008>
    6b34:	6b160000 	0x6b160000
    6b38:	04000029 	bltz	zero,6be0 <__isr_vec_space+0x6bc0>
    6b3c:	0660013e 	bltz	s3,7038 <__isr_vec_space+0x7018>
    6b40:	16000000 	bnez	s0,6b44 <__isr_vec_space+0x6b24>
    6b44:	00002998 	0x2998
    6b48:	60013f04 	0x60013f04
    6b4c:	06000006 	bltz	s0,6b68 <__isr_vec_space+0x6b48>
    6b50:	0029b416 	0x29b416
    6b54:	01400400 	0x1400400
    6b58:	00000043 	sra	zero,zero,0x1
    6b5c:	4308000c 	c0	0x108000c
    6b60:	70000000 	madd	zero,zero
    6b64:	09000006 	j	4000018 <__memory_size+0x3fe0818>
    6b68:	000000bb 	0xbb
    6b6c:	d01a0002 	0xd01a0002
    6b70:	71025804 	0x71025804
    6b74:	16000007 	bnez	s0,6b94 <__isr_vec_space+0x6b74>
    6b78:	000029f3 	tltu	zero,zero,0xa7
    6b7c:	85025a04 	lh	v0,23044(t0)
    6b80:	00000000 	nop
    6b84:	00299e16 	0x299e16
    6b88:	025b0400 	0x25b0400
    6b8c:	0000053e 	0x53e
    6b90:	27fa1604 	addiu	k0,ra,5636
    6b94:	5c040000 	0x5c040000
    6b98:	00077102 	srl	t6,a3,0x4
    6b9c:	4b160800 	c2	0x1160800
    6ba0:	0400002a 	bltz	zero,6c4c <__isr_vec_space+0x6c2c>
    6ba4:	016f025d 	0x16f025d
    6ba8:	16240000 	bne	s1,a0,6bac <__isr_vec_space+0x6b8c>
    6bac:	0000279d 	0x279d
    6bb0:	27025e04 	addiu	v0,t8,24068
    6bb4:	48000000 	mfc2	zero,$0
    6bb8:	00292016 	0x292016
    6bbc:	025f0400 	0x25f0400
    6bc0:	00000051 	0x51
    6bc4:	2a611650 	slti	at,s3,5712
    6bc8:	60040000 	0x60040000
    6bcc:	00062b02 	srl	a1,a2,0xc
    6bd0:	2b165800 	slti	s6,t8,22528
    6bd4:	04000029 	bltz	zero,6c7c <__isr_vec_space+0x6c5c>
    6bd8:	00e30261 	0xe30261
    6bdc:	16680000 	bne	s3,t0,6be0 <__isr_vec_space+0x6bc0>
    6be0:	00002a66 	0x2a66
    6be4:	e3026204 	sc	v0,25092(t8)
    6be8:	70000000 	madd	zero,zero
    6bec:	0026d916 	0x26d916
    6bf0:	02630400 	0x2630400
    6bf4:	000000e3 	0xe3
    6bf8:	2a1e1678 	slti	s8,s0,5752
    6bfc:	64040000 	0x64040000
    6c00:	00078102 	srl	s0,a3,0x4
    6c04:	ee168000 	swc3	$22,-32768(s0)
    6c08:	04000027 	bltz	zero,6ca8 <__isr_vec_space+0x6c88>
    6c0c:	07910265 	bgezal	gp,75a4 <__isr_vec_space+0x7584>
    6c10:	16880000 	bne	s4,t0,6c14 <__isr_vec_space+0x6bf4>
    6c14:	000029c1 	0x29c1
    6c18:	27026604 	addiu	v0,t8,26116
    6c1c:	a0000000 	sb	zero,0(zero)
    6c20:	00276316 	0x276316
    6c24:	02670400 	0x2670400
    6c28:	000000e3 	0xe3
    6c2c:	26ca16a4 	addiu	t2,s6,5796
    6c30:	68040000 	0x68040000
    6c34:	0000e302 	srl	gp,zero,0xc
    6c38:	5216ac00 	beql	s0,s6,ffff1c3c <__flash_start+0x403f1c3c>
    6c3c:	04000027 	bltz	zero,6cdc <__isr_vec_space+0x6cbc>
    6c40:	00e30269 	0xe30269
    6c44:	16b40000 	bne	s5,s4,6c48 <__isr_vec_space+0x6c28>
    6c48:	000026a1 	0x26a1
    6c4c:	e3026a04 	sc	v0,27140(t8)
    6c50:	bc000000 	cache	0x0,0(zero)
    6c54:	0026b016 	0x26b016
    6c58:	026b0400 	0x26b0400
    6c5c:	000000e3 	0xe3
    6c60:	289e16c4 	slti	s8,a0,5828
    6c64:	6c040000 	0x6c040000
    6c68:	00002702 	srl	a0,zero,0x1c
    6c6c:	0800cc00 	j	33000 <__memory_size+0x13800>
    6c70:	00000544 	0x544
    6c74:	00000781 	0x781
    6c78:	0000bb09 	0xbb09
    6c7c:	08001900 	j	6400 <__isr_vec_space+0x63e0>
    6c80:	00000544 	0x544
    6c84:	00000791 	0x791
    6c88:	0000bb09 	0xbb09
    6c8c:	08000700 	j	1c00 <__isr_vec_space+0x1be0>
    6c90:	00000544 	0x544
    6c94:	000007a1 	0x7a1
    6c98:	0000bb09 	0xbb09
    6c9c:	1a001700 	blez	s0,c8a0 <__isr_vec_space+0xc880>
    6ca0:	027104f0 	tge	s3,s1,0x13
    6ca4:	000007c5 	0x7c5
    6ca8:	00283516 	0x283516
    6cac:	02740400 	0x2740400
    6cb0:	000007c5 	0x7c5
    6cb4:	2a151600 	slti	s5,s0,5632
    6cb8:	75040000 	jalx	4100000 <__memory_size+0x40e0800>
    6cbc:	0007d502 	srl	k0,a3,0x14
    6cc0:	08007800 	j	1e000 <__isr_vec_space+0x1dfe0>
    6cc4:	000002b8 	0x2b8
    6cc8:	000007d5 	0x7d5
    6ccc:	0000bb09 	0xbb09
    6cd0:	08001d00 	j	7400 <__isr_vec_space+0x73e0>
    6cd4:	00000085 	lsa	zero,zero,zero,0x3
    6cd8:	000007e5 	0x7e5
    6cdc:	0000bb09 	0xbb09
    6ce0:	1b001d00 	blez	t8,e0e4 <__isr_vec_space+0xe0c4>
    6ce4:	025604f0 	tge	s2,s6,0x13
    6ce8:	00000807 	srav	at,zero,zero
    6cec:	0029641c 	0x29641c
    6cf0:	026d0400 	0x26d0400
    6cf4:	00000670 	tge	zero,zero,0x19
    6cf8:	002a381c 	0x2a381c
    6cfc:	02760400 	0x2760400
    6d00:	000007a1 	0x7a1
    6d04:	05440800 	0x5440800
    6d08:	08170000 	j	5c0000 <__memory_size+0x5a0800>
    6d0c:	bb090000 	swr	t1,0(t8)
    6d10:	18000000 	blez	zero,6d14 <__isr_vec_space+0x6cf4>
    6d14:	08221d00 	j	887400 <__memory_size+0x867c00>
    6d18:	06140000 	0x6140000
    6d1c:	00000004 	sllv	zero,zero,zero
    6d20:	0817040f 	j	5c103c <__memory_size+0x5a183c>
    6d24:	040f0000 	0x40f0000
    6d28:	00000159 	0x159
    6d2c:	0008391d 	0x8391d
    6d30:	00271400 	0x271400
    6d34:	0f000000 	jal	c000000 <__memory_size+0xbfe0800>
    6d38:	00083f04 	0x83f04
    6d3c:	2e040f00 	sltiu	a0,s0,3840
    6d40:	08000008 	j	20 <__isr_vec_space>
    6d44:	000005de 	0x5de
    6d48:	00000855 	0x855
    6d4c:	0000bb09 	0xbb09
    6d50:	1e000200 	bgtz	s0,7554 <__isr_vec_space+0x7534>
    6d54:	00002a79 	0x2a79
    6d58:	040c1705 	teqi	zero,5893
    6d5c:	03050000 	0x3050000
    6d60:	8000be00 	lb	zero,-16896(zero)
    6d64:	0029d51f 	0x29d51f
    6d68:	02fa0400 	0x2fa0400
    6d6c:	00000406 	0x406
    6d70:	c2580305 	ll	t8,773(s2)
    6d74:	ce1f8000 	pref	0x1f,-32768(s0)
    6d78:	04000029 	bltz	zero,6e20 <__isr_vec_space+0x6e00>
    6d7c:	088a02fb 	j	2280bec <__memory_size+0x22613ec>
    6d80:	03050000 	0x3050000
    6d84:	8000c254 	lb	zero,-15788(zero)
    6d88:	00040618 	0x40618
    6d8c:	00e50000 	0xe50000
    6d90:	00040000 	sll	zero,a0,0x0
    6d94:	0000164f 	0x164f
    6d98:	25c50104 	addiu	a1,t6,260
    6d9c:	d0010000 	0xd0010000
    6da0:	2000002a 	addi	zero,zero,42
    6da4:	388000b0 	xori	zero,a0,0xb0
    6da8:	21000000 	addi	zero,t0,0
    6dac:	02000030 	tge	s0,zero
    6db0:	015a0504 	0x15a0504
    6db4:	72030000 	madd	s0,v1
    6db8:	02000004 	sllv	zero,zero,s0
    6dbc:	000033d4 	0x33d4
    6dc0:	07040200 	0x7040200
    6dc4:	00000109 	0x109
    6dc8:	69050404 	0x69050404
    6dcc:	0200746e 	0x200746e
    6dd0:	006a0601 	0x6a0601
    6dd4:	01020000 	0x1020000
    6dd8:	00006808 	0x6808
    6ddc:	05020200 	bltzl	t0,75e0 <__isr_vec_space+0x75c0>
    6de0:	0000019b 	0x19b
    6de4:	93070202 	lbu	a3,514(t8)
    6de8:	02000000 	0x2000000
    6dec:	01550508 	0x1550508
    6df0:	08020000 	j	80000 <__memory_size+0x60800>
    6df4:	00010407 	0x10407
    6df8:	07040200 	0x7040200
    6dfc:	0000010e 	0x10e
    6e00:	32070402 	andi	a3,s0,0x402
    6e04:	05000001 	bltz	t0,6e0c <__isr_vec_space+0x6dec>
    6e08:	00004804 	sllv	t1,zero,zero
    6e0c:	08010200 	j	40800 <__memory_size+0x21000>
    6e10:	00000071 	tgeu	zero,zero,0x1
    6e14:	0022b406 	0x22b406
    6e18:	3a160300 	xori	s6,s0,0x300
    6e1c:	20000000 	addi	zero,zero,0
    6e20:	388000b0 	xori	zero,a0,0xb0
    6e24:	01000000 	0x1000000
    6e28:	0000e19c 	0xe19c
    6e2c:	316d0700 	andi	t5,t3,0x700
    6e30:	e1350100 	sc	s5,256(t1)
    6e34:	01000000 	0x1000000
    6e38:	326d0754 	andi	t5,s3,0x754
    6e3c:	e1350100 	sc	s5,256(t1)
    6e40:	01000000 	0x1000000
    6e44:	006e0855 	0x6e0855
    6e48:	00283501 	0x283501
    6e4c:	004a0000 	0x4a0000
    6e50:	73090000 	madd	t8,t1
    6e54:	3b010031 	xori	at,t8,0x31
    6e58:	00000079 	0x79
    6e5c:	0000008f 	sync	0x2
    6e60:	00327309 	0x327309
    6e64:	00793c01 	0x793c01
    6e68:	00df0000 	0xdf0000
    6e6c:	05000000 	bltz	t0,6e70 <__isr_vec_space+0x6e50>
    6e70:	0000e704 	0xe704
    6e74:	f6000a00 	sdc1	$f0,2560(s0)
    6e78:	02000000 	0x2000000
    6e7c:	0016db00 	sll	k1,s6,0xc
    6e80:	4a010400 	c2	0x10400
    6e84:	58000031 	blezl	zero,6f4c <__isr_vec_space+0x6f2c>
    6e88:	f48000b0 	sdc1	$f0,176(a0)
    6e8c:	2f8000b3 	sltiu	zero,gp,179
    6e90:	61726373 	0x61726373
    6e94:	2f686374 	sltiu	t0,k1,25460
    6e98:	2f66706d 	sltiu	a2,k1,28781
    6e9c:	73626f6a 	s16ldd	xr13,k1,310,ptn0
    6ea0:	3334352f 	andi	s4,t9,0x352f
    6ea4:	342f3539 	ori	t7,at,0x3539
    6ea8:	34393038 	ori	t9,at,0x3038
    6eac:	3034322f 	andi	s4,at,0x322f
    6eb0:	2f383931 	sltiu	t8,t9,14641
    6eb4:	72616873 	d32sar	xr1,xr10,xr5,xr8,9
    6eb8:	672f6465 	0x672f6465
    6ebc:	6e2f6363 	0x6e2f6363
    6ec0:	696c7765 	0x696c7765
    6ec4:	696c2f62 	0x696c2f62
    6ec8:	6d2f6362 	0x6d2f6362
    6ecc:	69686361 	0x69686361
    6ed0:	6d2f656e 	0x6d2f656e
    6ed4:	2f737069 	sltiu	s3,k1,28777
    6ed8:	636d656d 	0x636d656d
    6edc:	532e7970 	beql	t9,t6,254a0 <__memory_size+0x5ca0>
    6ee0:	63732f00 	0x63732f00
    6ee4:	63746172 	0x63746172
    6ee8:	706d2f68 	lxhu	a1,v1,t5,3
    6eec:	6f6a2f66 	0x6f6a2f66
    6ef0:	352f7362 	ori	t7,t1,0x7362
    6ef4:	35393334 	ori	t9,t1,0x3334
    6ef8:	3038342f 	andi	t8,at,0x342f
    6efc:	322f3439 	andi	t7,s1,0x3439
    6f00:	36323034 	ori	s2,s1,0x3034
    6f04:	6f772f32 	0x6f772f32
    6f08:	6f2f6b72 	0x6f2f6b72
    6f0c:	6d2d6a62 	0x6d2d6a62
    6f10:	2d737069 	sltiu	s3,t3,28777
    6f14:	2d69746d 	sltiu	t1,t3,29805
    6f18:	2f666c65 	sltiu	a2,k1,27749
    6f1c:	2f636367 	sltiu	v1,k1,25447
    6f20:	7370696d 	s16sdi	xr5,k1,52,
    6f24:	69746d2d 	0x69746d2d
    6f28:	666c652d 	0x666c652d
    6f2c:	70696d2f 	0x70696d2f
    6f30:	2d6c6573 	sltiu	t4,t3,25971
    6f34:	732d3272 	0x732d3272
    6f38:	2d74666f 	sltiu	s4,t3,26223
    6f3c:	6c77656e 	0x6c77656e
    6f40:	6c2f6269 	0x6c2f6269
    6f44:	6e2f6269 	0x6e2f6269
    6f48:	696c7765 	0x696c7765
    6f4c:	696c2f62 	0x696c2f62
    6f50:	6d2f6362 	0x6d2f6362
    6f54:	69686361 	0x69686361
    6f58:	6d2f656e 	0x6d2f656e
    6f5c:	00737069 	0x737069
    6f60:	20554e47 	addi	s5,v0,20039
    6f64:	32205341 	andi	zero,s1,0x5341
    6f68:	2e34322e 	sltiu	s4,s1,12846
    6f6c:	01003039 	0x1003039
    6f70:	0000f680 	sll	s8,zero,0x1a
    6f74:	ef000200 	swc3	$0,512(t8)
    6f78:	04000016 	bltz	zero,6fd4 <__isr_vec_space+0x6fb4>
    6f7c:	0032c301 	0x32c301
    6f80:	00b3f400 	0xb3f400
    6f84:	00b52080 	0xb52080
    6f88:	63732f80 	0x63732f80
    6f8c:	63746172 	0x63746172
    6f90:	706d2f68 	lxhu	a1,v1,t5,3
    6f94:	6f6a2f66 	0x6f6a2f66
    6f98:	352f7362 	ori	t7,t1,0x7362
    6f9c:	35393334 	ori	t9,t1,0x3334
    6fa0:	3038342f 	andi	t8,at,0x342f
    6fa4:	322f3439 	andi	t7,s1,0x3439
    6fa8:	39313034 	xori	s1,t1,0x3034
    6fac:	68732f38 	0x68732f38
    6fb0:	64657261 	0x64657261
    6fb4:	6363672f 	0x6363672f
    6fb8:	77656e2f 	jalx	d95b8bc <__memory_size+0xd93c0bc>
    6fbc:	2f62696c 	sltiu	v0,k1,26988
    6fc0:	6362696c 	0x6362696c
    6fc4:	63616d2f 	0x63616d2f
    6fc8:	656e6968 	0x656e6968
    6fcc:	70696d2f 	0x70696d2f
    6fd0:	656d2f73 	0x656d2f73
    6fd4:	7465736d 	jalx	195cdb4 <__memory_size+0x193d5b4>
    6fd8:	2f00532e 	sltiu	zero,t8,21294
    6fdc:	61726373 	0x61726373
    6fe0:	2f686374 	sltiu	t0,k1,25460
    6fe4:	2f66706d 	sltiu	a2,k1,28781
    6fe8:	73626f6a 	s16ldd	xr13,k1,310,ptn0
    6fec:	3334352f 	andi	s4,t9,0x352f
    6ff0:	342f3539 	ori	t7,at,0x3539
    6ff4:	34393038 	ori	t9,at,0x3038
    6ff8:	3034322f 	andi	s4,at,0x322f
    6ffc:	2f323632 	sltiu	s2,t9,13874
    7000:	6b726f77 	0x6b726f77
    7004:	6a626f2f 	0x6a626f2f
    7008:	70696d2d 	s16sdi	xr4,v1,182,ptn1
    700c:	746d2d73 	jalx	1b4b5cc <__memory_size+0x1b2bdcc>
    7010:	6c652d69 	0x6c652d69
    7014:	63672f66 	0x63672f66
    7018:	696d2f63 	0x696d2f63
    701c:	6d2d7370 	0x6d2d7370
    7020:	652d6974 	0x652d6974
    7024:	6d2f666c 	0x6d2f666c
    7028:	65737069 	0x65737069
    702c:	32722d6c 	andi	s2,s3,0x2d6c
    7030:	666f732d 	0x666f732d
    7034:	656e2d74 	0x656e2d74
    7038:	62696c77 	0x62696c77
    703c:	62696c2f 	0x62696c2f
    7040:	77656e2f 	jalx	d95b8bc <__memory_size+0xd93c0bc>
    7044:	2f62696c 	sltiu	v0,k1,26988
    7048:	6362696c 	0x6362696c
    704c:	63616d2f 	0x63616d2f
    7050:	656e6968 	0x656e6968
    7054:	70696d2f 	0x70696d2f
    7058:	4e470073 	c3	0x470073
    705c:	53412055 	beql	k0,at,f1b4 <__isr_vec_space+0xf194>
    7060:	322e3220 	andi	t6,s1,0x3220
    7064:	30392e34 	andi	t9,at,0x2e34
    7068:	2c800100 	sltiu	zero,a0,256
    706c:	04000009 	bltz	zero,7094 <__isr_vec_space+0x7074>
    7070:	00170300 	sll	zero,s7,0xc
    7074:	c5010400 	lwc1	$f1,1024(t0)
    7078:	01000025 	move	zero,t0
    707c:	00002b1c 	0x2b1c
    7080:	8000b520 	lb	zero,-19168(zero)
    7084:	00000110 	0x110
    7088:	00003397 	0x3397
    708c:	5a050402 	0x5a050402
    7090:	03000001 	movf	zero,t8,$fcc0
    7094:	00000472 	tlt	zero,zero,0x11
    7098:	0033d402 	ror	k0,s3,0x10
    709c:	04020000 	bltzl	zero,70a0 <__isr_vec_space+0x7080>
    70a0:	00010907 	0x10907
    70a4:	05040400 	0x5040400
    70a8:	00746e69 	0x746e69
    70ac:	6a060102 	0x6a060102
    70b0:	02000000 	0x2000000
    70b4:	00680801 	movf	at,v1,$fcc2
    70b8:	02020000 	0x2020000
    70bc:	00019b05 	0x19b05
    70c0:	07020200 	bltzl	t8,78c4 <__isr_vec_space+0x78a4>
    70c4:	00000093 	0x93
    70c8:	55050802 	bnel	t0,a1,90d4 <__isr_vec_space+0x90b4>
    70cc:	02000001 	movf	zero,s0,$fcc0
    70d0:	01040708 	0x1040708
    70d4:	7d030000 	ext	v1,t0,0x0,0x1
    70d8:	03000028 	0x3000028
    70dc:	00003a07 	0x3a07
    70e0:	28500300 	slti	s0,v0,768
    70e4:	10040000 	beq	zero,a0,70e8 <__isr_vec_space+0x70c8>
    70e8:	00000021 	move	zero,zero
    70ec:	00298703 	0x298703
    70f0:	21270400 	addi	a3,t1,1024
    70f4:	05000000 	bltz	t0,70f8 <__isr_vec_space+0x70d8>
    70f8:	00002815 	0x2815
    70fc:	98016102 	lwr	at,24834(zero)
    7100:	02000000 	0x2000000
    7104:	010e0704 	0x10e0704
    7108:	04060000 	0x4060000
    710c:	00be4a04 	0xbe4a04
    7110:	0f070000 	jal	c1c0000 <__memory_size+0xc1a0800>
    7114:	04000028 	bltz	zero,71b8 <__isr_vec_space+0x7198>
    7118:	00008c4c 	syscall	0x231
    711c:	27c10700 	addiu	at,s8,1792
    7120:	4d040000 	lwxc1	$f0,a0(t0)
    7124:	000000be 	0xbe
    7128:	00480800 	0x480800
    712c:	00ce0000 	0xce0000
    7130:	ce090000 	pref	0x9,0(s0)
    7134:	03000000 	0x3000000
    7138:	07040200 	0x7040200
    713c:	00000132 	tlt	zero,zero,0x4
    7140:	4704080a 	bz.b	$w4,916c <__isr_vec_space+0x914c>
    7144:	000000f6 	tne	zero,zero,0x3
    7148:	0029710b 	0x29710b
    714c:	3a490400 	xori	t1,s2,0x400
    7150:	00000000 	nop
    7154:	0029790b 	0x29790b
    7158:	9f4e0400 	0x9f4e0400
    715c:	04000000 	bltz	zero,7160 <__isr_vec_space+0x7140>
    7160:	28720300 	slti	s2,v1,768
    7164:	4f040000 	lwxc1	$f0,a0(t8)
    7168:	000000d5 	0xd5
    716c:	00278403 	0x278403
    7170:	6b530400 	0x6b530400
    7174:	0c000000 	jal	0 <hardware_exit_hook>
    7178:	29b90304 	slti	t9,t5,772
    717c:	16050000 	bne	s0,a1,7180 <__isr_vec_space+0x7160>
    7180:	00000033 	tltu	zero,zero
    7184:	0027950d 	break	0x27,0x254
    7188:	2d051800 	sltiu	a1,t0,6144
    718c:	0000016c 	0x16c
    7190:	0029250b 	0x29250b
    7194:	6c2f0500 	0x6c2f0500
    7198:	00000001 	movf	zero,zero,$fcc0
    719c:	006b5f0e 	0x6b5f0e
    71a0:	003a3005 	lsa	a2,at,k0,0x1
    71a4:	0b040000 	j	c100000 <__memory_size+0xc0e0800>
    71a8:	0000295c 	0x295c
    71ac:	003a3005 	lsa	a2,at,k0,0x1
    71b0:	0b080000 	j	c200000 <__memory_size+0xc1e0800>
    71b4:	0000277e 	0x277e
    71b8:	003a3005 	lsa	a2,at,k0,0x1
    71bc:	0b0c0000 	j	c300000 <__memory_size+0xc2e0800>
    71c0:	00002a00 	sll	a1,zero,0x8
    71c4:	003a3005 	lsa	a2,at,k0,0x1
    71c8:	0e100000 	jal	8400000 <__memory_size+0x83e0800>
    71cc:	0500785f 	bltz	t0,2534c <__memory_size+0x5b4c>
    71d0:	00017231 	tgeu	zero,at,0x1c8
    71d4:	0f001400 	jal	c005000 <__memory_size+0xbfe5800>
    71d8:	00011904 	0x11904
    71dc:	010e0800 	0x10e0800
    71e0:	01820000 	0x1820000
    71e4:	ce090000 	pref	0x9,0(s0)
    71e8:	00000000 	nop
    71ec:	27bc0d00 	addiu	gp,sp,3328
    71f0:	05240000 	0x5240000
    71f4:	0001fb35 	0x1fb35
    71f8:	26e70b00 	addiu	a3,s7,2816
    71fc:	37050000 	ori	a1,t8,0x0
    7200:	0000003a 	0x3a
    7204:	298f0b00 	slti	t7,t4,2816
    7208:	38050000 	xori	a1,zero,0x0
    720c:	0000003a 	0x3a
    7210:	26f60b04 	addiu	s6,s7,2820
    7214:	39050000 	xori	a1,t0,0x0
    7218:	0000003a 	0x3a
    721c:	288f0b08 	slti	t7,a0,2824
    7220:	3a050000 	xori	a1,s0,0x0
    7224:	0000003a 	0x3a
    7228:	283c0b0c 	slti	gp,at,2828
    722c:	3b050000 	xori	a1,t8,0x0
    7230:	0000003a 	0x3a
    7234:	282b0b10 	slti	t3,at,2832
    7238:	3c050000 	lui	a1,0x0
    723c:	0000003a 	0x3a
    7240:	2a050b14 	slti	a1,s0,2836
    7244:	3d050000 	0x3d050000
    7248:	0000003a 	0x3a
    724c:	28a70b18 	slti	a3,a1,2840
    7250:	3e050000 	0x3e050000
    7254:	0000003a 	0x3a
    7258:	2a400b1c 	slti	zero,s2,2844
    725c:	3f050000 	0x3f050000
    7260:	0000003a 	0x3a
    7264:	05100020 	bltzal	t0,72e8 <__isr_vec_space+0x72c8>
    7268:	08000027 	j	9c <__isr_vec_space+0x7c>
    726c:	3b480501 	xori	t0,k0,0x501
    7270:	0b000002 	j	c000008 <__memory_size+0xbfe0808>
    7274:	00002771 	tgeu	zero,zero,0x9d
    7278:	023b4905 	0x23b4905
    727c:	0b000000 	j	c000000 <__memory_size+0xbfe0800>
    7280:	00002682 	srl	a0,zero,0x1a
    7284:	023b4a05 	0x23b4a05
    7288:	11800000 	beqz	t4,728c <__isr_vec_space+0x726c>
    728c:	000029ab 	0x29ab
    7290:	010e4c05 	0x10e4c05
    7294:	01000000 	0x1000000
    7298:	00272a11 	0x272a11
    729c:	0e4f0500 	jal	93c1400 <__memory_size+0x93a1c00>
    72a0:	04000001 	bltz	zero,72a8 <__isr_vec_space+0x7288>
    72a4:	0c080001 	jal	200004 <__memory_size+0x1e0804>
    72a8:	4b000001 	c2	0x1000001
    72ac:	09000002 	j	4000008 <__memory_size+0x3fe0808>
    72b0:	000000ce 	0xce
    72b4:	7a10001f 	0x7a10001f
    72b8:	90000026 	lbu	zero,38(zero)
    72bc:	895b0501 	lwl	k1,1281(t2)
    72c0:	0b000002 	j	c000008 <__memory_size+0xbfe0808>
    72c4:	00002925 	0x2925
    72c8:	02895c05 	0x2895c05
    72cc:	0b000000 	j	c000000 <__memory_size+0xbfe0800>
    72d0:	0000293d 	0x293d
    72d4:	003a5d05 	0x3a5d05
    72d8:	0b040000 	j	c100000 <__memory_size+0xc0e0800>
    72dc:	00002779 	0x2779
    72e0:	028f5f05 	0x28f5f05
    72e4:	0b080000 	j	c200000 <__memory_size+0xc1e0800>
    72e8:	00002705 	0x2705
    72ec:	01fb6005 	lsa	t4,t7,k1,0x1
    72f0:	00880000 	0x880000
    72f4:	024b040f 	0x24b040f
    72f8:	9f080000 	0x9f080000
    72fc:	9f000002 	0x9f000002
    7300:	09000002 	j	4000008 <__memory_size+0x3fe0808>
    7304:	000000ce 	0xce
    7308:	040f001f 	0x40f001f
    730c:	000002a5 	0x2a5
    7310:	28b10d12 	slti	s1,a1,3346
    7314:	05080000 	tgei	t0,0
    7318:	0002cb73 	tltu	zero,v0,0x32d
    731c:	2dac0b00 	sltiu	t4,t5,2816
    7320:	74050000 	jalx	140000 <__memory_size+0x120800>
    7324:	000002cb 	0x2cb
    7328:	2d7a0b00 	sltiu	k0,t3,2816
    732c:	75050000 	jalx	4140000 <__memory_size+0x4120800>
    7330:	0000003a 	0x3a
    7334:	040f0004 	0x40f0004
    7338:	00000048 	0x48
    733c:	00290f0d 	break	0x29,0x3c
    7340:	b3056800 	0xb3056800
    7344:	000003fb 	0x3fb
    7348:	00705f0e 	0x705f0e
    734c:	02cbb405 	0x2cbb405
    7350:	0e000000 	jal	8000000 <__memory_size+0x7fe0800>
    7354:	0500725f 	bltz	t0,23cd4 <__memory_size+0x44d4>
    7358:	00003ab5 	0x3ab5
    735c:	5f0e0400 	0x5f0e0400
    7360:	b6050077 	0xb6050077
    7364:	0000003a 	0x3a
    7368:	27230b08 	addiu	v1,t9,2824
    736c:	b7050000 	0xb7050000
    7370:	0000004f 	sync	0x1
    7374:	27d80b0c 	addiu	t8,s8,2828
    7378:	b8050000 	swr	a1,0(zero)
    737c:	0000004f 	sync	0x1
    7380:	625f0e0e 	0x625f0e0e
    7384:	b9050066 	swr	a1,102(t0)
    7388:	000002a6 	0x2a6
    738c:	26c10b10 	addiu	at,s6,2832
    7390:	ba050000 	swr	a1,0(s0)
    7394:	0000003a 	0x3a
    7398:	27130b18 	addiu	s3,t8,2840
    739c:	c1050000 	ll	a1,0(t0)
    73a0:	0000010c 	syscall	0x4
    73a4:	27ac0b1c 	addiu	t4,sp,2844
    73a8:	c3050000 	ll	a1,0(t8)
    73ac:	0000055e 	0x55e
    73b0:	28240b20 	slti	a0,at,2848
    73b4:	c5050000 	lwc1	$f5,0(t0)
    73b8:	0000058d 	break	0x0,0x16
    73bc:	29810b24 	slti	at,t4,2852
    73c0:	c8050000 	lwc2	$5,0(zero)
    73c4:	000005b1 	tgeu	zero,zero,0x16
    73c8:	2a5a0b28 	slti	k0,s2,2856
    73cc:	c9050000 	lwc2	$5,0(t0)
    73d0:	000005cb 	0x5cb
    73d4:	755f0e2c 	jalx	57c38b0 <__memory_size+0x57a40b0>
    73d8:	cc050062 	pref	0x5,98(zero)
    73dc:	000002a6 	0x2a6
    73e0:	755f0e30 	jalx	57c38c0 <__memory_size+0x57a40c0>
    73e4:	cd050070 	pref	0x5,112(t0)
    73e8:	000002cb 	0x2cb
    73ec:	755f0e38 	jalx	57c38e0 <__memory_size+0x57a40e0>
    73f0:	ce050072 	pref	0x5,114(s0)
    73f4:	0000003a 	0x3a
    73f8:	26f00b3c 	addiu	s0,s7,2876
    73fc:	d1050000 	0xd1050000
    7400:	000005d1 	0x5d1
    7404:	2a320b40 	slti	s2,s1,2880
    7408:	d2050000 	0xd2050000
    740c:	000005e1 	0x5e1
    7410:	6c5f0e43 	0x6c5f0e43
    7414:	d5050062 	ldc1	$f5,98(t0)
    7418:	000002a6 	0x2a6
    741c:	27390b44 	addiu	t9,t9,2884
    7420:	d8050000 	ldc2	$5,0(zero)
    7424:	0000003a 	0x3a
    7428:	274a0b4c 	addiu	t2,k0,2892
    742c:	d9050000 	ldc2	$5,0(t0)
    7430:	00000076 	tne	zero,zero,0x1
    7434:	2a7f0b50 	slti	ra,s3,2896
    7438:	dc050000 	ldc3	$5,0(zero)
    743c:	00000419 	0x419
    7440:	2b850b54 	slti	a1,gp,2900
    7444:	e0050000 	sc	a1,0(zero)
    7448:	00000101 	0x101
    744c:	29170b58 	slti	s7,t0,2904
    7450:	e2050000 	sc	a1,0(s0)
    7454:	000000f6 	tne	zero,zero,0x3
    7458:	281c0b5c 	slti	gp,zero,2908
    745c:	e3050000 	sc	a1,0(t8)
    7460:	0000003a 	0x3a
    7464:	3a130064 	xori	s3,s0,0x64
    7468:	19000000 	blez	t0,746c <__isr_vec_space+0x744c>
    746c:	14000004 	bnez	zero,7480 <__isr_vec_space+0x7460>
    7470:	00000419 	0x419
    7474:	00010c14 	0x10c14
    7478:	05511400 	bgezal	t2,c47c <__isr_vec_space+0xc45c>
    747c:	3a140000 	xori	s4,s0,0x0
    7480:	00000000 	nop
    7484:	041f040f 	synci	1039(zero)
    7488:	64150000 	0x64150000
    748c:	28000029 	slti	zero,zero,41
    7490:	02390504 	0x2390504
    7494:	00000551 	0x551
    7498:	0028a016 	0x28a016
    749c:	023b0500 	0x23b0500
    74a0:	0000003a 	0x3a
    74a4:	27321600 	addiu	s2,t9,5632
    74a8:	40050000 	mfc0	a1,c0_index
    74ac:	00063802 	srl	a3,a2,0x0
    74b0:	c8160400 	lwc2	$22,1024(zero)
    74b4:	05000027 	bltz	t0,7554 <__isr_vec_space+0x7534>
    74b8:	06380240 	0x6380240
    74bc:	16080000 	bne	s0,t0,74c0 <__isr_vec_space+0x74a0>
    74c0:	0000278d 	break	0x0,0x9e
    74c4:	38024005 	xori	v0,zero,0x4005
    74c8:	0c000006 	jal	18 <ABIFlags_flags2+0x4>
    74cc:	00293816 	0x293816
    74d0:	02420500 	0x2420500
    74d4:	0000003a 	0x3a
    74d8:	26961610 	addiu	s6,s4,5648
    74dc:	43050000 	c0	0x1050000
    74e0:	00081a02 	srl	v1,t0,0x8
    74e4:	e1161400 	sc	s6,5120(t0)
    74e8:	05000029 	bltz	t0,7590 <__isr_vec_space+0x7570>
    74ec:	003a0245 	0x3a0245
    74f0:	16300000 	bne	s1,s0,74f4 <__isr_vec_space+0x74d4>
    74f4:	00002942 	srl	a1,zero,0x5
    74f8:	82024605 	lb	v0,17925(s0)
    74fc:	34000005 	li	zero,0x5
    7500:	00284516 	0x284516
    7504:	02480500 	0x2480500
    7508:	0000003a 	0x3a
    750c:	29521638 	slti	s2,t2,5688
    7510:	4a050000 	c2	0x50000
    7514:	00083502 	srl	a2,t0,0x14
    7518:	07163c00 	0x7163c00
    751c:	05000028 	bltz	t0,75c0 <__isr_vec_space+0x75a0>
    7520:	016c024d 	break	0x16c,0x9
    7524:	16400000 	bnez	s2,7528 <__isr_vec_space+0x7508>
    7528:	000027b2 	tlt	zero,zero,0x9e
    752c:	3a024e05 	xori	v0,s0,0x4e05
    7530:	44000000 	mfc1	zero,$f0
    7534:	002a7416 	0x2a7416
    7538:	024f0500 	0x24f0500
    753c:	0000016c 	0x16c
    7540:	28681648 	slti	t0,v1,5704
    7544:	50050000 	beql	zero,a1,7548 <__isr_vec_space+0x7528>
    7548:	00083b02 	srl	a3,t0,0xc
    754c:	d0164c00 	0xd0164c00
    7550:	05000027 	bltz	t0,75f0 <__isr_vec_space+0x75d0>
    7554:	003a0253 	0x3a0253
    7558:	16500000 	bne	s2,s0,755c <__isr_vec_space+0x753c>
    755c:	00002742 	srl	a0,zero,0x1d
    7560:	51025405 	beql	t0,v0,1c578 <__isr_vec_space+0x1c558>
    7564:	54000005 	bnezl	zero,757c <__isr_vec_space+0x755c>
    7568:	00289916 	0x289916
    756c:	02770500 	0x2770500
    7570:	000007f8 	0x7f8
    7574:	267a1758 	addiu	k0,s3,5976
    7578:	7b050000 	xori.b	$w0,$w0,0x5
    757c:	00028902 	srl	s1,v0,0x4
    7580:	17014800 	bne	t8,at,19584 <__isr_vec_space+0x19564>
    7584:	000027e5 	0x27e5
    7588:	4b027c05 	c2	0x1027c05
    758c:	4c000002 	mfc3	zero,$0,2
    7590:	2a281701 	slti	t0,s1,5889
    7594:	80050000 	lb	a1,0(zero)
    7598:	00084c02 	srl	t1,t0,0x10
    759c:	1702dc00 	bne	t8,v0,ffffe5a0 <__flash_start+0x403fe5a0>
    75a0:	0000271b 	0x271b
    75a4:	fd028505 	sdc3	$2,-31483(t0)
    75a8:	e0000005 	sc	zero,5(zero)
    75ac:	27001702 	addiu	zero,t8,5890
    75b0:	86050000 	lh	a1,0(s0)
    75b4:	00085802 	srl	t3,t0,0x0
    75b8:	0002ec00 	sll	sp,v0,0x10
    75bc:	0557040f 	0x557040f
    75c0:	01020000 	0x1020000
    75c4:	00007108 	0x7108
    75c8:	fb040f00 	sdc2	$4,3840(t8)
    75cc:	13000003 	beqz	t8,75dc <__isr_vec_space+0x75bc>
    75d0:	0000003a 	0x3a
    75d4:	00000582 	srl	zero,zero,0x16
    75d8:	00041914 	0x41914
    75dc:	010c1400 	0x10c1400
    75e0:	82140000 	lb	s4,0(s0)
    75e4:	14000005 	bnez	zero,75fc <__isr_vec_space+0x75dc>
    75e8:	0000003a 	0x3a
    75ec:	88040f00 	lwl	a0,3840(zero)
    75f0:	18000005 	blez	zero,7608 <__isr_vec_space+0x75e8>
    75f4:	00000557 	0x557
    75f8:	0564040f 	0x564040f
    75fc:	81130000 	lb	s3,0(t0)
    7600:	b1000000 	0xb1000000
    7604:	14000005 	bnez	zero,761c <__isr_vec_space+0x75fc>
    7608:	00000419 	0x419
    760c:	00010c14 	0x10c14
    7610:	00811400 	0x811400
    7614:	3a140000 	xori	s4,s0,0x0
    7618:	00000000 	nop
    761c:	0593040f 	bgezall	t4,865c <__isr_vec_space+0x863c>
    7620:	3a130000 	xori	s3,s0,0x0
    7624:	cb000000 	lwc2	$0,0(t8)
    7628:	14000005 	bnez	zero,7640 <__isr_vec_space+0x7620>
    762c:	00000419 	0x419
    7630:	00010c14 	0x10c14
    7634:	040f0000 	0x40f0000
    7638:	000005b7 	0x5b7
    763c:	00004808 	0x4808
    7640:	0005e100 	sll	gp,a1,0x4
    7644:	00ce0900 	0xce0900
    7648:	00020000 	sll	zero,v0,0x0
    764c:	00004808 	0x4808
    7650:	0005f100 	sll	s8,a1,0x4
    7654:	00ce0900 	0xce0900
    7658:	00000000 	nop
    765c:	0028be05 	0x28be05
    7660:	011d0500 	0x11d0500
    7664:	000002d1 	0x2d1
    7668:	002a0f19 	0x2a0f19
    766c:	21050c00 	addi	a1,t0,3072
    7670:	00063201 	0x63201
    7674:	29251600 	slti	a1,t1,5632
    7678:	23050000 	addi	a1,t8,0
    767c:	00063201 	0x63201
    7680:	de160000 	ldc3	$22,0(s0)
    7684:	05000027 	bltz	t0,7724 <__isr_vec_space+0x7704>
    7688:	003a0124 	0x3a0124
    768c:	16040000 	bne	s0,a0,7690 <__isr_vec_space+0x7670>
    7690:	000028b8 	0x28b8
    7694:	38012505 	xori	at,zero,0x2505
    7698:	08000006 	j	18 <ABIFlags_flags2+0x4>
    769c:	fd040f00 	sdc3	$4,3840(t0)
    76a0:	0f000005 	jal	c000014 <__memory_size+0xbfe0814>
    76a4:	0005f104 	0x5f104
    76a8:	268e1900 	addiu	t6,s4,6400
    76ac:	050e0000 	tnei	t0,0
    76b0:	0673013d 	bgezall	s3,7ba8 <__isr_vec_space+0x7b88>
    76b4:	6b160000 	0x6b160000
    76b8:	05000029 	bltz	t0,7760 <__isr_vec_space+0x7740>
    76bc:	0673013e 	bgezall	s3,7bb8 <__isr_vec_space+0x7b98>
    76c0:	16000000 	bnez	s0,76c4 <__isr_vec_space+0x76a4>
    76c4:	00002998 	0x2998
    76c8:	73013f05 	0x73013f05
    76cc:	06000006 	bltz	s0,76e8 <__isr_vec_space+0x76c8>
    76d0:	0029b416 	0x29b416
    76d4:	01400500 	0x1400500
    76d8:	00000056 	0x56
    76dc:	5608000c 	bnel	s0,t0,7710 <__isr_vec_space+0x76f0>
    76e0:	83000000 	lb	zero,0(t8)
    76e4:	09000006 	j	4000018 <__memory_size+0x3fe0818>
    76e8:	000000ce 	0xce
    76ec:	d01a0002 	0xd01a0002
    76f0:	84025805 	lh	v0,22533(zero)
    76f4:	16000007 	bnez	s0,7714 <__isr_vec_space+0x76f4>
    76f8:	000029f3 	tltu	zero,zero,0xa7
    76fc:	98025a05 	lwr	v0,23045(zero)
    7700:	00000000 	nop
    7704:	00299e16 	0x299e16
    7708:	025b0500 	0x25b0500
    770c:	00000551 	0x551
    7710:	27fa1604 	addiu	k0,ra,5636
    7714:	5c050000 	0x5c050000
    7718:	00078402 	srl	s0,a3,0x10
    771c:	4b160800 	c2	0x1160800
    7720:	0500002a 	bltz	t0,77cc <__isr_vec_space+0x77ac>
    7724:	0182025d 	0x182025d
    7728:	16240000 	bne	s1,a0,772c <__isr_vec_space+0x770c>
    772c:	0000279d 	0x279d
    7730:	3a025e05 	xori	v0,s0,0x5e05
    7734:	48000000 	mfc2	zero,$0
    7738:	00292016 	0x292016
    773c:	025f0500 	0x25f0500
    7740:	00000064 	0x64
    7744:	2a611650 	slti	at,s3,5712
    7748:	60050000 	0x60050000
    774c:	00063e02 	srl	a3,a2,0x18
    7750:	2b165800 	slti	s6,t8,22528
    7754:	05000029 	bltz	t0,77fc <__isr_vec_space+0x77dc>
    7758:	00f60261 	0xf60261
    775c:	16680000 	bne	s3,t0,7760 <__isr_vec_space+0x7740>
    7760:	00002a66 	0x2a66
    7764:	f6026205 	sdc1	$f2,25093(s0)
    7768:	70000000 	madd	zero,zero
    776c:	0026d916 	0x26d916
    7770:	02630500 	0x2630500
    7774:	000000f6 	tne	zero,zero,0x3
    7778:	2a1e1678 	slti	s8,s0,5752
    777c:	64050000 	0x64050000
    7780:	00079402 	srl	s2,a3,0x10
    7784:	ee168000 	swc3	$22,-32768(s0)
    7788:	05000027 	bltz	t0,7828 <__isr_vec_space+0x7808>
    778c:	07a40265 	0x7a40265
    7790:	16880000 	bne	s4,t0,7794 <__isr_vec_space+0x7774>
    7794:	000029c1 	0x29c1
    7798:	3a026605 	xori	v0,s0,0x6605
    779c:	a0000000 	sb	zero,0(zero)
    77a0:	00276316 	0x276316
    77a4:	02670500 	0x2670500
    77a8:	000000f6 	tne	zero,zero,0x3
    77ac:	26ca16a4 	addiu	t2,s6,5796
    77b0:	68050000 	0x68050000
    77b4:	0000f602 	srl	s8,zero,0x18
    77b8:	5216ac00 	beql	s0,s6,ffff27bc <__flash_start+0x403f27bc>
    77bc:	05000027 	bltz	t0,785c <__isr_vec_space+0x783c>
    77c0:	00f60269 	0xf60269
    77c4:	16b40000 	bne	s5,s4,77c8 <__isr_vec_space+0x77a8>
    77c8:	000026a1 	0x26a1
    77cc:	f6026a05 	sdc1	$f2,27141(s0)
    77d0:	bc000000 	cache	0x0,0(zero)
    77d4:	0026b016 	0x26b016
    77d8:	026b0500 	0x26b0500
    77dc:	000000f6 	tne	zero,zero,0x3
    77e0:	289e16c4 	slti	s8,a0,5828
    77e4:	6c050000 	0x6c050000
    77e8:	00003a02 	srl	a3,zero,0x8
    77ec:	0800cc00 	j	33000 <__memory_size+0x13800>
    77f0:	00000557 	0x557
    77f4:	00000794 	0x794
    77f8:	0000ce09 	0xce09
    77fc:	08001900 	j	6400 <__isr_vec_space+0x63e0>
    7800:	00000557 	0x557
    7804:	000007a4 	0x7a4
    7808:	0000ce09 	0xce09
    780c:	08000700 	j	1c00 <__isr_vec_space+0x1be0>
    7810:	00000557 	0x557
    7814:	000007b4 	teq	zero,zero,0x1e
    7818:	0000ce09 	0xce09
    781c:	1a001700 	blez	s0,d420 <__isr_vec_space+0xd400>
    7820:	027105f0 	tge	s3,s1,0x17
    7824:	000007d8 	0x7d8
    7828:	00283516 	0x283516
    782c:	02740500 	0x2740500
    7830:	000007d8 	0x7d8
    7834:	2a151600 	slti	s5,s0,5632
    7838:	75050000 	jalx	4140000 <__memory_size+0x4120800>
    783c:	0007e802 	srl	sp,a3,0x0
    7840:	08007800 	j	1e000 <__isr_vec_space+0x1dfe0>
    7844:	000002cb 	0x2cb
    7848:	000007e8 	0x7e8
    784c:	0000ce09 	0xce09
    7850:	08001d00 	j	7400 <__isr_vec_space+0x73e0>
    7854:	00000098 	0x98
    7858:	000007f8 	0x7f8
    785c:	0000ce09 	0xce09
    7860:	1b001d00 	blez	t8,ec64 <__isr_vec_space+0xec44>
    7864:	025605f0 	tge	s2,s6,0x17
    7868:	0000081a 	0x81a
    786c:	0029641c 	0x29641c
    7870:	026d0500 	0x26d0500
    7874:	00000683 	sra	zero,zero,0x1a
    7878:	002a381c 	0x2a381c
    787c:	02760500 	0x2760500
    7880:	000007b4 	teq	zero,zero,0x1e
    7884:	05570800 	0x5570800
    7888:	082a0000 	j	a80000 <__memory_size+0xa60800>
    788c:	ce090000 	pref	0x9,0(s0)
    7890:	18000000 	blez	zero,7894 <__isr_vec_space+0x7874>
    7894:	08351d00 	j	d47400 <__memory_size+0xd27c00>
    7898:	19140000 	0x19140000
    789c:	00000004 	sllv	zero,zero,zero
    78a0:	082a040f 	j	a8103c <__memory_size+0xa6183c>
    78a4:	040f0000 	0x40f0000
    78a8:	0000016c 	0x16c
    78ac:	00084c1d 	0x84c1d
    78b0:	003a1400 	0x3a1400
    78b4:	0f000000 	jal	c000000 <__memory_size+0xbfe0800>
    78b8:	00085204 	0x85204
    78bc:	41040f00 	0x41040f00
    78c0:	08000008 	j	20 <__isr_vec_space>
    78c4:	000005f1 	tgeu	zero,zero,0x17
    78c8:	00000868 	0x868
    78cc:	0000ce09 	0xce09
    78d0:	1e000200 	bgtz	s0,80d4 <__isr_vec_space+0x80b4>
    78d4:	0000254a 	0x254a
    78d8:	87050604 	lh	a1,1540(t8)
    78dc:	1f000008 	bgtz	t8,7900 <__isr_vec_space+0x78e0>
    78e0:	00002676 	tne	zero,zero,0x99
    78e4:	25b91f00 	addiu	t9,t5,7936
    78e8:	1f010000 	0x1f010000
    78ec:	0000266d 	0x266d
    78f0:	a5200002 	sh	zero,2(t1)
    78f4:	01000025 	move	zero,t0
    78f8:	00003a42 	srl	a3,zero,0x9
    78fc:	00b52000 	0xb52000
    7900:	00011080 	sll	v0,at,0x2
    7904:	079c0100 	0x79c0100
    7908:	21000009 	addi	zero,t0,9
    790c:	00000136 	tne	zero,zero,0x4
    7910:	003a4201 	0x3a4201
    7914:	01240000 	0x1240000
    7918:	66220000 	0x66220000
    791c:	4201006e 	c0	0x1006e
    7920:	0000029f 	0x29f
    7924:	00000150 	0x150
    7928:	67726122 	0x67726122
    792c:	0c420100 	jal	1080400 <__memory_size+0x1060c00>
    7930:	92000001 	lbu	zero,1(s0)
    7934:	22000001 	addi	zero,s0,1
    7938:	42010064 	c0	0x10064
    793c:	0000010c 	syscall	0x4
    7940:	000001d4 	0x1d4
    7944:	00270e23 	0x270e23
    7948:	07490100 	tgeiu	k0,256
    794c:	16000009 	bnez	s0,7974 <__isr_vec_space+0x7954>
    7950:	24000002 	li	zero,2
    7954:	4a010070 	c2	0x10070
    7958:	00000289 	0x289
    795c:	0000022c 	0x22c
    7960:	00b59425 	0xb59425
    7964:	00091e80 	sll	v1,t1,0x1a
    7968:	54012600 	bnel	zero,at,1116c <__isr_vec_space+0x1114c>
    796c:	01900a03 	0x1900a03
    7970:	040f0000 	0x40f0000
    7974:	000001fb 	0x1fb
    7978:	0029ce27 	0x29ce27
    797c:	02fb0500 	0x2fb0500
    7980:	00000919 	0x919
    7984:	00041918 	0x41918
    7988:	2a172800 	slti	s7,s0,10240
    798c:	60070000 	0x60070000
    7990:	0000010c 	syscall	0x4
    7994:	00002814 	0x2814
    7998:	51000000 	beqzl	t0,799c <__isr_vec_space+0x797c>
    799c:	04000009 	bltz	zero,79c4 <__isr_vec_space+0x79a4>
    79a0:	00191000 	sll	v0,t9,0x0
    79a4:	c5010400 	lwc1	$f1,1024(t0)
    79a8:	01000025 	move	zero,t0
    79ac:	00002b8b 	0x2b8b
    79b0:	8000b630 	lb	zero,-18896(zero)
    79b4:	00000180 	sll	zero,zero,0x6
    79b8:	00003555 	0x3555
    79bc:	09070402 	j	41c1008 <__memory_size+0x41a1808>
    79c0:	03000001 	movf	zero,t8,$fcc0
    79c4:	6e690504 	0x6e690504
    79c8:	04020074 	bltzl	zero,7b9c <__isr_vec_space+0x7b7c>
    79cc:	00015a05 	0x15a05
    79d0:	06010200 	bgez	s0,81d4 <__isr_vec_space+0x81b4>
    79d4:	0000006a 	0x6a
    79d8:	68080102 	0x68080102
    79dc:	02000000 	0x2000000
    79e0:	019b0502 	0x19b0502
    79e4:	02020000 	0x2020000
    79e8:	00009307 	0x9307
    79ec:	05080200 	tgei	t0,512
    79f0:	00000155 	0x155
    79f4:	04070802 	aclr	0x0,-2046(zero)
    79f8:	04000001 	bltz	zero,7a00 <__isr_vec_space+0x79e0>
    79fc:	0000287d 	0x287d
    7a00:	00280702 	ror	zero,t0,0x1c
    7a04:	50040000 	beql	zero,a0,7a08 <__isr_vec_space+0x79e8>
    7a08:	03000028 	0x3000028
    7a0c:	00002f10 	0x2f10
    7a10:	29870400 	slti	a3,t4,1024
    7a14:	27030000 	addiu	v1,t8,0
    7a18:	0000002f 	0x2f
    7a1c:	00281505 	0x281505
    7a20:	01610400 	0x1610400
    7a24:	0000008d 	break	0x0,0x2
    7a28:	0e070402 	jal	81c1008 <__memory_size+0x81a1808>
    7a2c:	06000001 	bltz	s0,7a34 <__isr_vec_space+0x7a14>
    7a30:	b34a0304 	0xb34a0304
    7a34:	07000000 	bltz	t8,7a38 <__isr_vec_space+0x7a18>
    7a38:	0000280f 	0x280f
    7a3c:	00814c03 	0x814c03
    7a40:	c1070000 	ll	a3,0(t0)
    7a44:	03000027 	nor	zero,t8,zero
    7a48:	0000b34d 	break	0x0,0x2cd
    7a4c:	3d080000 	0x3d080000
    7a50:	c3000000 	ll	zero,0(t8)
    7a54:	09000000 	j	4000000 <__memory_size+0x3fe0800>
    7a58:	000000c3 	sra	zero,zero,0x3
    7a5c:	04020003 	bltzl	zero,7a6c <__isr_vec_space+0x7a4c>
    7a60:	00013207 	0x13207
    7a64:	03080a00 	0x3080a00
    7a68:	0000eb47 	0xeb47
    7a6c:	29710b00 	slti	s1,t3,2816
    7a70:	49030000 	bc2tl	7a74 <__isr_vec_space+0x7a54>
    7a74:	00000028 	0x28
    7a78:	29790b00 	slti	t9,t3,2816
    7a7c:	4e030000 	lwxc1	$f0,v1(s0)
    7a80:	00000094 	0x94
    7a84:	72040004 	msub	s0,a0
    7a88:	03000028 	0x3000028
    7a8c:	0000ca4f 	0xca4f
    7a90:	27840400 	addiu	a0,gp,1024
    7a94:	53030000 	beql	t8,v1,7a98 <__isr_vec_space+0x7a78>
    7a98:	00000060 	0x60
    7a9c:	b904040c 	swr	a0,1036(t0)
    7aa0:	05000029 	bltz	t0,7b48 <__isr_vec_space+0x7b28>
    7aa4:	00002116 	0x2116
    7aa8:	27950d00 	addiu	s5,gp,3328
    7aac:	05180000 	0x5180000
    7ab0:	0001612d 	0x1612d
    7ab4:	29250b00 	slti	a1,t1,2816
    7ab8:	2f050000 	sltiu	a1,t8,0
    7abc:	00000161 	0x161
    7ac0:	6b5f0e00 	0x6b5f0e00
    7ac4:	28300500 	slti	s0,at,1280
    7ac8:	04000000 	bltz	zero,7acc <__isr_vec_space+0x7aac>
    7acc:	00295c0b 	0x295c0b
    7ad0:	28300500 	slti	s0,at,1280
    7ad4:	08000000 	j	0 <hardware_exit_hook>
    7ad8:	00277e0b 	0x277e0b
    7adc:	28300500 	slti	s0,at,1280
    7ae0:	0c000000 	jal	0 <hardware_exit_hook>
    7ae4:	002a000b 	movn	zero,at,t2
    7ae8:	28300500 	slti	s0,at,1280
    7aec:	10000000 	b	7af0 <__isr_vec_space+0x7ad0>
    7af0:	00785f0e 	0x785f0e
    7af4:	01673105 	0x1673105
    7af8:	00140000 	sll	zero,s4,0x0
    7afc:	010e040f 	0x10e040f
    7b00:	03080000 	0x3080000
    7b04:	77000001 	jalx	c000004 <__memory_size+0xbfe0804>
    7b08:	09000001 	j	4000004 <__memory_size+0x3fe0804>
    7b0c:	000000c3 	sra	zero,zero,0x3
    7b10:	bc0d0000 	cache	0xd,0(zero)
    7b14:	24000027 	li	zero,39
    7b18:	01f03505 	0x1f03505
    7b1c:	e70b0000 	swc1	$f11,0(t8)
    7b20:	05000026 	bltz	t0,7bbc <__isr_vec_space+0x7b9c>
    7b24:	00002837 	0x2837
    7b28:	8f0b0000 	lw	t3,0(t8)
    7b2c:	05000029 	bltz	t0,7bd4 <__isr_vec_space+0x7bb4>
    7b30:	00002838 	0x2838
    7b34:	f60b0400 	sdc1	$f11,1024(s0)
    7b38:	05000026 	bltz	t0,7bd4 <__isr_vec_space+0x7bb4>
    7b3c:	00002839 	0x2839
    7b40:	8f0b0800 	lw	t3,2048(t8)
    7b44:	05000028 	bltz	t0,7be8 <__isr_vec_space+0x7bc8>
    7b48:	0000283a 	0x283a
    7b4c:	3c0b0c00 	lui	t3,0xc00
    7b50:	05000028 	bltz	t0,7bf4 <__isr_vec_space+0x7bd4>
    7b54:	0000283b 	0x283b
    7b58:	2b0b1000 	slti	t3,t8,4096
    7b5c:	05000028 	bltz	t0,7c00 <__isr_vec_space+0x7be0>
    7b60:	0000283c 	0x283c
    7b64:	050b1400 	tltiu	t0,5120
    7b68:	0500002a 	bltz	t0,7c14 <__isr_vec_space+0x7bf4>
    7b6c:	0000283d 	0x283d
    7b70:	a70b1800 	sh	t3,6144(t8)
    7b74:	05000028 	bltz	t0,7c18 <__isr_vec_space+0x7bf8>
    7b78:	0000283e 	0x283e
    7b7c:	400b1c00 	0x400b1c00
    7b80:	0500002a 	bltz	t0,7c2c <__isr_vec_space+0x7c0c>
    7b84:	0000283f 	0x283f
    7b88:	10002000 	b	fb8c <__isr_vec_space+0xfb6c>
    7b8c:	00002705 	0x2705
    7b90:	48050108 	0x48050108
    7b94:	00000230 	tge	zero,zero,0x8
    7b98:	0027710b 	0x27710b
    7b9c:	30490500 	andi	t1,v0,0x500
    7ba0:	00000002 	srl	zero,zero,0x0
    7ba4:	0026820b 	0x26820b
    7ba8:	304a0500 	andi	t2,v0,0x500
    7bac:	80000002 	lb	zero,2(zero)
    7bb0:	0029ab11 	0x29ab11
    7bb4:	034c0500 	0x34c0500
    7bb8:	00000001 	movf	zero,zero,$fcc0
    7bbc:	272a1101 	addiu	t2,t9,4353
    7bc0:	4f050000 	lwxc1	$f0,a1(t8)
    7bc4:	00000103 	sra	zero,zero,0x4
    7bc8:	08000104 	j	410 <__isr_vec_space+0x3f0>
    7bcc:	00000101 	0x101
    7bd0:	00000240 	sll	zero,zero,0x9
    7bd4:	0000c309 	0xc309
    7bd8:	10001f00 	b	f7dc <__isr_vec_space+0xf7bc>
    7bdc:	0000267a 	0x267a
    7be0:	5b050190 	0x5b050190
    7be4:	0000027e 	0x27e
    7be8:	0029250b 	0x29250b
    7bec:	7e5c0500 	ext	gp,s2,0x14,0x1
    7bf0:	00000002 	srl	zero,zero,0x0
    7bf4:	00293d0b 	0x293d0b
    7bf8:	285d0500 	slti	sp,v0,1280
    7bfc:	04000000 	bltz	zero,7c00 <__isr_vec_space+0x7be0>
    7c00:	0027790b 	0x27790b
    7c04:	845f0500 	lh	ra,1280(v0)
    7c08:	08000002 	j	8 <ABIFlags_isa_ext>
    7c0c:	0027050b 	0x27050b
    7c10:	f0600500 	0xf0600500
    7c14:	88000001 	lwl	zero,1(zero)
    7c18:	40040f00 	0x40040f00
    7c1c:	08000002 	j	8 <ABIFlags_isa_ext>
    7c20:	00000294 	0x294
    7c24:	00000294 	0x294
    7c28:	0000c309 	0xc309
    7c2c:	0f001f00 	jal	c007c00 <__memory_size+0xbfe8400>
    7c30:	00029a04 	0x29a04
    7c34:	b10d1200 	0xb10d1200
    7c38:	08000028 	j	a0 <__isr_vec_space+0x80>
    7c3c:	02c07305 	0x2c07305
    7c40:	ac0b0000 	sw	t3,0(zero)
    7c44:	0500002d 	bltz	t0,7cfc <__isr_vec_space+0x7cdc>
    7c48:	0002c074 	teq	zero,v0,0x301
    7c4c:	7a0b0000 	nori.b	$w0,$w0,0xb
    7c50:	0500002d 	bltz	t0,7d08 <__isr_vec_space+0x7ce8>
    7c54:	00002875 	0x2875
    7c58:	0f000400 	jal	c001000 <__memory_size+0xbfe1800>
    7c5c:	00003d04 	0x3d04
    7c60:	290f0d00 	slti	t7,t0,3328
    7c64:	05680000 	tgei	t3,0
    7c68:	0003f0b3 	tltu	zero,v1,0x3c2
    7c6c:	705f0e00 	0x705f0e00
    7c70:	c0b40500 	ll	s4,1280(a1)
    7c74:	00000002 	srl	zero,zero,0x0
    7c78:	00725f0e 	0x725f0e
    7c7c:	0028b505 	0x28b505
    7c80:	0e040000 	jal	8100000 <__memory_size+0x80e0800>
    7c84:	0500775f 	bltz	t0,25a04 <__memory_size+0x6204>
    7c88:	000028b6 	tne	zero,zero,0xa2
    7c8c:	230b0800 	addi	t3,t8,2048
    7c90:	05000027 	bltz	t0,7d30 <__isr_vec_space+0x7d10>
    7c94:	000044b7 	0x44b7
    7c98:	d80b0c00 	ldc2	$11,3072(zero)
    7c9c:	05000027 	bltz	t0,7d3c <__isr_vec_space+0x7d1c>
    7ca0:	000044b8 	0x44b8
    7ca4:	5f0e0e00 	0x5f0e0e00
    7ca8:	05006662 	bltz	t0,21634 <__memory_size+0x1e34>
    7cac:	00029bb9 	0x29bb9
    7cb0:	c10b1000 	ll	t3,4096(t0)
    7cb4:	05000026 	bltz	t0,7d50 <__isr_vec_space+0x7d30>
    7cb8:	000028ba 	0x28ba
    7cbc:	130b1800 	beq	t8,t3,dcc0 <__isr_vec_space+0xdca0>
    7cc0:	05000027 	bltz	t0,7d60 <__isr_vec_space+0x7d40>
    7cc4:	000101c1 	0x101c1
    7cc8:	ac0b1c00 	sw	t3,7168(zero)
    7ccc:	05000027 	bltz	t0,7d6c <__isr_vec_space+0x7d4c>
    7cd0:	000553c3 	sra	t2,a1,0xf
    7cd4:	240b2000 	li	t3,8192
    7cd8:	05000028 	bltz	t0,7d7c <__isr_vec_space+0x7d5c>
    7cdc:	000582c5 	0x582c5
    7ce0:	810b2400 	lb	t3,9216(t0)
    7ce4:	05000029 	bltz	t0,7d8c <__isr_vec_space+0x7d6c>
    7ce8:	0005a6c8 	0x5a6c8
    7cec:	5a0b2800 	0x5a0b2800
    7cf0:	0500002a 	bltz	t0,7d9c <__isr_vec_space+0x7d7c>
    7cf4:	0005c0c9 	0x5c0c9
    7cf8:	5f0e2c00 	0x5f0e2c00
    7cfc:	05006275 	bltz	t0,206d4 <__memory_size+0xed4>
    7d00:	00029bcc 	syscall	0xa6f
    7d04:	5f0e3000 	0x5f0e3000
    7d08:	05007075 	bltz	t0,23ee0 <__memory_size+0x46e0>
    7d0c:	0002c0cd 	break	0x2,0x303
    7d10:	5f0e3800 	0x5f0e3800
    7d14:	05007275 	bltz	t0,246ec <__memory_size+0x4eec>
    7d18:	000028ce 	0x28ce
    7d1c:	f00b3c00 	0xf00b3c00
    7d20:	05000026 	bltz	t0,7dbc <__isr_vec_space+0x7d9c>
    7d24:	0005c6d1 	0x5c6d1
    7d28:	320b4000 	andi	t3,s0,0x4000
    7d2c:	0500002a 	bltz	t0,7dd8 <__isr_vec_space+0x7db8>
    7d30:	0005d6d2 	0x5d6d2
    7d34:	5f0e4300 	0x5f0e4300
    7d38:	0500626c 	bltz	t0,206ec <__memory_size+0xeec>
    7d3c:	00029bd5 	0x29bd5
    7d40:	390b4400 	xori	t3,t0,0x4400
    7d44:	05000027 	bltz	t0,7de4 <__isr_vec_space+0x7dc4>
    7d48:	000028d8 	0x28d8
    7d4c:	4a0b4c00 	c2	0xb4c00
    7d50:	05000027 	bltz	t0,7df0 <__isr_vec_space+0x7dd0>
    7d54:	00006bd9 	0x6bd9
    7d58:	7f0b5000 	ext	t3,t8,0x0,0xb
    7d5c:	0500002a 	bltz	t0,7e08 <__isr_vec_space+0x7de8>
    7d60:	00040edc 	0x40edc
    7d64:	850b5400 	lh	t3,21504(t0)
    7d68:	0500002b 	bltz	t0,7e18 <__isr_vec_space+0x7df8>
    7d6c:	0000f6e0 	0xf6e0
    7d70:	170b5800 	bne	t8,t3,1dd74 <__isr_vec_space+0x1dd54>
    7d74:	05000029 	bltz	t0,7e1c <__isr_vec_space+0x7dfc>
    7d78:	0000ebe2 	0xebe2
    7d7c:	1c0b5c00 	0x1c0b5c00
    7d80:	05000028 	bltz	t0,7e24 <__isr_vec_space+0x7e04>
    7d84:	000028e3 	0x28e3
    7d88:	13006400 	beqz	t8,20d8c <__memory_size+0x158c>
    7d8c:	00000028 	0x28
    7d90:	0000040e 	0x40e
    7d94:	00040e14 	0x40e14
    7d98:	01011400 	0x1011400
    7d9c:	46140000 	add.s	$f0,$f0,$f20
    7da0:	14000005 	bnez	zero,7db8 <__isr_vec_space+0x7d98>
    7da4:	00000028 	0x28
    7da8:	14040f00 	bne	zero,a0,b9ac <__isr_vec_space+0xb98c>
    7dac:	15000004 	bnez	t0,7dc0 <__isr_vec_space+0x7da0>
    7db0:	00002964 	0x2964
    7db4:	39050428 	xori	a1,t0,0x428
    7db8:	00054602 	srl	t0,a1,0x18
    7dbc:	28a01600 	slti	zero,a1,5632
    7dc0:	3b050000 	xori	a1,t8,0x0
    7dc4:	00002802 	srl	a1,zero,0x0
    7dc8:	32160000 	andi	s6,s0,0x0
    7dcc:	05000027 	bltz	t0,7e6c <__isr_vec_space+0x7e4c>
    7dd0:	062d0240 	0x62d0240
    7dd4:	16040000 	bne	s0,a0,7dd8 <__isr_vec_space+0x7db8>
    7dd8:	000027c8 	0x27c8
    7ddc:	2d024005 	sltiu	v0,t0,16389
    7de0:	08000006 	j	18 <ABIFlags_flags2+0x4>
    7de4:	00278d16 	0x278d16
    7de8:	02400500 	0x2400500
    7dec:	0000062d 	0x62d
    7df0:	2938160c 	slti	t8,t1,5644
    7df4:	42050000 	c0	0x50000
    7df8:	00002802 	srl	a1,zero,0x0
    7dfc:	96161000 	lhu	s6,4096(s0)
    7e00:	05000026 	bltz	t0,7e9c <__isr_vec_space+0x7e7c>
    7e04:	080f0243 	j	3c090c <__memory_size+0x3a110c>
    7e08:	16140000 	bne	s0,s4,7e0c <__isr_vec_space+0x7dec>
    7e0c:	000029e1 	0x29e1
    7e10:	28024505 	slti	v0,zero,17669
    7e14:	30000000 	andi	zero,zero,0x0
    7e18:	00294216 	0x294216
    7e1c:	02460500 	0x2460500
    7e20:	00000577 	0x577
    7e24:	28451634 	slti	a1,v0,5684
    7e28:	48050000 	mfc2	a1,$0
    7e2c:	00002802 	srl	a1,zero,0x0
    7e30:	52163800 	beql	s0,s6,15e34 <__isr_vec_space+0x15e14>
    7e34:	05000029 	bltz	t0,7edc <__isr_vec_space+0x7ebc>
    7e38:	082a024a 	j	a80928 <__memory_size+0xa61128>
    7e3c:	163c0000 	bne	s1,gp,7e40 <__isr_vec_space+0x7e20>
    7e40:	00002807 	srav	a1,zero,zero
    7e44:	61024d05 	0x61024d05
    7e48:	40000001 	mfc0	zero,c0_mvpcontrol
    7e4c:	0027b216 	0x27b216
    7e50:	024e0500 	0x24e0500
    7e54:	00000028 	0x28
    7e58:	2a741644 	slti	s4,s3,5700
    7e5c:	4f050000 	lwxc1	$f0,a1(t8)
    7e60:	00016102 	srl	t4,at,0x4
    7e64:	68164800 	0x68164800
    7e68:	05000028 	bltz	t0,7f0c <__isr_vec_space+0x7eec>
    7e6c:	08300250 	j	c00940 <__memory_size+0xbe1140>
    7e70:	164c0000 	bne	s2,t4,7e74 <__isr_vec_space+0x7e54>
    7e74:	000027d0 	0x27d0
    7e78:	28025305 	slti	v0,zero,21253
    7e7c:	50000000 	beqzl	zero,7e80 <__isr_vec_space+0x7e60>
    7e80:	00274216 	0x274216
    7e84:	02540500 	0x2540500
    7e88:	00000546 	0x546
    7e8c:	28991654 	slti	t9,a0,5716
    7e90:	77050000 	jalx	c140000 <__memory_size+0xc120800>
    7e94:	0007ed02 	srl	sp,a3,0x14
    7e98:	7a175800 	nori.b	$w0,$w11,0x17
    7e9c:	05000026 	bltz	t0,7f38 <__isr_vec_space+0x7f18>
    7ea0:	027e027b 	0x27e027b
    7ea4:	01480000 	0x1480000
    7ea8:	0027e517 	0x27e517
    7eac:	027c0500 	0x27c0500
    7eb0:	00000240 	sll	zero,zero,0x9
    7eb4:	2817014c 	slti	s7,zero,332
    7eb8:	0500002a 	bltz	t0,7f64 <__isr_vec_space+0x7f44>
    7ebc:	08410280 	j	1040a00 <__memory_size+0x1021200>
    7ec0:	02dc0000 	0x2dc0000
    7ec4:	00271b17 	0x271b17
    7ec8:	02850500 	0x2850500
    7ecc:	000005f2 	tlt	zero,zero,0x17
    7ed0:	001702e0 	0x1702e0
    7ed4:	05000027 	bltz	t0,7f74 <__isr_vec_space+0x7f54>
    7ed8:	084d0286 	j	1340a18 <__memory_size+0x1321218>
    7edc:	02ec0000 	0x2ec0000
    7ee0:	4c040f00 	0x4c040f00
    7ee4:	02000005 	lsa	zero,s0,zero,0x1
    7ee8:	00710801 	movt	at,v1,$fcc4
    7eec:	040f0000 	0x40f0000
    7ef0:	000003f0 	tge	zero,zero,0xf
    7ef4:	00002813 	0x2813
    7ef8:	00057700 	sll	t6,a1,0x1c
    7efc:	040e1400 	tnei	zero,5120
    7f00:	01140000 	0x1140000
    7f04:	14000001 	bnez	zero,7f0c <__isr_vec_space+0x7eec>
    7f08:	00000577 	0x577
    7f0c:	00002814 	0x2814
    7f10:	040f0000 	0x40f0000
    7f14:	0000057d 	0x57d
    7f18:	00054c18 	0x54c18
    7f1c:	59040f00 	0x59040f00
    7f20:	13000005 	beqz	t8,7f38 <__isr_vec_space+0x7f18>
    7f24:	00000076 	tne	zero,zero,0x1
    7f28:	000005a6 	0x5a6
    7f2c:	00040e14 	0x40e14
    7f30:	01011400 	0x1011400
    7f34:	76140000 	jalx	8500000 <__memory_size+0x84e0800>
    7f38:	14000000 	bnez	zero,7f3c <__isr_vec_space+0x7f1c>
    7f3c:	00000028 	0x28
    7f40:	88040f00 	lwl	a0,3840(zero)
    7f44:	13000005 	beqz	t8,7f5c <__isr_vec_space+0x7f3c>
    7f48:	00000028 	0x28
    7f4c:	000005c0 	sll	zero,zero,0x17
    7f50:	00040e14 	0x40e14
    7f54:	01011400 	0x1011400
    7f58:	0f000000 	jal	c000000 <__memory_size+0xbfe0800>
    7f5c:	0005ac04 	0x5ac04
    7f60:	003d0800 	0x3d0800
    7f64:	05d60000 	0x5d60000
    7f68:	c3090000 	ll	t1,0(t8)
    7f6c:	02000000 	0x2000000
    7f70:	003d0800 	0x3d0800
    7f74:	05e60000 	0x5e60000
    7f78:	c3090000 	ll	t1,0(t8)
    7f7c:	00000000 	nop
    7f80:	28be0500 	slti	s8,a1,1280
    7f84:	1d050000 	0x1d050000
    7f88:	0002c601 	0x2c601
    7f8c:	2a0f1900 	slti	t7,s0,6400
    7f90:	050c0000 	teqi	t0,0
    7f94:	06270121 	aclr	0x0,289(s1)
    7f98:	25160000 	addiu	s6,t0,0
    7f9c:	05000029 	bltz	t0,8044 <__isr_vec_space+0x8024>
    7fa0:	06270123 	aclr	0x0,291(s1)
    7fa4:	16000000 	bnez	s0,7fa8 <__isr_vec_space+0x7f88>
    7fa8:	000027de 	0x27de
    7fac:	28012405 	slti	at,zero,9221
    7fb0:	04000000 	bltz	zero,7fb4 <__isr_vec_space+0x7f94>
    7fb4:	0028b816 	0x28b816
    7fb8:	01250500 	0x1250500
    7fbc:	0000062d 	0x62d
    7fc0:	040f0008 	0x40f0008
    7fc4:	000005f2 	tlt	zero,zero,0x17
    7fc8:	05e6040f 	0x5e6040f
    7fcc:	8e190000 	lw	t9,0(s0)
    7fd0:	0e000026 	jal	8000098 <__memory_size+0x7fe0898>
    7fd4:	68013d05 	0x68013d05
    7fd8:	16000006 	bnez	s0,7ff4 <__isr_vec_space+0x7fd4>
    7fdc:	0000296b 	0x296b
    7fe0:	68013e05 	0x68013e05
    7fe4:	00000006 	srlv	zero,zero,zero
    7fe8:	00299816 	0x299816
    7fec:	013f0500 	0x13f0500
    7ff0:	00000668 	0x668
    7ff4:	29b41606 	slti	s4,t5,5638
    7ff8:	40050000 	mfc0	a1,c0_index
    7ffc:	00004b01 	0x4b01
    8000:	08000c00 	j	3000 <__isr_vec_space+0x2fe0>
    8004:	0000004b 	0x4b
    8008:	00000678 	0x678
    800c:	0000c309 	0xc309
    8010:	1a000200 	blez	s0,8814 <__isr_vec_space+0x87f4>
    8014:	025805d0 	0x25805d0
    8018:	00000779 	0x779
    801c:	0029f316 	0x29f316
    8020:	025a0500 	0x25a0500
    8024:	0000008d 	break	0x0,0x2
    8028:	299e1600 	slti	s8,t4,5632
    802c:	5b050000 	0x5b050000
    8030:	00054602 	srl	t0,a1,0x18
    8034:	fa160400 	sdc2	$22,1024(s0)
    8038:	05000027 	bltz	t0,80d8 <__isr_vec_space+0x80b8>
    803c:	0779025c 	0x779025c
    8040:	16080000 	bne	s0,t0,8044 <__isr_vec_space+0x8024>
    8044:	00002a4b 	0x2a4b
    8048:	77025d05 	jalx	c097414 <__memory_size+0xc077c14>
    804c:	24000001 	li	zero,1
    8050:	00279d16 	0x279d16
    8054:	025e0500 	0x25e0500
    8058:	00000028 	0x28
    805c:	29201648 	slti	zero,t1,5704
    8060:	5f050000 	0x5f050000
    8064:	00005902 	srl	t3,zero,0x4
    8068:	61165000 	0x61165000
    806c:	0500002a 	bltz	t0,8118 <__isr_vec_space+0x80f8>
    8070:	06330260 	bgezall	s1,89f4 <__isr_vec_space+0x89d4>
    8074:	16580000 	bne	s2,t8,8078 <__isr_vec_space+0x8058>
    8078:	0000292b 	0x292b
    807c:	eb026105 	swc2	$2,24837(t8)
    8080:	68000000 	0x68000000
    8084:	002a6616 	0x2a6616
    8088:	02620500 	0x2620500
    808c:	000000eb 	0xeb
    8090:	26d91670 	addiu	t9,s6,5744
    8094:	63050000 	0x63050000
    8098:	0000eb02 	srl	sp,zero,0xc
    809c:	1e167800 	0x1e167800
    80a0:	0500002a 	bltz	t0,814c <__isr_vec_space+0x812c>
    80a4:	07890264 	tgeiu	gp,612
    80a8:	16800000 	bnez	s4,80ac <__isr_vec_space+0x808c>
    80ac:	000027ee 	0x27ee
    80b0:	99026505 	lwr	v0,25861(t0)
    80b4:	88000007 	lwl	zero,7(zero)
    80b8:	0029c116 	0x29c116
    80bc:	02660500 	0x2660500
    80c0:	00000028 	0x28
    80c4:	276316a0 	addiu	v1,k1,5792
    80c8:	67050000 	0x67050000
    80cc:	0000eb02 	srl	sp,zero,0xc
    80d0:	ca16a400 	lwc2	$22,-23552(s0)
    80d4:	05000026 	bltz	t0,8170 <__isr_vec_space+0x8150>
    80d8:	00eb0268 	0xeb0268
    80dc:	16ac0000 	bne	s5,t4,80e0 <__isr_vec_space+0x80c0>
    80e0:	00002752 	0x2752
    80e4:	eb026905 	swc2	$2,26885(t8)
    80e8:	b4000000 	0xb4000000
    80ec:	0026a116 	0x26a116
    80f0:	026a0500 	0x26a0500
    80f4:	000000eb 	0xeb
    80f8:	26b016bc 	addiu	s0,s5,5820
    80fc:	6b050000 	0x6b050000
    8100:	0000eb02 	srl	sp,zero,0xc
    8104:	9e16c400 	0x9e16c400
    8108:	05000028 	bltz	t0,81ac <__isr_vec_space+0x818c>
    810c:	0028026c 	0x28026c
    8110:	00cc0000 	0xcc0000
    8114:	00054c08 	0x54c08
    8118:	00078900 	sll	s1,a3,0x4
    811c:	00c30900 	0xc30900
    8120:	00190000 	sll	zero,t9,0x0
    8124:	00054c08 	0x54c08
    8128:	00079900 	sll	s3,a3,0x4
    812c:	00c30900 	0xc30900
    8130:	00070000 	sll	zero,a3,0x0
    8134:	00054c08 	0x54c08
    8138:	0007a900 	sll	s5,a3,0x4
    813c:	00c30900 	0xc30900
    8140:	00170000 	sll	zero,s7,0x0
    8144:	7105f01a 	udi10	t0,a1,s8,0x0
    8148:	0007cd02 	srl	t9,a3,0x14
    814c:	28351600 	slti	s5,at,5632
    8150:	74050000 	jalx	140000 <__memory_size+0x120800>
    8154:	0007cd02 	srl	t9,a3,0x14
    8158:	15160000 	bne	t0,s6,815c <__isr_vec_space+0x813c>
    815c:	0500002a 	bltz	t0,8208 <__isr_vec_space+0x81e8>
    8160:	07dd0275 	0x7dd0275
    8164:	00780000 	0x780000
    8168:	0002c008 	0x2c008
    816c:	0007dd00 	sll	k1,a3,0x14
    8170:	00c30900 	0xc30900
    8174:	001d0000 	sll	zero,sp,0x0
    8178:	00008d08 	0x8d08
    817c:	0007ed00 	sll	sp,a3,0x14
    8180:	00c30900 	0xc30900
    8184:	001d0000 	sll	zero,sp,0x0
    8188:	5605f01b 	bnel	s0,a1,41f8 <__isr_vec_space+0x41d8>
    818c:	00080f02 	srl	at,t0,0x1c
    8190:	29641c00 	slti	a0,t3,7168
    8194:	6d050000 	0x6d050000
    8198:	00067802 	srl	t7,a2,0x0
    819c:	2a381c00 	slti	t8,s1,7168
    81a0:	76050000 	jalx	8140000 <__memory_size+0x8120800>
    81a4:	0007a902 	srl	s5,a3,0x4
    81a8:	4c080000 	lwxc1	$f0,t0(zero)
    81ac:	1f000005 	bgtz	t8,81c4 <__isr_vec_space+0x81a4>
    81b0:	09000008 	j	4000020 <__memory_size+0x3fe0820>
    81b4:	000000c3 	sra	zero,zero,0x3
    81b8:	2a1d0018 	slti	sp,s0,24
    81bc:	14000008 	bnez	zero,81e0 <__isr_vec_space+0x81c0>
    81c0:	0000040e 	0x40e
    81c4:	1f040f00 	0x1f040f00
    81c8:	0f000008 	jal	c000020 <__memory_size+0xbfe0820>
    81cc:	00016104 	0x16104
    81d0:	08411d00 	j	1047400 <__memory_size+0x1027c00>
    81d4:	28140000 	slti	s4,zero,0
    81d8:	00000000 	nop
    81dc:	0847040f 	j	11c103c <__memory_size+0x11a183c>
    81e0:	040f0000 	0x40f0000
    81e4:	00000836 	tne	zero,zero,0x20
    81e8:	0005e608 	0x5e608
    81ec:	00085d00 	sll	t3,t0,0x14
    81f0:	00c30900 	0xc30900
    81f4:	00020000 	sll	zero,v0,0x0
    81f8:	0028571e 	0x28571e
    81fc:	30420100 	andi	v0,v0,0x100
    8200:	808000b6 	lb	zero,182(a0)
    8204:	01000001 	movf	zero,t0,$fcc0
    8208:	00091e9c 	0x91e9c
    820c:	2c411f00 	sltiu	at,v0,7936
    8210:	42010000 	c0	0x10000
    8214:	00000028 	0x28
    8218:	00000264 	0x264
    821c:	01006420 	0x1006420
    8220:	00010142 	srl	zero,at,0x5
    8224:	00029000 	sll	s2,v0,0x0
    8228:	00702100 	0x702100
    822c:	027e4501 	0x27e4501
    8230:	02bc0000 	0x2bc0000
    8234:	6f220000 	0x6f220000
    8238:	0100002b 	sltu	zero,t0,zero
    823c:	00091e46 	0x91e46
    8240:	0002db00 	sll	k1,v0,0xc
    8244:	270e2200 	addiu	t6,t8,8704
    8248:	47010000 	bz.b	$w1,824c <__isr_vec_space+0x822c>
    824c:	00000924 	0x924
    8250:	00000304 	0x304
    8254:	01006e21 	0x1006e21
    8258:	00002848 	0x2848
    825c:	00032b00 	sll	a1,v1,0xc
    8260:	00692100 	0x692100
    8264:	00284901 	0x284901
    8268:	033e0000 	0x33e0000
    826c:	66210000 	0x66210000
    8270:	4a01006e 	c2	0x1006e
    8274:	00000294 	0x294
    8278:	00000373 	tltu	zero,zero,0xd
    827c:	002b7523 	0x2b7523
    8280:	24510100 	addiu	s1,v0,256
    8284:	00000000 	nop
    8288:	0000090d 	break	0x0,0x24
    828c:	646e6921 	0x646e6921
    8290:	285e0100 	slti	s8,v0,256
    8294:	9c000000 	0x9c000000
    8298:	25000003 	addiu	zero,t0,3
    829c:	8000b76c 	lb	zero,-18580(zero)
    82a0:	02540126 	0x2540126
    82a4:	00000086 	0x86
    82a8:	00b74027 	nor	t0,a1,s7
    82ac:	00094780 	sll	t0,t1,0x1e
    82b0:	54012600 	bnel	zero,at,11ab4 <__isr_vec_space+0x11a94>
    82b4:	00008002 	srl	s0,zero,0x0
    82b8:	7e040f00 	ext	a0,s0,0x1c,0x2
    82bc:	0f000002 	jal	c000008 <__memory_size+0xbfe0808>
    82c0:	0001f004 	sllv	s8,at,zero
    82c4:	2b7d2800 	slti	sp,k1,10240
    82c8:	0e010000 	jal	8040000 <__memory_size+0x8020800>
    82cc:	00000028 	0x28
    82d0:	29ce2900 	slti	t6,t6,10496
    82d4:	fb050000 	sdc2	$5,0(t8)
    82d8:	00094202 	srl	t0,t1,0x8
    82dc:	040e1800 	tnei	zero,6144
    82e0:	6a2a0000 	0x6a2a0000
    82e4:	0600002b 	bltz	s0,8394 <__isr_vec_space+0x8374>
    82e8:	01011455 	0x1011455
    82ec:	00000000 	nop
    82f0:	00000122 	0x122
    82f4:	1b2d0004 	0x1b2d0004
    82f8:	01040000 	0x1040000
    82fc:	00002c4d 	break	0x0,0xb1
    8300:	002bde01 	0x2bde01
    8304:	00b7b000 	0xb7b000
    8308:	00008880 	sll	s1,zero,0x2
    830c:	00374b00 	0x374b00
    8310:	06010200 	bgez	s0,8b14 <__isr_vec_space+0x8af4>
    8314:	0000006a 	0x6a
    8318:	68080102 	0x68080102
    831c:	02000000 	0x2000000
    8320:	019b0502 	0x19b0502
    8324:	02020000 	0x2020000
    8328:	00009307 	0x9307
    832c:	2cfb0300 	sltiu	k1,a3,768
    8330:	37020000 	ori	v0,t8,0x0
    8334:	00000048 	0x48
    8338:	5a050402 	0x5a050402
    833c:	02000001 	movf	zero,s0,$fcc0
    8340:	01090704 	0x1090704
    8344:	08020000 	j	80000 <__memory_size+0x60800>
    8348:	00015505 	0x15505
    834c:	07080200 	tgei	t8,512
    8350:	00000104 	0x104
    8354:	002cfd03 	0x2cfd03
    8358:	3d410300 	0x3d410300
    835c:	04000000 	bltz	zero,8360 <__isr_vec_space+0x8340>
    8360:	6e690504 	0x6e690504
    8364:	04020074 	bltzl	zero,8538 <__isr_vec_space+0x8518>
    8368:	00010e07 	0x10e07
    836c:	07040200 	0x7040200
    8370:	00000132 	tlt	zero,zero,0x4
    8374:	71080102 	0x71080102
    8378:	05000000 	bltz	t0,837c <__isr_vec_space+0x835c>
    837c:	00002c46 	0x2c46
    8380:	b7b03c01 	0xb7b03c01
    8384:	00888000 	0x888000
    8388:	9c010000 	0x9c010000
    838c:	000000f3 	tltu	zero,zero,0x3
    8390:	002c3c06 	0x2c3c06
    8394:	643c0100 	0x643c0100
    8398:	ba000000 	swr	zero,0(s0)
    839c:	07000003 	bltz	t8,83ac <__isr_vec_space+0x838c>
    83a0:	00002d05 	0x2d05
    83a4:	00643e01 	0x643e01
    83a8:	54010000 	bnel	zero,at,83ac <__isr_vec_space+0x838c>
    83ac:	00706f08 	0x706f08
    83b0:	00643f01 	0x643f01
    83b4:	69010000 	0x69010000
    83b8:	74657208 	jalx	195c820 <__memory_size+0x193d020>
    83bc:	64400100 	0x64400100
    83c0:	01000000 	0x1000000
    83c4:	b8100952 	swr	s0,2386(zero)
    83c8:	01098000 	0x1098000
    83cc:	00e90000 	0xe90000
    83d0:	010a0000 	0x10a0000
    83d4:	00830254 	0x830254
    83d8:	b8280b00 	swr	t0,2816(at)
    83dc:	011a8000 	0x11a8000
    83e0:	0c000000 	jal	0 <hardware_exit_hook>
    83e4:	00000084 	0x84
    83e8:	000000fe 	0xfe
    83ec:	ea0e000d 	swc2	$14,13(s0)
    83f0:	0100002c 	0x100002c
    83f4:	0000f338 	0xf338
    83f8:	2c2b0f00 	sltiu	t3,at,3840
    83fc:	34010000 	li	at,0x0
    8400:	0000011a 	0x11a
    8404:	00006410 	0x6410
    8408:	0a110000 	j	8440000 <__memory_size+0x8420800>
    840c:	0100002d 	0x100002d
    8410:	00006f33 	tltu	zero,zero,0x1bc
    8414:	00e90000 	0xe90000
    8418:	00020000 	sll	zero,v0,0x0
    841c:	00001c19 	0x1c19
    8420:	38a50104 	xori	a1,a1,0x104
    8424:	b8380000 	swr	t8,0(at)
    8428:	b8f08000 	swr	s0,-32768(a3)
    842c:	732f8000 	s32madd	xr0,xr0,t9,t7
    8430:	74617263 	jalx	185c98c <__memory_size+0x183d18c>
    8434:	6d2f6863 	0x6d2f6863
    8438:	6a2f6670 	0x6a2f6670
    843c:	2f73626f 	sltiu	s3,k1,25199
    8440:	39333435 	xori	s3,t1,0x3435
    8444:	38342f35 	xori	s4,at,0x2f35
    8448:	2f343930 	sltiu	s4,t9,14640
    844c:	31303432 	andi	s0,t1,0x3432
    8450:	732f3839 	0x732f3839
    8454:	65726168 	0x65726168
    8458:	63672f64 	0x63672f64
    845c:	696c2f63 	0x696c2f63
    8460:	6f6c6762 	0x6f6c6762
    8464:	6d2f7373 	0x6d2f7373
    8468:	2f737069 	sltiu	s3,k1,28777
    846c:	2f696875 	sltiu	t1,k1,26741
    8470:	5f696875 	0x5f696875
    8474:	61746567 	0x61746567
    8478:	2e736772 	sltiu	s3,s3,26482
    847c:	732f0053 	s32stdv	xr1,t9,t7,0
    8480:	74617263 	jalx	185c98c <__memory_size+0x183d18c>
    8484:	6d2f6863 	0x6d2f6863
    8488:	6a2f6670 	0x6a2f6670
    848c:	2f73626f 	sltiu	s3,k1,25199
    8490:	39333435 	xori	s3,t1,0x3435
    8494:	38342f35 	xori	s4,at,0x2f35
    8498:	2f343930 	sltiu	s4,t9,14640
    849c:	32303432 	andi	s0,s1,0x3432
    84a0:	772f3236 	jalx	cbcc8d8 <__memory_size+0xcbad0d8>
    84a4:	2f6b726f 	sltiu	t3,k1,29295
    84a8:	2d6a626f 	sltiu	t2,t3,25199
    84ac:	7370696d 	s16sdi	xr5,k1,52,
    84b0:	69746d2d 	0x69746d2d
    84b4:	666c652d 	0x666c652d
    84b8:	6363672f 	0x6363672f
    84bc:	70696d2f 	0x70696d2f
    84c0:	746d2d73 	jalx	1b4b5cc <__memory_size+0x1b2bdcc>
    84c4:	6c652d69 	0x6c652d69
    84c8:	696d2f66 	0x696d2f66
    84cc:	6c657370 	0x6c657370
    84d0:	2d32722d 	sltiu	s2,t1,29229
    84d4:	74666f73 	jalx	199bdcc <__memory_size+0x197c5cc>
    84d8:	77656e2d 	jalx	d95b8b4 <__memory_size+0xd93c0b4>
    84dc:	2f62696c 	sltiu	v0,k1,26988
    84e0:	2f62696c 	sltiu	v0,k1,26988
    84e4:	6762696c 	0x6762696c
    84e8:	73736f6c 	s16ldi	xr13,k1,438,ptn2
    84ec:	70696d2f 	0x70696d2f
    84f0:	4e470073 	c3	0x470073
    84f4:	53412055 	beql	k0,at,1064c <__isr_vec_space+0x1062c>
    84f8:	322e3220 	andi	t6,s1,0x3220
    84fc:	30392e34 	andi	t9,at,0x2e34
    8500:	0b800100 	j	e000400 <__memory_size+0xdfe0c00>
    8504:	04000001 	bltz	zero,850c <__isr_vec_space+0x84ec>
    8508:	001c2d00 	sll	a1,gp,0x14
    850c:	4d010400 	lwxc1	$f16,at(t0)
    8510:	0100002c 	0x100002c
    8514:	00002d1c 	0x2d1c
    8518:	8000b8f0 	lb	zero,-18192(zero)
    851c:	0000004c 	syscall	0x1
    8520:	0000394b 	0x394b
    8524:	6a060102 	0x6a060102
    8528:	02000000 	0x2000000
    852c:	00680801 	movf	at,v1,$fcc2
    8530:	02020000 	0x2020000
    8534:	00019b05 	0x19b05
    8538:	07020200 	bltzl	t8,8d3c <__isr_vec_space+0x8d1c>
    853c:	00000093 	0x93
    8540:	002cfb03 	0x2cfb03
    8544:	48370200 	0x48370200
    8548:	02000000 	0x2000000
    854c:	015a0504 	0x15a0504
    8550:	04020000 	bltzl	zero,8554 <__isr_vec_space+0x8534>
    8554:	00010907 	0x10907
    8558:	05080200 	tgei	t0,512
    855c:	00000155 	0x155
    8560:	04070802 	aclr	0x0,-2046(zero)
    8564:	03000001 	movf	zero,t8,$fcc0
    8568:	00002cfd 	0x2cfd
    856c:	003d4103 	0x3d4103
    8570:	04040000 	0x4040000
    8574:	746e6905 	jalx	1b9a414 <__memory_size+0x1b7ac14>
    8578:	07040200 	0x7040200
    857c:	0000010e 	0x10e
    8580:	32070402 	andi	a3,s0,0x402
    8584:	05000001 	bltz	t0,858c <__isr_vec_space+0x856c>
    8588:	08010204 	j	40810 <__memory_size+0x21010>
    858c:	00000071 	tgeu	zero,zero,0x1
    8590:	002db206 	0x2db206
    8594:	f0270100 	0xf0270100
    8598:	4c8000b8 	nmsub.s	$f2,$f4,$f0,$f0
    859c:	01000000 	0x1000000
    85a0:	0000e79c 	0xe79c
    85a4:	2da90700 	sltiu	t1,t5,1792
    85a8:	27010000 	addiu	at,t8,0
    85ac:	000000e7 	0xe7
    85b0:	000003d8 	0x3d8
    85b4:	002d8907 	0x2d8907
    85b8:	e7270100 	swc1	$f7,256(t9)
    85bc:	f6000000 	sdc1	$f0,0(s0)
    85c0:	08000003 	j	c <ABIFlags_ases>
    85c4:	0100706f 	0x100706f
    85c8:	00006429 	0x6429
    85cc:	09690100 	j	5a40400 <__memory_size+0x5a20c00>
    85d0:	00002da2 	0x2da2
    85d4:	00842a01 	0x842a01
    85d8:	52010000 	beql	s0,at,85dc <__isr_vec_space+0x85bc>
    85dc:	002d8009 	0x2d8009
    85e0:	842b0100 	lh	t3,256(at)
    85e4:	01000000 	0x1000000
    85e8:	040a0053 	tlti	zero,83
    85ec:	00000084 	0x84
    85f0:	0000860b 	0x860b
    85f4:	0000f800 	sll	ra,zero,0x0
    85f8:	0d000c00 	jal	4003000 <__memory_size+0x3fe3800>
    85fc:	00002d72 	tlt	zero,zero,0xb5
    8600:	00ed2301 	0xed2301
    8604:	940d0000 	lhu	t5,0(zero)
    8608:	0100002d 	0x100002d
    860c:	0000ed24 	0xed24
    8610:	00ea0000 	0xea0000
    8614:	00020000 	sll	zero,v0,0x0
    8618:	00001cd8 	0x1cd8
    861c:	3a8d0104 	xori	t5,s4,0x104
    8620:	00200000 	0x200000
    8624:	732f0000 	madd	t9,t7
    8628:	74617263 	jalx	185c98c <__memory_size+0x183d18c>
    862c:	6d2f6863 	0x6d2f6863
    8630:	6a2f6670 	0x6a2f6670
    8634:	2f73626f 	sltiu	s3,k1,25199
    8638:	39333435 	xori	s3,t1,0x3435
    863c:	38342f35 	xori	s4,at,0x2f35
    8640:	2f343930 	sltiu	s4,t9,14640
    8644:	31303432 	andi	s0,t1,0x3432
    8648:	732f3839 	0x732f3839
    864c:	65726168 	0x65726168
    8650:	63672f64 	0x63672f64
    8654:	696c2f63 	0x696c2f63
    8658:	6f6c6762 	0x6f6c6762
    865c:	6d2f7373 	0x6d2f7373
    8660:	2f737069 	sltiu	s3,k1,28777
    8664:	2f6c6168 	sltiu	t4,k1,24936
    8668:	7370696d 	s16sdi	xr5,k1,52,
    866c:	6378655f 	0x6378655f
    8670:	655f7470 	0x655f7470
    8674:	7972746e 	0x7972746e
    8678:	2f00532e 	sltiu	zero,t8,21294
    867c:	61726373 	0x61726373
    8680:	2f686374 	sltiu	t0,k1,25460
    8684:	2f66706d 	sltiu	a2,k1,28781
    8688:	73626f6a 	s16ldd	xr13,k1,310,ptn0
    868c:	3334352f 	andi	s4,t9,0x352f
    8690:	342f3539 	ori	t7,at,0x3539
    8694:	34393038 	ori	t9,at,0x3038
    8698:	3034322f 	andi	s4,at,0x322f
    869c:	2f323632 	sltiu	s2,t9,13874
    86a0:	6b726f77 	0x6b726f77
    86a4:	6a626f2f 	0x6a626f2f
    86a8:	70696d2d 	s16sdi	xr4,v1,182,ptn1
    86ac:	746d2d73 	jalx	1b4b5cc <__memory_size+0x1b2bdcc>
    86b0:	6c652d69 	0x6c652d69
    86b4:	63672f66 	0x63672f66
    86b8:	696d2f63 	0x696d2f63
    86bc:	6d2d7370 	0x6d2d7370
    86c0:	652d6974 	0x652d6974
    86c4:	6d2f666c 	0x6d2f666c
    86c8:	65737069 	0x65737069
    86cc:	32722d6c 	andi	s2,s3,0x2d6c
    86d0:	666f732d 	0x666f732d
    86d4:	656e2d74 	0x656e2d74
    86d8:	62696c77 	0x62696c77
    86dc:	62696c2f 	0x62696c2f
    86e0:	62696c2f 	0x62696c2f
    86e4:	736f6c67 	0x736f6c67
    86e8:	696d2f73 	0x696d2f73
    86ec:	47007370 	bz.b	$w0,254b0 <__memory_size+0x5cb0>
    86f0:	4120554e 	0x4120554e
    86f4:	2e322053 	sltiu	s2,s1,8275
    86f8:	392e3432 	xori	t6,t1,0x3432
    86fc:	80010030 	lb	at,48(zero)
    8700:	000000f1 	tgeu	zero,zero,0x3
    8704:	1cea0002 	0x1cea0002
    8708:	01040000 	0x1040000
    870c:	00003ba3 	0x3ba3
    8710:	8000b93c 	lb	zero,-18116(zero)
    8714:	8000b9ec 	lb	zero,-17940(zero)
    8718:	7263732f 	0x7263732f
    871c:	68637461 	0x68637461
    8720:	66706d2f 	0x66706d2f
    8724:	626f6a2f 	0x626f6a2f
    8728:	34352f73 	ori	s5,at,0x2f73
    872c:	2f353933 	sltiu	s5,t9,14643
    8730:	39303834 	xori	s0,t1,0x3834
    8734:	34322f34 	ori	s2,at,0x2f34
    8738:	38393130 	xori	t9,at,0x3130
    873c:	6168732f 	0x6168732f
    8740:	2f646572 	sltiu	a0,k1,25970
    8744:	2f636367 	sltiu	v1,k1,25447
    8748:	6762696c 	0x6762696c
    874c:	73736f6c 	s16ldi	xr13,k1,438,ptn2
    8750:	70696d2f 	0x70696d2f
    8754:	61682f73 	0x61682f73
    8758:	696d2f6c 	0x696d2f6c
    875c:	655f7370 	0x655f7370
    8760:	74706378 	jalx	1c18de0 <__memory_size+0x1bf95e0>
    8764:	6765725f 	0x6765725f
    8768:	65747369 	0x65747369
    876c:	00532e72 	tlt	v0,s3,0xb9
    8770:	7263732f 	0x7263732f
    8774:	68637461 	0x68637461
    8778:	66706d2f 	0x66706d2f
    877c:	626f6a2f 	0x626f6a2f
    8780:	34352f73 	ori	s5,at,0x2f73
    8784:	2f353933 	sltiu	s5,t9,14643
    8788:	39303834 	xori	s0,t1,0x3834
    878c:	34322f34 	ori	s2,at,0x2f34
    8790:	32363230 	andi	s6,s1,0x3230
    8794:	726f772f 	0x726f772f
    8798:	626f2f6b 	0x626f2f6b
    879c:	696d2d6a 	0x696d2d6a
    87a0:	6d2d7370 	0x6d2d7370
    87a4:	652d6974 	0x652d6974
    87a8:	672f666c 	0x672f666c
    87ac:	6d2f6363 	0x6d2f6363
    87b0:	2d737069 	sltiu	s3,t3,28777
    87b4:	2d69746d 	sltiu	t1,t3,29805
    87b8:	2f666c65 	sltiu	a2,k1,27749
    87bc:	7370696d 	s16sdi	xr5,k1,52,
    87c0:	722d6c65 	s8sdi	xr1,s1,91,ptn3
    87c4:	6f732d32 	0x6f732d32
    87c8:	6e2d7466 	0x6e2d7466
    87cc:	696c7765 	0x696c7765
    87d0:	696c2f62 	0x696c2f62
    87d4:	696c2f62 	0x696c2f62
    87d8:	6f6c6762 	0x6f6c6762
    87dc:	6d2f7373 	0x6d2f7373
    87e0:	00737069 	0x737069
    87e4:	20554e47 	addi	s5,v0,20039
    87e8:	32205341 	andi	zero,s1,0x5341
    87ec:	2e34322e 	sltiu	s4,s1,12846
    87f0:	01003039 	0x1003039
    87f4:	Address 0x00000000000087f4 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	10001101 	b	4408 <__isr_vec_space+0x43e8>
       4:	12011106 	beq	s0,at,4420 <__isr_vec_space+0x4400>
       8:	1b080301 	0x1b080301
       c:	13082508 	beq	t8,t0,9430 <__isr_vec_space+0x9410>
      10:	00000005 	lsa	zero,zero,zero,0x1
      14:	10001101 	b	441c <__isr_vec_space+0x43fc>
      18:	12011106 	beq	s0,at,4434 <__isr_vec_space+0x4414>
      1c:	1b080301 	0x1b080301
      20:	13082508 	beq	t8,t0,9444 <__isr_vec_space+0x9424>
      24:	00000005 	lsa	zero,zero,zero,0x1
      28:	10001101 	b	4430 <__isr_vec_space+0x4410>
      2c:	12011106 	beq	s0,at,4448 <__isr_vec_space+0x4428>
      30:	1b080301 	0x1b080301
      34:	13082508 	beq	t8,t0,9458 <__isr_vec_space+0x9438>
      38:	00000005 	lsa	zero,zero,zero,0x1
      3c:	25011101 	addiu	at,t0,4353
      40:	030b130e 	0x30b130e
      44:	110e1b0e 	beq	t0,t6,6c80 <__isr_vec_space+0x6c60>
      48:	10061201 	beq	zero,a2,4850 <__isr_vec_space+0x4830>
      4c:	02000017 	0x2000017
      50:	0b0b0024 	j	c2c0090 <__memory_size+0xc2a0890>
      54:	0e030b3e 	jal	80c2cf8 <__memory_size+0x80a34f8>
      58:	24030000 	li	v1,0
      5c:	3e0b0b00 	0x3e0b0b00
      60:	0008030b 	0x8030b
      64:	00160400 	sll	zero,s6,0x10
      68:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
      6c:	13490b3b 	beq	k0,t1,2d5c <__isr_vec_space+0x2d3c>
      70:	0f050000 	jal	c140000 <__memory_size+0xc120800>
      74:	000b0b00 	sll	at,t3,0xc
      78:	012e0600 	0x12e0600
      7c:	0e03193f 	jal	80c64fc <__memory_size+0x80a6cfc>
      80:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
      84:	01111927 	0x1111927
      88:	18400612 	blez	v0,18d4 <__isr_vec_space+0x18b4>
      8c:	01194297 	0x1194297
      90:	07000013 	bltz	t8,e0 <__isr_vec_space+0xc0>
      94:	0e030005 	jal	80c0014 <__memory_size+0x80a0814>
      98:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
      9c:	18021349 	0x18021349
      a0:	2e080000 	sltiu	t0,s0,0
      a4:	03193f01 	0x3193f01
      a8:	3b0b3a0e 	xori	t3,t8,0x3a0e
      ac:	1119270b 	beq	t0,t9,9cdc <__isr_vec_space+0x9cbc>
      b0:	40061201 	0x40061201
      b4:	19429618 	0x19429618
      b8:	00001301 	0x1301
      bc:	03003409 	jalr.hb	a2,t8
      c0:	3b0b3a0e 	xori	t3,t8,0x3a0e
      c4:	0213490b 	0x213490b
      c8:	0a000018 	j	8000060 <__memory_size+0x7fe0860>
      cc:	193f002e 	0x193f002e
      d0:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
      d4:	19270b3b 	0x19270b3b
      d8:	0000193c 	0x193c
      dc:	3f012e0b 	0x3f012e0b
      e0:	3a0e0319 	xori	t6,s0,0x319
      e4:	490b3b0b 	bc2tl	$cc2,ed14 <__isr_vec_space+0xecf4>
      e8:	00193c13 	0x193c13
      ec:	00180c00 	sll	at,t8,0x10
      f0:	2e0d0000 	sltiu	t5,s0,0
      f4:	03193f00 	0x3193f00
      f8:	3b0b3a0e 	xori	t3,t8,0x3a0e
      fc:	1119270b 	beq	t0,t9,9d2c <__isr_vec_space+0x9d0c>
     100:	40061201 	0x40061201
     104:	19429618 	0x19429618
     108:	2e0e0000 	sltiu	t6,s0,0
     10c:	3a0e0301 	xori	t6,s0,0x301
     110:	27053b0b 	addiu	a1,t8,15115
     114:	12011119 	beq	s0,at,457c <__isr_vec_space+0x455c>
     118:	97184006 	lhu	t8,16390(t8)
     11c:	13011942 	beq	t8,at,6628 <__isr_vec_space+0x6608>
     120:	050f0000 	0x50f0000
     124:	3a0e0300 	xori	t6,s0,0x300
     128:	49053b0b 	bc2t	$cc1,ed58 <__isr_vec_space+0xed38>
     12c:	00180213 	0x180213
     130:	00341000 	0x341000
     134:	0b3a0803 	j	ce8200c <__memory_size+0xce6280c>
     138:	1349053b 	beq	k0,t1,1628 <__isr_vec_space+0x1608>
     13c:	00001802 	srl	v1,zero,0x0
     140:	03012e11 	0x3012e11
     144:	3b0b3a0e 	xori	t3,t8,0x3a0e
     148:	11192705 	beq	t0,t9,9d60 <__isr_vec_space+0x9d40>
     14c:	40061201 	0x40061201
     150:	19429618 	0x19429618
     154:	00001301 	0x1301
     158:	03003412 	0x3003412
     15c:	3b0b3a0e 	xori	t3,t8,0x3a0e
     160:	02134905 	0x2134905
     164:	13000018 	beqz	t8,1c8 <__isr_vec_space+0x1a8>
     168:	13490026 	beq	k0,t1,204 <__isr_vec_space+0x1e4>
     16c:	34140000 	li	s4,0x0
     170:	3a0e0300 	xori	t6,s0,0x300
     174:	490b3b0b 	bc2tl	$cc2,eda4 <__isr_vec_space+0xed84>
     178:	02193f13 	0x2193f13
     17c:	15000018 	bnez	t0,1e0 <__isr_vec_space+0x1c0>
     180:	0b0b000f 	j	c2c003c <__memory_size+0xc2a083c>
     184:	00001349 	0x1349
     188:	49003516 	bc2f	d5e4 <__isr_vec_space+0xd5c4>
     18c:	00000013 	mtlo	zero
     190:	25011101 	addiu	at,t0,4353
     194:	030b130e 	0x30b130e
     198:	110e1b0e 	beq	t0,t6,6dd4 <__isr_vec_space+0x6db4>
     19c:	10061201 	beq	zero,a2,49a4 <__isr_vec_space+0x4984>
     1a0:	02000017 	0x2000017
     1a4:	0b0b0024 	j	c2c0090 <__memory_size+0xc2a0890>
     1a8:	0e030b3e 	jal	80c2cf8 <__memory_size+0x80a34f8>
     1ac:	24030000 	li	v1,0
     1b0:	3e0b0b00 	0x3e0b0b00
     1b4:	0008030b 	0x8030b
     1b8:	00160400 	sll	zero,s6,0x10
     1bc:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     1c0:	13490b3b 	beq	k0,t1,2eb0 <__isr_vec_space+0x2e90>
     1c4:	0f050000 	jal	c140000 <__memory_size+0xc120800>
     1c8:	000b0b00 	sll	at,t3,0xc
     1cc:	000f0600 	sll	zero,t7,0x18
     1d0:	13490b0b 	beq	k0,t1,2e00 <__isr_vec_space+0x2de0>
     1d4:	16070000 	bne	s0,a3,1d8 <__isr_vec_space+0x1b8>
     1d8:	3a0e0300 	xori	t6,s0,0x300
     1dc:	49053b0b 	bc2t	$cc1,ee0c <__isr_vec_space+0xedec>
     1e0:	08000013 	j	4c <__isr_vec_space+0x2c>
     1e4:	13490026 	beq	k0,t1,280 <__isr_vec_space+0x260>
     1e8:	2e090000 	sltiu	t1,s0,0
     1ec:	03193f00 	0x3193f00
     1f0:	3b0b3a0e 	xori	t3,t8,0x3a0e
     1f4:	4919270b 	bc2t	$cc6,9e24 <__isr_vec_space+0x9e04>
     1f8:	12011113 	beq	s0,at,4648 <__isr_vec_space+0x4628>
     1fc:	96184006 	lhu	t8,16390(s0)
     200:	00001942 	srl	v1,zero,0x5
     204:	03002e0a 	0x3002e0a
     208:	3b0b3a0e 	xori	t3,t8,0x3a0e
     20c:	1119270b 	beq	t0,t9,9e3c <__isr_vec_space+0x9e1c>
     210:	40061201 	0x40061201
     214:	19429718 	0x19429718
     218:	2e0b0000 	sltiu	t3,s0,0
     21c:	03193f01 	0x3193f01
     220:	3b0b3a0e 	xori	t3,t8,0x3a0e
     224:	1119270b 	beq	t0,t9,9e54 <__isr_vec_space+0x9e34>
     228:	40061201 	0x40061201
     22c:	19429718 	0x19429718
     230:	00001301 	0x1301
     234:	11010b0c 	beq	t0,at,2e68 <__isr_vec_space+0x2e48>
     238:	00061201 	0x61201
     23c:	00340d00 	0x340d00
     240:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     244:	13490b3b 	beq	k0,t1,2f34 <__isr_vec_space+0x2f14>
     248:	00001802 	srl	v1,zero,0x0
     24c:	0300340e 	0x300340e
     250:	3b0b3a08 	xori	t3,t8,0x3a08
     254:	0213490b 	0x213490b
     258:	0f000018 	jal	c000060 <__memory_size+0xbfe0860>
     25c:	193f002e 	0x193f002e
     260:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     264:	19270b3b 	0x19270b3b
     268:	06120111 	bltzall	s0,6b0 <__isr_vec_space+0x690>
     26c:	42971840 	c0	0x971840
     270:	10000019 	b	2d8 <__isr_vec_space+0x2b8>
     274:	0e030005 	jal	80c0014 <__memory_size+0x80a0814>
     278:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
     27c:	18021349 	0x18021349
     280:	2e110000 	sltiu	s1,s0,0
     284:	03193f00 	0x3193f00
     288:	3b0b3a0e 	xori	t3,t8,0x3a0e
     28c:	1119270b 	beq	t0,t9,9ebc <__isr_vec_space+0x9e9c>
     290:	40061201 	0x40061201
     294:	19429618 	0x19429618
     298:	35120000 	ori	s2,t0,0x0
     29c:	00134900 	sll	t1,s3,0x4
     2a0:	00341300 	0x341300
     2a4:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     2a8:	13490b3b 	beq	k0,t1,2f98 <__isr_vec_space+0x2f78>
     2ac:	193c193f 	0x193c193f
     2b0:	01000000 	0x1000000
     2b4:	0e250111 	jal	8940444 <__memory_size+0x8920c44>
     2b8:	0e030b13 	jal	80c2c4c <__memory_size+0x80a344c>
     2bc:	01110e1b 	0x1110e1b
     2c0:	17100612 	bne	t8,s0,1b0c <__isr_vec_space+0x1aec>
     2c4:	24020000 	li	v0,0
     2c8:	3e0b0b00 	0x3e0b0b00
     2cc:	000e030b 	0xe030b
     2d0:	00240300 	0x240300
     2d4:	0b3e0b0b 	j	cf82c2c <__memory_size+0xcf6342c>
     2d8:	00000803 	sra	at,zero,0x0
     2dc:	03001604 	0x3001604
     2e0:	3b0b3a0e 	xori	t3,t8,0x3a0e
     2e4:	0013490b 	0x13490b
     2e8:	000f0500 	sll	zero,t7,0x14
     2ec:	00000b0b 	0xb0b
     2f0:	3f012e06 	0x3f012e06
     2f4:	3a0e0319 	xori	t6,s0,0x319
     2f8:	270b3b0b 	addiu	t3,t8,15115
     2fc:	12011119 	beq	s0,at,4764 <__isr_vec_space+0x4744>
     300:	96184006 	lhu	t8,16390(s0)
     304:	13011942 	beq	t8,at,6810 <__isr_vec_space+0x67f0>
     308:	05070000 	aclr	0x0,0(t0)
     30c:	3a0e0300 	xori	t6,s0,0x300
     310:	490b3b0b 	bc2tl	$cc2,ef40 <__isr_vec_space+0xef20>
     314:	00180213 	0x180213
     318:	00340800 	0x340800
     31c:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     320:	13490b3b 	beq	k0,t1,3010 <__isr_vec_space+0x2ff0>
     324:	00001802 	srl	v1,zero,0x0
     328:	49002609 	bc2f	9b50 <__isr_vec_space+0x9b30>
     32c:	0a000013 	j	800004c <__memory_size+0x7fe084c>
     330:	0e03012e 	jal	80c04b8 <__memory_size+0x80a0cb8>
     334:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
     338:	01111927 	0x1111927
     33c:	18400612 	blez	v0,1b88 <__isr_vec_space+0x1b68>
     340:	01194296 	0x1194296
     344:	0b000013 	j	c00004c <__memory_size+0xbfe084c>
     348:	08030034 	j	c00d0 <__memory_size+0xa08d0>
     34c:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
     350:	18021349 	0x18021349
     354:	2e0c0000 	sltiu	t4,s0,0
     358:	03193f01 	0x3193f01
     35c:	3b0b3a0e 	xori	t3,t8,0x3a0e
     360:	3c13490b 	lui	s3,0x490b
     364:	0d000019 	jal	4000064 <__memory_size+0x3fe0864>
     368:	00000018 	mult	zero,zero
     36c:	3f012e0e 	0x3f012e0e
     370:	3a0e0319 	xori	t6,s0,0x319
     374:	270b3b0b 	addiu	t3,t8,15115
     378:	11134919 	beq	t0,s3,127e0 <__isr_vec_space+0x127c0>
     37c:	40061201 	0x40061201
     380:	19429718 	0x19429718
     384:	00001301 	0x1301
     388:	01110100 	0x1110100
     38c:	0b130e25 	j	c4c3894 <__memory_size+0xc4a4094>
     390:	0e1b0e03 	jal	86c380c <__memory_size+0x86a400c>
     394:	06120111 	bltzall	s0,7dc <__isr_vec_space+0x7bc>
     398:	00001710 	0x1710
     39c:	03001602 	0x3001602
     3a0:	3b0b3a0e 	xori	t3,t8,0x3a0e
     3a4:	0013490b 	0x13490b
     3a8:	00240300 	0x240300
     3ac:	0b3e0b0b 	j	cf82c2c <__memory_size+0xcf6342c>
     3b0:	00000e03 	sra	at,zero,0x18
     3b4:	0b002404 	j	c009010 <__memory_size+0xbfe9810>
     3b8:	030b3e0b 	0x30b3e0b
     3bc:	05000008 	bltz	t0,3e0 <__isr_vec_space+0x3c0>
     3c0:	0b0b000f 	j	c2c003c <__memory_size+0xc2a083c>
     3c4:	04060000 	0x4060000
     3c8:	3a0b0b01 	xori	t3,s0,0xb01
     3cc:	010b3b0b 	0x10b3b0b
     3d0:	07000013 	bltz	t8,420 <__isr_vec_space+0x400>
     3d4:	0e030028 	jal	80c00a0 <__memory_size+0x80a08a0>
     3d8:	00000d1c 	0xd1c
     3dc:	3f002e08 	0x3f002e08
     3e0:	3a0e0319 	xori	t6,s0,0x319
     3e4:	270b3b0b 	addiu	t3,t8,15115
     3e8:	12011119 	beq	s0,at,4850 <__isr_vec_space+0x4830>
     3ec:	96184006 	lhu	t8,16390(s0)
     3f0:	00001942 	srl	v1,zero,0x5
     3f4:	3f012e09 	0x3f012e09
     3f8:	3a0e0319 	xori	t6,s0,0x319
     3fc:	270b3b0b 	addiu	t3,t8,15115
     400:	11134919 	beq	t0,s3,12868 <__isr_vec_space+0x12848>
     404:	40061201 	0x40061201
     408:	19429718 	0x19429718
     40c:	00001301 	0x1301
     410:	0300340a 	0x300340a
     414:	3b0b3a0e 	xori	t3,t8,0x3a0e
     418:	0213490b 	0x213490b
     41c:	0b000018 	j	c000060 <__memory_size+0xbfe0860>
     420:	0e030034 	jal	80c00d0 <__memory_size+0x80a08d0>
     424:	053b0b3a 	0x53b0b3a
     428:	18021349 	0x18021349
     42c:	340c0000 	li	t4,0x0
     430:	3a080300 	xori	t0,s0,0x300
     434:	49053b0b 	bc2t	$cc1,f064 <__isr_vec_space+0xf044>
     438:	00180213 	0x180213
     43c:	01010d00 	0x1010d00
     440:	13011349 	beq	t8,at,5168 <__isr_vec_space+0x5148>
     444:	210e0000 	addi	t6,t0,0
     448:	2f134900 	sltiu	s3,t8,18688
     44c:	0f00000b 	jal	c00002c <__memory_size+0xbfe082c>
     450:	0e03012e 	jal	80c04b8 <__memory_size+0x80a0cb8>
     454:	053b0b3a 	0x53b0b3a
     458:	01111927 	0x1111927
     45c:	18400612 	blez	v0,1ca8 <__isr_vec_space+0x1c88>
     460:	01194296 	0x1194296
     464:	10000013 	b	4b4 <__isr_vec_space+0x494>
     468:	0e030005 	jal	80c0014 <__memory_size+0x80a0814>
     46c:	053b0b3a 	0x53b0b3a
     470:	18021349 	0x18021349
     474:	2e110000 	sltiu	s1,s0,0
     478:	03193f01 	0x3193f01
     47c:	3b0b3a0e 	xori	t3,t8,0x3a0e
     480:	11192705 	beq	t0,t9,a098 <__isr_vec_space+0xa078>
     484:	40061201 	0x40061201
     488:	19429618 	0x19429618
     48c:	00001301 	0x1301
     490:	11010b12 	beq	t0,at,30dc <__isr_vec_space+0x30bc>
     494:	01061201 	0x1061201
     498:	13000013 	beqz	t8,4e8 <__isr_vec_space+0x4c8>
     49c:	193f012e 	0x193f012e
     4a0:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     4a4:	1349053b 	beq	k0,t1,1994 <__isr_vec_space+0x1974>
     4a8:	0000193c 	0x193c
     4ac:	00001814 	0x1814
     4b0:	010b1500 	0x10b1500
     4b4:	06120111 	bltzall	s0,8fc <__isr_vec_space+0x8dc>
     4b8:	2e160000 	sltiu	s6,s0,0
     4bc:	3a0e0301 	xori	t6,s0,0x301
     4c0:	27053b0b 	addiu	a1,t8,15115
     4c4:	11134919 	beq	t0,s3,1292c <__isr_vec_space+0x1290c>
     4c8:	40061201 	0x40061201
     4cc:	19429618 	0x19429618
     4d0:	00001301 	0x1301
     4d4:	03002e17 	0x3002e17
     4d8:	3b0b3a0e 	xori	t3,t8,0x3a0e
     4dc:	49192705 	bc2t	$cc6,a0f4 <__isr_vec_space+0xa0d4>
     4e0:	12011113 	beq	s0,at,4930 <__isr_vec_space+0x4910>
     4e4:	97184006 	lhu	t8,16390(t8)
     4e8:	00001942 	srl	v1,zero,0x5
     4ec:	03012e18 	0x3012e18
     4f0:	3b0b3a0e 	xori	t3,t8,0x3a0e
     4f4:	11192705 	beq	t0,t9,a10c <__isr_vec_space+0xa0ec>
     4f8:	40061201 	0x40061201
     4fc:	19429718 	0x19429718
     500:	00001301 	0x1301
     504:	49003519 	bc2f	d96c <__isr_vec_space+0xd94c>
     508:	1a000013 	blez	s0,558 <__isr_vec_space+0x538>
     50c:	0e030034 	jal	80c00d0 <__memory_size+0x80a08d0>
     510:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
     514:	193f1349 	0x193f1349
     518:	00001802 	srl	v1,zero,0x0
     51c:	01110100 	0x1110100
     520:	0b130e25 	j	c4c3894 <__memory_size+0xc4a4094>
     524:	0e1b0e03 	jal	86c380c <__memory_size+0x86a400c>
     528:	06120111 	bltzall	s0,970 <__isr_vec_space+0x950>
     52c:	00001710 	0x1710
     530:	0b002402 	j	c009008 <__memory_size+0xbfe9808>
     534:	030b3e0b 	0x30b3e0b
     538:	0300000e 	0x300000e
     53c:	0b0b0024 	j	c2c0090 <__memory_size+0xc2a0890>
     540:	08030b3e 	j	c2cf8 <__memory_size+0xa34f8>
     544:	16040000 	bne	s0,a0,548 <__isr_vec_space+0x528>
     548:	3a0e0300 	xori	t6,s0,0x300
     54c:	490b3b0b 	bc2tl	$cc2,f17c <__isr_vec_space+0xf15c>
     550:	05000013 	bltz	t0,5a0 <__isr_vec_space+0x580>
     554:	0b0b000f 	j	c2c003c <__memory_size+0xc2a083c>
     558:	04060000 	0x4060000
     55c:	3a0b0b01 	xori	t3,s0,0xb01
     560:	010b3b0b 	0x10b3b0b
     564:	07000013 	bltz	t8,5b4 <__isr_vec_space+0x594>
     568:	0e030028 	jal	80c00a0 <__memory_size+0x80a08a0>
     56c:	00000d1c 	0xd1c
     570:	3f012e08 	0x3f012e08
     574:	3a0e0319 	xori	t6,s0,0x319
     578:	270b3b0b 	addiu	t3,t8,15115
     57c:	12011119 	beq	s0,at,49e4 <__isr_vec_space+0x49c4>
     580:	96184006 	lhu	t8,16390(s0)
     584:	13011942 	beq	t8,at,6a90 <__isr_vec_space+0x6a70>
     588:	34090000 	li	t1,0x0
     58c:	3a0e0300 	xori	t6,s0,0x300
     590:	490b3b0b 	bc2tl	$cc2,f1c0 <__isr_vec_space+0xf1a0>
     594:	00180213 	0x180213
     598:	012e0a00 	0x12e0a00
     59c:	0e03193f 	jal	80c64fc <__memory_size+0x80a6cfc>
     5a0:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
     5a4:	193c1349 	0x193c1349
     5a8:	180b0000 	0x180b0000
     5ac:	0c000000 	jal	0 <hardware_exit_hook>
     5b0:	0e03012e 	jal	80c04b8 <__memory_size+0x80a0cb8>
     5b4:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
     5b8:	01111927 	0x1111927
     5bc:	18400612 	blez	v0,1e08 <__isr_vec_space+0x1de8>
     5c0:	01194296 	0x1194296
     5c4:	0d000013 	jal	400004c <__memory_size+0x3fe084c>
     5c8:	0e030005 	jal	80c0014 <__memory_size+0x80a0814>
     5cc:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
     5d0:	18021349 	0x18021349
     5d4:	2e0e0000 	sltiu	t6,s0,0
     5d8:	3a0e0301 	xori	t6,s0,0x301
     5dc:	27053b0b 	addiu	a1,t8,15115
     5e0:	12011119 	beq	s0,at,4a48 <__isr_vec_space+0x4a28>
     5e4:	96184006 	lhu	t8,16390(s0)
     5e8:	13011942 	beq	t8,at,6af4 <__isr_vec_space+0x6ad4>
     5ec:	050f0000 	0x50f0000
     5f0:	3a0e0300 	xori	t6,s0,0x300
     5f4:	49053b0b 	bc2t	$cc1,f224 <__isr_vec_space+0xf204>
     5f8:	00180213 	0x180213
     5fc:	00341000 	0x341000
     600:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     604:	1349053b 	beq	k0,t1,1af4 <__isr_vec_space+0x1ad4>
     608:	00001802 	srl	v1,zero,0x0
     60c:	11010b11 	beq	t0,at,3254 <__isr_vec_space+0x3234>
     610:	00061201 	0x61201
     614:	012e1200 	0x12e1200
     618:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     61c:	1927053b 	0x1927053b
     620:	01111349 	0x1111349
     624:	18400612 	blez	v0,1e70 <__isr_vec_space+0x1e50>
     628:	01194296 	0x1194296
     62c:	13000013 	beqz	t8,67c <__isr_vec_space+0x65c>
     630:	193f012e 	0x193f012e
     634:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     638:	1927053b 	0x1927053b
     63c:	06120111 	bltzall	s0,a84 <__isr_vec_space+0xa64>
     640:	42961840 	c0	0x961840
     644:	00130119 	0x130119
     648:	00261400 	0x261400
     64c:	00001349 	0x1349
     650:	3f012e15 	0x3f012e15
     654:	3a0e0319 	xori	t6,s0,0x319
     658:	27053b0b 	addiu	a1,t8,15115
     65c:	11134919 	beq	t0,s3,12ac4 <__isr_vec_space+0x12aa4>
     660:	40061201 	0x40061201
     664:	19429718 	0x19429718
     668:	00001301 	0x1301
     66c:	49003516 	bc2f	dac8 <__isr_vec_space+0xdaa8>
     670:	00000013 	mtlo	zero
     674:	25011101 	addiu	at,t0,4353
     678:	030b130e 	0x30b130e
     67c:	110e1b0e 	beq	t0,t6,72b8 <__isr_vec_space+0x7298>
     680:	10061201 	beq	zero,a2,4e88 <__isr_vec_space+0x4e68>
     684:	02000017 	0x2000017
     688:	0b0b0024 	j	c2c0090 <__memory_size+0xc2a0890>
     68c:	0e030b3e 	jal	80c2cf8 <__memory_size+0x80a34f8>
     690:	24030000 	li	v1,0
     694:	3e0b0b00 	0x3e0b0b00
     698:	0008030b 	0x8030b
     69c:	00160400 	sll	zero,s6,0x10
     6a0:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     6a4:	13490b3b 	beq	k0,t1,3394 <__isr_vec_space+0x3374>
     6a8:	0f050000 	jal	c140000 <__memory_size+0xc120800>
     6ac:	000b0b00 	sll	at,t3,0xc
     6b0:	000f0600 	sll	zero,t7,0x18
     6b4:	13490b0b 	beq	k0,t1,32e4 <__isr_vec_space+0x32c4>
     6b8:	26070000 	addiu	a3,s0,0
     6bc:	00134900 	sll	t1,s3,0x4
     6c0:	00160800 	sll	at,s6,0x0
     6c4:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     6c8:	1349053b 	beq	k0,t1,1bb8 <__isr_vec_space+0x1b98>
     6cc:	13090000 	beq	t8,t1,6d0 <__isr_vec_space+0x6b0>
     6d0:	0b0e0301 	j	c380c04 <__memory_size+0xc361404>
     6d4:	3b0b3a0b 	xori	t3,t8,0x3a0b
     6d8:	0013010b 	0x13010b
     6dc:	000d0a00 	sll	at,t5,0x8
     6e0:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     6e4:	13490b3b 	beq	k0,t1,33d4 <__isr_vec_space+0x33b4>
     6e8:	00000b38 	0xb38
     6ec:	2701150b 	addiu	at,t8,5387
     6f0:	00130119 	0x130119
     6f4:	00050c00 	sll	at,a1,0x10
     6f8:	00001349 	0x1349
     6fc:	0b01170d 	j	c045c34 <__memory_size+0xc026434>
     700:	3b0b3a0b 	xori	t3,t8,0x3a0b
     704:	0013010b 	0x13010b
     708:	000d0e00 	sll	at,t5,0x18
     70c:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     710:	13490b3b 	beq	k0,t1,3400 <__isr_vec_space+0x33e0>
     714:	0d0f0000 	jal	43c0000 <__memory_size+0x43a0800>
     718:	3a080300 	xori	t0,s0,0x300
     71c:	490b3b0b 	bc2tl	$cc2,f34c <__isr_vec_space+0xf32c>
     720:	000b3813 	0xb3813
     724:	012e1000 	0x12e1000
     728:	0e03193f 	jal	80c64fc <__memory_size+0x80a6cfc>
     72c:	053b0b3a 	0x53b0b3a
     730:	13491927 	beq	k0,t1,6bd0 <__isr_vec_space+0x6bb0>
     734:	06120111 	bltzall	s0,b7c <__isr_vec_space+0xb5c>
     738:	42961840 	c0	0x961840
     73c:	00130119 	0x130119
     740:	00341100 	0x341100
     744:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     748:	1349053b 	beq	k0,t1,1c38 <__isr_vec_space+0x1c18>
     74c:	00001802 	srl	v1,zero,0x0
     750:	3f012e12 	0x3f012e12
     754:	3a0e0319 	xori	t6,s0,0x319
     758:	49053b0b 	bc2t	$cc1,f388 <__isr_vec_space+0xf368>
     75c:	00193c13 	0x193c13
     760:	00181300 	sll	v0,t8,0xc
     764:	05140000 	0x5140000
     768:	3a0e0300 	xori	t6,s0,0x300
     76c:	49053b0b 	bc2t	$cc1,f39c <__isr_vec_space+0xf37c>
     770:	00180213 	0x180213
     774:	012e1500 	0x12e1500
     778:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     77c:	1927053b 	0x1927053b
     780:	06120111 	bltzall	s0,bc8 <__isr_vec_space+0xba8>
     784:	42961840 	c0	0x961840
     788:	00130119 	0x130119
     78c:	010b1600 	0x10b1600
     790:	06120111 	bltzall	s0,bd8 <__isr_vec_space+0xbb8>
     794:	34170000 	li	s7,0x0
     798:	3a080300 	xori	t0,s0,0x300
     79c:	49053b0b 	bc2t	$cc1,f3cc <__isr_vec_space+0xf3ac>
     7a0:	00180213 	0x180213
     7a4:	012e1800 	0x12e1800
     7a8:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     7ac:	1927053b 	0x1927053b
     7b0:	01111349 	0x1111349
     7b4:	18400612 	blez	v0,2000 <__isr_vec_space+0x1fe0>
     7b8:	01194297 	0x1194297
     7bc:	19000013 	blez	t0,80c <__isr_vec_space+0x7ec>
     7c0:	0e03012e 	jal	80c04b8 <__memory_size+0x80a0cb8>
     7c4:	053b0b3a 	0x53b0b3a
     7c8:	13491927 	beq	k0,t1,6c68 <__isr_vec_space+0x6c48>
     7cc:	06120111 	bltzall	s0,c14 <__isr_vec_space+0xbf4>
     7d0:	42961840 	c0	0x961840
     7d4:	00130119 	0x130119
     7d8:	010b1a00 	0x10b1a00
     7dc:	06120111 	bltzall	s0,c24 <__isr_vec_space+0xc04>
     7e0:	00001301 	0x1301
     7e4:	3f012e1b 	0x3f012e1b
     7e8:	3a0e0319 	xori	t6,s0,0x319
     7ec:	49053b0b 	bc2t	$cc1,f41c <__isr_vec_space+0xf3fc>
     7f0:	01193c13 	0x1193c13
     7f4:	1c000013 	bgtz	zero,844 <__isr_vec_space+0x824>
     7f8:	0e03002e 	jal	80c00b8 <__memory_size+0x80a08b8>
     7fc:	053b0b3a 	0x53b0b3a
     800:	01111927 	0x1111927
     804:	18400612 	blez	v0,2050 <__isr_vec_space+0x2030>
     808:	00194296 	0x194296
     80c:	012e1d00 	0x12e1d00
     810:	0e03193f 	jal	80c64fc <__memory_size+0x80a6cfc>
     814:	053b0b3a 	0x53b0b3a
     818:	01111927 	0x1111927
     81c:	18400612 	blez	v0,2068 <__isr_vec_space+0x2048>
     820:	01194296 	0x1194296
     824:	1e000013 	bgtz	s0,874 <__isr_vec_space+0x854>
     828:	0e030034 	jal	80c00d0 <__memory_size+0x80a08d0>
     82c:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
     830:	18021349 	0x18021349
     834:	01000000 	0x1000000
     838:	0e250111 	jal	8940444 <__memory_size+0x8920c44>
     83c:	0e030b13 	jal	80c2c4c <__memory_size+0x80a344c>
     840:	01110e1b 	0x1110e1b
     844:	17100612 	bne	t8,s0,2090 <__isr_vec_space+0x2070>
     848:	24020000 	li	v0,0
     84c:	3e0b0b00 	0x3e0b0b00
     850:	000e030b 	0xe030b
     854:	00240300 	0x240300
     858:	0b3e0b0b 	j	cf82c2c <__memory_size+0xcf6342c>
     85c:	00000803 	sra	at,zero,0x0
     860:	03001604 	0x3001604
     864:	3b0b3a0e 	xori	t3,t8,0x3a0e
     868:	0013490b 	0x13490b
     86c:	000f0500 	sll	zero,t7,0x14
     870:	00000b0b 	0xb0b
     874:	03001606 	0x3001606
     878:	3b0b3a0e 	xori	t3,t8,0x3a0e
     87c:	00134905 	0x134905
     880:	01130700 	0x1130700
     884:	0b0b0e03 	j	c2c380c <__memory_size+0xc2a400c>
     888:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
     88c:	00001301 	0x1301
     890:	03000d08 	0x3000d08
     894:	3b0b3a0e 	xori	t3,t8,0x3a0e
     898:	3813490b 	xori	s3,zero,0x490b
     89c:	0900000b 	j	400002c <__memory_size+0x3fe082c>
     8a0:	0b0b000f 	j	c2c003c <__memory_size+0xc2a083c>
     8a4:	00001349 	0x1349
     8a8:	3f012e0a 	0x3f012e0a
     8ac:	3a0e0319 	xori	t6,s0,0x319
     8b0:	270b3b0b 	addiu	t3,t8,15115
     8b4:	11134919 	beq	t0,s3,12d1c <__isr_vec_space+0x12cfc>
     8b8:	40061201 	0x40061201
     8bc:	19429618 	0x19429618
     8c0:	00001301 	0x1301
     8c4:	0300340b 	0x300340b
     8c8:	3b0b3a0e 	xori	t3,t8,0x3a0e
     8cc:	0213490b 	0x213490b
     8d0:	0c000018 	jal	60 <__isr_vec_space+0x40>
     8d4:	0e030005 	jal	80c0014 <__memory_size+0x80a0814>
     8d8:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
     8dc:	18021349 	0x18021349
     8e0:	2e0d0000 	sltiu	t5,s0,0
     8e4:	03193f01 	0x3193f01
     8e8:	3b0b3a0e 	xori	t3,t8,0x3a0e
     8ec:	3c13490b 	lui	s3,0x490b
     8f0:	00130119 	0x130119
     8f4:	00180e00 	sll	at,t8,0x18
     8f8:	0b0f0000 	j	c3c0000 <__memory_size+0xc3a0800>
     8fc:	12011101 	beq	s0,at,4d04 <__isr_vec_space+0x4ce4>
     900:	10000006 	b	91c <__isr_vec_space+0x8fc>
     904:	0e030034 	jal	80c00d0 <__memory_size+0x80a08d0>
     908:	053b0b3a 	0x53b0b3a
     90c:	18021349 	0x18021349
     910:	34110000 	li	s1,0x0
     914:	3a080300 	xori	t0,s0,0x300
     918:	49053b0b 	bc2t	$cc1,f548 <__isr_vec_space+0xf528>
     91c:	00180213 	0x180213
     920:	00261200 	0x261200
     924:	00001349 	0x1349
     928:	3f012e13 	0x3f012e13
     92c:	3a0e0319 	xori	t6,s0,0x319
     930:	27053b0b 	addiu	a1,t8,15115
     934:	11134919 	beq	t0,s3,12d9c <__isr_vec_space+0x12d7c>
     938:	40061201 	0x40061201
     93c:	19429618 	0x19429618
     940:	00001301 	0x1301
     944:	03000514 	0x3000514
     948:	3b0b3a0e 	xori	t3,t8,0x3a0e
     94c:	02134905 	0x2134905
     950:	15000018 	bnez	t0,9b4 <__isr_vec_space+0x994>
     954:	0111010b 	0x111010b
     958:	13010612 	beq	t8,at,21a4 <__isr_vec_space+0x2184>
     95c:	2e160000 	sltiu	s6,s0,0
     960:	03193f01 	0x3193f01
     964:	3b0b3a0e 	xori	t3,t8,0x3a0e
     968:	3c13490b 	lui	s3,0x490b
     96c:	17000019 	bnez	t8,9d4 <__isr_vec_space+0x9b4>
     970:	193f012e 	0x193f012e
     974:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     978:	1927053b 	0x1927053b
     97c:	06120111 	bltzall	s0,dc4 <__isr_vec_space+0xda4>
     980:	42961840 	c0	0x961840
     984:	00130119 	0x130119
     988:	012e1800 	0x12e1800
     98c:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     990:	1927053b 	0x1927053b
     994:	01111349 	0x1111349
     998:	18400612 	blez	v0,21e4 <__isr_vec_space+0x21c4>
     99c:	00194297 	0x194297
     9a0:	11010000 	beq	t0,at,9a4 <__isr_vec_space+0x984>
     9a4:	130e2501 	beq	t8,t6,9dac <__isr_vec_space+0x9d8c>
     9a8:	1b0e030b 	0x1b0e030b
     9ac:	1201110e 	beq	s0,at,4de8 <__isr_vec_space+0x4dc8>
     9b0:	00171006 	srlv	v0,s7,zero
     9b4:	00160200 	sll	zero,s6,0x8
     9b8:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     9bc:	13490b3b 	beq	k0,t1,36ac <__isr_vec_space+0x368c>
     9c0:	24030000 	li	v1,0
     9c4:	3e0b0b00 	0x3e0b0b00
     9c8:	000e030b 	0xe030b
     9cc:	00240400 	0x240400
     9d0:	0b3e0b0b 	j	cf82c2c <__memory_size+0xcf6342c>
     9d4:	00000803 	sra	at,zero,0x0
     9d8:	0b000f05 	j	c003c14 <__memory_size+0xbfe4414>
     9dc:	0600000b 	bltz	s0,a0c <__isr_vec_space+0x9ec>
     9e0:	0b0b000f 	j	c2c003c <__memory_size+0xc2a083c>
     9e4:	00001349 	0x1349
     9e8:	49002607 	bc2f	a208 <__isr_vec_space+0xa1e8>
     9ec:	08000013 	j	4c <__isr_vec_space+0x2c>
     9f0:	13490101 	beq	k0,t1,df8 <__isr_vec_space+0xdd8>
     9f4:	00001301 	0x1301
     9f8:	49002109 	bc2f	8e20 <__isr_vec_space+0x8e00>
     9fc:	000b2f13 	0xb2f13
     a00:	01150a00 	0x1150a00
     a04:	13011927 	beq	t8,at,6ea4 <__isr_vec_space+0x6e84>
     a08:	050b0000 	tltiu	t0,0
     a0c:	00134900 	sll	t1,s3,0x4
     a10:	00160c00 	sll	at,s6,0x10
     a14:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     a18:	1349053b 	beq	k0,t1,1f08 <__isr_vec_space+0x1ee8>
     a1c:	130d0000 	beq	t8,t5,a20 <__isr_vec_space+0xa00>
     a20:	0b0e0301 	j	c380c04 <__memory_size+0xc361404>
     a24:	3b0b3a0b 	xori	t3,t8,0x3a0b
     a28:	0013010b 	0x13010b
     a2c:	000d0e00 	sll	at,t5,0x18
     a30:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     a34:	13490b3b 	beq	k0,t1,3724 <__isr_vec_space+0x3704>
     a38:	00000b38 	0xb38
     a3c:	0b01040f 	j	c04103c <__memory_size+0xc02183c>
     a40:	3b0b3a0b 	xori	t3,t8,0x3a0b
     a44:	0013010b 	0x13010b
     a48:	00281000 	0x281000
     a4c:	0d1c0e03 	jal	470380c <__memory_size+0x46e400c>
     a50:	13110000 	beq	t8,s1,a54 <__isr_vec_space+0xa34>
     a54:	0b0e0301 	j	c380c04 <__memory_size+0xc361404>
     a58:	3b0b3a0b 	xori	t3,t8,0x3a0b
     a5c:	00130105 	0x130105
     a60:	000d1200 	sll	v0,t5,0x8
     a64:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     a68:	1349053b 	beq	k0,t1,1f58 <__isr_vec_space+0x1f38>
     a6c:	00000b38 	0xb38
     a70:	49003513 	bc2f	dec0 <__isr_vec_space+0xdea0>
     a74:	14000013 	bnez	zero,ac4 <__isr_vec_space+0xaa4>
     a78:	193f012e 	0x193f012e
     a7c:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     a80:	1927053b 	0x1927053b
     a84:	01111349 	0x1111349
     a88:	18400612 	blez	v0,22d4 <__isr_vec_space+0x22b4>
     a8c:	01194296 	0x1194296
     a90:	15000013 	bnez	t0,ae0 <__isr_vec_space+0xac0>
     a94:	0e030005 	jal	80c0014 <__memory_size+0x80a0814>
     a98:	053b0b3a 	0x53b0b3a
     a9c:	18021349 	0x18021349
     aa0:	34160000 	li	s6,0x0
     aa4:	3a0e0300 	xori	t6,s0,0x300
     aa8:	49053b0b 	bc2t	$cc1,f6d8 <__isr_vec_space+0xf6b8>
     aac:	00180213 	0x180213
     ab0:	010b1700 	0x10b1700
     ab4:	06120111 	bltzall	s0,efc <__isr_vec_space+0xedc>
     ab8:	2e180000 	sltiu	t8,s0,0
     abc:	3a0e0301 	xori	t6,s0,0x301
     ac0:	27053b0b 	addiu	a1,t8,15115
     ac4:	12011119 	beq	s0,at,4f2c <__isr_vec_space+0x4f0c>
     ac8:	96184006 	lhu	t8,16390(s0)
     acc:	13011942 	beq	t8,at,6fd8 <__isr_vec_space+0x6fb8>
     ad0:	34190000 	li	t9,0x0
     ad4:	3a080300 	xori	t0,s0,0x300
     ad8:	49053b0b 	bc2t	$cc1,f708 <__isr_vec_space+0xf6e8>
     adc:	00180213 	0x180213
     ae0:	012e1a00 	0x12e1a00
     ae4:	0e03193f 	jal	80c64fc <__memory_size+0x80a6cfc>
     ae8:	053b0b3a 	0x53b0b3a
     aec:	193c1349 	0x193c1349
     af0:	181b0000 	0x181b0000
     af4:	1c000000 	bgtz	zero,af8 <__isr_vec_space+0xad8>
     af8:	193f012e 	0x193f012e
     afc:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     b00:	1927053b 	0x1927053b
     b04:	06120111 	bltzall	s0,f4c <__isr_vec_space+0xf2c>
     b08:	42961840 	c0	0x961840
     b0c:	00130119 	0x130119
     b10:	012e1d00 	0x12e1d00
     b14:	0e03193f 	jal	80c64fc <__memory_size+0x80a6cfc>
     b18:	053b0b3a 	0x53b0b3a
     b1c:	193c1349 	0x193c1349
     b20:	00001301 	0x1301
     b24:	11010b1e 	beq	t0,at,37a0 <__isr_vec_space+0x3780>
     b28:	01061201 	0x1061201
     b2c:	1f000013 	bgtz	t8,b7c <__isr_vec_space+0xb5c>
     b30:	0e03012e 	jal	80c04b8 <__memory_size+0x80a0cb8>
     b34:	053b0b3a 	0x53b0b3a
     b38:	13491927 	beq	k0,t1,6fd8 <__isr_vec_space+0x6fb8>
     b3c:	06120111 	bltzall	s0,f84 <__isr_vec_space+0xf64>
     b40:	42961840 	c0	0x961840
     b44:	00130119 	0x130119
     b48:	002e2000 	0x2e2000
     b4c:	0e03193f 	jal	80c64fc <__memory_size+0x80a6cfc>
     b50:	053b0b3a 	0x53b0b3a
     b54:	01111927 	0x1111927
     b58:	18400612 	blez	v0,23a4 <__isr_vec_space+0x2384>
     b5c:	00194297 	0x194297
     b60:	012e2100 	0x12e2100
     b64:	0e03193f 	jal	80c64fc <__memory_size+0x80a6cfc>
     b68:	053b0b3a 	0x53b0b3a
     b6c:	13491927 	beq	k0,t1,700c <__isr_vec_space+0x6fec>
     b70:	06120111 	bltzall	s0,fb8 <__isr_vec_space+0xf98>
     b74:	42971840 	c0	0x971840
     b78:	00130119 	0x130119
     b7c:	002e2200 	0x2e2200
     b80:	0e03193f 	jal	80c64fc <__memory_size+0x80a6cfc>
     b84:	053b0b3a 	0x53b0b3a
     b88:	13491927 	beq	k0,t1,7028 <__isr_vec_space+0x7008>
     b8c:	06120111 	bltzall	s0,fd4 <__isr_vec_space+0xfb4>
     b90:	42971840 	c0	0x971840
     b94:	23000019 	addi	zero,t8,25
     b98:	0e03012e 	jal	80c04b8 <__memory_size+0x80a0cb8>
     b9c:	053b0b3a 	0x53b0b3a
     ba0:	13491927 	beq	k0,t1,7040 <__isr_vec_space+0x7020>
     ba4:	06120111 	bltzall	s0,fec <__isr_vec_space+0xfcc>
     ba8:	42971840 	c0	0x971840
     bac:	00130119 	0x130119
     bb0:	012e2400 	0x12e2400
     bb4:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     bb8:	1927053b 	0x1927053b
     bbc:	06120111 	bltzall	s0,1004 <__isr_vec_space+0xfe4>
     bc0:	42971840 	c0	0x971840
     bc4:	00130119 	0x130119
     bc8:	012e2500 	0x12e2500
     bcc:	0e03193f 	jal	80c64fc <__memory_size+0x80a6cfc>
     bd0:	053b0b3a 	0x53b0b3a
     bd4:	01111927 	0x1111927
     bd8:	18400612 	blez	v0,2424 <__isr_vec_space+0x2404>
     bdc:	01194297 	0x1194297
     be0:	26000013 	addiu	zero,s0,19
     be4:	0e030034 	jal	80c00d0 <__memory_size+0x80a08d0>
     be8:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
     bec:	193f1349 	0x193f1349
     bf0:	0000193c 	0x193c
     bf4:	03003427 	0x3003427
     bf8:	3b0b3a0e 	xori	t3,t8,0x3a0e
     bfc:	3f134905 	0x3f134905
     c00:	00180219 	0x180219
     c04:	11010000 	beq	t0,at,c08 <__isr_vec_space+0xbe8>
     c08:	130e2501 	beq	t8,t6,a010 <__isr_vec_space+0x9ff0>
     c0c:	1b0e030b 	0x1b0e030b
     c10:	1201110e 	beq	s0,at,504c <__isr_vec_space+0x502c>
     c14:	00171006 	srlv	v0,s7,zero
     c18:	00160200 	sll	zero,s6,0x8
     c1c:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     c20:	13490b3b 	beq	k0,t1,3910 <__isr_vec_space+0x38f0>
     c24:	24030000 	li	v1,0
     c28:	3e0b0b00 	0x3e0b0b00
     c2c:	000e030b 	0xe030b
     c30:	00240400 	0x240400
     c34:	0b3e0b0b 	j	cf82c2c <__memory_size+0xcf6342c>
     c38:	00000803 	sra	at,zero,0x0
     c3c:	0b000f05 	j	c003c14 <__memory_size+0xbfe4414>
     c40:	0600000b 	bltz	s0,c70 <__isr_vec_space+0xc50>
     c44:	0b0b000f 	j	c2c003c <__memory_size+0xc2a083c>
     c48:	00001349 	0x1349
     c4c:	00002607 	0x2607
     c50:	00160800 	sll	at,s6,0x0
     c54:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     c58:	1349053b 	beq	k0,t1,2148 <__isr_vec_space+0x2128>
     c5c:	13090000 	beq	t8,t1,c60 <__isr_vec_space+0xc40>
     c60:	0b0e0301 	j	c380c04 <__memory_size+0xc361404>
     c64:	3b0b3a0b 	xori	t3,t8,0x3a0b
     c68:	0013010b 	0x13010b
     c6c:	000d0a00 	sll	at,t5,0x8
     c70:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     c74:	13490b3b 	beq	k0,t1,3964 <__isr_vec_space+0x3944>
     c78:	00000b38 	0xb38
     c7c:	0b01170b 	j	c045c2c <__memory_size+0xc02642c>
     c80:	3b0b3a0b 	xori	t3,t8,0x3a0b
     c84:	0013010b 	0x13010b
     c88:	000d0c00 	sll	at,t5,0x10
     c8c:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     c90:	13490b3b 	beq	k0,t1,3980 <__isr_vec_space+0x3960>
     c94:	0d0d0000 	jal	4340000 <__memory_size+0x4320800>
     c98:	3a080300 	xori	t0,s0,0x300
     c9c:	490b3b0b 	bc2tl	$cc2,f8cc <__isr_vec_space+0xf8ac>
     ca0:	000b3813 	0xb3813
     ca4:	00350e00 	0x350e00
     ca8:	00001349 	0x1349
     cac:	3f012e0f 	0x3f012e0f
     cb0:	3a0e0319 	xori	t6,s0,0x319
     cb4:	27053b0b 	addiu	a1,t8,15115
     cb8:	11134919 	beq	t0,s3,13120 <__isr_vec_space+0x13100>
     cbc:	40061201 	0x40061201
     cc0:	19429618 	0x19429618
     cc4:	00001301 	0x1301
     cc8:	03000510 	0x3000510
     ccc:	3b0b3a0e 	xori	t3,t8,0x3a0e
     cd0:	02134905 	0x2134905
     cd4:	11000018 	beqz	t0,d38 <__isr_vec_space+0xd18>
     cd8:	0e030034 	jal	80c00d0 <__memory_size+0x80a08d0>
     cdc:	053b0b3a 	0x53b0b3a
     ce0:	18021349 	0x18021349
     ce4:	2e120000 	sltiu	s2,s0,0
     ce8:	03193f01 	0x3193f01
     cec:	3b0b3a0e 	xori	t3,t8,0x3a0e
     cf0:	3c134905 	lui	s3,0x4905
     cf4:	00130119 	0x130119
     cf8:	00181300 	sll	v0,t8,0xc
     cfc:	0b140000 	j	c500000 <__memory_size+0xc4e0800>
     d00:	12011101 	beq	s0,at,5108 <__isr_vec_space+0x50e8>
     d04:	15000006 	bnez	t0,d20 <__isr_vec_space+0xd00>
     d08:	08030034 	j	c00d0 <__memory_size+0xa08d0>
     d0c:	053b0b3a 	0x53b0b3a
     d10:	18021349 	0x18021349
     d14:	26160000 	addiu	s6,s0,0
     d18:	00134900 	sll	t1,s3,0x4
     d1c:	012e1700 	0x12e1700
     d20:	0e03193f 	jal	80c64fc <__memory_size+0x80a6cfc>
     d24:	053b0b3a 	0x53b0b3a
     d28:	193c1349 	0x193c1349
     d2c:	2e180000 	sltiu	t8,s0,0
     d30:	3a0e0301 	xori	t6,s0,0x301
     d34:	27053b0b 	addiu	a1,t8,15115
     d38:	12011119 	beq	s0,at,51a0 <__isr_vec_space+0x5180>
     d3c:	96184006 	lhu	t8,16390(s0)
     d40:	13011942 	beq	t8,at,724c <__isr_vec_space+0x722c>
     d44:	0b190000 	j	c640000 <__memory_size+0xc620800>
     d48:	12011101 	beq	s0,at,5150 <__isr_vec_space+0x5130>
     d4c:	00130106 	0x130106
     d50:	012e1a00 	0x12e1a00
     d54:	0e03193f 	jal	80c64fc <__memory_size+0x80a6cfc>
     d58:	053b0b3a 	0x53b0b3a
     d5c:	01111927 	0x1111927
     d60:	18400612 	blez	v0,25ac <__isr_vec_space+0x258c>
     d64:	01194296 	0x1194296
     d68:	1b000013 	blez	t8,db8 <__isr_vec_space+0xd98>
     d6c:	0e03012e 	jal	80c04b8 <__memory_size+0x80a0cb8>
     d70:	053b0b3a 	0x53b0b3a
     d74:	13491927 	beq	k0,t1,7214 <__isr_vec_space+0x71f4>
     d78:	06120111 	bltzall	s0,11c0 <__isr_vec_space+0x11a0>
     d7c:	42961840 	c0	0x961840
     d80:	00130119 	0x130119
     d84:	11010000 	beq	t0,at,d88 <__isr_vec_space+0xd68>
     d88:	130e2501 	beq	t8,t6,a190 <__isr_vec_space+0xa170>
     d8c:	1b0e030b 	0x1b0e030b
     d90:	1201110e 	beq	s0,at,51cc <__isr_vec_space+0x51ac>
     d94:	00171006 	srlv	v0,s7,zero
     d98:	00240200 	0x240200
     d9c:	0b3e0b0b 	j	cf82c2c <__memory_size+0xcf6342c>
     da0:	00000e03 	sra	at,zero,0x18
     da4:	0b002403 	j	c00900c <__memory_size+0xbfe980c>
     da8:	030b3e0b 	0x30b3e0b
     dac:	04000008 	bltz	zero,dd0 <__isr_vec_space+0xdb0>
     db0:	0e030016 	jal	80c0058 <__memory_size+0x80a0858>
     db4:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
     db8:	00001349 	0x1349
     dbc:	0b000f05 	j	c003c14 <__memory_size+0xbfe4414>
     dc0:	0600000b 	bltz	s0,df0 <__isr_vec_space+0xdd0>
     dc4:	0e030113 	jal	80c044c <__memory_size+0x80a0c4c>
     dc8:	0b3a0b0b 	j	ce82c2c <__memory_size+0xce6342c>
     dcc:	13010b3b 	beq	t8,at,3abc <__isr_vec_space+0x3a9c>
     dd0:	0d070000 	jal	41c0000 <__memory_size+0x41a0800>
     dd4:	3a0e0300 	xori	t6,s0,0x300
     dd8:	490b3b0b 	bc2tl	$cc2,fa08 <__isr_vec_space+0xf9e8>
     ddc:	000b3813 	0xb3813
     de0:	000f0800 	sll	at,t7,0x0
     de4:	13490b0b 	beq	k0,t1,3a14 <__isr_vec_space+0x39f4>
     de8:	2e090000 	sltiu	t1,s0,0
     dec:	03193f01 	0x3193f01
     df0:	3b0b3a0e 	xori	t3,t8,0x3a0e
     df4:	1119270b 	beq	t0,t9,aa24 <__isr_vec_space+0xaa04>
     df8:	40061201 	0x40061201
     dfc:	19429718 	0x19429718
     e00:	00001301 	0x1301
     e04:	0300050a 	0x300050a
     e08:	3b0b3a0e 	xori	t3,t8,0x3a0e
     e0c:	0213490b 	0x213490b
     e10:	0b000018 	j	c000060 <__memory_size+0xbfe0860>
     e14:	13490026 	beq	k0,t1,eb0 <__isr_vec_space+0xe90>
     e18:	340c0000 	li	t4,0x0
     e1c:	3a0e0300 	xori	t6,s0,0x300
     e20:	490b3b0b 	bc2tl	$cc2,fa50 <__isr_vec_space+0xfa30>
     e24:	00180213 	0x180213
     e28:	012e0d00 	0x12e0d00
     e2c:	0e03193f 	jal	80c64fc <__memory_size+0x80a6cfc>
     e30:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
     e34:	13491927 	beq	k0,t1,72d4 <__isr_vec_space+0x72b4>
     e38:	06120111 	bltzall	s0,1280 <__isr_vec_space+0x1260>
     e3c:	42971840 	c0	0x971840
     e40:	00000019 	multu	zero,zero
     e44:	25011101 	addiu	at,t0,4353
     e48:	030b130e 	0x30b130e
     e4c:	110e1b0e 	beq	t0,t6,7a88 <__isr_vec_space+0x7a68>
     e50:	10061201 	beq	zero,a2,5658 <__isr_vec_space+0x5638>
     e54:	02000017 	0x2000017
     e58:	0b0b0024 	j	c2c0090 <__memory_size+0xc2a0890>
     e5c:	0e030b3e 	jal	80c2cf8 <__memory_size+0x80a34f8>
     e60:	24030000 	li	v1,0
     e64:	3e0b0b00 	0x3e0b0b00
     e68:	0008030b 	0x8030b
     e6c:	00160400 	sll	zero,s6,0x10
     e70:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     e74:	13490b3b 	beq	k0,t1,3b64 <__isr_vec_space+0x3b44>
     e78:	0f050000 	jal	c140000 <__memory_size+0xc120800>
     e7c:	000b0b00 	sll	at,t3,0xc
     e80:	00160600 	sll	zero,s6,0x18
     e84:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     e88:	1349053b 	beq	k0,t1,2378 <__isr_vec_space+0x2358>
     e8c:	0f070000 	jal	c1c0000 <__memory_size+0xc1a0800>
     e90:	490b0b00 	bc2tl	$cc2,3a94 <__isr_vec_space+0x3a74>
     e94:	08000013 	j	4c <__isr_vec_space+0x2c>
     e98:	19270115 	0x19270115
     e9c:	00001301 	0x1301
     ea0:	49000509 	bc2f	22c8 <__isr_vec_space+0x22a8>
     ea4:	0a000013 	j	800004c <__memory_size+0x7fe084c>
     ea8:	193f012e 	0x193f012e
     eac:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     eb0:	01110b3b 	0x1110b3b
     eb4:	18400612 	blez	v0,2700 <__isr_vec_space+0x26e0>
     eb8:	01194297 	0x1194297
     ebc:	0b000013 	j	c00004c <__memory_size+0xbfe084c>
     ec0:	0111010b 	0x111010b
     ec4:	00000612 	0x612
     ec8:	0300340c 	syscall	0xc00d0
     ecc:	3b0b3a08 	xori	t3,t8,0x3a08
     ed0:	0213490b 	0x213490b
     ed4:	0d000018 	jal	4000060 <__memory_size+0x3fe0860>
     ed8:	193f012e 	0x193f012e
     edc:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     ee0:	19270b3b 	0x19270b3b
     ee4:	06120111 	bltzall	s0,132c <__isr_vec_space+0x130c>
     ee8:	42961840 	c0	0x961840
     eec:	00130119 	0x130119
     ef0:	00340e00 	0x340e00
     ef4:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     ef8:	13490b3b 	beq	k0,t1,3be8 <__isr_vec_space+0x3bc8>
     efc:	00001802 	srl	v1,zero,0x0
     f00:	3f012e0f 	0x3f012e0f
     f04:	3a0e0319 	xori	t6,s0,0x319
     f08:	490b3b0b 	bc2tl	$cc2,fb38 <__isr_vec_space+0xfb18>
     f0c:	01193c13 	0x1193c13
     f10:	10000013 	b	f60 <__isr_vec_space+0xf40>
     f14:	00000018 	mult	zero,zero
     f18:	3f012e11 	0x3f012e11
     f1c:	3a0e0319 	xori	t6,s0,0x319
     f20:	270b3b0b 	addiu	t3,t8,15115
     f24:	12011119 	beq	s0,at,538c <__isr_vec_space+0x536c>
     f28:	97184006 	lhu	t8,16390(t8)
     f2c:	13011942 	beq	t8,at,7438 <__isr_vec_space+0x7418>
     f30:	05120000 	bltzall	t0,f34 <__isr_vec_space+0xf14>
     f34:	3a0e0300 	xori	t6,s0,0x300
     f38:	490b3b0b 	bc2tl	$cc2,fb68 <__isr_vec_space+0xfb48>
     f3c:	00180213 	0x180213
     f40:	012e1300 	0x12e1300
     f44:	0e03193f 	jal	80c64fc <__memory_size+0x80a6cfc>
     f48:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
     f4c:	193c1349 	0x193c1349
     f50:	2e140000 	sltiu	s4,s0,0
     f54:	03193f00 	0x3193f00
     f58:	3b0b3a0e 	xori	t3,t8,0x3a0e
     f5c:	1119270b 	beq	t0,t9,ab8c <__isr_vec_space+0xab6c>
     f60:	40061201 	0x40061201
     f64:	19429618 	0x19429618
     f68:	2e150000 	sltiu	s5,s0,0
     f6c:	03193f01 	0x3193f01
     f70:	3b0b3a0e 	xori	t3,t8,0x3a0e
     f74:	4919270b 	bc2t	$cc6,aba4 <__isr_vec_space+0xab84>
     f78:	12011113 	beq	s0,at,53c8 <__isr_vec_space+0x53a8>
     f7c:	96184006 	lhu	t8,16390(s0)
     f80:	13011942 	beq	t8,at,748c <__isr_vec_space+0x746c>
     f84:	2e160000 	sltiu	s6,s0,0
     f88:	03193f00 	0x3193f00
     f8c:	3b0b3a0e 	xori	t3,t8,0x3a0e
     f90:	3c19270b 	lui	t9,0x270b
     f94:	17000019 	bnez	t8,ffc <__isr_vec_space+0xfdc>
     f98:	0e030034 	jal	80c00d0 <__memory_size+0x80a08d0>
     f9c:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
     fa0:	193f1349 	0x193f1349
     fa4:	0000193c 	0x193c
     fa8:	3f012e18 	0x3f012e18
     fac:	3a0e0319 	xori	t6,s0,0x319
     fb0:	270b3b0b 	addiu	t3,t8,15115
     fb4:	3c134919 	lui	s3,0x4919
     fb8:	19000019 	blez	t0,1020 <__isr_vec_space+0x1000>
     fbc:	193f012e 	0x193f012e
     fc0:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     fc4:	1927053b 	0x1927053b
     fc8:	01111349 	0x1111349
     fcc:	18400612 	blez	v0,2818 <__isr_vec_space+0x27f8>
     fd0:	01194297 	0x1194297
     fd4:	1a000013 	blez	s0,1024 <__isr_vec_space+0x1004>
     fd8:	0e030034 	jal	80c00d0 <__memory_size+0x80a08d0>
     fdc:	053b0b3a 	0x53b0b3a
     fe0:	18021349 	0x18021349
     fe4:	341b0000 	li	k1,0x0
     fe8:	3a080300 	xori	t0,s0,0x300
     fec:	49053b0b 	bc2t	$cc1,fc1c <__isr_vec_space+0xfbfc>
     ff0:	00180213 	0x180213
     ff4:	00051c00 	sll	v1,a1,0x10
     ff8:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
     ffc:	1349053b 	beq	k0,t1,24ec <__isr_vec_space+0x24cc>
    1000:	00001802 	srl	v1,zero,0x0
    1004:	03012e1d 	0x3012e1d
    1008:	3b0b3a0e 	xori	t3,t8,0x3a0e
    100c:	11192705 	beq	t0,t9,ac24 <__isr_vec_space+0xac04>
    1010:	40061201 	0x40061201
    1014:	19429618 	0x19429618
    1018:	00001301 	0x1301
    101c:	3f012e1e 	0x3f012e1e
    1020:	3a0e0319 	xori	t6,s0,0x319
    1024:	27053b0b 	addiu	a1,t8,15115
    1028:	12011119 	beq	s0,at,5490 <__isr_vec_space+0x5470>
    102c:	97184006 	lhu	t8,16390(t8)
    1030:	13011942 	beq	t8,at,753c <__isr_vec_space+0x751c>
    1034:	051f0000 	synci	0(t0)
    1038:	3a080300 	xori	t0,s0,0x300
    103c:	49053b0b 	bc2t	$cc1,fc6c <__isr_vec_space+0xfc4c>
    1040:	00180213 	0x180213
    1044:	012e2000 	0x12e2000
    1048:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
    104c:	1927053b 	0x1927053b
    1050:	01111349 	0x1111349
    1054:	18400612 	blez	v0,28a0 <__isr_vec_space+0x2880>
    1058:	01194297 	0x1194297
    105c:	21000013 	addi	zero,t0,19
    1060:	0e03012e 	jal	80c04b8 <__memory_size+0x80a0cb8>
    1064:	053b0b3a 	0x53b0b3a
    1068:	01111927 	0x1111927
    106c:	18400612 	blez	v0,28b8 <__isr_vec_space+0x2898>
    1070:	01194297 	0x1194297
    1074:	22000013 	addi	zero,s0,19
    1078:	193f012e 	0x193f012e
    107c:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
    1080:	1927053b 	0x1927053b
    1084:	06120111 	bltzall	s0,14cc <__isr_vec_space+0x14ac>
    1088:	42961840 	c0	0x961840
    108c:	00130119 	0x130119
    1090:	01012300 	0x1012300
    1094:	13011349 	beq	t8,at,5dbc <__isr_vec_space+0x5d9c>
    1098:	21240000 	addi	a0,t1,0
    109c:	2f134900 	sltiu	s3,t8,18688
    10a0:	2500000b 	addiu	zero,t0,11
    10a4:	13490026 	beq	k0,t1,1140 <__isr_vec_space+0x1120>
    10a8:	34260000 	ori	a2,at,0x0
    10ac:	3a0e0300 	xori	t6,s0,0x300
    10b0:	490b3b0b 	bc2tl	$cc2,fce0 <__isr_vec_space+0xfcc0>
    10b4:	02193f13 	0x2193f13
    10b8:	27000018 	addiu	zero,t8,24
    10bc:	13490035 	beq	k0,t1,1194 <__isr_vec_space+0x1174>
    10c0:	21280000 	addi	t0,t1,0
    10c4:	2f134900 	sltiu	s3,t8,18688
    10c8:	00000005 	lsa	zero,zero,zero,0x1
    10cc:	25011101 	addiu	at,t0,4353
    10d0:	030b130e 	0x30b130e
    10d4:	110e1b0e 	beq	t0,t6,7d10 <__isr_vec_space+0x7cf0>
    10d8:	10061201 	beq	zero,a2,58e0 <__isr_vec_space+0x58c0>
    10dc:	02000017 	0x2000017
    10e0:	0e030016 	jal	80c0058 <__memory_size+0x80a0858>
    10e4:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
    10e8:	00001349 	0x1349
    10ec:	0b002403 	j	c00900c <__memory_size+0xbfe980c>
    10f0:	030b3e0b 	0x30b3e0b
    10f4:	0400000e 	bltz	zero,1130 <__isr_vec_space+0x1110>
    10f8:	0b0b0024 	j	c2c0090 <__memory_size+0xc2a0890>
    10fc:	08030b3e 	j	c2cf8 <__memory_size+0xa34f8>
    1100:	0f050000 	jal	c140000 <__memory_size+0xc120800>
    1104:	000b0b00 	sll	at,t3,0xc
    1108:	000f0600 	sll	zero,t7,0x18
    110c:	13490b0b 	beq	k0,t1,3d3c <__isr_vec_space+0x3d1c>
    1110:	13070000 	beq	t8,a3,1114 <__isr_vec_space+0x10f4>
    1114:	0b0e0301 	j	c380c04 <__memory_size+0xc361404>
    1118:	3b0b3a0b 	xori	t3,t8,0x3a0b
    111c:	0013010b 	0x13010b
    1120:	000d0800 	sll	at,t5,0x0
    1124:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
    1128:	13490b3b 	beq	k0,t1,3e18 <__isr_vec_space+0x3df8>
    112c:	00000b38 	0xb38
    1130:	3f012e09 	0x3f012e09
    1134:	3a0e0319 	xori	t6,s0,0x319
    1138:	270b3b0b 	addiu	t3,t8,15115
    113c:	11134919 	beq	t0,s3,135a4 <__isr_vec_space+0x13584>
    1140:	40061201 	0x40061201
    1144:	19429618 	0x19429618
    1148:	00001301 	0x1301
    114c:	0300050a 	0x300050a
    1150:	3b0b3a0e 	xori	t3,t8,0x3a0e
    1154:	0213490b 	0x213490b
    1158:	0b000018 	j	c000060 <__memory_size+0xbfe0860>
    115c:	0e030034 	jal	80c00d0 <__memory_size+0x80a08d0>
    1160:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
    1164:	18021349 	0x18021349
    1168:	0b0c0000 	j	c300000 <__memory_size+0xc2e0800>
    116c:	12011101 	beq	s0,at,5574 <__isr_vec_space+0x5554>
    1170:	00130106 	0x130106
    1174:	010b0d00 	0x10b0d00
    1178:	06120111 	bltzall	s0,15c0 <__isr_vec_space+0x15a0>
    117c:	2e0e0000 	sltiu	t6,s0,0
    1180:	03193f00 	0x3193f00
    1184:	3b0b3a0e 	xori	t3,t8,0x3a0e
    1188:	3c19270b 	lui	t9,0x270b
    118c:	0f000019 	jal	c000064 <__memory_size+0xbfe0864>
    1190:	193f012e 	0x193f012e
    1194:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
    1198:	19270b3b 	0x19270b3b
    119c:	06120111 	bltzall	s0,15e4 <__isr_vec_space+0x15c4>
    11a0:	42961840 	c0	0x961840
    11a4:	00130119 	0x130119
    11a8:	00051000 	sll	v0,a1,0x0
    11ac:	0b3a0803 	j	ce8200c <__memory_size+0xce6280c>
    11b0:	13490b3b 	beq	k0,t1,3ea0 <__isr_vec_space+0x3e80>
    11b4:	00001802 	srl	v1,zero,0x0
    11b8:	03003411 	0x3003411
    11bc:	3b0b3a08 	xori	t3,t8,0x3a08
    11c0:	0213490b 	0x213490b
    11c4:	12000018 	beqz	s0,1228 <__isr_vec_space+0x1208>
    11c8:	0e030034 	jal	80c00d0 <__memory_size+0x80a08d0>
    11cc:	053b0b3a 	0x53b0b3a
    11d0:	18021349 	0x18021349
    11d4:	2e130000 	sltiu	s3,s0,0
    11d8:	03193f00 	0x3193f00
    11dc:	3b0b3a0e 	xori	t3,t8,0x3a0e
    11e0:	49192705 	bc2t	$cc6,adf8 <__isr_vec_space+0xadd8>
    11e4:	12011113 	beq	s0,at,5634 <__isr_vec_space+0x5614>
    11e8:	97184006 	lhu	t8,16390(t8)
    11ec:	00001942 	srl	v1,zero,0x5
    11f0:	3f002e14 	0x3f002e14
    11f4:	3a0e0319 	xori	t6,s0,0x319
    11f8:	27053b0b 	addiu	a1,t8,15115
    11fc:	12011119 	beq	s0,at,5664 <__isr_vec_space+0x5644>
    1200:	97184006 	lhu	t8,16390(t8)
    1204:	00001942 	srl	v1,zero,0x5
    1208:	03012e15 	0x3012e15
    120c:	3b0b3a0e 	xori	t3,t8,0x3a0e
    1210:	11192705 	beq	t0,t9,ae28 <__isr_vec_space+0xae08>
    1214:	40061201 	0x40061201
    1218:	19429718 	0x19429718
    121c:	00001301 	0x1301
    1220:	49010116 	bc2t	167c <__isr_vec_space+0x165c>
    1224:	00130113 	0x130113
    1228:	00211700 	0x211700
    122c:	052f1349 	0x52f1349
    1230:	26180000 	addiu	t8,s0,0
    1234:	00134900 	sll	t1,s3,0x4
    1238:	11010000 	beq	t0,at,123c <__isr_vec_space+0x121c>
    123c:	130e2501 	beq	t8,t6,a644 <__isr_vec_space+0xa624>
    1240:	110e030b 	beq	t0,t6,1e70 <__isr_vec_space+0x1e50>
    1244:	10061201 	beq	zero,a2,5a4c <__isr_vec_space+0x5a2c>
    1248:	02000017 	0x2000017
    124c:	0b0b0024 	j	c2c0090 <__memory_size+0xc2a0890>
    1250:	0e030b3e 	jal	80c2cf8 <__memory_size+0x80a34f8>
    1254:	24030000 	li	v1,0
    1258:	3e0b0b00 	0x3e0b0b00
    125c:	0008030b 	0x8030b
    1260:	000f0400 	sll	zero,t7,0x10
    1264:	00000b0b 	0xb0b
    1268:	0b000f05 	j	c003c14 <__memory_size+0xbfe4414>
    126c:	0013490b 	0x13490b
    1270:	00150600 	sll	zero,s5,0x18
    1274:	00001927 	0x1927
    1278:	03010407 	0x3010407
    127c:	3a0b0b0e 	xori	t3,s0,0xb0e
    1280:	010b3b0b 	0x10b3b0b
    1284:	08000013 	j	4c <__isr_vec_space+0x2c>
    1288:	0e030028 	jal	80c00a0 <__memory_size+0x80a08a0>
    128c:	00000d1c 	0xd1c
    1290:	3f012e09 	0x3f012e09
    1294:	3a0e0319 	xori	t6,s0,0x319
    1298:	270b3b0b 	addiu	t3,t8,15115
    129c:	11134919 	beq	t0,s3,13704 <__isr_vec_space+0x136e4>
    12a0:	40061201 	0x40061201
    12a4:	19429718 	0x19429718
    12a8:	00001301 	0x1301
    12ac:	0300050a 	0x300050a
    12b0:	3b0b3a08 	xori	t3,t8,0x3a08
    12b4:	0213490b 	0x213490b
    12b8:	0b000017 	j	c00005c <__memory_size+0xbfe085c>
    12bc:	01018289 	0x1018289
    12c0:	13310111 	beq	t9,s1,1708 <__isr_vec_space+0x16e8>
    12c4:	8a0c0000 	lwl	t4,0(s0)
    12c8:	02000182 	0x2000182
    12cc:	18429118 	0x18429118
    12d0:	2e0d0000 	sltiu	t5,s0,0
    12d4:	03193f01 	0x3193f01
    12d8:	3b0b3a0e 	xori	t3,t8,0x3a0e
    12dc:	4919270b 	bc2t	$cc6,af0c <__isr_vec_space+0xaeec>
    12e0:	00193c13 	0x193c13
    12e4:	00050e00 	sll	at,a1,0x18
    12e8:	00001349 	0x1349
    12ec:	01110100 	0x1110100
    12f0:	0b130e25 	j	c4c3894 <__memory_size+0xc4a4094>
    12f4:	01110e03 	0x1110e03
    12f8:	17100612 	bne	t8,s0,2b44 <__isr_vec_space+0x2b24>
    12fc:	24020000 	li	v0,0
    1300:	3e0b0b00 	0x3e0b0b00
    1304:	000e030b 	0xe030b
    1308:	00240300 	0x240300
    130c:	0b3e0b0b 	j	cf82c2c <__memory_size+0xcf6342c>
    1310:	00000803 	sra	at,zero,0x0
    1314:	03001604 	0x3001604
    1318:	3b0b3a0e 	xori	t3,t8,0x3a0e
    131c:	0013490b 	0x13490b
    1320:	00160500 	sll	zero,s6,0x14
    1324:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
    1328:	1349053b 	beq	k0,t1,2818 <__isr_vec_space+0x27f8>
    132c:	17060000 	bne	t8,a2,1330 <__isr_vec_space+0x1310>
    1330:	3a0b0b01 	xori	t3,s0,0xb01
    1334:	010b3b0b 	0x10b3b0b
    1338:	07000013 	bltz	t8,1388 <__isr_vec_space+0x1368>
    133c:	0e03000d 	jal	80c0034 <__memory_size+0x80a0834>
    1340:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
    1344:	00001349 	0x1349
    1348:	49010108 	bc2t	176c <__isr_vec_space+0x174c>
    134c:	00130113 	0x130113
    1350:	00210900 	0x210900
    1354:	0b2f1349 	j	cbc4d24 <__memory_size+0xcba5524>
    1358:	130a0000 	beq	t8,t2,135c <__isr_vec_space+0x133c>
    135c:	3a0b0b01 	xori	t3,s0,0xb01
    1360:	010b3b0b 	0x10b3b0b
    1364:	0b000013 	j	c00004c <__memory_size+0xbfe084c>
    1368:	0e03000d 	jal	80c0034 <__memory_size+0x80a0834>
    136c:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
    1370:	0b381349 	j	ce04d24 <__memory_size+0xcde5524>
    1374:	0f0c0000 	jal	c300000 <__memory_size+0xc2e0800>
    1378:	000b0b00 	sll	at,t3,0xc
    137c:	01130d00 	0x1130d00
    1380:	0b0b0e03 	j	c2c380c <__memory_size+0xc2a400c>
    1384:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
    1388:	00001301 	0x1301
    138c:	03000d0e 	0x3000d0e
    1390:	3b0b3a08 	xori	t3,t8,0x3a08
    1394:	3813490b 	xori	s3,zero,0x490b
    1398:	0f00000b 	jal	c00002c <__memory_size+0xbfe082c>
    139c:	0b0b000f 	j	c2c003c <__memory_size+0xc2a083c>
    13a0:	00001349 	0x1349
    13a4:	03011310 	0x3011310
    13a8:	3a050b0e 	xori	a1,s0,0xb0e
    13ac:	010b3b0b 	0x10b3b0b
    13b0:	11000013 	beqz	t0,1400 <__isr_vec_space+0x13e0>
    13b4:	0e03000d 	jal	80c0034 <__memory_size+0x80a0834>
    13b8:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
    13bc:	05381349 	0x5381349
    13c0:	15120000 	bne	t0,s2,13c4 <__isr_vec_space+0x13a4>
    13c4:	00192700 	sll	a0,t9,0x1c
    13c8:	01151300 	0x1151300
    13cc:	13491927 	beq	k0,t1,786c <__isr_vec_space+0x784c>
    13d0:	00001301 	0x1301
    13d4:	49000514 	bc2f	2828 <__isr_vec_space+0x2808>
    13d8:	15000013 	bnez	t0,1428 <__isr_vec_space+0x1408>
    13dc:	0e030113 	jal	80c044c <__memory_size+0x80a0c4c>
    13e0:	0b3a050b 	j	ce8142c <__memory_size+0xce61c2c>
    13e4:	1301053b 	beq	t8,at,28d4 <__isr_vec_space+0x28b4>
    13e8:	0d160000 	jal	4580000 <__memory_size+0x4560800>
    13ec:	3a0e0300 	xori	t6,s0,0x300
    13f0:	49053b0b 	bc2t	$cc1,10020 <__isr_vec_space+0x10000>
    13f4:	000b3813 	0xb3813
    13f8:	000d1700 	sll	v0,t5,0x1c
    13fc:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
    1400:	1349053b 	beq	k0,t1,28f0 <__isr_vec_space+0x28d0>
    1404:	00000538 	0x538
    1408:	49002618 	bc2f	ac6c <__isr_vec_space+0xac4c>
    140c:	19000013 	blez	t0,145c <__isr_vec_space+0x143c>
    1410:	0e030113 	jal	80c044c <__memory_size+0x80a0c4c>
    1414:	0b3a0b0b 	j	ce82c2c <__memory_size+0xce6342c>
    1418:	1301053b 	beq	t8,at,2908 <__isr_vec_space+0x28e8>
    141c:	131a0000 	beq	t8,k0,1420 <__isr_vec_space+0x1400>
    1420:	3a0b0b01 	xori	t3,s0,0xb01
    1424:	01053b0b 	0x1053b0b
    1428:	1b000013 	blez	t8,1478 <__isr_vec_space+0x1458>
    142c:	0b0b0117 	j	c2c045c <__memory_size+0xc2a0c5c>
    1430:	053b0b3a 	0x53b0b3a
    1434:	00001301 	0x1301
    1438:	03000d1c 	0x3000d1c
    143c:	3b0b3a0e 	xori	t3,t8,0x3a0e
    1440:	00134905 	0x134905
    1444:	01151d00 	0x1151d00
    1448:	13011927 	beq	t8,at,78e8 <__isr_vec_space+0x78c8>
    144c:	2e1e0000 	sltiu	s8,s0,0
    1450:	03193f01 	0x3193f01
    1454:	3b0b3a0e 	xori	t3,t8,0x3a0e
    1458:	1119270b 	beq	t0,t9,b088 <__isr_vec_space+0xb068>
    145c:	40061201 	0x40061201
    1460:	19429618 	0x19429618
    1464:	00001301 	0x1301
    1468:	0300051f 	0x300051f
    146c:	3b0b3a0e 	xori	t3,t8,0x3a0e
    1470:	0213490b 	0x213490b
    1474:	20000017 	addi	zero,zero,23
    1478:	01018289 	0x1018289
    147c:	13310111 	beq	t9,s1,18c4 <__isr_vec_space+0x18a4>
    1480:	00001301 	0x1301
    1484:	01828a21 	0x1828a21
    1488:	91180200 	lbu	t8,512(t0)
    148c:	00001842 	srl	v1,zero,0x1
    1490:	01828922 	0x1828922
    1494:	31011101 	andi	at,t0,0x1101
    1498:	23000013 	addi	zero,t8,19
    149c:	0e030034 	jal	80c00d0 <__memory_size+0x80a08d0>
    14a0:	053b0b3a 	0x53b0b3a
    14a4:	193f1349 	0x193f1349
    14a8:	0000193c 	0x193c
    14ac:	3f012e24 	0x3f012e24
    14b0:	3a0e0319 	xori	t6,s0,0x319
    14b4:	270b3b0b 	addiu	t3,t8,15115
    14b8:	01193c19 	0x1193c19
    14bc:	25000013 	addiu	zero,t0,19
    14c0:	193f012e 	0x193f012e
    14c4:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
    14c8:	19270b3b 	0x19270b3b
    14cc:	0000193c 	0x193c
    14d0:	01110100 	0x1110100
    14d4:	0b130e25 	j	c4c3894 <__memory_size+0xc4a4094>
    14d8:	17100e03 	bne	t8,s0,4ce8 <__isr_vec_space+0x4cc8>
    14dc:	24020000 	li	v0,0
    14e0:	3e0b0b00 	0x3e0b0b00
    14e4:	000e030b 	0xe030b
    14e8:	00240300 	0x240300
    14ec:	0b3e0b0b 	j	cf82c2c <__memory_size+0xcf6342c>
    14f0:	00000803 	sra	at,zero,0x0
    14f4:	03001604 	0x3001604
    14f8:	3b0b3a0e 	xori	t3,t8,0x3a0e
    14fc:	0013490b 	0x13490b
    1500:	00160500 	sll	zero,s6,0x14
    1504:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
    1508:	1349053b 	beq	k0,t1,29f8 <__isr_vec_space+0x29d8>
    150c:	17060000 	bne	t8,a2,1510 <__isr_vec_space+0x14f0>
    1510:	3a0b0b01 	xori	t3,s0,0xb01
    1514:	010b3b0b 	0x10b3b0b
    1518:	07000013 	bltz	t8,1568 <__isr_vec_space+0x1548>
    151c:	0e03000d 	jal	80c0034 <__memory_size+0x80a0834>
    1520:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
    1524:	00001349 	0x1349
    1528:	49010108 	bc2t	194c <__isr_vec_space+0x192c>
    152c:	00130113 	0x130113
    1530:	00210900 	0x210900
    1534:	0b2f1349 	j	cbc4d24 <__memory_size+0xcba5524>
    1538:	130a0000 	beq	t8,t2,153c <__isr_vec_space+0x151c>
    153c:	3a0b0b01 	xori	t3,s0,0xb01
    1540:	010b3b0b 	0x10b3b0b
    1544:	0b000013 	j	c00004c <__memory_size+0xbfe084c>
    1548:	0e03000d 	jal	80c0034 <__memory_size+0x80a0834>
    154c:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
    1550:	0b381349 	j	ce04d24 <__memory_size+0xcde5524>
    1554:	0f0c0000 	jal	c300000 <__memory_size+0xc2e0800>
    1558:	000b0b00 	sll	at,t3,0xc
    155c:	01130d00 	0x1130d00
    1560:	0b0b0e03 	j	c2c380c <__memory_size+0xc2a400c>
    1564:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
    1568:	00001301 	0x1301
    156c:	03000d0e 	0x3000d0e
    1570:	3b0b3a08 	xori	t3,t8,0x3a08
    1574:	3813490b 	xori	s3,zero,0x490b
    1578:	0f00000b 	jal	c00002c <__memory_size+0xbfe082c>
    157c:	0b0b000f 	j	c2c003c <__memory_size+0xc2a083c>
    1580:	00001349 	0x1349
    1584:	03011310 	0x3011310
    1588:	3a050b0e 	xori	a1,s0,0xb0e
    158c:	010b3b0b 	0x10b3b0b
    1590:	11000013 	beqz	t0,15e0 <__isr_vec_space+0x15c0>
    1594:	0e03000d 	jal	80c0034 <__memory_size+0x80a0834>
    1598:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
    159c:	05381349 	0x5381349
    15a0:	15120000 	bne	t0,s2,15a4 <__isr_vec_space+0x1584>
    15a4:	00192700 	sll	a0,t9,0x1c
    15a8:	01151300 	0x1151300
    15ac:	13491927 	beq	k0,t1,7a4c <__isr_vec_space+0x7a2c>
    15b0:	00001301 	0x1301
    15b4:	49000514 	bc2f	2a08 <__isr_vec_space+0x29e8>
    15b8:	15000013 	bnez	t0,1608 <__isr_vec_space+0x15e8>
    15bc:	0e030113 	jal	80c044c <__memory_size+0x80a0c4c>
    15c0:	0b3a050b 	j	ce8142c <__memory_size+0xce61c2c>
    15c4:	1301053b 	beq	t8,at,2ab4 <__isr_vec_space+0x2a94>
    15c8:	0d160000 	jal	4580000 <__memory_size+0x4560800>
    15cc:	3a0e0300 	xori	t6,s0,0x300
    15d0:	49053b0b 	bc2t	$cc1,10200 <__isr_vec_space+0x101e0>
    15d4:	000b3813 	0xb3813
    15d8:	000d1700 	sll	v0,t5,0x1c
    15dc:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
    15e0:	1349053b 	beq	k0,t1,2ad0 <__isr_vec_space+0x2ab0>
    15e4:	00000538 	0x538
    15e8:	49002618 	bc2f	ae4c <__isr_vec_space+0xae2c>
    15ec:	19000013 	blez	t0,163c <__isr_vec_space+0x161c>
    15f0:	0e030113 	jal	80c044c <__memory_size+0x80a0c4c>
    15f4:	0b3a0b0b 	j	ce82c2c <__memory_size+0xce6342c>
    15f8:	1301053b 	beq	t8,at,2ae8 <__isr_vec_space+0x2ac8>
    15fc:	131a0000 	beq	t8,k0,1600 <__isr_vec_space+0x15e0>
    1600:	3a0b0b01 	xori	t3,s0,0xb01
    1604:	01053b0b 	0x1053b0b
    1608:	1b000013 	blez	t8,1658 <__isr_vec_space+0x1638>
    160c:	0b0b0117 	j	c2c045c <__memory_size+0xc2a0c5c>
    1610:	053b0b3a 	0x53b0b3a
    1614:	00001301 	0x1301
    1618:	03000d1c 	0x3000d1c
    161c:	3b0b3a0e 	xori	t3,t8,0x3a0e
    1620:	00134905 	0x134905
    1624:	01151d00 	0x1151d00
    1628:	13011927 	beq	t8,at,7ac8 <__isr_vec_space+0x7aa8>
    162c:	341e0000 	li	s8,0x0
    1630:	3a0e0300 	xori	t6,s0,0x300
    1634:	490b3b0b 	bc2tl	$cc2,10264 <__isr_vec_space+0x10244>
    1638:	00180213 	0x180213
    163c:	00341f00 	0x341f00
    1640:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
    1644:	1349053b 	beq	k0,t1,2b34 <__isr_vec_space+0x2b14>
    1648:	1802193f 	0x1802193f
    164c:	01000000 	0x1000000
    1650:	0e250111 	jal	8940444 <__memory_size+0x8920c44>
    1654:	0e030b13 	jal	80c2c4c <__memory_size+0x80a344c>
    1658:	06120111 	bltzall	s0,1aa0 <__isr_vec_space+0x1a80>
    165c:	00001710 	0x1710
    1660:	0b002402 	j	c009008 <__memory_size+0xbfe9808>
    1664:	030b3e0b 	0x30b3e0b
    1668:	0300000e 	0x300000e
    166c:	0e030016 	jal	80c0058 <__memory_size+0x80a0858>
    1670:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
    1674:	00001349 	0x1349
    1678:	0b002404 	j	c009010 <__memory_size+0xbfe9810>
    167c:	030b3e0b 	0x30b3e0b
    1680:	05000008 	bltz	t0,16a4 <__isr_vec_space+0x1684>
    1684:	0b0b000f 	j	c2c003c <__memory_size+0xc2a083c>
    1688:	00001349 	0x1349
    168c:	3f012e06 	0x3f012e06
    1690:	3a0e0319 	xori	t6,s0,0x319
    1694:	270b3b0b 	addiu	t3,t8,15115
    1698:	11134919 	beq	t0,s3,13b00 <__isr_vec_space+0x13ae0>
    169c:	40061201 	0x40061201
    16a0:	19429718 	0x19429718
    16a4:	00001301 	0x1301
    16a8:	03000507 	0x3000507
    16ac:	3b0b3a08 	xori	t3,t8,0x3a08
    16b0:	0213490b 	0x213490b
    16b4:	08000018 	j	60 <__isr_vec_space+0x40>
    16b8:	08030005 	j	c0014 <__memory_size+0xa0814>
    16bc:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
    16c0:	17021349 	bne	t8,v0,63e8 <__isr_vec_space+0x63c8>
    16c4:	34090000 	li	t1,0x0
    16c8:	3a080300 	xori	t0,s0,0x300
    16cc:	490b3b0b 	bc2tl	$cc2,102fc <__isr_vec_space+0x102dc>
    16d0:	00170213 	0x170213
    16d4:	00260a00 	0x260a00
    16d8:	01000000 	0x1000000
    16dc:	06100011 	bltzal	s0,1724 <__isr_vec_space+0x1704>
    16e0:	01120111 	0x1120111
    16e4:	081b0803 	j	6c200c <__memory_size+0x6a280c>
    16e8:	05130825 	bgezall	t0,3780 <__isr_vec_space+0x3760>
    16ec:	01000000 	0x1000000
    16f0:	06100011 	bltzal	s0,1738 <__isr_vec_space+0x1718>
    16f4:	01120111 	0x1120111
    16f8:	081b0803 	j	6c200c <__memory_size+0x6a280c>
    16fc:	05130825 	bgezall	t0,3794 <__isr_vec_space+0x3774>
    1700:	01000000 	0x1000000
    1704:	0e250111 	jal	8940444 <__memory_size+0x8920c44>
    1708:	0e030b13 	jal	80c2c4c <__memory_size+0x80a344c>
    170c:	06120111 	bltzall	s0,1b54 <__isr_vec_space+0x1b34>
    1710:	00001710 	0x1710
    1714:	0b002402 	j	c009008 <__memory_size+0xbfe9808>
    1718:	030b3e0b 	0x30b3e0b
    171c:	0300000e 	0x300000e
    1720:	0e030016 	jal	80c0058 <__memory_size+0x80a0858>
    1724:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
    1728:	00001349 	0x1349
    172c:	0b002404 	j	c009010 <__memory_size+0xbfe9810>
    1730:	030b3e0b 	0x30b3e0b
    1734:	05000008 	bltz	t0,1758 <__isr_vec_space+0x1738>
    1738:	0e030016 	jal	80c0058 <__memory_size+0x80a0858>
    173c:	053b0b3a 	0x53b0b3a
    1740:	00001349 	0x1349
    1744:	0b011706 	j	c045c18 <__memory_size+0xc026418>
    1748:	3b0b3a0b 	xori	t3,t8,0x3a0b
    174c:	0013010b 	0x13010b
    1750:	000d0700 	sll	zero,t5,0x1c
    1754:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
    1758:	13490b3b 	beq	k0,t1,4448 <__isr_vec_space+0x4428>
    175c:	01080000 	0x1080000
    1760:	01134901 	0x1134901
    1764:	09000013 	j	400004c <__memory_size+0x3fe084c>
    1768:	13490021 	beq	k0,t1,17f0 <__isr_vec_space+0x17d0>
    176c:	00000b2f 	0xb2f
    1770:	0b01130a 	j	c044c28 <__memory_size+0xc025428>
    1774:	3b0b3a0b 	xori	t3,t8,0x3a0b
    1778:	0013010b 	0x13010b
    177c:	000d0b00 	sll	at,t5,0xc
    1780:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
    1784:	13490b3b 	beq	k0,t1,4474 <__isr_vec_space+0x4454>
    1788:	00000b38 	0xb38
    178c:	0b000f0c 	j	c003c30 <__memory_size+0xbfe4430>
    1790:	0d00000b 	jal	400002c <__memory_size+0x3fe082c>
    1794:	0e030113 	jal	80c044c <__memory_size+0x80a0c4c>
    1798:	0b3a0b0b 	j	ce82c2c <__memory_size+0xce6342c>
    179c:	13010b3b 	beq	t8,at,448c <__isr_vec_space+0x446c>
    17a0:	0d0e0000 	jal	4380000 <__memory_size+0x4360800>
    17a4:	3a080300 	xori	t0,s0,0x300
    17a8:	490b3b0b 	bc2tl	$cc2,103d8 <__isr_vec_space+0x103b8>
    17ac:	000b3813 	0xb3813
    17b0:	000f0f00 	sll	at,t7,0x1c
    17b4:	13490b0b 	beq	k0,t1,43e4 <__isr_vec_space+0x43c4>
    17b8:	13100000 	beq	t8,s0,17bc <__isr_vec_space+0x179c>
    17bc:	0b0e0301 	j	c380c04 <__memory_size+0xc361404>
    17c0:	3b0b3a05 	xori	t3,t8,0x3a05
    17c4:	0013010b 	0x13010b
    17c8:	000d1100 	sll	v0,t5,0x4
    17cc:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
    17d0:	13490b3b 	beq	k0,t1,44c0 <__isr_vec_space+0x44a0>
    17d4:	00000538 	0x538
    17d8:	27001512 	addiu	zero,t8,5394
    17dc:	13000019 	beqz	t8,1844 <__isr_vec_space+0x1824>
    17e0:	19270115 	0x19270115
    17e4:	13011349 	beq	t8,at,650c <__isr_vec_space+0x64ec>
    17e8:	05140000 	0x5140000
    17ec:	00134900 	sll	t1,s3,0x4
    17f0:	01131500 	0x1131500
    17f4:	050b0e03 	tltiu	t0,3587
    17f8:	053b0b3a 	0x53b0b3a
    17fc:	00001301 	0x1301
    1800:	03000d16 	0x3000d16
    1804:	3b0b3a0e 	xori	t3,t8,0x3a0e
    1808:	38134905 	xori	s3,zero,0x4905
    180c:	1700000b 	bnez	t8,183c <__isr_vec_space+0x181c>
    1810:	0e03000d 	jal	80c0034 <__memory_size+0x80a0834>
    1814:	053b0b3a 	0x53b0b3a
    1818:	05381349 	0x5381349
    181c:	26180000 	addiu	t8,s0,0
    1820:	00134900 	sll	t1,s3,0x4
    1824:	01131900 	0x1131900
    1828:	0b0b0e03 	j	c2c380c <__memory_size+0xc2a400c>
    182c:	053b0b3a 	0x53b0b3a
    1830:	00001301 	0x1301
    1834:	0b01131a 	j	c044c68 <__memory_size+0xc025468>
    1838:	3b0b3a0b 	xori	t3,t8,0x3a0b
    183c:	00130105 	0x130105
    1840:	01171b00 	0x1171b00
    1844:	0b3a0b0b 	j	ce82c2c <__memory_size+0xce6342c>
    1848:	1301053b 	beq	t8,at,2d38 <__isr_vec_space+0x2d18>
    184c:	0d1c0000 	jal	4700000 <__memory_size+0x46e0800>
    1850:	3a0e0300 	xori	t6,s0,0x300
    1854:	49053b0b 	bc2t	$cc1,10484 <__isr_vec_space+0x10464>
    1858:	1d000013 	bgtz	t0,18a8 <__isr_vec_space+0x1888>
    185c:	19270115 	0x19270115
    1860:	00001301 	0x1301
    1864:	0301041e 	0x301041e
    1868:	3a0b0b0e 	xori	t3,s0,0xb0e
    186c:	010b3b0b 	0x10b3b0b
    1870:	1f000013 	bgtz	t8,18c0 <__isr_vec_space+0x18a0>
    1874:	0e030028 	jal	80c00a0 <__memory_size+0x80a08a0>
    1878:	00000d1c 	0xd1c
    187c:	3f012e20 	0x3f012e20
    1880:	3a0e0319 	xori	t6,s0,0x319
    1884:	270b3b0b 	addiu	t3,t8,15115
    1888:	11134919 	beq	t0,s3,13cf0 <__isr_vec_space+0x13cd0>
    188c:	40061201 	0x40061201
    1890:	19429718 	0x19429718
    1894:	00001301 	0x1301
    1898:	03000521 	0x3000521
    189c:	3b0b3a0e 	xori	t3,t8,0x3a0e
    18a0:	0213490b 	0x213490b
    18a4:	22000017 	addi	zero,s0,23
    18a8:	08030005 	j	c0014 <__memory_size+0xa0814>
    18ac:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
    18b0:	17021349 	bne	t8,v0,65d8 <__isr_vec_space+0x65b8>
    18b4:	34230000 	ori	v1,at,0x0
    18b8:	3a0e0300 	xori	t6,s0,0x300
    18bc:	490b3b0b 	bc2tl	$cc2,104ec <__isr_vec_space+0x104cc>
    18c0:	00170213 	0x170213
    18c4:	00342400 	0x342400
    18c8:	0b3a0803 	j	ce8200c <__memory_size+0xce6280c>
    18cc:	13490b3b 	beq	k0,t1,45bc <__isr_vec_space+0x459c>
    18d0:	00001702 	srl	v0,zero,0x1c
    18d4:	01828925 	0x1828925
    18d8:	31011101 	andi	at,t0,0x1101
    18dc:	26000013 	addiu	zero,s0,19
    18e0:	0001828a 	0x1828a
    18e4:	42911802 	c0	0x911802
    18e8:	27000018 	addiu	zero,t8,24
    18ec:	0e030034 	jal	80c00d0 <__memory_size+0x80a08d0>
    18f0:	053b0b3a 	0x53b0b3a
    18f4:	193f1349 	0x193f1349
    18f8:	0000193c 	0x193c
    18fc:	3f012e28 	0x3f012e28
    1900:	3a0e0319 	xori	t6,s0,0x319
    1904:	270b3b0b 	addiu	t3,t8,15115
    1908:	3c134919 	lui	s3,0x4919
    190c:	00000019 	multu	zero,zero
    1910:	25011101 	addiu	at,t0,4353
    1914:	030b130e 	0x30b130e
    1918:	1201110e 	beq	s0,at,5d54 <__isr_vec_space+0x5d34>
    191c:	00171006 	srlv	v0,s7,zero
    1920:	00240200 	0x240200
    1924:	0b3e0b0b 	j	cf82c2c <__memory_size+0xcf6342c>
    1928:	00000e03 	sra	at,zero,0x18
    192c:	0b002403 	j	c00900c <__memory_size+0xbfe980c>
    1930:	030b3e0b 	0x30b3e0b
    1934:	04000008 	bltz	zero,1958 <__isr_vec_space+0x1938>
    1938:	0e030016 	jal	80c0058 <__memory_size+0x80a0858>
    193c:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
    1940:	00001349 	0x1349
    1944:	03001605 	0x3001605
    1948:	3b0b3a0e 	xori	t3,t8,0x3a0e
    194c:	00134905 	0x134905
    1950:	01170600 	0x1170600
    1954:	0b3a0b0b 	j	ce82c2c <__memory_size+0xce6342c>
    1958:	13010b3b 	beq	t8,at,4648 <__isr_vec_space+0x4628>
    195c:	0d070000 	jal	41c0000 <__memory_size+0x41a0800>
    1960:	3a0e0300 	xori	t6,s0,0x300
    1964:	490b3b0b 	bc2tl	$cc2,10594 <__isr_vec_space+0x10574>
    1968:	08000013 	j	4c <__isr_vec_space+0x2c>
    196c:	13490101 	beq	k0,t1,1d74 <__isr_vec_space+0x1d54>
    1970:	00001301 	0x1301
    1974:	49002109 	bc2f	9d9c <__isr_vec_space+0x9d7c>
    1978:	000b2f13 	0xb2f13
    197c:	01130a00 	0x1130a00
    1980:	0b3a0b0b 	j	ce82c2c <__memory_size+0xce6342c>
    1984:	13010b3b 	beq	t8,at,4674 <__isr_vec_space+0x4654>
    1988:	0d0b0000 	jal	42c0000 <__memory_size+0x42a0800>
    198c:	3a0e0300 	xori	t6,s0,0x300
    1990:	490b3b0b 	bc2tl	$cc2,105c0 <__isr_vec_space+0x105a0>
    1994:	000b3813 	0xb3813
    1998:	000f0c00 	sll	at,t7,0x10
    199c:	00000b0b 	0xb0b
    19a0:	0301130d 	break	0x301,0x4c
    19a4:	3a0b0b0e 	xori	t3,s0,0xb0e
    19a8:	010b3b0b 	0x10b3b0b
    19ac:	0e000013 	jal	800004c <__memory_size+0x7fe084c>
    19b0:	0803000d 	j	c0034 <__memory_size+0xa0834>
    19b4:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
    19b8:	0b381349 	j	ce04d24 <__memory_size+0xcde5524>
    19bc:	0f0f0000 	jal	c3c0000 <__memory_size+0xc3a0800>
    19c0:	490b0b00 	bc2tl	$cc2,45c4 <__isr_vec_space+0x45a4>
    19c4:	10000013 	b	1a14 <__isr_vec_space+0x19f4>
    19c8:	0e030113 	jal	80c044c <__memory_size+0x80a0c4c>
    19cc:	0b3a050b 	j	ce8142c <__memory_size+0xce61c2c>
    19d0:	13010b3b 	beq	t8,at,46c0 <__isr_vec_space+0x46a0>
    19d4:	0d110000 	jal	4440000 <__memory_size+0x4420800>
    19d8:	3a0e0300 	xori	t6,s0,0x300
    19dc:	490b3b0b 	bc2tl	$cc2,1060c <__isr_vec_space+0x105ec>
    19e0:	00053813 	0x53813
    19e4:	00151200 	sll	v0,s5,0x8
    19e8:	00001927 	0x1927
    19ec:	27011513 	addiu	at,t8,5395
    19f0:	01134919 	0x1134919
    19f4:	14000013 	bnez	zero,1a44 <__isr_vec_space+0x1a24>
    19f8:	13490005 	beq	k0,t1,1a10 <__isr_vec_space+0x19f0>
    19fc:	13150000 	beq	t8,s5,1a00 <__isr_vec_space+0x19e0>
    1a00:	0b0e0301 	j	c380c04 <__memory_size+0xc361404>
    1a04:	3b0b3a05 	xori	t3,t8,0x3a05
    1a08:	00130105 	0x130105
    1a0c:	000d1600 	sll	v0,t5,0x18
    1a10:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
    1a14:	1349053b 	beq	k0,t1,2f04 <__isr_vec_space+0x2ee4>
    1a18:	00000b38 	0xb38
    1a1c:	03000d17 	0x3000d17
    1a20:	3b0b3a0e 	xori	t3,t8,0x3a0e
    1a24:	38134905 	xori	s3,zero,0x4905
    1a28:	18000005 	blez	zero,1a40 <__isr_vec_space+0x1a20>
    1a2c:	13490026 	beq	k0,t1,1ac8 <__isr_vec_space+0x1aa8>
    1a30:	13190000 	beq	t8,t9,1a34 <__isr_vec_space+0x1a14>
    1a34:	0b0e0301 	j	c380c04 <__memory_size+0xc361404>
    1a38:	3b0b3a0b 	xori	t3,t8,0x3a0b
    1a3c:	00130105 	0x130105
    1a40:	01131a00 	0x1131a00
    1a44:	0b3a0b0b 	j	ce82c2c <__memory_size+0xce6342c>
    1a48:	1301053b 	beq	t8,at,2f38 <__isr_vec_space+0x2f18>
    1a4c:	171b0000 	bne	t8,k1,1a50 <__isr_vec_space+0x1a30>
    1a50:	3a0b0b01 	xori	t3,s0,0xb01
    1a54:	01053b0b 	0x1053b0b
    1a58:	1c000013 	bgtz	zero,1aa8 <__isr_vec_space+0x1a88>
    1a5c:	0e03000d 	jal	80c0034 <__memory_size+0x80a0834>
    1a60:	053b0b3a 	0x53b0b3a
    1a64:	00001349 	0x1349
    1a68:	2701151d 	addiu	at,t8,5405
    1a6c:	00130119 	0x130119
    1a70:	012e1e00 	0x12e1e00
    1a74:	0e03193f 	jal	80c64fc <__memory_size+0x80a6cfc>
    1a78:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
    1a7c:	01111927 	0x1111927
    1a80:	18400612 	blez	v0,32cc <__isr_vec_space+0x32ac>
    1a84:	01194296 	0x1194296
    1a88:	1f000013 	bgtz	t8,1ad8 <__isr_vec_space+0x1ab8>
    1a8c:	0e030005 	jal	80c0014 <__memory_size+0x80a0814>
    1a90:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
    1a94:	17021349 	bne	t8,v0,67bc <__isr_vec_space+0x679c>
    1a98:	05200000 	bltz	t1,1a9c <__isr_vec_space+0x1a7c>
    1a9c:	3a080300 	xori	t0,s0,0x300
    1aa0:	490b3b0b 	bc2tl	$cc2,106d0 <__isr_vec_space+0x106b0>
    1aa4:	00170213 	0x170213
    1aa8:	00342100 	0x342100
    1aac:	0b3a0803 	j	ce8200c <__memory_size+0xce6280c>
    1ab0:	13490b3b 	beq	k0,t1,47a0 <__isr_vec_space+0x4780>
    1ab4:	00001702 	srl	v0,zero,0x1c
    1ab8:	03003422 	0x3003422
    1abc:	3b0b3a0e 	xori	t3,t8,0x3a0e
    1ac0:	0213490b 	0x213490b
    1ac4:	23000017 	addi	zero,t8,23
    1ac8:	0e03000a 	jal	80c0028 <__memory_size+0x80a0828>
    1acc:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
    1ad0:	0b240000 	j	c900000 <__memory_size+0xc8e0800>
    1ad4:	01175501 	0x1175501
    1ad8:	25000013 	addiu	zero,t0,19
    1adc:	01018289 	0x1018289
    1ae0:	00000111 	0x111
    1ae4:	01828a26 	0x1828a26
    1ae8:	91180200 	lbu	t8,512(t0)
    1aec:	00001842 	srl	v1,zero,0x1
    1af0:	01828927 	0x1828927
    1af4:	31011101 	andi	at,t0,0x1101
    1af8:	28000013 	slti	zero,zero,19
    1afc:	0e030034 	jal	80c00d0 <__memory_size+0x80a08d0>
    1b00:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
    1b04:	0b1c1349 	j	c704d24 <__memory_size+0xc6e5524>
    1b08:	34290000 	ori	t1,at,0x0
    1b0c:	3a0e0300 	xori	t6,s0,0x300
    1b10:	49053b0b 	bc2t	$cc1,10740 <__isr_vec_space+0x10720>
    1b14:	3c193f13 	lui	t9,0x3f13
    1b18:	2a000019 	slti	zero,s0,25
    1b1c:	193f012e 	0x193f012e
    1b20:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
    1b24:	19270b3b 	0x19270b3b
    1b28:	0000193c 	0x193c
    1b2c:	01110100 	0x1110100
    1b30:	0b130e25 	j	c4c3894 <__memory_size+0xc4a4094>
    1b34:	01110e03 	0x1110e03
    1b38:	17100612 	bne	t8,s0,3384 <__isr_vec_space+0x3364>
    1b3c:	24020000 	li	v0,0
    1b40:	3e0b0b00 	0x3e0b0b00
    1b44:	000e030b 	0xe030b
    1b48:	00160300 	sll	zero,s6,0xc
    1b4c:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
    1b50:	13490b3b 	beq	k0,t1,4840 <__isr_vec_space+0x4820>
    1b54:	24040000 	li	a0,0
    1b58:	3e0b0b00 	0x3e0b0b00
    1b5c:	0008030b 	0x8030b
    1b60:	012e0500 	0x12e0500
    1b64:	0e03193f 	jal	80c64fc <__memory_size+0x80a6cfc>
    1b68:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
    1b6c:	01111927 	0x1111927
    1b70:	18400612 	blez	v0,33bc <__isr_vec_space+0x339c>
    1b74:	01194297 	0x1194297
    1b78:	06000013 	bltz	s0,1bc8 <__isr_vec_space+0x1ba8>
    1b7c:	0e030005 	jal	80c0014 <__memory_size+0x80a0814>
    1b80:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
    1b84:	17021349 	bne	t8,v0,68ac <__isr_vec_space+0x688c>
    1b88:	34070000 	li	a3,0x0
    1b8c:	3a0e0300 	xori	t6,s0,0x300
    1b90:	490b3b0b 	bc2tl	$cc2,107c0 <__isr_vec_space+0x107a0>
    1b94:	00180213 	0x180213
    1b98:	00340800 	0x340800
    1b9c:	0b3a0803 	j	ce8200c <__memory_size+0xce6280c>
    1ba0:	13490b3b 	beq	k0,t1,4890 <__isr_vec_space+0x4870>
    1ba4:	00001802 	srl	v1,zero,0x0
    1ba8:	01828909 	0x1828909
    1bac:	31011101 	andi	at,t0,0x1101
    1bb0:	00130113 	0x130113
    1bb4:	828a0a00 	lb	t2,2560(s4)
    1bb8:	18020001 	0x18020001
    1bbc:	00184291 	0x184291
    1bc0:	82890b00 	lb	t1,2816(s4)
    1bc4:	01110001 	movt	zero,t0,$fcc4
    1bc8:	00001331 	tgeu	zero,zero,0x4c
    1bcc:	4901010c 	bc2t	2000 <__isr_vec_space+0x1fe0>
    1bd0:	00130113 	0x130113
    1bd4:	00210d00 	0x210d00
    1bd8:	340e0000 	li	t6,0x0
    1bdc:	3a0e0300 	xori	t6,s0,0x300
    1be0:	490b3b0b 	bc2tl	$cc2,10810 <__isr_vec_space+0x107f0>
    1be4:	3c193f13 	lui	t9,0x3f13
    1be8:	0f000019 	jal	c000064 <__memory_size+0xbfe0864>
    1bec:	193f012e 	0x193f012e
    1bf0:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
    1bf4:	19270b3b 	0x19270b3b
    1bf8:	1301193c 	beq	t8,at,80ec <__isr_vec_space+0x80cc>
    1bfc:	05100000 	bltzal	t0,1c00 <__isr_vec_space+0x1be0>
    1c00:	00134900 	sll	t1,s3,0x4
    1c04:	002e1100 	0x2e1100
    1c08:	0e03193f 	jal	80c64fc <__memory_size+0x80a6cfc>
    1c0c:	0b3b0b3a 	j	cec2ce8 <__memory_size+0xcea34e8>
    1c10:	13491927 	beq	k0,t1,80b0 <__isr_vec_space+0x8090>
    1c14:	0000193c 	0x193c
    1c18:	00110100 	sll	zero,s1,0x4
    1c1c:	01110610 	0x1110610
    1c20:	08030112 	j	c0448 <__memory_size+0xa0c48>
    1c24:	0825081b 	j	94206c <__memory_size+0x92286c>
    1c28:	00000513 	0x513
    1c2c:	01110100 	0x1110100
    1c30:	0b130e25 	j	c4c3894 <__memory_size+0xc4a4094>
    1c34:	01110e03 	0x1110e03
    1c38:	17100612 	bne	t8,s0,3484 <__isr_vec_space+0x3464>
    1c3c:	24020000 	li	v0,0
    1c40:	3e0b0b00 	0x3e0b0b00
    1c44:	000e030b 	0xe030b
    1c48:	00160300 	sll	zero,s6,0xc
    1c4c:	0b3a0e03 	j	ce8380c <__memory_size+0xce6400c>
    1c50:	13490b3b 	beq	k0,t1,4940 <__isr_vec_space+0x4920>
    1c54:	24040000 	li	a0,0
    1c58:	3e0b0b00 	0x3e0b0b00
    1c5c:	0008030b 	0x8030b
    1c60:	000f0500 	sll	zero,t7,0x14
    1c64:	00000b0b 	0xb0b
    1c68:	3f012e06 	0x3f012e06
    1c6c:	3a0e0319 	xori	t6,s0,0x319
    1c70:	270b3b0b 	addiu	t3,t8,15115
    1c74:	12011119 	beq	s0,at,60dc <__isr_vec_space+0x60bc>
    1c78:	97184006 	lhu	t8,16390(t8)
    1c7c:	13011942 	beq	t8,at,8188 <__isr_vec_space+0x8168>
    1c80:	05070000 	aclr	0x0,0(t0)
    1c84:	3a0e0300 	xori	t6,s0,0x300
    1c88:	490b3b0b 	bc2tl	$cc2,108b8 <__isr_vec_space+0x10898>
    1c8c:	00170213 	0x170213
    1c90:	00340800 	0x340800
    1c94:	0b3a0803 	j	ce8200c <__memory_size+0xce6280c>
    1c98:	13490b3b 	beq	k0,t1,4988 <__isr_vec_space+0x4968>
    1c9c:	00001802 	srl	v1,zero,0x0
    1ca0:	03003409 	jalr.hb	a2,t8
    1ca4:	3b0b3a0e 	xori	t3,t8,0x3a0e
    1ca8:	0213490b 	0x213490b
    1cac:	0a000018 	j	8000060 <__memory_size+0x7fe0860>
    1cb0:	0b0b000f 	j	c2c003c <__memory_size+0xc2a083c>
    1cb4:	00001349 	0x1349
    1cb8:	4901010b 	bc2t	20e8 <__isr_vec_space+0x20c8>
    1cbc:	00130113 	0x130113
    1cc0:	00210c00 	0x210c00
    1cc4:	340d0000 	li	t5,0x0
    1cc8:	3a0e0300 	xori	t6,s0,0x300
    1ccc:	490b3b0b 	bc2tl	$cc2,108fc <__isr_vec_space+0x108dc>
    1cd0:	3c193f13 	lui	t9,0x3f13
    1cd4:	00000019 	multu	zero,zero
    1cd8:	10001101 	b	60e0 <__isr_vec_space+0x60c0>
    1cdc:	03065506 	0x3065506
    1ce0:	25081b08 	addiu	t0,t0,6920
    1ce4:	00051308 	0x51308
    1ce8:	11010000 	beq	t0,at,1cec <__isr_vec_space+0x1ccc>
    1cec:	11061000 	beq	t0,a2,5cf0 <__isr_vec_space+0x5cd0>
    1cf0:	03011201 	0x3011201
    1cf4:	25081b08 	addiu	t0,t0,6920
    1cf8:	00051308 	0x51308
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000000f5 	0xf5
       4:	005f0002 	0x5f0002
       8:	01010000 	0x1010000
       c:	000d0efb 	0xd0efb
      10:	01010101 	0x1010101
      14:	01000000 	0x1000000
      18:	2f010000 	sltiu	at,t8,0
      1c:	61726373 	0x61726373
      20:	2f686374 	sltiu	t0,k1,25460
      24:	2f66706d 	sltiu	a2,k1,28781
      28:	73626f6a 	s16ldd	xr13,k1,310,ptn0
      2c:	3334352f 	andi	s4,t9,0x352f
      30:	342f3539 	ori	t7,at,0x3539
      34:	34393038 	ori	t9,at,0x3038
      38:	3034322f 	andi	s4,at,0x322f
      3c:	2f383931 	sltiu	t8,t9,14641
      40:	72616873 	d32sar	xr1,xr10,xr5,xr8,9
      44:	672f6465 	0x672f6465
      48:	6c2f6363 	0x6c2f6363
      4c:	6c676269 	0x6c676269
      50:	2f73736f 	sltiu	s3,k1,29551
      54:	7370696d 	s16sdi	xr5,k1,52,
      58:	6c61682f 	0x6c61682f
      5c:	72630000 	madd	s3,v1
      60:	532e3074 	beql	t9,t6,c234 <__isr_vec_space+0xc214>
      64:	00000100 	sll	zero,zero,0x4
      68:	02050000 	0x2050000
      6c:	80000200 	lb	zero,512(zero)
      70:	0100cd03 	0x100cd03
      74:	834a2103 	lb	t2,8451(k0)
      78:	bb194b4b 	swr	t9,19275(t8)
      7c:	85834b83 	lh	v1,19331(t4)
      80:	83504b4b 	lb	s0,19275(k0)
      84:	4b854e83 	c2	0x1854e83
      88:	4b83134b 	c2	0x183134b
      8c:	4d83134c 	0x4d83134c
      90:	83134b4b 	lb	s3,19275(t8)
      94:	134b4b4d 	beq	k0,t3,12dcc <__isr_vec_space+0x12dac>
      98:	4b4b4d83 	c2	0x14b4d83
      9c:	4b4d8313 	c2	0x14d8313
      a0:	4b83134b 	c2	0x183134b
      a4:	5188144d 	beql	t4,t0,51dc <__isr_vec_space+0x51bc>
      a8:	83834d4b 	lb	v1,19787(gp)
      ac:	0384bb50 	0x384bb50
      b0:	83bb4a0b 	lb	k1,18955(sp)
      b4:	85134b84 	lh	s3,19332(t0)
      b8:	4b848483 	c2	0x1848483
      bc:	4b83854b 	c2	0x183854b
      c0:	0f034b4f 	jal	c0d2d3c <__memory_size+0xc0b353c>
      c4:	8483bb01 	lh	v1,-17663(a0)
      c8:	83848383 	lb	a0,-31869(gp)
      cc:	85820a03 	lh	v0,2563(t4)
      d0:	4e4b4b83 	c3	0x4b4b83
      d4:	84858383 	lh	a1,-31869(a0)
      d8:	83864b85 	lb	a2,19333(gp)
      dc:	4b858383 	c2	0x1858383
      e0:	4d4b4b4b 	0x4d4b4b4b
      e4:	19031385 	0x19031385
      e8:	11038382 	beq	t0,v1,fffe0ef4 <__flash_start+0x403e0ef4>
      ec:	8683834a 	lh	v1,-31926(s4)
      f0:	4b851583 	c2	0x1851583
      f4:	01000802 	0x1000802
      f8:	00012501 	0x12501
      fc:	4e000200 	lwxc1	$f8,zero(s0)
     100:	01000000 	0x1000000
     104:	0d0efb01 	jal	43bec04 <__memory_size+0x439f404>
     108:	01010100 	0x1010100
     10c:	00000001 	movf	zero,zero,$fcc0
     110:	01000001 	movf	zero,t0,$fcc0
     114:	00637273 	tltu	v1,v1,0x1c9
     118:	6f6f6200 	0x6f6f6200
     11c:	00532e74 	teq	v0,s3,0xb9
     120:	69000001 	0x69000001
     124:	5f74696e 	0x5f74696e
     128:	68636163 	0x68636163
     12c:	532e7365 	beql	t9,t6,1cec4 <__isr_vec_space+0x1cea4>
     130:	00000100 	sll	zero,zero,0x4
     134:	74696e69 	jalx	1a5b9a4 <__memory_size+0x1a3c1a4>
     138:	3070635f 	andi	s0,v1,0x635f
     13c:	0100532e 	0x100532e
     140:	6e690000 	0x6e690000
     144:	745f7469 	jalx	17dd1a4 <__memory_size+0x17bd9a4>
     148:	532e626c 	beql	t9,t6,18afc <__isr_vec_space+0x18adc>
     14c:	00000100 	sll	zero,zero,0x4
     150:	02050000 	0x2050000
     154:	9fc00000 	0x9fc00000
     158:	0100c003 	0x100c003
     15c:	034b4b83 	0x34b4b83
     160:	4b4b4a09 	c2	0x14b4a09
     164:	864f4b4b 	lh	t7,19275(s2)
     168:	834e4b83 	lb	t6,19331(k0)
     16c:	4b834e4b 	c2	0x1834e4b
     170:	4b4b834f 	c2	0x14b834f
     174:	4b834e4b 	c2	0x1834e4b
     178:	834b834e 	lb	t3,-31922(k0)
     17c:	4b504e4b 	c2	0x1504e4b
     180:	b5030204 	0xb5030204
     184:	4d4d4a7f 	0x4d4d4a7f
     188:	4c4b4c4b 	0x4c4b4c4b
     18c:	4b4d4b4b 	c2	0x14d4b4b
     190:	4b4d4c4c 	c2	0x14d4c4c
     194:	4b4b4f4c 	c2	0x14b4f4c
     198:	034b4e4b 	0x34b4e4b
     19c:	4d4d4a09 	0x4d4d4a09
     1a0:	4c4b4c4b 	0x4c4b4c4b
     1a4:	4b4d4b4b 	c2	0x14d4b4b
     1a8:	4b4d4c4c 	c2	0x14d4c4c
     1ac:	504c4b4b 	beql	v0,t4,12edc <__isr_vec_space+0x12ebc>
     1b0:	4d4b4c4b 	0x4d4b4c4b
     1b4:	4b4b504b 	c2	0x14b504b
     1b8:	044b4b4b 	tltiu	v0,19275
     1bc:	02710301 	0x2710301
     1c0:	4b010184 	c2	0x1010184
     1c4:	4b157c02 	c2	0x1157c02
     1c8:	9d030304 	0x9d030304
     1cc:	4d834a7f 	0x4d834a7f
     1d0:	4d4b4b4b 	0x4d4b4b4b
     1d4:	4c4b4c4b 	0x4c4b4c4b
     1d8:	4c4b4c4b 	0x4c4b4c4b
     1dc:	4c4b4c4b 	0x4c4b4c4b
     1e0:	4f4b4c4b 	c3	0x14b4c4b
     1e4:	044b4c4d 	tltiu	v0,19533
     1e8:	f23d0301 	0xf23d0301
     1ec:	0304044b 	0x304044b
     1f0:	4b4a7f98 	c2	0x14a7f98
     1f4:	4b4b4b4b 	c2	0x14b4b4b
     1f8:	4b4b4b4e 	c2	0x14b4b4e
     1fc:	4b4d4b4b 	c2	0x14d4b4b
     200:	4c4c4b4b 	0x4c4c4b4b
     204:	044b4d4b 	tltiu	v0,19787
     208:	00d20301 	0xd20301
     20c:	4b012802 	c2	0x1012802
     210:	024b4b4b 	0x24b4b4b
     214:	4b1801f0 	c2	0x11801f0
     218:	4b4b4b4b 	c2	0x14b4b4b
     21c:	0004024b 	0x4024b
     220:	00de0101 	0xde0101
     224:	00020000 	sll	zero,v0,0x0
     228:	0000004a 	0x4a
     22c:	0efb0101 	jal	bec0404 <__memory_size+0xbea0c04>
     230:	0101000d 	break	0x101
     234:	00000101 	0x101
     238:	00000100 	sll	zero,zero,0x4
     23c:	2f2e2e01 	sltiu	t6,t9,11777
     240:	532f2e2e 	beql	t9,t7,bafc <__isr_vec_space+0xbadc>
     244:	6372756f 	0x6372756f
     248:	6f702f65 	0x6f702f65
     24c:	62617472 	0x62617472
     250:	432f656c 	c0	0x12f656c
     254:	5365646f 	beql	k1,a1,19414 <__isr_vec_space+0x193f4>
     258:	65706163 	0x65706163
     25c:	50494d2f 	beql	v0,t1,1371c <__isr_vec_space+0x136fc>
     260:	67704653 	0x67704653
     264:	70000061 	0x70000061
     268:	5f74726f 	0x5f74726f
     26c:	2e6d7361 	sltiu	t5,s3,29537
     270:	00010053 	0x10053
     274:	05000000 	bltz	t0,278 <__isr_vec_space+0x258>
     278:	00063c02 	srl	a3,a2,0x10
     27c:	00e00380 	0xe00380
     280:	01d80201 	0x1d80201
     284:	024c4b14 	0x24c4b14
     288:	4b1401b8 	c2	0x11401b8
     28c:	024a0e03 	0x24a0e03
     290:	031701b8 	0x31701b8
     294:	4e4b4a1b 	c3	0x4b4a1b
     298:	4b4d4b4b 	c2	0x14d4b4b
     29c:	4f4d4b4b 	c3	0x14d4b4b
     2a0:	4b834d83 	c2	0x1834d83
     2a4:	4b4e4d4e 	c2	0x14e4d4e
     2a8:	4b4b4b4b 	c2	0x14b4b4b
     2ac:	4b4b4b4b 	c2	0x14b4b4b
     2b0:	4b4b4b4b 	c2	0x14b4b4b
     2b4:	4b4b4b4b 	c2	0x14b4b4b
     2b8:	4b4c4b4b 	c2	0x14c4b4b
     2bc:	4b4b4b4b 	c2	0x14b4b4b
     2c0:	504b8351 	beql	v0,t3,fffe1008 <__flash_start+0x403e1008>
     2c4:	4b4b4b4b 	c2	0x14b4b4b
     2c8:	4d4b4e4b 	0x4d4b4e4b
     2cc:	514b4b4b 	beql	t2,t3,12ffc <__isr_vec_space+0x12fdc>
     2d0:	4d4b4d4b 	0x4d4b4d4b
     2d4:	4b4c4b83 	c2	0x14c4b83
     2d8:	4b4b4b4b 	c2	0x14b4b4b
     2dc:	4b4b4b4d 	c2	0x14b4b4d
     2e0:	4b4b4b4b 	c2	0x14b4b4b
     2e4:	4b4b4b4b 	c2	0x14b4b4b
     2e8:	4b4b4b4b 	c2	0x14b4b4b
     2ec:	4b4b4b4b 	c2	0x14b4b4b
     2f0:	834e4b4d 	lb	t6,19277(k0)
     2f4:	4b4d4d4d 	c2	0x14d4d4d
     2f8:	4b4b4e4d 	c2	0x14b4e4d
     2fc:	024b4c4c 	syscall	0x92d31
     300:	01010004 	sllv	zero,at,t0
     304:	000001f7 	0x1f7
     308:	013c0002 	0x13c0002
     30c:	01010000 	0x1010000
     310:	000d0efb 	0xd0efb
     314:	01010101 	0x1010101
     318:	01000000 	0x1000000
     31c:	73010000 	madd	t8,at
     320:	2f006372 	sltiu	zero,t8,25458
     324:	2f74706f 	sltiu	s4,k1,28783
     328:	74676d69 	jalx	19db5a4 <__memory_size+0x19bbda4>
     32c:	542f6365 	bnel	at,t7,190c4 <__isr_vec_space+0x190a4>
     330:	636c6f6f 	0x636c6f6f
     334:	6e696168 	0x6e696168
     338:	696d2f73 	0x696d2f73
     33c:	6d2d7370 	0x6d2d7370
     340:	652d6974 	0x652d6974
     344:	322f666c 	andi	t7,s1,0x666c
     348:	2e363130 	sltiu	s6,s1,12592
     34c:	302d3530 	andi	t5,at,0x3530
     350:	696d2f33 	0x696d2f33
     354:	6d2d7370 	0x6d2d7370
     358:	652d6974 	0x652d6974
     35c:	692f666c 	0x692f666c
     360:	756c636e 	jalx	5b18db8 <__memory_size+0x5af95b8>
     364:	6d2f6564 	0x6d2f6564
     368:	69686361 	0x69686361
     36c:	2f00656e 	sltiu	zero,t8,25966
     370:	2f74706f 	sltiu	s4,k1,28783
     374:	74676d69 	jalx	19db5a4 <__memory_size+0x19bbda4>
     378:	542f6365 	bnel	at,t7,19110 <__isr_vec_space+0x190f0>
     37c:	636c6f6f 	0x636c6f6f
     380:	6e696168 	0x6e696168
     384:	696d2f73 	0x696d2f73
     388:	6d2d7370 	0x6d2d7370
     38c:	652d6974 	0x652d6974
     390:	322f666c 	andi	t7,s1,0x666c
     394:	2e363130 	sltiu	s6,s1,12592
     398:	302d3530 	andi	t5,at,0x3530
     39c:	696d2f33 	0x696d2f33
     3a0:	6d2d7370 	0x6d2d7370
     3a4:	652d6974 	0x652d6974
     3a8:	692f666c 	0x692f666c
     3ac:	756c636e 	jalx	5b18db8 <__memory_size+0x5af95b8>
     3b0:	2e006564 	sltiu	zero,s0,25956
     3b4:	2e2e2f2e 	sltiu	t6,s1,12078
     3b8:	756f532f 	jalx	5bd4cbc <__memory_size+0x5bb54bc>
     3bc:	2f656372 	sltiu	a1,k1,25458
     3c0:	74726f70 	jalx	1c9bdc0 <__memory_size+0x1c7c5c0>
     3c4:	656c6261 	0x656c6261
     3c8:	646f432f 	0x646f432f
     3cc:	61635365 	0x61635365
     3d0:	4d2f6570 	nmadd.s	$f21,$f9,$f12,$f15
     3d4:	46535049 	c1	0x535049
     3d8:	00616770 	tge	v1,at,0x19d
     3dc:	2e2f2e2e 	sltiu	t7,s1,11822
     3e0:	6f532f2e 	0x6f532f2e
     3e4:	65637275 	0x65637275
     3e8:	636e692f 	0x636e692f
     3ec:	6564756c 	0x6564756c
     3f0:	616d0000 	0x616d0000
     3f4:	625f6e69 	0x625f6e69
     3f8:	6b6e696c 	0x6b6e696c
     3fc:	00632e79 	0x632e79
     400:	5f000001 	bgtzl	t8,408 <__isr_vec_space+0x3e8>
     404:	61666564 	0x61666564
     408:	5f746c75 	0x5f746c75
     40c:	65707974 	0x65707974
     410:	00682e73 	tltu	v1,t0,0xb9
     414:	73000002 	mul	zero,t8,zero
     418:	6e696474 	0x6e696474
     41c:	00682e74 	teq	v1,t0,0xb9
     420:	70000003 	s32max	xr0,xr0,xr0
     424:	6d74726f 	0x6d74726f
     428:	6f726361 	0x6f726361
     42c:	0400682e 	bltz	zero,1a4e8 <__isr_vec_space+0x1a4c8>
     430:	75710000 	jalx	5c40000 <__memory_size+0x5c20800>
     434:	2e657565 	sltiu	a1,s3,30053
     438:	00050068 	0x50068
     43c:	6d697400 	0x6d697400
     440:	2e737265 	sltiu	s3,s3,29285
     444:	00050068 	0x50068
     448:	05000000 	bltz	t0,44c <__isr_vec_space+0x42c>
     44c:	000a5402 	srl	t2,t2,0x10
     450:	01930380 	0x1930380
     454:	e508f301 	swc1	$f8,-3327(t0)
     458:	3c081f03 	lui	t0,0x1f03
     45c:	7508bdf7 	jalx	422f7dc <__memory_size+0x420ffdc>
     460:	01040200 	0x1040200
     464:	0806ba06 	j	1ae818 <__memory_size+0x18f018>
     468:	bdbcbc3e 	cache	0x1c,-17346(t5)
     46c:	bd192c02 	cache	0x19,11266(t0)
     470:	bd1a2c02 	cache	0x1a,11266(t0)
     474:	00172c02 	srl	a1,s7,0x10
     478:	06010402 	bgez	s0,1484 <__isr_vec_space+0x1464>
     47c:	3e0806ba 	0x3e0806ba
     480:	2402bcbc 	li	v0,-17220
     484:	0084bd15 	0x84bd15
     488:	c2010402 	ll	at,1026(s0)
     48c:	2c02f485 	sltiu	v0,zero,-2939
     490:	192c0219 	0x192c0219
     494:	f4770883 	sdc1	$f23,2179(v1)
     498:	3d084c4b 	0x3d084c4b
     49c:	03040200 	0x3040200
     4a0:	0200ba06 	0x200ba06
     4a4:	06ba0104 	0x6ba0104
     4a8:	3d087508 	0x3d087508
     4ac:	03040200 	0x3040200
     4b0:	0200ba06 	0x200ba06
     4b4:	06ba0104 	0x6ba0104
     4b8:	08877508 	j	21dd420 <__memory_size+0x21bdc20>
     4bc:	02008a3e 	0x2008a3e
     4c0:	00be0104 	0xbe0104
     4c4:	bf010402 	cache	0x1,1026(t8)
     4c8:	01040200 	0x1040200
     4cc:	02004208 	0x2004208
     4d0:	e5080104 	swc1	$f8,260(t0)
     4d4:	4c410887 	0x4c410887
     4d8:	01040200 	0x1040200
     4dc:	0806f206 	j	1bc818 <__memory_size+0x19d018>
     4e0:	e808be40 	swc2	$8,-16832(zero)
     4e4:	00bbbbf4 	teq	a1,k1,0x2ef
     4e8:	06030402 	bgezl	s0,14f4 <__isr_vec_space+0x14d4>
     4ec:	040200ba 	bltzl	zero,7d8 <__isr_vec_space+0x7b8>
     4f0:	0806ba01 	j	1ae804 <__memory_size+0x18f004>
     4f4:	08874c75 	j	21d31d4 <__memory_size+0x21b39d4>
     4f8:	1802bb43 	0x1802bb43
     4fc:	a7010100 	sh	at,256(t8)
     500:	02000001 	movf	zero,s0,$fcc0
     504:	00014400 	sll	t0,at,0x10
     508:	fb010100 	sdc2	$1,256(t8)
     50c:	01000d0e 	0x1000d0e
     510:	00010101 	0x10101
     514:	00010000 	sll	zero,at,0x0
     518:	72730100 	0x72730100
     51c:	6f2f0063 	0x6f2f0063
     520:	692f7470 	0x692f7470
     524:	6574676d 	0x6574676d
     528:	6f542f63 	0x6f542f63
     52c:	68636c6f 	0x68636c6f
     530:	736e6961 	0x736e6961
     534:	70696d2f 	0x70696d2f
     538:	746d2d73 	jalx	1b4b5cc <__memory_size+0x1b2bdcc>
     53c:	6c652d69 	0x6c652d69
     540:	30322f66 	andi	s2,at,0x2f66
     544:	302e3631 	andi	t6,at,0x3631
     548:	33302d35 	andi	s0,t9,0x2d35
     54c:	70696d2f 	0x70696d2f
     550:	746d2d73 	jalx	1b4b5cc <__memory_size+0x1b2bdcc>
     554:	6c652d69 	0x6c652d69
     558:	6e692f66 	0x6e692f66
     55c:	64756c63 	0x64756c63
     560:	616d2f65 	0x616d2f65
     564:	6e696863 	0x6e696863
     568:	6f2f0065 	0x6f2f0065
     56c:	692f7470 	0x692f7470
     570:	6574676d 	0x6574676d
     574:	6f542f63 	0x6f542f63
     578:	68636c6f 	0x68636c6f
     57c:	736e6961 	0x736e6961
     580:	70696d2f 	0x70696d2f
     584:	746d2d73 	jalx	1b4b5cc <__memory_size+0x1b2bdcc>
     588:	6c652d69 	0x6c652d69
     58c:	30322f66 	andi	s2,at,0x2f66
     590:	302e3631 	andi	t6,at,0x3631
     594:	33302d35 	andi	s0,t9,0x2d35
     598:	70696d2f 	0x70696d2f
     59c:	746d2d73 	jalx	1b4b5cc <__memory_size+0x1b2bdcc>
     5a0:	6c652d69 	0x6c652d69
     5a4:	6e692f66 	0x6e692f66
     5a8:	64756c63 	0x64756c63
     5ac:	6f2f0065 	0x6f2f0065
     5b0:	692f7470 	0x692f7470
     5b4:	6574676d 	0x6574676d
     5b8:	6f542f63 	0x6f542f63
     5bc:	68636c6f 	0x68636c6f
     5c0:	736e6961 	0x736e6961
     5c4:	70696d2f 	0x70696d2f
     5c8:	746d2d73 	jalx	1b4b5cc <__memory_size+0x1b2bdcc>
     5cc:	6c652d69 	0x6c652d69
     5d0:	30322f66 	andi	s2,at,0x2f66
     5d4:	302e3631 	andi	t6,at,0x3631
     5d8:	33302d35 	andi	s0,t9,0x2d35
     5dc:	70696d2f 	0x70696d2f
     5e0:	746d2d73 	jalx	1b4b5cc <__memory_size+0x1b2bdcc>
     5e4:	6c652d69 	0x6c652d69
     5e8:	6e692f66 	0x6e692f66
     5ec:	64756c63 	0x64756c63
     5f0:	696d2f65 	0x696d2f65
     5f4:	2e007370 	sltiu	zero,s0,29552
     5f8:	2e2e2f2e 	sltiu	t6,s1,12078
     5fc:	756f532f 	jalx	5bd4cbc <__memory_size+0x5bb54bc>
     600:	2f656372 	sltiu	a1,k1,25458
     604:	6c636e69 	0x6c636e69
     608:	00656475 	0x656475
     60c:	69616d00 	0x69616d00
     610:	00632e6e 	0x632e6e
     614:	5f000001 	bgtzl	t8,61c <__isr_vec_space+0x5fc>
     618:	61666564 	0x61666564
     61c:	5f746c75 	0x5f746c75
     620:	65707974 	0x65707974
     624:	00682e73 	tltu	v1,t0,0xb9
     628:	73000002 	mul	zero,t8,zero
     62c:	6e696474 	0x6e696474
     630:	00682e74 	teq	v1,t0,0xb9
     634:	6d000003 	0x6d000003
     638:	30633233 	andi	v1,v1,0x3233
     63c:	0400682e 	bltz	zero,1a6f8 <__isr_vec_space+0x1a6d8>
     640:	61740000 	0x61740000
     644:	682e6b73 	0x682e6b73
     648:	00000500 	sll	zero,zero,0x14
     64c:	02050000 	0x2050000
     650:	80000ed4 	lb	zero,3796(zero)
     654:	01018a03 	0x1018a03
     658:	bcf20a03 	cache	0x12,2563(a3)
     65c:	04020084 	bltzl	zero,870 <__isr_vec_space+0x850>
     660:	bc89bb01 	cache	0x9,-17663(a0)
     664:	0b034008 	j	c0d0020 <__memory_size+0xc0b0820>
     668:	040200f2 	bltzl	zero,a34 <__isr_vec_space+0xa14>
     66c:	30020601 	andi	v0,zero,0x601
     670:	04020012 	bltzl	zero,6bc <__isr_vec_space+0x69c>
     674:	ad080601 	sw	t0,1537(t0)
     678:	ba0a0387 	swr	t2,903(s0)
     67c:	7c084008 	fork	t0,zero,t0
     680:	01040200 	0x1040200
     684:	12300206 	beq	s1,s0,ea0 <__isr_vec_space+0xe80>
     688:	01040200 	0x1040200
     68c:	87ad0806 	lh	t5,2054(sp)
     690:	85f20a03 	lh	s2,2563(t7)
     694:	78088585 	0x78088585
     698:	86844208 	lh	a0,16904(s4)
     69c:	4b4b4b84 	c2	0x14b4b84
     6a0:	4a7a034b 	c2	0x7a034b
     6a4:	001402c2 	srl	zero,s4,0xb
     6a8:	01d00101 	0x1d00101
     6ac:	00020000 	sll	zero,v0,0x0
     6b0:	0000014b 	0x14b
     6b4:	0efb0101 	jal	bec0404 <__memory_size+0xbea0c04>
     6b8:	0101000d 	break	0x101
     6bc:	00000101 	0x101
     6c0:	00000100 	sll	zero,zero,0x4
     6c4:	2f2e2e01 	sltiu	t6,t9,11777
     6c8:	6d6d6f43 	0x6d6d6f43
     6cc:	4d2f6e6f 	0x4d2f6e6f
     6d0:	6d696e69 	0x6d696e69
     6d4:	2f006c61 	sltiu	zero,t8,27745
     6d8:	2f74706f 	sltiu	s4,k1,28783
     6dc:	74676d69 	jalx	19db5a4 <__memory_size+0x19bbda4>
     6e0:	542f6365 	bnel	at,t7,19478 <__isr_vec_space+0x19458>
     6e4:	636c6f6f 	0x636c6f6f
     6e8:	6e696168 	0x6e696168
     6ec:	696d2f73 	0x696d2f73
     6f0:	6d2d7370 	0x6d2d7370
     6f4:	652d6974 	0x652d6974
     6f8:	322f666c 	andi	t7,s1,0x666c
     6fc:	2e363130 	sltiu	s6,s1,12592
     700:	302d3530 	andi	t5,at,0x3530
     704:	696d2f33 	0x696d2f33
     708:	6d2d7370 	0x6d2d7370
     70c:	652d6974 	0x652d6974
     710:	692f666c 	0x692f666c
     714:	756c636e 	jalx	5b18db8 <__memory_size+0x5af95b8>
     718:	6d2f6564 	0x6d2f6564
     71c:	69686361 	0x69686361
     720:	2f00656e 	sltiu	zero,t8,25966
     724:	2f74706f 	sltiu	s4,k1,28783
     728:	74676d69 	jalx	19db5a4 <__memory_size+0x19bbda4>
     72c:	542f6365 	bnel	at,t7,194c4 <__isr_vec_space+0x194a4>
     730:	636c6f6f 	0x636c6f6f
     734:	6e696168 	0x6e696168
     738:	696d2f73 	0x696d2f73
     73c:	6d2d7370 	0x6d2d7370
     740:	652d6974 	0x652d6974
     744:	322f666c 	andi	t7,s1,0x666c
     748:	2e363130 	sltiu	s6,s1,12592
     74c:	302d3530 	andi	t5,at,0x3530
     750:	696d2f33 	0x696d2f33
     754:	6d2d7370 	0x6d2d7370
     758:	652d6974 	0x652d6974
     75c:	692f666c 	0x692f666c
     760:	756c636e 	jalx	5b18db8 <__memory_size+0x5af95b8>
     764:	2e006564 	sltiu	zero,s0,25956
     768:	2e2e2f2e 	sltiu	t6,s1,12078
     76c:	756f532f 	jalx	5bd4cbc <__memory_size+0x5bb54bc>
     770:	2f656372 	sltiu	a1,k1,25458
     774:	74726f70 	jalx	1c9bdc0 <__memory_size+0x1c7c5c0>
     778:	656c6261 	0x656c6261
     77c:	646f432f 	0x646f432f
     780:	61635365 	0x61635365
     784:	4d2f6570 	nmadd.s	$f21,$f9,$f12,$f15
     788:	46535049 	c1	0x535049
     78c:	00616770 	tge	v1,at,0x19d
     790:	2e2f2e2e 	sltiu	t7,s1,11822
     794:	6f532f2e 	0x6f532f2e
     798:	65637275 	0x65637275
     79c:	636e692f 	0x636e692f
     7a0:	6564756c 	0x6564756c
     7a4:	75510000 	jalx	5440000 <__memory_size+0x5420800>
     7a8:	4f657565 	c3	0x1657565
     7ac:	77726576 	jalx	dc995d8 <__memory_size+0xdc79dd8>
     7b0:	65746972 	0x65746972
     7b4:	0100632e 	0x100632e
     7b8:	645f0000 	0x645f0000
     7bc:	75616665 	jalx	5859994 <__memory_size+0x583a194>
     7c0:	745f746c 	jalx	17dd1b0 <__memory_size+0x17bd9b0>
     7c4:	73657079 	0x73657079
     7c8:	0200682e 	0x200682e
     7cc:	74730000 	jalx	1cc0000 <__memory_size+0x1ca0800>
     7d0:	746e6964 	jalx	1b9a590 <__memory_size+0x1b7ad90>
     7d4:	0300682e 	0x300682e
     7d8:	6f700000 	0x6f700000
     7dc:	616d7472 	0x616d7472
     7e0:	2e6f7263 	sltiu	t7,s3,29283
     7e4:	00040068 	0x40068
     7e8:	73617400 	0x73617400
     7ec:	00682e6b 	0x682e6b
     7f0:	71000005 	msubu	t0,zero
     7f4:	65756575 	0x65756575
     7f8:	0500682e 	bltz	t0,1a8b4 <__isr_vec_space+0x1a894>
     7fc:	00000000 	nop
     800:	10bc0205 	beq	a1,gp,1018 <__isr_vec_space+0xff8>
     804:	ea038000 	swc2	$3,-32768(s0)
     808:	3d080100 	0x3d080100
     80c:	02780886 	0x2780886
     810:	7808132c 	0x7808132c
     814:	89833e08 	lwl	v1,15880(t4)
     818:	02007508 	0x2007508
     81c:	ba060104 	swr	a2,260(s0)
     820:	83420806 	lb	v0,2054(k0)
     824:	084bae08 	j	12eb820 <__memory_size+0x12cc020>
     828:	bd4ff4ae 	cache	0xf,-2898(t2)
     82c:	ad08b008 	sw	t0,-20472(t0)
     830:	ae084ef4 	sw	t0,20212(s0)
     834:	02040200 	0x2040200
     838:	004a7003 	0x4a7003
     83c:	06010402 	bgez	s0,1848 <__isr_vec_space+0x1828>
     840:	150306ba 	bne	t0,v1,232c <__isr_vec_space+0x230c>
     844:	08ae08f2 	j	2b823c8 <__memory_size+0x2b62bc8>
     848:	c0be4d3e 	ll	s8,19774(a1)
     84c:	bcf4bd87 	cache	0x14,-17017(a3)
     850:	4c4df7bc 	0x4c4df7bc
     854:	f440084b 	sdc1	$f0,2123(v0)
     858:	02007a08 	0x2007a08
     85c:	ba060104 	swr	a2,260(s0)
     860:	023e0806 	srlv	at,s8,s1
     864:	e7081830 	swc1	$f8,6192(t8)
     868:	4cf47508 	0x4cf47508
     86c:	87e508f7 	lh	a1,2295(ra)
     870:	4cf4ae08 	0x4cf4ae08
     874:	3f08bcbf 	0x3f08bcbf
     878:	0018024c 	syscall	0x6009
     87c:	02f60101 	0x2f60101
     880:	00020000 	sll	zero,v0,0x0
     884:	000001a3 	0x1a3
     888:	0efb0101 	jal	bec0404 <__memory_size+0xbea0c04>
     88c:	0101000d 	break	0x101
     890:	00000101 	0x101
     894:	00000100 	sll	zero,zero,0x4
     898:	2f2e2e01 	sltiu	t6,t9,11777
     89c:	6d6d6f43 	0x6d6d6f43
     8a0:	4d2f6e6f 	0x4d2f6e6f
     8a4:	6d696e69 	0x6d696e69
     8a8:	2f006c61 	sltiu	zero,t8,27745
     8ac:	2f74706f 	sltiu	s4,k1,28783
     8b0:	74676d69 	jalx	19db5a4 <__memory_size+0x19bbda4>
     8b4:	542f6365 	bnel	at,t7,1964c <__isr_vec_space+0x1962c>
     8b8:	636c6f6f 	0x636c6f6f
     8bc:	6e696168 	0x6e696168
     8c0:	696d2f73 	0x696d2f73
     8c4:	6d2d7370 	0x6d2d7370
     8c8:	652d6974 	0x652d6974
     8cc:	322f666c 	andi	t7,s1,0x666c
     8d0:	2e363130 	sltiu	s6,s1,12592
     8d4:	302d3530 	andi	t5,at,0x3530
     8d8:	696c2f33 	0x696c2f33
     8dc:	63672f62 	0x63672f62
     8e0:	696d2f63 	0x696d2f63
     8e4:	6d2d7370 	0x6d2d7370
     8e8:	652d6974 	0x652d6974
     8ec:	342f666c 	ori	t7,at,0x666c
     8f0:	322e392e 	andi	t6,s1,0x392e
     8f4:	636e692f 	0x636e692f
     8f8:	6564756c 	0x6564756c
     8fc:	706f2f00 	0x706f2f00
     900:	6d692f74 	0x6d692f74
     904:	63657467 	0x63657467
     908:	6f6f542f 	0x6f6f542f
     90c:	6168636c 	0x6168636c
     910:	2f736e69 	sltiu	s3,k1,28265
     914:	7370696d 	s16sdi	xr5,k1,52,
     918:	69746d2d 	0x69746d2d
     91c:	666c652d 	0x666c652d
     920:	3130322f 	andi	s0,t1,0x322f
     924:	35302e36 	ori	s0,t1,0x2e36
     928:	2f33302d 	sltiu	s3,t9,12333
     92c:	7370696d 	s16sdi	xr5,k1,52,
     930:	69746d2d 	0x69746d2d
     934:	666c652d 	0x666c652d
     938:	636e692f 	0x636e692f
     93c:	6564756c 	0x6564756c
     940:	63616d2f 	0x63616d2f
     944:	656e6968 	0x656e6968
     948:	706f2f00 	0x706f2f00
     94c:	6d692f74 	0x6d692f74
     950:	63657467 	0x63657467
     954:	6f6f542f 	0x6f6f542f
     958:	6168636c 	0x6168636c
     95c:	2f736e69 	sltiu	s3,k1,28265
     960:	7370696d 	s16sdi	xr5,k1,52,
     964:	69746d2d 	0x69746d2d
     968:	666c652d 	0x666c652d
     96c:	3130322f 	andi	s0,t1,0x322f
     970:	35302e36 	ori	s0,t1,0x2e36
     974:	2f33302d 	sltiu	s3,t9,12333
     978:	7370696d 	s16sdi	xr5,k1,52,
     97c:	69746d2d 	0x69746d2d
     980:	666c652d 	0x666c652d
     984:	636e692f 	0x636e692f
     988:	6564756c 	0x6564756c
     98c:	2f2e2e00 	sltiu	t6,t9,11776
     990:	532f2e2e 	beql	t9,t7,c24c <__isr_vec_space+0xc22c>
     994:	6372756f 	0x6372756f
     998:	6f702f65 	0x6f702f65
     99c:	62617472 	0x62617472
     9a0:	432f656c 	c0	0x12f656c
     9a4:	5365646f 	beql	k1,a1,19b64 <__isr_vec_space+0x19b44>
     9a8:	65706163 	0x65706163
     9ac:	50494d2f 	beql	v0,t1,13e6c <__isr_vec_space+0x13e4c>
     9b0:	67704653 	0x67704653
     9b4:	2e2e0061 	sltiu	t6,s1,97
     9b8:	2f2e2e2f 	sltiu	t6,t9,11823
     9bc:	72756f53 	udi3	s3,s5,t5,0x1d
     9c0:	692f6563 	0x692f6563
     9c4:	756c636e 	jalx	5b18db8 <__memory_size+0x5af95b8>
     9c8:	00006564 	0x6564
     9cc:	75657551 	jalx	595d544 <__memory_size+0x593dd44>
     9d0:	74655365 	jalx	1954d94 <__memory_size+0x1935594>
     9d4:	0100632e 	0x100632e
     9d8:	74730000 	jalx	1cc0000 <__memory_size+0x1ca0800>
     9dc:	66656464 	0x66656464
     9e0:	0200682e 	0x200682e
     9e4:	645f0000 	0x645f0000
     9e8:	75616665 	jalx	5859994 <__memory_size+0x583a194>
     9ec:	745f746c 	jalx	17dd1b0 <__memory_size+0x17bd9b0>
     9f0:	73657079 	0x73657079
     9f4:	0300682e 	0x300682e
     9f8:	74730000 	jalx	1cc0000 <__memory_size+0x1ca0800>
     9fc:	746e6964 	jalx	1b9a590 <__memory_size+0x1b7ad90>
     a00:	0400682e 	bltz	zero,1aabc <__isr_vec_space+0x1aa9c>
     a04:	6f700000 	0x6f700000
     a08:	616d7472 	0x616d7472
     a0c:	2e6f7263 	sltiu	t7,s3,29283
     a10:	00050068 	0x50068
     a14:	73617400 	0x73617400
     a18:	00682e6b 	0x682e6b
     a1c:	71000006 	0x71000006
     a20:	65756575 	0x65756575
     a24:	0600682e 	bltz	s0,1aae0 <__isr_vec_space+0x1aac0>
     a28:	00000000 	nop
     a2c:	14a80205 	bne	a1,t0,1244 <__isr_vec_space+0x1224>
     a30:	e9038000 	swc2	$3,-32768(t0)
     a34:	02f40101 	0x2f40101
     a38:	02bc1430 	tge	s5,gp,0x50
     a3c:	08f41934 	j	3d064d0 <__memory_size+0x3ce6cd0>
     a40:	f684bd78 	sdc1	$f4,-17032(s4)
     a44:	02bc874d 	break	0x2bc,0x21d
     a48:	02001438 	0x2001438
     a4c:	004d0204 	0x4d0204
     a50:	03020402 	0x3020402
     a54:	01300279 	0x1300279
     a58:	01040200 	0x1040200
     a5c:	0306ba06 	0x306ba06
     a60:	4ef4f20b 	c3	0xf4f20b
     a64:	4b85bef4 	c2	0x185bef4
     a68:	3d084008 	0x3d084008
     a6c:	3402f752 	li	v0,0xf752
     a70:	02b00813 	0x2b00813
     a74:	2c021634 	sltiu	v0,zero,5684
     a78:	f4be5116 	sdc1	$f30,20758(a1)
     a7c:	f887834f 	sdc2	$7,-31921(a0)
     a80:	024cf4bb 	0x24cf4bb
     a84:	3d081830 	0x3d081830
     a88:	3d088883 	0x3d088883
     a8c:	87833d08 	lh	v1,15624(gp)
     a90:	bc4f3d08 	cache	0xf,15624(v0)
     a94:	0378084d 	break	0x378,0x21
     a98:	893c080a 	lwl	gp,2058(t1)
     a9c:	86be3e08 	lh	s8,15880(s5)
     aa0:	bdbc7608 	cache	0x1c,30216(t5)
     aa4:	142c02c2 	bne	at,t4,15b0 <__isr_vec_space+0x1590>
     aa8:	84f48450 	lh	s4,-31664(a3)
     aac:	040200f4 	bltzl	zero,e80 <__isr_vec_space+0xe60>
     ab0:	f787bd01 	sdc1	$f7,-17151(gp)
     ab4:	4df4bbf6 	nmadd.ps	$f15,$f15,$f23,$f20
     ab8:	78088585 	0x78088585
     abc:	3c080e03 	lui	t0,0xe03
     ac0:	b1083f08 	0xb1083f08
     ac4:	142402fa 	bne	at,a0,16b0 <__isr_vec_space+0x1690>
     ac8:	0402004e 	bltzl	zero,c04 <__isr_vec_space+0xbe4>
     acc:	06ba0601 	0x6ba0601
     ad0:	bcbb3f08 	cache	0x1b,16136(a1)
     ad4:	08f77a08 	j	3dde820 <__memory_size+0x3dbf020>
     ad8:	1424027c 	bne	at,a0,14cc <__isr_vec_space+0x14ac>
     adc:	0402004e 	bltzl	zero,c18 <__isr_vec_space+0xbf8>
     ae0:	06ba0601 	0x6ba0601
     ae4:	08bb3f08 	j	2ecfc20 <__memory_size+0x2eb0420>
     ae8:	78084d3e 	0x78084d3e
     aec:	08847508 	j	211d420 <__memory_size+0x20fdc20>
     af0:	0402003e 	bltzl	zero,bec <__isr_vec_space+0xbcc>
     af4:	74080601 	jalx	201804 <__memory_size+0x1e2004>
     af8:	083d0806 	j	f42018 <__memory_size+0xf22818>
     afc:	00410876 	tne	v0,at,0x21
     b00:	06010402 	bgez	s0,1b0c <__isr_vec_space+0x1aec>
     b04:	08067408 	j	19d020 <__memory_size+0x17d820>
     b08:	4e76083d 	c3	0x76083d
     b0c:	f778084b 	sdc1	$f24,2123(k1)
     b10:	02bd3e08 	0x2bd3e08
     b14:	f44e1628 	sdc1	$f14,5672(v0)
     b18:	02f57808 	0x2f57808
     b1c:	bcbd1440 	cache	0x1d,5184(a1)
     b20:	4df4bb86 	0x4df4bb86
     b24:	51f47808 	beql	t7,s4,1eb48 <__isr_vec_space+0x1eb28>
     b28:	3002bef4 	andi	v0,zero,0xbef4
     b2c:	04020013 	bltzl	zero,b7c <__isr_vec_space+0xb5c>
     b30:	e4080601 	swc1	$f8,1537(zero)
     b34:	023d0806 	srlv	at,sp,s1
     b38:	02c0143c 	0x2c0143c
     b3c:	02001434 	teq	s0,zero,0x50
     b40:	70030204 	0x70030204
     b44:	0402004a 	bltzl	zero,c70 <__isr_vec_space+0xc50>
     b48:	06ba0601 	0x6ba0601
     b4c:	08f21703 	j	3c85c0c <__memory_size+0x3c6640c>
     b50:	2c024ee8 	sltiu	v0,zero,20200
     b54:	24024f16 	li	v0,20246
     b58:	15240213 	bne	t1,a0,13a8 <__isr_vec_space+0x1388>
     b5c:	1324024f 	beq	t9,a0,149c <__isr_vec_space+0x147c>
     b60:	4f162c02 	c3	0x1162c02
     b64:	f54eae08 	sdc1	$f14,-20984(t2)
     b68:	bb780883 	swr	t8,2179(k1)
     b6c:	08bbad08 	j	2eeb420 <__memory_size+0x2ecbc20>
     b70:	0283f340 	0x283f340
     b74:	01010014 	0x1010014
     b78:	00000346 	0x346
     b7c:	01530002 	0x1530002
     b80:	01010000 	0x1010000
     b84:	000d0efb 	0xd0efb
     b88:	01010101 	0x1010101
     b8c:	01000000 	0x1000000
     b90:	2e010000 	sltiu	at,s0,0
     b94:	6f432f2e 	0x6f432f2e
     b98:	6e6f6d6d 	0x6e6f6d6d
     b9c:	6e694d2f 	0x6e694d2f
     ba0:	6c616d69 	0x6c616d69
     ba4:	706f2f00 	0x706f2f00
     ba8:	6d692f74 	0x6d692f74
     bac:	63657467 	0x63657467
     bb0:	6f6f542f 	0x6f6f542f
     bb4:	6168636c 	0x6168636c
     bb8:	2f736e69 	sltiu	s3,k1,28265
     bbc:	7370696d 	s16sdi	xr5,k1,52,
     bc0:	69746d2d 	0x69746d2d
     bc4:	666c652d 	0x666c652d
     bc8:	3130322f 	andi	s0,t1,0x322f
     bcc:	35302e36 	ori	s0,t1,0x2e36
     bd0:	2f33302d 	sltiu	s3,t9,12333
     bd4:	7370696d 	s16sdi	xr5,k1,52,
     bd8:	69746d2d 	0x69746d2d
     bdc:	666c652d 	0x666c652d
     be0:	636e692f 	0x636e692f
     be4:	6564756c 	0x6564756c
     be8:	63616d2f 	0x63616d2f
     bec:	656e6968 	0x656e6968
     bf0:	706f2f00 	0x706f2f00
     bf4:	6d692f74 	0x6d692f74
     bf8:	63657467 	0x63657467
     bfc:	6f6f542f 	0x6f6f542f
     c00:	6168636c 	0x6168636c
     c04:	2f736e69 	sltiu	s3,k1,28265
     c08:	7370696d 	s16sdi	xr5,k1,52,
     c0c:	69746d2d 	0x69746d2d
     c10:	666c652d 	0x666c652d
     c14:	3130322f 	andi	s0,t1,0x322f
     c18:	35302e36 	ori	s0,t1,0x2e36
     c1c:	2f33302d 	sltiu	s3,t9,12333
     c20:	7370696d 	s16sdi	xr5,k1,52,
     c24:	69746d2d 	0x69746d2d
     c28:	666c652d 	0x666c652d
     c2c:	636e692f 	0x636e692f
     c30:	6564756c 	0x6564756c
     c34:	2f2e2e00 	sltiu	t6,t9,11776
     c38:	532f2e2e 	beql	t9,t7,c4f4 <__isr_vec_space+0xc4d4>
     c3c:	6372756f 	0x6372756f
     c40:	6f702f65 	0x6f702f65
     c44:	62617472 	0x62617472
     c48:	432f656c 	c0	0x12f656c
     c4c:	5365646f 	beql	k1,a1,19e0c <__isr_vec_space+0x19dec>
     c50:	65706163 	0x65706163
     c54:	50494d2f 	beql	v0,t1,14114 <__isr_vec_space+0x140f4>
     c58:	67704653 	0x67704653
     c5c:	2e2e0061 	sltiu	t6,s1,97
     c60:	2f2e2e2f 	sltiu	t6,t9,11823
     c64:	72756f53 	udi3	s3,s5,t5,0x1d
     c68:	692f6563 	0x692f6563
     c6c:	756c636e 	jalx	5b18db8 <__memory_size+0x5af95b8>
     c70:	00006564 	0x6564
     c74:	6e657645 	0x6e657645
     c78:	6f724774 	0x6f724774
     c7c:	44737075 	0x44737075
     c80:	2e6f6d65 	sltiu	t7,s3,28005
     c84:	00010063 	0x10063
     c88:	65645f00 	0x65645f00
     c8c:	6c756166 	0x6c756166
     c90:	79745f74 	0x79745f74
     c94:	2e736570 	sltiu	s3,s3,25968
     c98:	00020068 	0x20068
     c9c:	64747300 	0x64747300
     ca0:	2e746e69 	sltiu	s4,s3,28265
     ca4:	00030068 	0x30068
     ca8:	726f7000 	0x726f7000
     cac:	63616d74 	0x63616d74
     cb0:	682e6f72 	0x682e6f72
     cb4:	00000400 	sll	zero,zero,0x10
     cb8:	6b736174 	0x6b736174
     cbc:	0500682e 	bltz	t0,1ad78 <__isr_vec_space+0x1ad58>
     cc0:	76650000 	jalx	9940000 <__memory_size+0x9920800>
     cc4:	5f746e65 	0x5f746e65
     cc8:	756f7267 	jalx	5bdc99c <__memory_size+0x5bbd19c>
     ccc:	682e7370 	0x682e7370
     cd0:	00000500 	sll	zero,zero,0x14
     cd4:	02050000 	0x2050000
     cd8:	80002044 	lb	zero,8260(zero)
     cdc:	0101d003 	0x101d003
     ce0:	02f20e03 	0x2f20e03
     ce4:	2c021330 	sltiu	v0,zero,4912
     ce8:	13300213 	beq	t9,s0,1538 <__isr_vec_space+0x1518>
     cec:	00153002 	srl	a2,s5,0x0
     cf0:	06010402 	bgez	s0,1cfc <__isr_vec_space+0x1cdc>
     cf4:	400806ba 	0x400806ba
     cf8:	040200bb 	bltzl	zero,fe8 <__isr_vec_space+0xfc8>
     cfc:	06ba0601 	0x6ba0601
     d00:	78083d08 	0x78083d08
     d04:	bb884008 	swr	t0,16392(gp)
     d08:	01040200 	0x1040200
     d0c:	0806ba06 	j	1ae818 <__memory_size+0x18f018>
     d10:	00bbbf41 	0xbbbf41
     d14:	06010402 	bgez	s0,1d20 <__isr_vec_space+0x1d00>
     d18:	400806ba 	0x400806ba
     d1c:	3f083f08 	0x3f083f08
     d20:	85ae08f6 	lh	t6,2294(t5)
     d24:	0885e608 	j	2179820 <__memory_size+0x215a020>
     d28:	bdbc86e6 	cache	0x1c,-31002(t5)
     d2c:	01040200 	0x1040200
     d30:	0806ba06 	j	1ae818 <__memory_size+0x18f018>
     d34:	4208873d 	c0	0x8873d
     d38:	82090386 	lb	t1,902(s0)
     d3c:	00ec08c0 	0xec08c0
     d40:	06010402 	bgez	s0,1d4c <__isr_vec_space+0x1d2c>
     d44:	08063c08 	j	18f020 <__memory_size+0x16f820>
     d48:	e908bf42 	swc2	$8,-16574(t0)
     d4c:	01040200 	0x1040200
     d50:	063c0806 	0x63c0806
     d54:	28024108 	slti	v0,zero,16648
     d58:	04020013 	bltzl	zero,da8 <__isr_vec_space+0xd88>
     d5c:	06ba0601 	0x6ba0601
     d60:	08873d08 	j	21cf420 <__memory_size+0x21afc20>
     d64:	4a10033e 	c2	0x10033e
     d68:	020b03be 	0x20b03be
     d6c:	89f40128 	lwl	s4,296(t7)
     d70:	08192802 	j	64a008 <__memory_size+0x62a808>
     d74:	03bf863e 	0x3bf863e
     d78:	0128020a 	0x128020a
     d7c:	821003f4 	lb	s0,1012(s0)
     d80:	08eb08bf 	j	3ac22fc <__memory_size+0x3aa2afc>
     d84:	ae08893e 	sw	t0,-30402(s0)
     d88:	85ae0886 	lh	t6,2182(t5)
     d8c:	08bfbdbd 	j	2fef6f4 <__memory_size+0x2fcfef4>
     d90:	863e08e8 	lh	s8,2280(s1)
     d94:	0288ae08 	0x288ae08
     d98:	85bc1428 	lh	gp,5160(t5)
     d9c:	0200bdbd 	0x200bdbd
     da0:	ba060104 	swr	a2,260(s0)
     da4:	873d0806 	lh	sp,2054(t9)
     da8:	ae087908 	sw	t0,30984(s0)
     dac:	85e60885 	lh	a2,2181(t7)
     db0:	0887e608 	j	21f9820 <__memory_size+0x21da020>
     db4:	f4ec083f 	sdc1	$f12,2111(a3)
     db8:	14240287 	bne	at,a0,17d8 <__isr_vec_space+0x17b8>
     dbc:	083d0886 	j	f42218 <__memory_size+0xf22a18>
     dc0:	f3bb87ae 	0xf3bb87ae
     dc4:	85ae08f4 	lh	t6,2292(t5)
     dc8:	0885e608 	j	2179820 <__memory_size+0x215a020>
     dcc:	eb0886e6 	swc2	$8,-31002(t8)
     dd0:	08863e08 	j	218f820 <__memory_size+0x2170020>
     dd4:	ae0888ae 	sw	t0,-30546(s0)
     dd8:	85e60885 	lh	a2,2181(t7)
     ddc:	bb8ae608 	swr	t2,-6648(gp)
     de0:	ae08f4f3 	sw	t0,-2829(s0)
     de4:	85e60885 	lh	a2,2181(t7)
     de8:	f586e608 	sdc1	$f6,-6648(t4)
     dec:	3e08e808 	0x3e08e808
     df0:	88ae0886 	lwl	t6,2182(a1)
     df4:	0885ae08 	j	216b820 <__memory_size+0x214c020>
     df8:	e60885e6 	swc1	$f8,-31258(s0)
     dfc:	ae08f687 	sw	t0,-2425(s0)
     e00:	85e60885 	lh	a2,2181(t7)
     e04:	4b85e608 	c2	0x185e608
     e08:	79087808 	0x79087808
     e0c:	87ae08bd 	lh	t6,2237(sp)
     e10:	24024208 	li	v0,16904
     e14:	0886f414 	j	21bd050 <__memory_size+0x219d850>
     e18:	3f0887ae 	0x3f0887ae
     e1c:	f4142402 	sdc1	$f20,9218(zero)
     e20:	87ae0886 	lh	t6,2182(sp)
     e24:	ae083f08 	sw	t0,16136(s0)
     e28:	14240287 	bne	at,a0,1848 <__isr_vec_space+0x1828>
     e2c:	14240286 	bne	at,a0,1848 <__isr_vec_space+0x1828>
     e30:	ae08bd87 	sw	t0,-17017(s0)
     e34:	083f0886 	j	fc2218 <__memory_size+0xfa2a18>
     e38:	240287ae 	li	v0,-30802
     e3c:	0287f414 	0x287f414
     e40:	08861424 	j	2185090 <__memory_size+0x2165890>
     e44:	084b85ae 	j	12e16b8 <__memory_size+0x12c1eb8>
     e48:	f20a0378 	0xf20a0378
     e4c:	8af67608 	lwl	s6,30216(s7)
     e50:	142802bb 	bne	at,t0,1940 <__isr_vec_space+0x1920>
     e54:	088384bc 	j	20e12f0 <__memory_size+0x20c1af0>
     e58:	0a03f378 	j	80fcde0 <__memory_size+0x80dd5e0>
     e5c:	85e6084a 	lh	a2,2122(t7)
     e60:	f586e608 	sdc1	$f6,-6648(t4)
     e64:	e608f5f3 	swc1	$f8,-2573(s0)
     e68:	86e60885 	lh	a2,2181(s7)
     e6c:	08f54008 	j	3d50020 <__memory_size+0x3d30820>
     e70:	e608f8e6 	swc1	$f8,-1818(s0)
     e74:	e608f587 	swc1	$f8,-2681(s0)
     e78:	00e608f8 	0xe608f8
     e7c:	03020402 	0x3020402
     e80:	0200824b 	0x200824b
     e84:	ba060104 	swr	a2,260(s0)
     e88:	f23c0306 	0xf23c0306
     e8c:	4bf4f7f3 	c2	0x1f4f7f3
     e90:	08f47808 	j	3d1e020 <__memory_size+0x3cfe820>
     e94:	f5bc8975 	sdc1	$f28,-30347(t5)
     e98:	f9bc3d08 	sdc2	$28,15624(t5)
     e9c:	f4132402 	sdc1	$f19,9218(zero)
     ea0:	3d08f5f6 	0x3d08f5f6
     ea4:	02f5f5f4 	teq	s7,s5,0x3d7
     ea8:	86f41524 	lh	s4,5412(s7)
     eac:	08c1bc4e 	j	306f138 <__memory_size+0x304f938>
     eb0:	f485bc79 	sdc1	$f5,-17287(a0)
     eb4:	4cf4844c 	0x4cf4844c
     eb8:	844cf484 	lh	t4,-2940(v0)
     ebc:	0014024b 	0x14024b
     ec0:	03cd0101 	0x3cd0101
     ec4:	00020000 	sll	zero,v0,0x0
     ec8:	000001a8 	0x1a8
     ecc:	0efb0101 	jal	bec0404 <__memory_size+0xbea0c04>
     ed0:	0101000d 	break	0x101
     ed4:	00000101 	0x101
     ed8:	00000100 	sll	zero,zero,0x4
     edc:	2f2e2e01 	sltiu	t6,t9,11777
     ee0:	532f2e2e 	beql	t9,t7,c79c <__isr_vec_space+0xc77c>
     ee4:	6372756f 	0x6372756f
     ee8:	6f2f0065 	0x6f2f0065
     eec:	692f7470 	0x692f7470
     ef0:	6574676d 	0x6574676d
     ef4:	6f542f63 	0x6f542f63
     ef8:	68636c6f 	0x68636c6f
     efc:	736e6961 	0x736e6961
     f00:	70696d2f 	0x70696d2f
     f04:	746d2d73 	jalx	1b4b5cc <__memory_size+0x1b2bdcc>
     f08:	6c652d69 	0x6c652d69
     f0c:	30322f66 	andi	s2,at,0x2f66
     f10:	302e3631 	andi	t6,at,0x3631
     f14:	33302d35 	andi	s0,t9,0x2d35
     f18:	70696d2f 	0x70696d2f
     f1c:	746d2d73 	jalx	1b4b5cc <__memory_size+0x1b2bdcc>
     f20:	6c652d69 	0x6c652d69
     f24:	6e692f66 	0x6e692f66
     f28:	64756c63 	0x64756c63
     f2c:	616d2f65 	0x616d2f65
     f30:	6e696863 	0x6e696863
     f34:	6f2f0065 	0x6f2f0065
     f38:	692f7470 	0x692f7470
     f3c:	6574676d 	0x6574676d
     f40:	6f542f63 	0x6f542f63
     f44:	68636c6f 	0x68636c6f
     f48:	736e6961 	0x736e6961
     f4c:	70696d2f 	0x70696d2f
     f50:	746d2d73 	jalx	1b4b5cc <__memory_size+0x1b2bdcc>
     f54:	6c652d69 	0x6c652d69
     f58:	30322f66 	andi	s2,at,0x2f66
     f5c:	302e3631 	andi	t6,at,0x3631
     f60:	33302d35 	andi	s0,t9,0x2d35
     f64:	70696d2f 	0x70696d2f
     f68:	746d2d73 	jalx	1b4b5cc <__memory_size+0x1b2bdcc>
     f6c:	6c652d69 	0x6c652d69
     f70:	6e692f66 	0x6e692f66
     f74:	64756c63 	0x64756c63
     f78:	6f2f0065 	0x6f2f0065
     f7c:	692f7470 	0x692f7470
     f80:	6574676d 	0x6574676d
     f84:	6f542f63 	0x6f542f63
     f88:	68636c6f 	0x68636c6f
     f8c:	736e6961 	0x736e6961
     f90:	70696d2f 	0x70696d2f
     f94:	746d2d73 	jalx	1b4b5cc <__memory_size+0x1b2bdcc>
     f98:	6c652d69 	0x6c652d69
     f9c:	30322f66 	andi	s2,at,0x2f66
     fa0:	302e3631 	andi	t6,at,0x3631
     fa4:	33302d35 	andi	s0,t9,0x2d35
     fa8:	70696d2f 	0x70696d2f
     fac:	746d2d73 	jalx	1b4b5cc <__memory_size+0x1b2bdcc>
     fb0:	6c652d69 	0x6c652d69
     fb4:	6e692f66 	0x6e692f66
     fb8:	64756c63 	0x64756c63
     fbc:	696d2f65 	0x696d2f65
     fc0:	2e007370 	sltiu	zero,s0,29552
     fc4:	2e2e2f2e 	sltiu	t6,s1,12078
     fc8:	756f532f 	jalx	5bd4cbc <__memory_size+0x5bb54bc>
     fcc:	2f656372 	sltiu	a1,k1,25458
     fd0:	74726f70 	jalx	1c9bdc0 <__memory_size+0x1c7c5c0>
     fd4:	656c6261 	0x656c6261
     fd8:	646f432f 	0x646f432f
     fdc:	61635365 	0x61635365
     fe0:	4d2f6570 	nmadd.s	$f21,$f9,$f12,$f15
     fe4:	46535049 	c1	0x535049
     fe8:	00616770 	tge	v1,at,0x19d
     fec:	2e2f2e2e 	sltiu	t7,s1,11822
     ff0:	6f532f2e 	0x6f532f2e
     ff4:	65637275 	0x65637275
     ff8:	636e692f 	0x636e692f
     ffc:	6564756c 	0x6564756c
    1000:	69740000 	0x69740000
    1004:	7372656d 	s16sdi	xr5,k1,306,
    1008:	0100632e 	0x100632e
    100c:	645f0000 	0x645f0000
    1010:	75616665 	jalx	5859994 <__memory_size+0x583a194>
    1014:	745f746c 	jalx	17dd1b0 <__memory_size+0x17bd9b0>
    1018:	73657079 	0x73657079
    101c:	0200682e 	0x200682e
    1020:	74730000 	jalx	1cc0000 <__memory_size+0x1ca0800>
    1024:	746e6964 	jalx	1b9a590 <__memory_size+0x1b7ad90>
    1028:	0300682e 	0x300682e
    102c:	336d0000 	andi	t5,k1,0x0
    1030:	2e306332 	sltiu	s0,s1,25394
    1034:	00040068 	0x40068
    1038:	726f7000 	0x726f7000
    103c:	63616d74 	0x63616d74
    1040:	682e6f72 	0x682e6f72
    1044:	00000500 	sll	zero,zero,0x14
    1048:	7473696c 	jalx	1cda5b0 <__memory_size+0x1cbadb0>
    104c:	0600682e 	bltz	s0,1b108 <__isr_vec_space+0x1b0e8>
    1050:	61740000 	0x61740000
    1054:	682e6b73 	0x682e6b73
    1058:	00000600 	sll	zero,zero,0x18
    105c:	75657571 	jalx	595d5c4 <__memory_size+0x593ddc4>
    1060:	00682e65 	0x682e65
    1064:	74000006 	jalx	18 <ABIFlags_flags2+0x4>
    1068:	72656d69 	0x72656d69
    106c:	00682e73 	tltu	v1,t0,0xb9
    1070:	00000006 	srlv	zero,zero,zero
    1074:	00020500 	sll	zero,v0,0x14
    1078:	03800033 	tltu	gp,zero
    107c:	f3010283 	0xf3010283
    1080:	18038450 	0x18038450
    1084:	020e03ba 	0x20e03ba
    1088:	02000134 	teq	s0,zero,0x4
    108c:	ba060104 	swr	a2,260(s0)
    1090:	4b3d0806 	c2	0x13d0806
    1094:	74080a03 	jalx	20280c <__memory_size+0x1e300c>
    1098:	bcf4e708 	cache	0x14,-6392(a3)
    109c:	28020c03 	slti	v0,zero,3075
    10a0:	37034b01 	ori	v1,t8,0x4b01
    10a4:	e6087408 	swc1	$f8,29704(s0)
    10a8:	01040200 	0x1040200
    10ac:	0806ba06 	j	1ae818 <__memory_size+0x18f018>
    10b0:	bb86be3e 	swr	a2,-16834(gp)
    10b4:	bbbbbbbb 	swr	k1,-17477(sp)
    10b8:	78083f08 	0x78083f08
    10bc:	004de508 	0x4de508
    10c0:	06010402 	bgez	s0,20cc <__isr_vec_space+0x20ac>
    10c4:	400806ba 	0x400806ba
    10c8:	848383bd 	lh	v1,-31811(a0)
    10cc:	027608f4 	teq	s3,s6,0x23
    10d0:	2c02162c 	sltiu	v0,zero,5676
    10d4:	020a0317 	0x20a0317
    10d8:	084b0124 	j	12c0490 <__memory_size+0x12a0c90>
    10dc:	0200f578 	0x200f578
    10e0:	ba060104 	swr	a2,260(s0)
    10e4:	4b3d0806 	c2	0x13d0806
    10e8:	3d087808 	0x3d087808
    10ec:	04020084 	bltzl	zero,1300 <__isr_vec_space+0x12e0>
    10f0:	06ba0601 	0x6ba0601
    10f4:	08833d08 	j	20cf420 <__memory_size+0x20afc20>
    10f8:	853d0878 	lh	sp,2168(t1)
    10fc:	01040200 	0x1040200
    1100:	0806ba06 	j	1ae818 <__memory_size+0x18f018>
    1104:	084bbb3d 	j	12eecf4 <__memory_size+0x12cf4f4>
    1108:	843d0878 	lh	sp,2168(at)
    110c:	01040200 	0x1040200
    1110:	0806ba06 	j	1ae818 <__memory_size+0x18f018>
    1114:	7808833d 	0x7808833d
    1118:	08f67608 	j	3d9d820 <__memory_size+0x3d7e020>
    111c:	02410841 	0x2410841
    1120:	e5081630 	swc1	$f8,5680(t0)
    1124:	01040200 	0x1040200
    1128:	0306ba06 	0x306ba06
    112c:	08ac080e 	j	2b02038 <__memory_size+0x2ae2838>
    1130:	0078083d 	0x78083d
    1134:	03010402 	0x3010402
    1138:	003c0817 	0x3c0817
    113c:	08010402 	j	41008 <__memory_size+0x21808>
    1140:	04020040 	bltzl	zero,1244 <__isr_vec_space+0x1224>
    1144:	003f0801 	0x3f0801
    1148:	83010402 	lb	at,1026(t8)
    114c:	89b00887 	lwl	s0,2183(t5)
    1150:	00bd3d08 	0xbd3d08
    1154:	06010402 	bgez	s0,2160 <__isr_vec_space+0x2140>
    1158:	3e0806ba 	0x3e0806ba
    115c:	080a0383 	j	280e0c <__memory_size+0x26160c>
    1160:	3f08be74 	0x3f08be74
    1164:	03f8e608 	0x3f8e608
    1168:	0130020a 	0x130020a
    116c:	03b00885 	lsa	at,sp,s0,0x3
    1170:	ad08f20a 	sw	t0,-3574(t0)
    1174:	4d7908f4 	0x4d7908f4
    1178:	0840084b 	j	100212c <__memory_size+0xfe292c>
    117c:	3e08bc40 	0x3e08bc40
    1180:	85400883 	lh	zero,2179(t2)
    1184:	78084b84 	0x78084b84
    1188:	bb4ce508 	swr	t4,-6904(k0)
    118c:	084008bc 	j	10022f0 <__memory_size+0xfe2af0>
    1190:	2402f6e8 	li	v0,-2328
    1194:	04020017 	bltzl	zero,11f4 <__isr_vec_space+0x11d4>
    1198:	3c080601 	lui	t0,0x601
    119c:	f6410806 	sdc1	$f1,2054(s2)
    11a0:	084bb008 	j	12ec020 <__memory_size+0x12cc820>
    11a4:	bc88f878 	cache	0x8,-1928(a0)
    11a8:	040200be 	bltzl	zero,14a4 <__isr_vec_space+0x1484>
    11ac:	06ba0601 	0x6ba0601
    11b0:	0b033f08 	j	c0cfc20 <__memory_size+0xc0b0420>
    11b4:	be012402 	cache	0x1,9218(s0)
    11b8:	0f03f584 	jal	c0fd610 <__memory_size+0xc0dde10>
    11bc:	3e083c08 	0x3e083c08
    11c0:	021a2c02 	0x21a2c02
    11c4:	3f081634 	0x3f081634
    11c8:	30023e08 	andi	v0,zero,0x3e08
    11cc:	04020013 	bltzl	zero,121c <__isr_vec_space+0x11fc>
    11d0:	00ba0601 	0xba0601
    11d4:	06020402 	bltzl	s0,21e0 <__isr_vec_space+0x21c0>
    11d8:	ac080c03 	sw	t0,3075(zero)
    11dc:	bb820a03 	swr	v0,2563(gp)
    11e0:	01040200 	0x1040200
    11e4:	0806f206 	j	1bc818 <__memory_size+0x19d018>
    11e8:	13280244 	beq	t9,t0,1afc <__isr_vec_space+0x1adc>
    11ec:	03820a03 	0x3820a03
    11f0:	0386ba11 	0x386ba11
    11f4:	034a7efb 	0x34a7efb
    11f8:	28020189 	slti	v0,zero,393
    11fc:	03780801 	movf	at,k1,$fcc6
    1200:	f584f20a 	sdc1	$f4,-3574(t4)
    1204:	084208f3 	j	10823cc <__memory_size+0x1062bcc>
    1208:	0844083e 	j	11020f8 <__memory_size+0x10e28f8>
    120c:	bb3e083d 	swr	s8,2109(t9)
    1210:	162402bb 	bne	s1,a0,1d00 <__isr_vec_space+0x1ce0>
    1214:	0200e508 	0x200e508
    1218:	ba060104 	swr	a2,260(s0)
    121c:	08600306 	j	1800c18 <__memory_size+0x17e1418>
    1220:	f22a033c 	0xf22a033c
    1224:	08838383 	j	20e0e0c <__memory_size+0x20c160c>
    1228:	bc84f678 	cache	0x4,-2440(a0)
    122c:	03bbf3f3 	tltu	sp,k1,0x3cf
    1230:	1603ba0d 	bne	s0,v1,fffefa68 <__flash_start+0x403efa68>
    1234:	08837408 	j	20dd020 <__memory_size+0x20bd820>
    1238:	843e0878 	lh	s8,2168(at)
    123c:	01040200 	0x1040200
    1240:	0806ba06 	j	1ae818 <__memory_size+0x18f018>
    1244:	3e08873f 	0x3e08873f
    1248:	78084b84 	0x78084b84
    124c:	00853d08 	0x853d08
    1250:	06010402 	bgez	s0,225c <__isr_vec_space+0x223c>
    1254:	3e0806ba 	0x3e0806ba
    1258:	4b84bc84 	c2	0x184bc84
    125c:	75087808 	jalx	421e020 <__memory_size+0x41fe820>
    1260:	04020084 	bltzl	zero,1474 <__isr_vec_space+0x1454>
    1264:	06ba0601 	0x6ba0601
    1268:	bc843e08 	cache	0x4,15880(a0)
    126c:	087a0883 	j	1e8220c <__memory_size+0x1e62a0c>
    1270:	838383ea 	lb	v1,-31766(gp)
    1274:	16240284 	bne	s1,a0,1c88 <__isr_vec_space+0x1c68>
    1278:	087c084b 	j	1f0212c <__memory_size+0x1ee292c>
    127c:	040200eb 	bltzl	zero,162c <__isr_vec_space+0x160c>
    1280:	06ba0601 	0x6ba0601
    1284:	83834008 	lb	v1,16392(gp)
    1288:	24028483 	li	v0,-31613
    128c:	18024b16 	0x18024b16
    1290:	22010100 	addi	at,s0,256
    1294:	02000003 	0x2000003
    1298:	00019f00 	sll	s3,at,0x1c
    129c:	fb010100 	sdc2	$1,256(t8)
    12a0:	01000d0e 	0x1000d0e
    12a4:	00010101 	0x10101
    12a8:	00010000 	sll	zero,at,0x0
    12ac:	2e2e0100 	sltiu	t6,s1,256
    12b0:	2f2e2e2f 	sltiu	t6,t9,11823
    12b4:	72756f53 	udi3	s3,s5,t5,0x1d
    12b8:	2f006563 	sltiu	zero,t8,25955
    12bc:	2f74706f 	sltiu	s4,k1,28783
    12c0:	74676d69 	jalx	19db5a4 <__memory_size+0x19bbda4>
    12c4:	542f6365 	bnel	at,t7,1a05c <__isr_vec_space+0x1a03c>
    12c8:	636c6f6f 	0x636c6f6f
    12cc:	6e696168 	0x6e696168
    12d0:	696d2f73 	0x696d2f73
    12d4:	6d2d7370 	0x6d2d7370
    12d8:	652d6974 	0x652d6974
    12dc:	322f666c 	andi	t7,s1,0x666c
    12e0:	2e363130 	sltiu	s6,s1,12592
    12e4:	302d3530 	andi	t5,at,0x3530
    12e8:	696d2f33 	0x696d2f33
    12ec:	6d2d7370 	0x6d2d7370
    12f0:	652d6974 	0x652d6974
    12f4:	692f666c 	0x692f666c
    12f8:	756c636e 	jalx	5b18db8 <__memory_size+0x5af95b8>
    12fc:	6d2f6564 	0x6d2f6564
    1300:	69686361 	0x69686361
    1304:	2f00656e 	sltiu	zero,t8,25966
    1308:	2f74706f 	sltiu	s4,k1,28783
    130c:	74676d69 	jalx	19db5a4 <__memory_size+0x19bbda4>
    1310:	542f6365 	bnel	at,t7,1a0a8 <__isr_vec_space+0x1a088>
    1314:	636c6f6f 	0x636c6f6f
    1318:	6e696168 	0x6e696168
    131c:	696d2f73 	0x696d2f73
    1320:	6d2d7370 	0x6d2d7370
    1324:	652d6974 	0x652d6974
    1328:	322f666c 	andi	t7,s1,0x666c
    132c:	2e363130 	sltiu	s6,s1,12592
    1330:	302d3530 	andi	t5,at,0x3530
    1334:	696d2f33 	0x696d2f33
    1338:	6d2d7370 	0x6d2d7370
    133c:	652d6974 	0x652d6974
    1340:	692f666c 	0x692f666c
    1344:	756c636e 	jalx	5b18db8 <__memory_size+0x5af95b8>
    1348:	2f006564 	sltiu	zero,t8,25956
    134c:	2f74706f 	sltiu	s4,k1,28783
    1350:	74676d69 	jalx	19db5a4 <__memory_size+0x19bbda4>
    1354:	542f6365 	bnel	at,t7,1a0ec <__isr_vec_space+0x1a0cc>
    1358:	636c6f6f 	0x636c6f6f
    135c:	6e696168 	0x6e696168
    1360:	696d2f73 	0x696d2f73
    1364:	6d2d7370 	0x6d2d7370
    1368:	652d6974 	0x652d6974
    136c:	322f666c 	andi	t7,s1,0x666c
    1370:	2e363130 	sltiu	s6,s1,12592
    1374:	302d3530 	andi	t5,at,0x3530
    1378:	696d2f33 	0x696d2f33
    137c:	6d2d7370 	0x6d2d7370
    1380:	652d6974 	0x652d6974
    1384:	692f666c 	0x692f666c
    1388:	756c636e 	jalx	5b18db8 <__memory_size+0x5af95b8>
    138c:	6d2f6564 	0x6d2f6564
    1390:	00737069 	0x737069
    1394:	2e2f2e2e 	sltiu	t7,s1,11822
    1398:	6f532f2e 	0x6f532f2e
    139c:	65637275 	0x65637275
    13a0:	726f702f 	0x726f702f
    13a4:	6c626174 	0x6c626174
    13a8:	6f432f65 	0x6f432f65
    13ac:	63536564 	0x63536564
    13b0:	2f657061 	sltiu	a1,k1,28769
    13b4:	5350494d 	beql	k0,s0,138ec <__isr_vec_space+0x138cc>
    13b8:	61677046 	0x61677046
    13bc:	2f2e2e00 	sltiu	t6,t9,11776
    13c0:	532f2e2e 	beql	t9,t7,cc7c <__isr_vec_space+0xcc5c>
    13c4:	6372756f 	0x6372756f
    13c8:	6e692f65 	0x6e692f65
    13cc:	64756c63 	0x64756c63
    13d0:	65000065 	0x65000065
    13d4:	746e6576 	jalx	1b995d8 <__memory_size+0x1b79dd8>
    13d8:	6f72675f 	0x6f72675f
    13dc:	2e737075 	sltiu	s3,s3,28789
    13e0:	00010063 	0x10063
    13e4:	65645f00 	0x65645f00
    13e8:	6c756166 	0x6c756166
    13ec:	79745f74 	0x79745f74
    13f0:	2e736570 	sltiu	s3,s3,25968
    13f4:	00020068 	0x20068
    13f8:	64747300 	0x64747300
    13fc:	2e746e69 	sltiu	s4,s3,28265
    1400:	00030068 	0x30068
    1404:	32336d00 	andi	s3,s1,0x6d00
    1408:	682e3063 	0x682e3063
    140c:	00000400 	sll	zero,zero,0x10
    1410:	74726f70 	jalx	1c9bdc0 <__memory_size+0x1c7c5c0>
    1414:	7263616d 	s16sdi	xr5,s3,432,ptn0
    1418:	00682e6f 	0x682e6f
    141c:	6c000005 	0x6c000005
    1420:	2e747369 	sltiu	s4,s3,29545
    1424:	00060068 	0x60068
    1428:	65766500 	0x65766500
    142c:	675f746e 	0x675f746e
    1430:	70756f72 	0x70756f72
    1434:	00682e73 	tltu	v1,t0,0xb9
    1438:	00000006 	srlv	zero,zero,zero
    143c:	9c020500 	0x9c020500
    1440:	03800042 	0x3800042
    1444:	f60101ae 	sdc1	$f1,430(s0)
    1448:	0383bcf4 	teq	gp,v1,0x2f3
    144c:	4b3c0812 	c2	0x13c0812
    1450:	e6087a08 	swc1	$f8,31240(s0)
    1454:	02004c84 	0x2004c84
    1458:	f2060104 	0xf2060104
    145c:	003d0806 	srlv	at,sp,at
    1460:	06010402 	bgez	s0,246c <__isr_vec_space+0x244c>
    1464:	3f0806ba 	0x3f0806ba
    1468:	02040200 	0x2040200
    146c:	0200f206 	0x200f206
    1470:	00ba0304 	0xba0304
    1474:	ba040402 	swr	a0,1026(s0)
    1478:	06040200 	0x6040200
    147c:	0402004a 	bltzl	zero,15a8 <__isr_vec_space+0x1588>
    1480:	08068207 	j	1a081c <__memory_size+0x18101c>
    1484:	f4bc8440 	sdc1	$f28,-31680(a1)
    1488:	08f6e708 	j	3db9c20 <__memory_size+0x3d9a420>
    148c:	02c1beae 	0x2c1beae
    1490:	bec01824 	cache	0x0,6180(s6)
    1494:	03bcbcbc 	0x3bcbcbc
    1498:	0128020b 	0x128020b
    149c:	843f08bc 	lh	ra,2236(at)
    14a0:	087608c0 	j	1d82300 <__memory_size+0x1d62b00>
    14a4:	090384b3 	j	40e12cc <__memory_size+0x40c1acc>
    14a8:	084bbf82 	j	12efe08 <__memory_size+0x12d0608>
    14ac:	83e50878 	lb	a1,2168(ra)
    14b0:	02004e4c 	syscall	0x80139
    14b4:	ba060104 	swr	a2,260(s0)
    14b8:	003d0806 	srlv	at,sp,at
    14bc:	06010402 	bgez	s0,24c8 <__isr_vec_space+0x24a8>
    14c0:	3d0806f2 	0x3d0806f2
    14c4:	01040200 	0x1040200
    14c8:	0806ba06 	j	1ae818 <__memory_size+0x18f018>
    14cc:	0402003f 	bltzl	zero,15cc <__isr_vec_space+0x15ac>
    14d0:	00f20602 	0xf20602
    14d4:	ba030402 	swr	v1,1026(s0)
    14d8:	04040200 	0x4040200
    14dc:	040200ba 	bltzl	zero,17c8 <__isr_vec_space+0x17a8>
    14e0:	02004a06 	0x2004a06
    14e4:	06820704 	bltzl	s4,30f8 <__isr_vec_space+0x30d8>
    14e8:	bd844008 	cache	0x4,16392(t4)
    14ec:	83be7608 	lb	s8,30216(sp)
    14f0:	2402bc4d 	li	v0,-17331
    14f4:	bcfabe19 	cache	0x1a,-16871(a3)
    14f8:	0a03bcf9 	j	80ef3e4 <__memory_size+0x80cfbe4>
    14fc:	172402f2 	bne	t9,a0,20c8 <__isr_vec_space+0x20a8>
    1500:	bcbcbc4f 	cache	0x1c,-17329(a1)
    1504:	28020b03 	slti	v0,zero,2819
    1508:	3e08bc01 	0x3e08bc01
    150c:	ae08be85 	sw	t0,-16763(s0)
    1510:	080c03bc 	j	300ef0 <__memory_size+0x2e16f0>
    1514:	be5285ac 	cache	0x12,-31316(s2)
    1518:	0878084b 	j	1e0212c <__memory_size+0x1de292c>
    151c:	02008775 	0x2008775
    1520:	ba060104 	swr	a2,260(s0)
    1524:	003d0806 	srlv	at,sp,at
    1528:	06010402 	bgez	s0,2534 <__isr_vec_space+0x2514>
    152c:	3e0806f2 	0x3e0806f2
    1530:	ae08bd88 	sw	t0,-17016(s0)
    1534:	13034b84 	beq	t8,v1,14348 <__isr_vec_space+0x14328>
    1538:	3e087408 	0x3e087408
    153c:	bcbcbc85 	cache	0x1c,-17275(a1)
    1540:	0878084b 	j	1e0212c <__memory_size+0x1de292c>
    1544:	4e834b78 	nmsub.s	$f13,$f20,$f9,$f3
    1548:	01040200 	0x1040200
    154c:	0806ba06 	j	1ae818 <__memory_size+0x18f018>
    1550:	0402003d 	bltzl	zero,1648 <__isr_vec_space+0x1628>
    1554:	06f20601 	bltzall	s7,2d5c <__isr_vec_space+0x2d3c>
    1558:	bbbb3e08 	swr	k1,15880(sp)
    155c:	7708bd86 	jalx	c22f618 <__memory_size+0xc20fe18>
    1560:	4dbbbb84 	0x4dbbbb84
    1564:	3f08bcbb 	0x3f08bcbb
    1568:	08f97608 	j	3e5d820 <__memory_size+0x3e3e020>
    156c:	08bd89af 	j	2f626bc <__memory_size+0x2f42ebc>
    1570:	f20c033e 	0xf20c033e
    1574:	4903ea08 	bc2tl	ffffbd98 <__flash_start+0x403fbd98>
    1578:	f23c0382 	0xf23c0382
    157c:	8384ae08 	lb	a0,-20984(gp)
    1580:	3d087808 	0x3d087808
    1584:	8686bc83 	lh	a2,-17277(s4)
    1588:	01040200 	0x1040200
    158c:	06740806 	0x6740806
    1590:	6f083d08 	0x6f083d08
    1594:	03f20c03 	0x3f20c03
    1598:	0883ba11 	j	20ee844 <__memory_size+0x20cf044>
    159c:	f375087a 	0xf375087a
    15a0:	75087a08 	jalx	421e820 <__memory_size+0x41ff020>
    15a4:	087808f3 	j	1e023cc <__memory_size+0x1de2bcc>
    15a8:	08be4c75 	j	2f931d4 <__memory_size+0x2f739d4>
    15ac:	f20b033e 	0xf20b033e
    15b0:	4b8a7608 	c2	0x18a7608
    15b4:	01001402 	0x1001402
    15b8:	0009b801 	movt	s7,zero,$fcc2
    15bc:	fc000200 	sdc3	$0,512(zero)
    15c0:	01000001 	movf	zero,t0,$fcc0
    15c4:	0d0efb01 	jal	43bec04 <__memory_size+0x439f404>
    15c8:	01010100 	0x1010100
    15cc:	00000001 	movf	zero,zero,$fcc0
    15d0:	01000001 	movf	zero,t0,$fcc0
    15d4:	2e2f2e2e 	sltiu	t7,s1,11822
    15d8:	6f532f2e 	0x6f532f2e
    15dc:	65637275 	0x65637275
    15e0:	706f2f00 	0x706f2f00
    15e4:	6d692f74 	0x6d692f74
    15e8:	63657467 	0x63657467
    15ec:	6f6f542f 	0x6f6f542f
    15f0:	6168636c 	0x6168636c
    15f4:	2f736e69 	sltiu	s3,k1,28265
    15f8:	7370696d 	s16sdi	xr5,k1,52,
    15fc:	69746d2d 	0x69746d2d
    1600:	666c652d 	0x666c652d
    1604:	3130322f 	andi	s0,t1,0x322f
    1608:	35302e36 	ori	s0,t1,0x2e36
    160c:	2f33302d 	sltiu	s3,t9,12333
    1610:	2f62696c 	sltiu	v0,k1,26988
    1614:	2f636367 	sltiu	v1,k1,25447
    1618:	7370696d 	s16sdi	xr5,k1,52,
    161c:	69746d2d 	0x69746d2d
    1620:	666c652d 	0x666c652d
    1624:	392e342f 	xori	t6,t1,0x342f
    1628:	692f322e 	0x692f322e
    162c:	756c636e 	jalx	5b18db8 <__memory_size+0x5af95b8>
    1630:	2f006564 	sltiu	zero,t8,25956
    1634:	2f74706f 	sltiu	s4,k1,28783
    1638:	74676d69 	jalx	19db5a4 <__memory_size+0x19bbda4>
    163c:	542f6365 	bnel	at,t7,1a3d4 <__isr_vec_space+0x1a3b4>
    1640:	636c6f6f 	0x636c6f6f
    1644:	6e696168 	0x6e696168
    1648:	696d2f73 	0x696d2f73
    164c:	6d2d7370 	0x6d2d7370
    1650:	652d6974 	0x652d6974
    1654:	322f666c 	andi	t7,s1,0x666c
    1658:	2e363130 	sltiu	s6,s1,12592
    165c:	302d3530 	andi	t5,at,0x3530
    1660:	696d2f33 	0x696d2f33
    1664:	6d2d7370 	0x6d2d7370
    1668:	652d6974 	0x652d6974
    166c:	692f666c 	0x692f666c
    1670:	756c636e 	jalx	5b18db8 <__memory_size+0x5af95b8>
    1674:	6d2f6564 	0x6d2f6564
    1678:	69686361 	0x69686361
    167c:	2f00656e 	sltiu	zero,t8,25966
    1680:	2f74706f 	sltiu	s4,k1,28783
    1684:	74676d69 	jalx	19db5a4 <__memory_size+0x19bbda4>
    1688:	542f6365 	bnel	at,t7,1a420 <__isr_vec_space+0x1a400>
    168c:	636c6f6f 	0x636c6f6f
    1690:	6e696168 	0x6e696168
    1694:	696d2f73 	0x696d2f73
    1698:	6d2d7370 	0x6d2d7370
    169c:	652d6974 	0x652d6974
    16a0:	322f666c 	andi	t7,s1,0x666c
    16a4:	2e363130 	sltiu	s6,s1,12592
    16a8:	302d3530 	andi	t5,at,0x3530
    16ac:	696d2f33 	0x696d2f33
    16b0:	6d2d7370 	0x6d2d7370
    16b4:	652d6974 	0x652d6974
    16b8:	692f666c 	0x692f666c
    16bc:	756c636e 	jalx	5b18db8 <__memory_size+0x5af95b8>
    16c0:	2e006564 	sltiu	zero,s0,25956
    16c4:	2e2e2f2e 	sltiu	t6,s1,12078
    16c8:	756f532f 	jalx	5bd4cbc <__memory_size+0x5bb54bc>
    16cc:	2f656372 	sltiu	a1,k1,25458
    16d0:	6c636e69 	0x6c636e69
    16d4:	00656475 	0x656475
    16d8:	74706f2f 	jalx	1c1bcbc <__memory_size+0x1bfc4bc>
    16dc:	676d692f 	0x676d692f
    16e0:	2f636574 	sltiu	v1,k1,25972
    16e4:	6c6f6f54 	0x6c6f6f54
    16e8:	69616863 	0x69616863
    16ec:	6d2f736e 	0x6d2f736e
    16f0:	2d737069 	sltiu	s3,t3,28777
    16f4:	2d69746d 	sltiu	t1,t3,29805
    16f8:	2f666c65 	sltiu	a2,k1,27749
    16fc:	36313032 	ori	s1,s1,0x3032
    1700:	2d35302e 	sltiu	s5,t1,12334
    1704:	6d2f3330 	0x6d2f3330
    1708:	2d737069 	sltiu	s3,t3,28777
    170c:	2d69746d 	sltiu	t1,t3,29805
    1710:	2f666c65 	sltiu	a2,k1,27749
    1714:	6c636e69 	0x6c636e69
    1718:	2f656475 	sltiu	a1,k1,25717
    171c:	7370696d 	s16sdi	xr5,k1,52,
    1720:	2f2e2e00 	sltiu	t6,t9,11776
    1724:	532f2e2e 	beql	t9,t7,cfe0 <__isr_vec_space+0xcfc0>
    1728:	6372756f 	0x6372756f
    172c:	6f702f65 	0x6f702f65
    1730:	62617472 	0x62617472
    1734:	432f656c 	c0	0x12f656c
    1738:	5365646f 	beql	k1,a1,1a8f8 <__isr_vec_space+0x1a8d8>
    173c:	65706163 	0x65706163
    1740:	50494d2f 	beql	v0,t1,14c00 <__isr_vec_space+0x14be0>
    1744:	67704653 	0x67704653
    1748:	74000061 	jalx	184 <__isr_vec_space+0x164>
    174c:	736b7361 	0x736b7361
    1750:	0100632e 	0x100632e
    1754:	74730000 	jalx	1cc0000 <__memory_size+0x1ca0800>
    1758:	66656464 	0x66656464
    175c:	0200682e 	0x200682e
    1760:	645f0000 	0x645f0000
    1764:	75616665 	jalx	5859994 <__memory_size+0x583a194>
    1768:	745f746c 	jalx	17dd1b0 <__memory_size+0x17bd9b0>
    176c:	73657079 	0x73657079
    1770:	0300682e 	0x300682e
    1774:	74730000 	jalx	1cc0000 <__memory_size+0x1ca0800>
    1778:	746e6964 	jalx	1b9a590 <__memory_size+0x1b7ad90>
    177c:	0400682e 	bltz	zero,1b838 <__isr_vec_space+0x1b818>
    1780:	72700000 	madd	s3,s0
    1784:	65646a6f 	0x65646a6f
    1788:	682e7366 	0x682e7366
    178c:	00000500 	sll	zero,zero,0x14
    1790:	6332336d 	0x6332336d
    1794:	00682e30 	tge	v1,t0,0xb8
    1798:	70000006 	s32slt	xr0,xr0,xr0
    179c:	6d74726f 	0x6d74726f
    17a0:	6f726361 	0x6f726361
    17a4:	0700682e 	bltz	t8,1b860 <__isr_vec_space+0x1b840>
    17a8:	696c0000 	0x696c0000
    17ac:	682e7473 	0x682e7473
    17b0:	00000500 	sll	zero,zero,0x14
    17b4:	6b736174 	0x6b736174
    17b8:	0500682e 	bltz	t0,1b874 <__isr_vec_space+0x1b854>
    17bc:	00000000 	nop
    17c0:	4cf40205 	luxc1	$f8,s4(a3)
    17c4:	ac038000 	sw	v1,-32768(zero)
    17c8:	24020105 	li	v0,261
    17cc:	08290316 	j	a40c58 <__memory_size+0xa21458>
    17d0:	08790874 	j	1e421d0 <__memory_size+0x1e229d0>
    17d4:	be760876 	cache	0x16,2166(s3)
    17d8:	4208bdf5 	c0	0x8bdf5
    17dc:	084c4208 	j	1310820 <__memory_size+0x12f1020>
    17e0:	0903bc7a 	j	40ef1e8 <__memory_size+0x40cf9e8>
    17e4:	75087408 	jalx	421d020 <__memory_size+0x41fd820>
    17e8:	08133802 	j	4ce008 <__memory_size+0x4ae808>
    17ec:	7508bb76 	jalx	422edd8 <__memory_size+0x420f5d8>
    17f0:	4bbd85f6 	c2	0x1bd85f6
    17f4:	74080d03 	jalx	20340c <__memory_size+0x1e3c0c>
    17f8:	e4081603 	swc1	$f8,5635(zero)
    17fc:	24020a03 	li	v0,2563
    1800:	13240201 	beq	t9,a0,2008 <__isr_vec_space+0x1fe8>
    1804:	040200bd 	bltzl	zero,1afc <__isr_vec_space+0x1adc>
    1808:	06f20601 	bltzall	s7,3010 <__isr_vec_space+0x2ff0>
    180c:	3c081003 	lui	t0,0x1003
    1810:	08e908bc 	j	3a422f0 <__memory_size+0x3a22af0>
    1814:	04020076 	bltzl	zero,19f0 <__isr_vec_space+0x19d0>
    1818:	82770302 	lb	s7,770(s3)
    181c:	01040200 	0x1040200
    1820:	0306ba06 	0x306ba06
    1824:	f486f213 	sdc1	$f6,-3565(a0)
    1828:	86bbbd89 	lh	k1,-17015(s5)
    182c:	40083d08 	0x40083d08
    1830:	be3d08bd 	cache	0x1d,2237(s1)
    1834:	83822603 	lb	v0,9731(gp)
    1838:	08821b03 	j	2086c0c <__memory_size+0x206740c>
    183c:	08c0bee8 	j	302fba0 <__memory_size+0x30103a0>
    1840:	84770878 	lh	s7,2168(v1)
    1844:	f784bebb 	sdc1	$f4,-16709(gp)
    1848:	bcf20c03 	cache	0x12,3075(a3)
    184c:	0d03ae08 	jal	40eb820 <__memory_size+0x40cc020>
    1850:	ba0a0382 	swr	t2,898(s0)
    1854:	84165802 	lh	s6,22530(zero)
    1858:	03ae08be 	0x3ae08be
    185c:	0128020b 	0x128020b
    1860:	7708b208 	jalx	c22c820 <__memory_size+0xc20d020>
    1864:	04020086 	bltzl	zero,1a80 <__isr_vec_space+0x1a60>
    1868:	00ba0601 	0xba0601
    186c:	ba020402 	swr	v0,1026(s0)
    1870:	04040200 	0x4040200
    1874:	0402004a 	bltzl	zero,19a0 <__isr_vec_space+0x1980>
    1878:	084d0604 	j	1341810 <__memory_size+0x1322010>
    187c:	040200ae 	bltzl	zero,1b38 <__isr_vec_space+0x1b18>
    1880:	2c020601 	sltiu	v0,zero,1537
    1884:	24020612 	li	v0,1554
    1888:	0b03f41a 	j	c0fd068 <__memory_size+0xc0dd868>
    188c:	f9bc3c08 	sdc2	$28,15368(t5)
    1890:	0b03b108 	j	c0ec420 <__memory_size+0xc0ccc20>
    1894:	bebb3c08 	cache	0x1b,15368(s5)
    1898:	f4bc8687 	sdc1	$f28,-31097(a1)
    189c:	01040200 	0x1040200
    18a0:	0806ba06 	j	1ae818 <__memory_size+0x18f018>
    18a4:	1928023d 	0x1928023d
    18a8:	ae08b408 	sw	t0,-19448(s0)
    18ac:	0402004c 	bltzl	zero,19e0 <__isr_vec_space+0x19c0>
    18b0:	06ba0601 	0x6ba0601
    18b4:	02003d08 	0x2003d08
    18b8:	ba060104 	swr	a2,260(s0)
    18bc:	003d0806 	srlv	at,sp,at
    18c0:	06010402 	bgez	s0,28cc <__isr_vec_space+0x28ac>
    18c4:	3e0806ba 	0x3e0806ba
    18c8:	3e088586 	0x3e088586
    18cc:	02007b08 	0x2007b08
    18d0:	08060104 	j	180410 <__memory_size+0x160c10>
    18d4:	3e080674 	0x3e080674
    18d8:	00f20c03 	0xf20c03
    18dc:	06010402 	bgez	s0,28e8 <__isr_vec_space+0x28c8>
    18e0:	08067408 	j	19d020 <__memory_size+0x17d820>
    18e4:	8209033e 	lb	t1,830(s0)
    18e8:	b308c0bc 	0xb308c0bc
    18ec:	2802bcbe 	slti	v0,zero,-17218
    18f0:	08b40818 	j	2d02060 <__memory_size+0x2ce2860>
    18f4:	00bc4d75 	0xbc4d75
    18f8:	06010402 	bgez	s0,2904 <__isr_vec_space+0x28e4>
    18fc:	3d0806ba 	0x3d0806ba
    1900:	f4820b03 	sdc1	$f2,2819(a0)
    1904:	bcba0903 	cache	0x1a,2307(a1)
    1908:	08182802 	j	60a008 <__memory_size+0x5ea808>
    190c:	843f08b4 	lh	ra,2228(at)
    1910:	01040200 	0x1040200
    1914:	0806ba06 	j	1ae818 <__memory_size+0x18f018>
    1918:	84bef53e 	lh	s8,-2754(a1)
    191c:	020084bc 	0x20084bc
    1920:	f2060104 	0xf2060104
    1924:	08f6f606 	j	3dbd818 <__memory_size+0x3d9e018>
    1928:	f8f6f441 	sdc2	$22,-3007(a3)
    192c:	01040200 	0x1040200
    1930:	063c0806 	0x63c0806
    1934:	4b86fabf 	c2	0x186fabf
    1938:	40087c08 	0x40087c08
    193c:	04020086 	bltzl	zero,1b58 <__isr_vec_space+0x1b38>
    1940:	00ba0601 	0xba0601
    1944:	ba020402 	swr	v0,1026(s0)
    1948:	04040200 	0x4040200
    194c:	0402004a 	bltzl	zero,1a78 <__isr_vec_space+0x1a58>
    1950:	004b0604 	0x4b0604
    1954:	bc040402 	cache	0x4,1026(zero)
    1958:	04040200 	0x4040200
    195c:	04020084 	bltzl	zero,1b70 <__isr_vec_space+0x1b50>
    1960:	7c084b04 	ins	t0,zero,0xc,0xfffffffe
    1964:	3c081603 	lui	t0,0x1603
    1968:	040200be 	bltzl	zero,1c64 <__isr_vec_space+0x1c44>
    196c:	00ba0601 	0xba0601
    1970:	ba020402 	swr	v0,1026(s0)
    1974:	04040200 	0x4040200
    1978:	0402004a 	bltzl	zero,1aa4 <__isr_vec_space+0x1a84>
    197c:	004b0604 	0x4b0604
    1980:	bc040402 	cache	0x4,1026(zero)
    1984:	04040200 	0x4040200
    1988:	040200bc 	bltzl	zero,1c7c <__isr_vec_space+0x1c5c>
    198c:	7c084b04 	ins	t0,zero,0xc,0xfffffffe
    1990:	004c7708 	0x4c7708
    1994:	06010402 	bgez	s0,29a0 <__isr_vec_space+0x2980>
    1998:	3f0806f2 	0x3f0806f2
    199c:	008689f4 	teq	a0,a2,0x227
    19a0:	06010402 	bgez	s0,29ac <__isr_vec_space+0x298c>
    19a4:	040200ba 	bltzl	zero,1c90 <__isr_vec_space+0x1c70>
    19a8:	0200ba02 	0x200ba02
    19ac:	004a0404 	0x4a0404
    19b0:	06040402 	0x6040402
    19b4:	04020050 	bltzl	zero,1af8 <__isr_vec_space+0x1ad8>
    19b8:	08f6c204 	j	3db0810 <__memory_size+0x3d91010>
    19bc:	7608f73e 	jalx	823dcf8 <__memory_size+0x821e4f8>
    19c0:	f7f20e03 	sdc1	$f18,3587(ra)
    19c4:	c0820c03 	ll	v0,3075(a0)
    19c8:	03c27608 	0x3c27608
    19cc:	03f4ba0a 	0x3f4ba0a
    19d0:	003c080b 	movn	at,at,gp
    19d4:	06010402 	bgez	s0,29e0 <__isr_vec_space+0x29c0>
    19d8:	00122c02 	srl	a1,s2,0x10
    19dc:	ba020402 	swr	v0,1026(s0)
    19e0:	04040200 	0x4040200
    19e4:	0887064a 	j	21c1928 <__memory_size+0x21a2128>
    19e8:	02b208b1 	tgeu	s5,s2,0x22
    19ec:	03bc1958 	0x3bc1958
    19f0:	0128020c 	syscall	0x4a008
    19f4:	087c0883 	j	1f0220c <__memory_size+0x1ee2a0c>
    19f8:	02008677 	0x2008677
    19fc:	ba060104 	swr	a2,260(s0)
    1a00:	02040200 	0x2040200
    1a04:	040200ba 	bltzl	zero,1cf0 <__isr_vec_space+0x1cd0>
    1a08:	02004a04 	0x2004a04
    1a0c:	50060404 	beql	zero,a2,2a20 <__isr_vec_space+0x2a00>
    1a10:	0200ae08 	0x200ae08
    1a14:	02060104 	0x2060104
    1a18:	0206122c 	0x206122c
    1a1c:	08f41a24 	j	3d06890 <__memory_size+0x3ce7090>
    1a20:	84ae0843 	lh	t6,2115(a1)
    1a24:	898484be 	lwl	a0,-31554(t4)
    1a28:	0200bdf4 	teq	s0,zero,0x2f7
    1a2c:	ba060104 	swr	a2,260(s0)
    1a30:	023d0806 	srlv	at,sp,s1
    1a34:	42081930 	c0	0x81930
    1a38:	b4088abe 	0xb4088abe
    1a3c:	884b3d08 	lwl	t3,15624(v0)
    1a40:	01040200 	0x1040200
    1a44:	0806ba06 	j	1ae818 <__memory_size+0x18f018>
    1a48:	0402003f 	bltzl	zero,1b48 <__isr_vec_space+0x1b28>
    1a4c:	74080601 	jalx	201804 <__memory_size+0x1e2004>
    1a50:	02040200 	0x2040200
    1a54:	040200ba 	bltzl	zero,1d40 <__isr_vec_space+0x1d20>
    1a58:	85064a04 	lh	a2,18948(t0)
    1a5c:	02007808 	0x2007808
    1a60:	f2060104 	0xf2060104
    1a64:	02040200 	0x2040200
    1a68:	040200ba 	bltzl	zero,1d54 <__isr_vec_space+0x1d34>
    1a6c:	84064a04 	lh	a2,18948(zero)
    1a70:	4b821103 	c2	0x1821103
    1a74:	3d087c08 	0x3d087c08
    1a78:	04020085 	bltzl	zero,1c90 <__isr_vec_space+0x1c70>
    1a7c:	06ba0601 	0x6ba0601
    1a80:	02004008 	0x2004008
    1a84:	ba060104 	swr	a2,260(s0)
    1a88:	0884f406 	j	213d018 <__memory_size+0x211d818>
    1a8c:	023d0842 	0x23d0842
    1a90:	b1081558 	0xb1081558
    1a94:	28020c03 	slti	v0,zero,3075
    1a98:	09038801 	j	40e2004 <__memory_size+0x40c2804>
    1a9c:	3d087408 	0x3d087408
    1aa0:	0200854b 	0x200854b
    1aa4:	ba060104 	swr	a2,260(s0)
    1aa8:	08140306 	j	500c18 <__memory_size+0x4e1418>
    1aac:	4108bc3c 	0x4108bc3c
    1ab0:	89ae08be 	lwl	t6,2238(t5)
    1ab4:	60023d08 	0x60023d08
    1ab8:	bcb40819 	cache	0x14,2073(a1)
    1abc:	037a084b 	0x37a084b
    1ac0:	0a03f221 	j	80fc884 <__memory_size+0x80dd084>
    1ac4:	f4013002 	sdc1	$f1,12290(zero)
    1ac8:	f9ba0903 	sdc2	$26,2307(t5)
    1acc:	01040200 	0x1040200
    1ad0:	12300206 	beq	s1,s0,22ec <__isr_vec_space+0x22cc>
    1ad4:	080a0306 	j	280c18 <__memory_size+0x261418>
    1ad8:	038383ac 	0x38383ac
    1adc:	0f034a09 	jal	c0d2824 <__memory_size+0xc0b3024>
    1ae0:	040200f2 	bltzl	zero,1eac <__isr_vec_space+0x1e8c>
    1ae4:	06f20601 	bltzall	s7,32ec <__isr_vec_space+0x32cc>
    1ae8:	78084208 	0x78084208
    1aec:	040200f6 	bltzl	zero,1ec8 <__isr_vec_space+0x1ea8>
    1af0:	30020601 	andi	v0,zero,0x601
    1af4:	ad080612 	sw	t0,1554(t0)
    1af8:	7808834b 	0x7808834b
    1afc:	c303bbbf 	ll	v1,-17473(t8)
    1b00:	f33c0800 	0xf33c0800
    1b04:	02004e4b 	0x2004e4b
    1b08:	ba060104 	swr	a2,260(s0)
    1b0c:	84430806 	lh	v1,2054(v0)
    1b10:	84bebcbc 	lh	s8,-17220(a1)
    1b14:	3d083d08 	0x3d083d08
    1b18:	58023d08 	0x58023d08
    1b1c:	03ae0816 	0x3ae0816
    1b20:	13038275 	beq	t8,v1,fffe24f8 <__flash_start+0x403e24f8>
    1b24:	848ac2f2 	lh	t2,-15630(a0)
    1b28:	bb88f4be 	swr	t0,-2882(gp)
    1b2c:	85be52bc 	lh	s8,21180(t5)
    1b30:	28020d03 	slti	v0,zero,3331
    1b34:	084b8401 	j	12e1004 <__memory_size+0x12c1804>
    1b38:	4b86c078 	c2	0x186c078
    1b3c:	14034008 	bne	zero,v1,11b60 <__isr_vec_space+0x11b40>
    1b40:	4b864cba 	c2	0x1864cba
    1b44:	4bbd4008 	c2	0x1bd4008
    1b48:	41084008 	0x41084008
    1b4c:	01040200 	0x1040200
    1b50:	0200ba06 	0x200ba06
    1b54:	00ba0204 	0xba0204
    1b58:	4a040402 	c2	0x40402
    1b5c:	04040200 	0x4040200
    1b60:	02004b06 	0x2004b06
    1b64:	ba060104 	swr	a2,260(s0)
    1b68:	833d0806 	lb	sp,2054(t9)
    1b6c:	0802b603 	j	ad80c <__memory_size+0x8e00c>
    1b70:	be50f574 	cache	0x10,-2700(s2)
    1b74:	00bc84be 	0xbc84be
    1b78:	06010402 	bgez	s0,2b84 <__isr_vec_space+0x2b64>
    1b7c:	040200f2 	bltzl	zero,1f48 <__isr_vec_space+0x1f28>
    1b80:	063c0803 	0x63c0803
    1b84:	2c020b03 	sltiu	v0,zero,2819
    1b88:	00400801 	movf	at,v0,$fcc0
    1b8c:	06010402 	bgez	s0,2b98 <__isr_vec_space+0x2b78>
    1b90:	040200f2 	bltzl	zero,1f5c <__isr_vec_space+0x1f3c>
    1b94:	0200ba02 	0x200ba02
    1b98:	064a0404 	tlti	s2,1028
    1b9c:	f38a8389 	0xf38a8389
    1ba0:	834308bc 	lb	v1,2236(k0)
    1ba4:	f440088a 	sdc1	$f0,2186(v0)
    1ba8:	3c080903 	lui	t0,0x903
    1bac:	58020a03 	0x58020a03
    1bb0:	03ae0801 	0x3ae0801
    1bb4:	028a8209 	0x28a8209
    1bb8:	0d031430 	jal	40c50c0 <__memory_size+0x40a58c0>
    1bbc:	0b03bc82 	j	c0ef208 <__memory_size+0xc0cfa08>
    1bc0:	bc89c0f2 	cache	0x9,-16142(a0)
    1bc4:	4b820903 	c2	0x1820903
    1bc8:	0800de03 	j	3780c <__memory_size+0x1800c>
    1bcc:	f6bef374 	sdc1	$f30,-3212(s5)
    1bd0:	004a1f03 	0x4a1f03
    1bd4:	06020402 	bltzl	s0,2be0 <__isr_vec_space+0x2bc0>
    1bd8:	00122c02 	srl	a1,s2,0x10
    1bdc:	08040402 	j	101008 <__memory_size+0xe1808>
    1be0:	04020074 	bltzl	zero,1db4 <__isr_vec_space+0x1d94>
    1be4:	00740806 	srlv	at,s4,v1
    1be8:	08070402 	j	1c1008 <__memory_size+0x1a1808>
    1bec:	b0080674 	0xb0080674
    1bf0:	01040200 	0x1040200
    1bf4:	123c0206 	beq	s1,gp,2410 <__isr_vec_space+0x23f0>
    1bf8:	03040200 	0x3040200
    1bfc:	02003c08 	0x2003c08
    1c00:	4c020404 	0x4c020404
    1c04:	04020012 	bltzl	zero,1c50 <__isr_vec_space+0x1c30>
    1c08:	063c0806 	0x63c0806
    1c0c:	08f20b03 	j	3c82c0c <__memory_size+0x3c6340c>
    1c10:	00750878 	0x750878
    1c14:	06010402 	bgez	s0,2c20 <__isr_vec_space+0x2c00>
    1c18:	090306ba 	j	40c1ae8 <__memory_size+0x40a22e8>
    1c1c:	76083c08 	jalx	820f020 <__memory_size+0x81ef820>
    1c20:	087808f3 	j	1e023cc <__memory_size+0x1de2bcc>
    1c24:	040200ad 	bltzl	zero,1edc <__isr_vec_space+0x1ebc>
    1c28:	06ba0601 	0x6ba0601
    1c2c:	02004008 	0x2004008
    1c30:	ba060104 	swr	a2,260(s0)
    1c34:	08410806 	j	1042018 <__memory_size+0x1022818>
    1c38:	f3760843 	0xf3760843
    1c3c:	ad087a08 	sw	t0,31240(t0)
    1c40:	01040200 	0x1040200
    1c44:	0306ba06 	0x306ba06
    1c48:	083c080c 	j	f02030 <__memory_size+0xee2830>
    1c4c:	f386bc79 	0xf386bc79
    1c50:	11037a08 	beq	t0,v1,20474 <__memory_size+0xc74>
    1c54:	00f33c08 	0xf33c08
    1c58:	06010402 	bgez	s0,2c64 <__isr_vec_space+0x2c44>
    1c5c:	3d0806ba 	0x3d0806ba
    1c60:	08bc3e08 	j	2f0f820 <__memory_size+0x2ef0020>
    1c64:	1860023d 	blez	v1,255c <__isr_vec_space+0x253c>
    1c68:	b108af08 	0xb108af08
    1c6c:	1103f686 	beq	t0,v1,fffff688 <__flash_start+0x403ff688>
    1c70:	78084b4a 	sat_s.d	$w13,$w9,0x8
    1c74:	02007a08 	0x2007a08
    1c78:	ba060104 	swr	a2,260(s0)
    1c7c:	083f0806 	j	fc2018 <__memory_size+0xfa2818>
    1c80:	0200bb40 	0x200bb40
    1c84:	ba060104 	swr	a2,260(s0)
    1c88:	bf3d0806 	cache	0x1d,2054(t9)
    1c8c:	58023d08 	0x58023d08
    1c90:	86b20814 	lh	s2,2068(s5)
    1c94:	084b4df6 	j	12d37d8 <__memory_size+0x12b3fd8>
    1c98:	003d0878 	0x3d0878
    1c9c:	06010402 	bgez	s0,2ca8 <__isr_vec_space+0x2c88>
    1ca0:	3d0806ba 	0x3d0806ba
    1ca4:	7808bbbb 	0x7808bbbb
    1ca8:	02007708 	0x2007708
    1cac:	ba060104 	swr	a2,260(s0)
    1cb0:	003d0806 	srlv	at,sp,at
    1cb4:	06010402 	bgez	s0,2cc0 <__isr_vec_space+0x2ca0>
    1cb8:	3e0806ba 	0x3e0806ba
    1cbc:	820e0385 	lb	t6,901(s0)
    1cc0:	00bf4108 	0xbf4108
    1cc4:	06010402 	bgez	s0,2cd0 <__isr_vec_space+0x2cb0>
    1cc8:	08063c08 	j	18f020 <__memory_size+0x16f820>
    1ccc:	2402f47b 	li	v0,-2949
    1cd0:	13240215 	beq	t9,a0,2528 <__isr_vec_space+0x2508>
    1cd4:	8485bebb 	lh	a1,-16709(a0)
    1cd8:	bb78084b 	swr	t8,2123(k1)
    1cdc:	08350383 	j	d40e0c <__memory_size+0xd2160c>
    1ce0:	080b033c 	j	2c0cf0 <__memory_size+0x2a14f0>
    1ce4:	8217033c 	lb	s7,828(s0)
    1ce8:	c2033e08 	ll	v1,15880(s0)
    1cec:	01280200 	0x1280200
    1cf0:	8200e403 	lb	zero,-7165(s0)
    1cf4:	040200f5 	bltzl	zero,20cc <__isr_vec_space+0x20ac>
    1cf8:	0200bc03 	0x200bc03
    1cfc:	28020304 	slti	v0,zero,772
    1d00:	04020010 	bltzl	zero,1d44 <__isr_vec_space+0x1d24>
    1d04:	06ba0601 	0x6ba0601
    1d08:	f6f3f3f7 	sdc1	$f19,-3081(s7)
    1d0c:	bbbbf8f8 	swr	k1,-1800(sp)
    1d10:	0a037808 	j	80de020 <__memory_size+0x80be820>
    1d14:	088484f2 	j	21213c8 <__memory_size+0x2101bc8>
    1d18:	84be843e 	lh	s8,-31682(a1)
    1d1c:	3d083d08 	0x3d083d08
    1d20:	0384bcbb 	0x384bcbb
    1d24:	1e03ba6b 	0x1e03ba6b
    1d28:	018003ba 	0x18003ba
    1d2c:	4cf37408 	0x4cf37408
    1d30:	08b7bb84 	j	2deee10 <__memory_size+0x2dcf610>
    1d34:	0883bc42 	j	20ef108 <__memory_size+0x20cf908>
    1d38:	00410844 	0x410844
    1d3c:	06010402 	bgez	s0,2d48 <__isr_vec_space+0x2d28>
    1d40:	040200ba 	bltzl	zero,202c <__isr_vec_space+0x200c>
    1d44:	0200ba02 	0x200ba02
    1d48:	004a0404 	0x4a0404
    1d4c:	06040402 	0x6040402
    1d50:	0402004e 	bltzl	zero,1e8c <__isr_vec_space+0x1e6c>
    1d54:	0200c204 	0x200c204
    1d58:	00f40404 	0xf40404
    1d5c:	4b040402 	c2	0x1040402
    1d60:	12037c08 	beq	s0,v1,20d84 <__memory_size+0x1584>
    1d64:	3d083c08 	0x3d083c08
    1d68:	08ba1d03 	j	2e8740c <__memory_size+0x2e67c0c>
    1d6c:	0200bd7a 	0x200bd7a
    1d70:	f2060104 	0xf2060104
    1d74:	02040200 	0x2040200
    1d78:	040200ba 	bltzl	zero,2064 <__isr_vec_space+0x2044>
    1d7c:	88064a04 	lwl	a2,18948(zero)
    1d80:	08bcf3fa 	j	2f3cfe8 <__memory_size+0x2f1d7e8>
    1d84:	4b84c042 	c2	0x184c042
    1d88:	bcbd4408 	cache	0x1d,17416(a1)
    1d8c:	4ef6bcf6 	nmadd.ps	$f19,$f23,$f23,$f22
    1d90:	0844084b 	j	110212c <__memory_size+0x10e292c>
    1d94:	08bf863d 	j	2fe18f4 <__memory_size+0x2fc20f4>
    1d98:	0903f4b1 	j	40fd2c4 <__memory_size+0x40ddac4>
    1d9c:	02007408 	0x2007408
    1da0:	02060104 	0x2060104
    1da4:	02001230 	tge	s0,zero,0x48
    1da8:	00ba0204 	0xba0204
    1dac:	4a040402 	c2	0x40402
    1db0:	ae088406 	sw	t0,-31738(s0)
    1db4:	01040200 	0x1040200
    1db8:	122c0206 	beq	s1,t4,25d4 <__isr_vec_space+0x25b4>
    1dbc:	1a240206 	0x1a240206
    1dc0:	176002f3 	bnez	k1,2990 <__isr_vec_space+0x2970>
    1dc4:	08f20e03 	j	3c8380c <__memory_size+0x3c6400c>
    1dc8:	833d087c 	lb	sp,2172(t9)
    1dcc:	0200c04c 	syscall	0x80301
    1dd0:	f2060104 	0xf2060104
    1dd4:	003e0806 	srlv	at,s8,at
    1dd8:	06010402 	bgez	s0,2de4 <__isr_vec_space+0x2dc4>
    1ddc:	3d0806f2 	0x3d0806f2
    1de0:	77084008 	jalx	c210020 <__memory_size+0xc1f0820>
    1de4:	00ae08f9 	0xae08f9
    1de8:	06010402 	bgez	s0,2df4 <__isr_vec_space+0x2dd4>
    1dec:	06122c02 	bltzall	s0,cdf8 <__isr_vec_space+0xcdd8>
    1df0:	24020a03 	li	v0,2563
    1df4:	7508f701 	jalx	423dc04 <__memory_size+0x421e404>
    1df8:	58020a03 	0x58020a03
    1dfc:	82110301 	lb	s1,769(s0)
    1e00:	087c084b 	j	1f0212c <__memory_size+0x1ee292c>
    1e04:	0402003d 	bltzl	zero,1efc <__isr_vec_space+0x1edc>
    1e08:	30020601 	andi	v0,zero,0x601
    1e0c:	ae080612 	sw	t0,1554(s0)
    1e10:	3e08fabc 	0x3e08fabc
    1e14:	01040200 	0x1040200
    1e18:	0806ba06 	j	1ae818 <__memory_size+0x18f018>
    1e1c:	f3b408b3 	0xf3b408b3
    1e20:	f4f4f4bc 	sdc1	$f20,-2884(a3)
    1e24:	28021003 	slti	v0,zero,4099
    1e28:	01fe0301 	0x1fe0301
    1e2c:	bebd7408 	cache	0x1d,29704(s5)
    1e30:	084b7608 	j	12dd820 <__memory_size+0x12be020>
    1e34:	f5bcbd42 	sdc1	$f28,-17086(t5)
    1e38:	0844084b 	j	110212c <__memory_size+0x10e292c>
    1e3c:	bcf58577 	cache	0x15,-31369(a3)
    1e40:	0c03f9bc 	jal	fe6f0 <__memory_size+0xdeef0>
    1e44:	84012802 	lh	at,10242(zero)
    1e48:	bcbcbc85 	cache	0x1c,-17275(a1)
    1e4c:	8484faf6 	lh	a0,-1290(a0)
    1e50:	087c084b 	j	1f0212c <__memory_size+0x1ee292c>
    1e54:	790885e7 	st.d	$w23,2112(s0)
    1e58:	bcbc7708 	cache	0x1c,30472(a1)
    1e5c:	020c03f9 	0x20c03f9
    1e60:	86840128 	lh	a0,296(s4)
    1e64:	7708f9be 	jalx	c23e6f8 <__memory_size+0xc21eef8>
    1e68:	857508c0 	lh	s5,2240(t3)
    1e6c:	084b8484 	j	12e1210 <__memory_size+0x12c1a10>
    1e70:	85e6087c 	lh	a2,2172(t7)
    1e74:	01040200 	0x1040200
    1e78:	0806ba06 	j	1ae818 <__memory_size+0x18f018>
    1e7c:	bc84843d 	cache	0x4,-31683(a0)
    1e80:	02bcbcf5 	0x2bcbcf5
    1e84:	75081530 	jalx	42054c0 <__memory_size+0x41e5cc0>
    1e88:	853d0885 	lh	sp,2181(t1)
    1e8c:	c1f485bb 	ll	s4,-31301(t7)
    1e90:	51874c80 	beql	t4,a3,15094 <__isr_vec_space+0x15074>
    1e94:	023d08f4 	teq	s1,sp,0x23
    1e98:	02001558 	0x2001558
    1e9c:	f2060104 	0xf2060104
    1ea0:	08120306 	j	480c18 <__memory_size+0x461418>
    1ea4:	03b0083c 	0x3b0083c
    1ea8:	0128020c 	syscall	0x4a008
    1eac:	7c084b84 	ins	t0,zero,0xe,0xfffffffc
    1eb0:	0085e708 	0x85e708
    1eb4:	06010402 	bgez	s0,2ec0 <__isr_vec_space+0x2ea0>
    1eb8:	140306ba 	bne	zero,v1,39a4 <__isr_vec_space+0x3984>
    1ebc:	bc843c08 	cache	0x4,15368(a0)
    1ec0:	bcbbf5bc 	cache	0x1b,-2628(a1)
    1ec4:	08153002 	j	54c008 <__memory_size+0x52c808>
    1ec8:	3d088575 	0x3d088575
    1ecc:	f485bb85 	sdc1	$f5,-17531(a0)
    1ed0:	874c80c1 	lh	t4,-32575(k0)
    1ed4:	0200f551 	0x200f551
    1ed8:	f2060104 	0xf2060104
    1edc:	bc3e0806 	cache	0x1e,2054(at)
    1ee0:	60023d08 	0x60023d08
    1ee4:	08af0818 	j	2bc2060 <__memory_size+0x2ba2860>
    1ee8:	4308bcb0 	c0	0x108bcb0
    1eec:	bc820903 	cache	0x2,2307(a0)
    1ef0:	087c084b 	j	1f0212c <__memory_size+0x1ee292c>
    1ef4:	04020079 	bltzl	zero,20dc <__isr_vec_space+0x20bc>
    1ef8:	06ba0601 	0x6ba0601
    1efc:	3c081403 	lui	t0,0x1403
    1f00:	bebbbc84 	cache	0x1b,-17276(s5)
    1f04:	00f54208 	0xf54208
    1f08:	06010402 	bgez	s0,2f14 <__isr_vec_space+0x2ef4>
    1f0c:	3e0806f2 	0x3e0806f2
    1f10:	023d08bc 	0x23d08bc
    1f14:	af081860 	sw	t0,6240(t8)
    1f18:	08bcb008 	j	2f2c020 <__memory_size+0x2f0c820>
    1f1c:	82090343 	lb	t1,835(s0)
    1f20:	080903bb 	j	240eec <__memory_size+0x2216ec>
    1f24:	00420874 	teq	v0,v0,0x21
    1f28:	06010402 	bgez	s0,2f34 <__isr_vec_space+0x2f14>
    1f2c:	040200ba 	bltzl	zero,2218 <__isr_vec_space+0x21f8>
    1f30:	0200ba02 	0x200ba02
    1f34:	004a0404 	0x4a0404
    1f38:	06040402 	0x6040402
    1f3c:	0402004c 	bltzl	zero,2070 <__isr_vec_space+0x2050>
    1f40:	76088404 	jalx	8221010 <__memory_size+0x8201810>
    1f44:	844df683 	lh	t5,-2429(v0)
    1f48:	087b084b 	j	1ec212c <__memory_size+0x1ea292c>
    1f4c:	820d0376 	lb	t5,886(s0)
    1f50:	0903b008 	j	40ec020 <__memory_size+0x40cc820>
    1f54:	00012402 	srl	a0,at,0x10
    1f58:	06010402 	bgez	s0,2f64 <__isr_vec_space+0x2f44>
    1f5c:	02bf06f2 	tlt	s5,ra,0x1b
    1f60:	bcf51924 	cache	0x15,6436(a3)
    1f64:	24024008 	li	v0,16392
    1f68:	08b10818 	j	2c42060 <__memory_size+0x2c22860>
    1f6c:	822e033e 	lb	t6,830(s1)
    1f70:	01001802 	0x1001802
    1f74:	00070401 	0x70401
    1f78:	f9000200 	sdc2	$0,512(t0)
    1f7c:	01000001 	movf	zero,t0,$fcc0
    1f80:	0d0efb01 	jal	43bec04 <__memory_size+0x439f404>
    1f84:	01010100 	0x1010100
    1f88:	00000001 	movf	zero,zero,$fcc0
    1f8c:	01000001 	movf	zero,t0,$fcc0
    1f90:	2e2f2e2e 	sltiu	t7,s1,11822
    1f94:	6f532f2e 	0x6f532f2e
    1f98:	65637275 	0x65637275
    1f9c:	706f2f00 	0x706f2f00
    1fa0:	6d692f74 	0x6d692f74
    1fa4:	63657467 	0x63657467
    1fa8:	6f6f542f 	0x6f6f542f
    1fac:	6168636c 	0x6168636c
    1fb0:	2f736e69 	sltiu	s3,k1,28265
    1fb4:	7370696d 	s16sdi	xr5,k1,52,
    1fb8:	69746d2d 	0x69746d2d
    1fbc:	666c652d 	0x666c652d
    1fc0:	3130322f 	andi	s0,t1,0x322f
    1fc4:	35302e36 	ori	s0,t1,0x2e36
    1fc8:	2f33302d 	sltiu	s3,t9,12333
    1fcc:	2f62696c 	sltiu	v0,k1,26988
    1fd0:	2f636367 	sltiu	v1,k1,25447
    1fd4:	7370696d 	s16sdi	xr5,k1,52,
    1fd8:	69746d2d 	0x69746d2d
    1fdc:	666c652d 	0x666c652d
    1fe0:	392e342f 	xori	t6,t1,0x342f
    1fe4:	692f322e 	0x692f322e
    1fe8:	756c636e 	jalx	5b18db8 <__memory_size+0x5af95b8>
    1fec:	2f006564 	sltiu	zero,t8,25956
    1ff0:	2f74706f 	sltiu	s4,k1,28783
    1ff4:	74676d69 	jalx	19db5a4 <__memory_size+0x19bbda4>
    1ff8:	542f6365 	bnel	at,t7,1ad90 <__isr_vec_space+0x1ad70>
    1ffc:	636c6f6f 	0x636c6f6f
    2000:	6e696168 	0x6e696168
    2004:	696d2f73 	0x696d2f73
    2008:	6d2d7370 	0x6d2d7370
    200c:	652d6974 	0x652d6974
    2010:	322f666c 	andi	t7,s1,0x666c
    2014:	2e363130 	sltiu	s6,s1,12592
    2018:	302d3530 	andi	t5,at,0x3530
    201c:	696d2f33 	0x696d2f33
    2020:	6d2d7370 	0x6d2d7370
    2024:	652d6974 	0x652d6974
    2028:	692f666c 	0x692f666c
    202c:	756c636e 	jalx	5b18db8 <__memory_size+0x5af95b8>
    2030:	6d2f6564 	0x6d2f6564
    2034:	69686361 	0x69686361
    2038:	2f00656e 	sltiu	zero,t8,25966
    203c:	2f74706f 	sltiu	s4,k1,28783
    2040:	74676d69 	jalx	19db5a4 <__memory_size+0x19bbda4>
    2044:	542f6365 	bnel	at,t7,1addc <__isr_vec_space+0x1adbc>
    2048:	636c6f6f 	0x636c6f6f
    204c:	6e696168 	0x6e696168
    2050:	696d2f73 	0x696d2f73
    2054:	6d2d7370 	0x6d2d7370
    2058:	652d6974 	0x652d6974
    205c:	322f666c 	andi	t7,s1,0x666c
    2060:	2e363130 	sltiu	s6,s1,12592
    2064:	302d3530 	andi	t5,at,0x3530
    2068:	696d2f33 	0x696d2f33
    206c:	6d2d7370 	0x6d2d7370
    2070:	652d6974 	0x652d6974
    2074:	692f666c 	0x692f666c
    2078:	756c636e 	jalx	5b18db8 <__memory_size+0x5af95b8>
    207c:	2f006564 	sltiu	zero,t8,25956
    2080:	2f74706f 	sltiu	s4,k1,28783
    2084:	74676d69 	jalx	19db5a4 <__memory_size+0x19bbda4>
    2088:	542f6365 	bnel	at,t7,1ae20 <__isr_vec_space+0x1ae00>
    208c:	636c6f6f 	0x636c6f6f
    2090:	6e696168 	0x6e696168
    2094:	696d2f73 	0x696d2f73
    2098:	6d2d7370 	0x6d2d7370
    209c:	652d6974 	0x652d6974
    20a0:	322f666c 	andi	t7,s1,0x666c
    20a4:	2e363130 	sltiu	s6,s1,12592
    20a8:	302d3530 	andi	t5,at,0x3530
    20ac:	696d2f33 	0x696d2f33
    20b0:	6d2d7370 	0x6d2d7370
    20b4:	652d6974 	0x652d6974
    20b8:	692f666c 	0x692f666c
    20bc:	756c636e 	jalx	5b18db8 <__memory_size+0x5af95b8>
    20c0:	6d2f6564 	0x6d2f6564
    20c4:	00737069 	0x737069
    20c8:	2e2f2e2e 	sltiu	t7,s1,11822
    20cc:	6f532f2e 	0x6f532f2e
    20d0:	65637275 	0x65637275
    20d4:	726f702f 	0x726f702f
    20d8:	6c626174 	0x6c626174
    20dc:	6f432f65 	0x6f432f65
    20e0:	63536564 	0x63536564
    20e4:	2f657061 	sltiu	a1,k1,28769
    20e8:	5350494d 	beql	k0,s0,14620 <__isr_vec_space+0x14600>
    20ec:	61677046 	0x61677046
    20f0:	2f2e2e00 	sltiu	t6,t9,11776
    20f4:	532f2e2e 	beql	t9,t7,d9b0 <__isr_vec_space+0xd990>
    20f8:	6372756f 	0x6372756f
    20fc:	6e692f65 	0x6e692f65
    2100:	64756c63 	0x64756c63
    2104:	71000065 	s8sdi	xr1,t0,0,ptn0
    2108:	65756575 	0x65756575
    210c:	0100632e 	0x100632e
    2110:	74730000 	jalx	1cc0000 <__memory_size+0x1ca0800>
    2114:	66656464 	0x66656464
    2118:	0200682e 	0x200682e
    211c:	645f0000 	0x645f0000
    2120:	75616665 	jalx	5859994 <__memory_size+0x583a194>
    2124:	745f746c 	jalx	17dd1b0 <__memory_size+0x17bd9b0>
    2128:	73657079 	0x73657079
    212c:	0300682e 	0x300682e
    2130:	74730000 	jalx	1cc0000 <__memory_size+0x1ca0800>
    2134:	746e6964 	jalx	1b9a590 <__memory_size+0x1b7ad90>
    2138:	0400682e 	bltz	zero,1c1f4 <__isr_vec_space+0x1c1d4>
    213c:	336d0000 	andi	t5,k1,0x0
    2140:	2e306332 	sltiu	s0,s1,25394
    2144:	00050068 	0x50068
    2148:	726f7000 	0x726f7000
    214c:	63616d74 	0x63616d74
    2150:	682e6f72 	0x682e6f72
    2154:	00000600 	sll	zero,zero,0x18
    2158:	7473696c 	jalx	1cda5b0 <__memory_size+0x1cbadb0>
    215c:	0700682e 	bltz	t8,1c218 <__isr_vec_space+0x1c1f8>
    2160:	61740000 	0x61740000
    2164:	682e6b73 	0x682e6b73
    2168:	00000700 	sll	zero,zero,0x1c
    216c:	75657571 	jalx	595d5c4 <__memory_size+0x593ddc4>
    2170:	00682e65 	0x682e65
    2174:	00000007 	srav	zero,zero,zero
    2178:	34020500 	li	v0,0x500
    217c:	03800083 	0x3800083
    2180:	08010297 	j	40a5c <__memory_size+0x2125c>
    2184:	02008475 	0x2008475
    2188:	ba060104 	swr	a2,260(s0)
    218c:	843e0806 	lh	s8,2054(at)
    2190:	83132c02 	lb	s3,11266(t8)
    2194:	133002f3 	beq	t9,s0,2d64 <__isr_vec_space+0x2d44>
    2198:	f4c1bcbb 	sdc1	$f1,-17221(a2)
    219c:	0f03ae08 	jal	c0eb820 <__memory_size+0xc0cc020>
    21a0:	08013002 	j	4c008 <__memory_size+0x2c808>
    21a4:	863f083d 	lh	ra,2109(s1)
    21a8:	083a034b 	j	e80d2c <__memory_size+0xe6152c>
    21ac:	00e90874 	teq	a3,t1,0x21
    21b0:	06010402 	bgez	s0,31bc <__isr_vec_space+0x319c>
    21b4:	3e0806ba 	0x3e0806ba
    21b8:	3f08c0bd 	0x3f08c0bd
    21bc:	03be7608 	0x3be7608
    21c0:	2402ba0b 	li	v0,-17909
    21c4:	7a084b15 	0x7a084b15
    21c8:	c0172402 	ll	s7,9218(zero)
    21cc:	bbbf4108 	swr	ra,16648(sp)
    21d0:	f20a03bb 	0xf20a03bb
    21d4:	087a0887 	j	1e8221c <__memory_size+0x1e62a1c>
    21d8:	8583c03d 	lh	v1,-16323(t4)
    21dc:	087a0887 	j	1e8221c <__memory_size+0x1e62a1c>
    21e0:	bc76087c 	cache	0x16,2172(v1)
    21e4:	4bbcad08 	c2	0x1bcad08
    21e8:	74083a03 	jalx	20e80c <__memory_size+0x1ef00c>
    21ec:	00847608 	0x847608
    21f0:	06010402 	bgez	s0,31fc <__isr_vec_space+0x31dc>
    21f4:	440806ba 	0x440806ba
    21f8:	74080903 	jalx	20240c <__memory_size+0x1e2c0c>
    21fc:	08f63f08 	j	3d8fc20 <__memory_size+0x3d70420>
    2200:	4b4ff87b 	c2	0x14ff87b
    2204:	ae08b408 	sw	t0,-19448(s0)
    2208:	04020084 	bltzl	zero,241c <__isr_vec_space+0x23fc>
    220c:	06ba0601 	0x6ba0601
    2210:	76084308 	jalx	8210c20 <__memory_size+0x81f1420>
    2214:	08f63d08 	j	3d8f420 <__memory_size+0x3d6fc20>
    2218:	4408bcb1 	0x4408bcb1
    221c:	0824034b 	j	900d2c <__memory_size+0x8e152c>
    2220:	007708ac 	0x7708ac
    2224:	06010402 	bgez	s0,3230 <__isr_vec_space+0x3210>
    2228:	3d0806ba 	0x3d0806ba
    222c:	01040200 	0x1040200
    2230:	063c0806 	0x63c0806
    2234:	76083e08 	jalx	820f820 <__memory_size+0x81f0020>
    2238:	ba0903bc 	swr	t1,956(s0)
    223c:	087a084b 	j	1e8212c <__memory_size+0x1e6292c>
    2240:	00844ce5 	0x844ce5
    2244:	06010402 	bgez	s0,3250 <__isr_vec_space+0x3230>
    2248:	3d0806ba 	0x3d0806ba
    224c:	02040200 	0x2040200
    2250:	0200ba06 	0x200ba06
    2254:	00f20304 	0xf20304
    2258:	ba040402 	swr	a0,1026(s0)
    225c:	06040200 	0x6040200
    2260:	0402004a 	bltzl	zero,238c <__isr_vec_space+0x236c>
    2264:	08068207 	j	1a081c <__memory_size+0x18101c>
    2268:	0402003d 	bltzl	zero,2360 <__isr_vec_space+0x2340>
    226c:	00f20602 	0xf20602
    2270:	08030402 	j	c1008 <__memory_size+0xa1808>
    2274:	0402003c 	bltzl	zero,2368 <__isr_vec_space+0x2348>
    2278:	0200ba04 	0x200ba04
    227c:	004a0604 	0x4a0604
    2280:	82070402 	lb	a3,1026(s0)
    2284:	003f0806 	srlv	at,ra,at
    2288:	06020402 	bltzl	s0,3294 <__isr_vec_space+0x3274>
    228c:	040200f2 	bltzl	zero,2658 <__isr_vec_space+0x2638>
    2290:	0200ba03 	0x200ba03
    2294:	00ba0404 	0xba0404
    2298:	4a060402 	c2	0x60402
    229c:	07040200 	0x7040200
    22a0:	0a030682 	j	80c1a08 <__memory_size+0x80a2208>
    22a4:	00883c08 	0x883c08
    22a8:	06010402 	bgez	s0,32b4 <__isr_vec_space+0x3294>
    22ac:	f506ac08 	sdc1	$f6,-21496(t0)
    22b0:	08f47808 	j	3d1e020 <__memory_size+0x3cfe820>
    22b4:	020b0379 	0x20b0379
    22b8:	08f40130 	j	3d004c0 <__memory_size+0x3ce0cc0>
    22bc:	193002b2 	0x193002b2
    22c0:	022a03c0 	0x22a03c0
    22c4:	be830128 	cache	0x3,296(s4)
    22c8:	bebc87be 	cache	0x1c,-30786(s5)
    22cc:	820903f3 	lb	t1,1011(s0)
    22d0:	02008387 	0x2008387
    22d4:	08060104 	j	180410 <__memory_size+0x160c10>
    22d8:	040200e4 	bltzl	zero,266c <__isr_vec_space+0x264c>
    22dc:	02008203 	0x2008203
    22e0:	74080404 	jalx	201010 <__memory_size+0x1e1810>
    22e4:	06040200 	0x6040200
    22e8:	04020082 	bltzl	zero,24f4 <__isr_vec_space+0x24d4>
    22ec:	08850606 	j	2141818 <__memory_size+0x2122018>
    22f0:	083f08e6 	j	fc2398 <__memory_size+0xfa2b98>
    22f4:	02f4c1b3 	tltu	s7,s4,0x306
    22f8:	f8bb1830 	sdc2	$27,6192(a1)
    22fc:	020085bb 	0x20085bb
    2300:	00bc0204 	0xbc0204
    2304:	83030402 	lb	v1,1026(t8)
    2308:	e7087808 	swc1	$f8,30728(t8)
    230c:	04020084 	bltzl	zero,2520 <__isr_vec_space+0x2500>
    2310:	06ba0601 	0x6ba0601
    2314:	02003d08 	0x2003d08
    2318:	ba060204 	swr	a2,516(s0)
    231c:	03040200 	0x3040200
    2320:	040200f2 	bltzl	zero,26ec <__isr_vec_space+0x26cc>
    2324:	0200ba04 	0x200ba04
    2328:	004a0604 	0x4a0604
    232c:	82070402 	lb	a3,1026(s0)
    2330:	003d0806 	srlv	at,sp,at
    2334:	06020402 	bltzl	s0,3340 <__isr_vec_space+0x3320>
    2338:	040200f2 	bltzl	zero,2704 <__isr_vec_space+0x26e4>
    233c:	003c0803 	0x3c0803
    2340:	ba040402 	swr	a0,1026(s0)
    2344:	06040200 	0x6040200
    2348:	0402004a 	bltzl	zero,2474 <__isr_vec_space+0x2454>
    234c:	03068207 	0x3068207
    2350:	bc3c0817 	cache	0x1c,2071(at)
    2354:	01040200 	0x1040200
    2358:	06ac0806 	teqi	s5,2054
    235c:	ba0903f4 	swr	t1,1012(s0)
    2360:	f4f64008 	sdc1	$f22,16392(a3)
    2364:	03bc7908 	0x3bc7908
    2368:	f43c080e 	sdc1	$f28,2062(at)
    236c:	03bcb008 	0x3bcb008
    2370:	083c0833 	j	f020cc <__memory_size+0xee28cc>
    2374:	7f990377 	0x7f990377
    2378:	00ec0382 	0xec0382
    237c:	4bbc4d82 	c2	0x1bc4d82
    2380:	77087808 	jalx	c21e020 <__memory_size+0xc1fe820>
    2384:	0402008a 	bltzl	zero,25b0 <__isr_vec_space+0x2590>
    2388:	06ba0601 	0x6ba0601
    238c:	02004008 	0x2004008
    2390:	f2060104 	0xf2060104
    2394:	00410806 	srlv	at,at,v0
    2398:	06020402 	bltzl	s0,33a4 <__isr_vec_space+0x3384>
    239c:	040200f2 	bltzl	zero,2768 <__isr_vec_space+0x2748>
    23a0:	0200f203 	0x200f203
    23a4:	00ba0404 	0xba0404
    23a8:	4a060402 	c2	0x60402
    23ac:	07040200 	0x7040200
    23b0:	12030682 	beq	s0,v1,3dbc <__isr_vec_space+0x3d9c>
    23b4:	bfbc3c08 	cache	0x1c,15368(sp)
    23b8:	0a037608 	j	80dd820 <__memory_size+0x80be020>
    23bc:	f4f6f6ba 	sdc1	$f22,-2374(a3)
    23c0:	03bc7908 	0x3bc7908
    23c4:	f43c080e 	sdc1	$f28,2062(at)
    23c8:	03bcb008 	0x3bcb008
    23cc:	083c0833 	j	f020cc <__memory_size+0xee28cc>
    23d0:	bc4df777 	cache	0xd,-2185(v0)
    23d4:	0878084b 	j	1e0212c <__memory_size+0x1de292c>
    23d8:	00844de5 	0x844de5
    23dc:	06010402 	bgez	s0,33e8 <__isr_vec_space+0x33c8>
    23e0:	3d0806ba 	0x3d0806ba
    23e4:	02040200 	0x2040200
    23e8:	0200ba06 	0x200ba06
    23ec:	00f20304 	0xf20304
    23f0:	ba040402 	swr	a0,1026(s0)
    23f4:	06040200 	0x6040200
    23f8:	0402004a 	bltzl	zero,2524 <__isr_vec_space+0x2504>
    23fc:	08068207 	j	1a081c <__memory_size+0x18101c>
    2400:	0402003f 	bltzl	zero,2500 <__isr_vec_space+0x24e0>
    2404:	00f20602 	0xf20602
    2408:	ba030402 	swr	v1,1026(s0)
    240c:	04040200 	0x4040200
    2410:	040200ba 	bltzl	zero,26fc <__isr_vec_space+0x26dc>
    2414:	02004a06 	0x2004a06
    2418:	06820704 	bltzl	s4,402c <__isr_vec_space+0x400c>
    241c:	3c080a03 	lui	t0,0xa03
    2420:	bcbebe84 	cache	0x1e,-16764(a1)
    2424:	f6f6bff4 	sdc1	$f22,-16396(s7)
    2428:	3c080903 	lui	t0,0x903
    242c:	03ae08f4 	teq	sp,t6,0x23
    2430:	01300212 	0x1300212
    2434:	af08f4be 	sw	t0,-2882(t8)
    2438:	28020d03 	slti	v0,zero,3331
    243c:	bebe8301 	cache	0x1e,-31999(s5)
    2440:	f3bebc84 	0xf3bebc84
    2444:	87820903 	lh	v0,2307(gp)
    2448:	04020083 	bltzl	zero,2658 <__isr_vec_space+0x2638>
    244c:	e4080601 	swc1	$f8,1537(zero)
    2450:	03040200 	0x3040200
    2454:	04020082 	bltzl	zero,2660 <__isr_vec_space+0x2640>
    2458:	00740804 	sllv	at,s4,v1
    245c:	82060402 	lb	a2,1026(s0)
    2460:	06040200 	0x6040200
    2464:	e6088506 	swc1	$f8,-31482(s0)
    2468:	84f44208 	lh	s4,16904(a3)
    246c:	09033e08 	j	40cf820 <__memory_size+0x40b0020>
    2470:	bbad0882 	swr	t5,2178(sp)
    2474:	020a03f4 	teq	s0,t2,0xf
    2478:	f7bb0130 	sdc1	$f27,304(sp)
    247c:	3f0884bb 	0x3f0884bb
    2480:	03040200 	0x3040200
    2484:	040200c1 	bltzl	zero,278c <__isr_vec_space+0x276c>
    2488:	78088304 	0x78088304
    248c:	0084af08 	0x84af08
    2490:	06010402 	bgez	s0,349c <__isr_vec_space+0x347c>
    2494:	3d0806ba 	0x3d0806ba
    2498:	02040200 	0x2040200
    249c:	0200ba06 	0x200ba06
    24a0:	00f20304 	0xf20304
    24a4:	ba040402 	swr	a0,1026(s0)
    24a8:	06040200 	0x6040200
    24ac:	0402004a 	bltzl	zero,25d8 <__isr_vec_space+0x25b8>
    24b0:	03068207 	0x3068207
    24b4:	bc3c0812 	cache	0x1c,2066(at)
    24b8:	f3bebcbd 	0xf3bebcbd
    24bc:	08f4f4f8 	j	3d3d3e0 <__memory_size+0x3d1dbe0>
    24c0:	1503bcb0 	bne	t0,v1,ffff1784 <__flash_start+0x403f1784>
    24c4:	77083c08 	jalx	c20f020 <__memory_size+0xc1ef820>
    24c8:	4bbc4ef6 	c2	0x1bc4ef6
    24cc:	78087808 	0x78087808
    24d0:	04020084 	bltzl	zero,26e4 <__isr_vec_space+0x26c4>
    24d4:	06ba0601 	0x6ba0601
    24d8:	02003d08 	0x2003d08
    24dc:	ba060204 	swr	a2,516(s0)
    24e0:	03040200 	0x3040200
    24e4:	040200f2 	bltzl	zero,28b0 <__isr_vec_space+0x2890>
    24e8:	0200ba04 	0x200ba04
    24ec:	004a0604 	0x4a0604
    24f0:	82070402 	lb	a3,1026(s0)
    24f4:	003d0806 	srlv	at,sp,at
    24f8:	06010402 	bgez	s0,3504 <__isr_vec_space+0x34e4>
    24fc:	120306f2 	beq	s0,v1,40c8 <__isr_vec_space+0x40a8>
    2500:	f8bd3c08 	sdc2	$29,15368(a1)
    2504:	f6bcf3bb 	sdc1	$f28,-3141(s5)
    2508:	084bbc4e 	j	12ef138 <__memory_size+0x12cf938>
    250c:	003f0878 	0x3f0878
    2510:	06010402 	bgez	s0,351c <__isr_vec_space+0x34fc>
    2514:	3e0806ba 	0x3e0806ba
    2518:	4b84bc84 	c2	0x184bc84
    251c:	40087808 	0x40087808
    2520:	04020083 	bltzl	zero,2730 <__isr_vec_space+0x2710>
    2524:	06ba0601 	0x6ba0601
    2528:	08843e08 	j	210f820 <__memory_size+0x20f0020>
    252c:	084b8476 	j	12e11d8 <__memory_size+0x12c19d8>
    2530:	003f0878 	0x3f0878
    2534:	06010402 	bgez	s0,3540 <__isr_vec_space+0x3520>
    2538:	3e0806ba 	0x3e0806ba
    253c:	78084bbc 	0x78084bbc
    2540:	00843d08 	0x843d08
    2544:	06010402 	bgez	s0,3550 <__isr_vec_space+0x3530>
    2548:	0d0306ba 	jal	40c1ae8 <__memory_size+0x40a22e8>
    254c:	16033c08 	bne	s0,v1,11570 <__isr_vec_space+0x11550>
    2550:	082203ba 	j	880ee8 <__memory_size+0x8616e8>
    2554:	4fad0874 	c3	0x1ad0874
    2558:	08f5f6bc 	j	3d7daf0 <__memory_size+0x3d5e2f0>
    255c:	f2090375 	0xf2090375
    2560:	132402bc 	beq	t9,a0,3054 <__isr_vec_space+0x3034>
    2564:	ae08ad08 	sw	t0,-21240(s0)
    2568:	74080903 	jalx	20240c <__memory_size+0x1e2c0c>
    256c:	08132402 	j	4c9008 <__memory_size+0x4a9808>
    2570:	08ae08e5 	j	2b82394 <__memory_size+0x2b62b94>
    2574:	03c0f4eb 	0x3c0f4eb
    2578:	4bf4ba0d 	c2	0x1f4ba0d
    257c:	75087808 	jalx	421e020 <__memory_size+0x41fe820>
    2580:	08ad08f4 	j	2b423d0 <__memory_size+0x2b22bd0>
    2584:	2402f8ae 	li	v0,-1874
    2588:	08780814 	j	1e02050 <__memory_size+0x1de2850>
    258c:	88bd8443 	lwl	sp,-31677(a1)
    2590:	037908f4 	teq	k1,t9,0x23
    2594:	08f4f20c 	j	3d3c830 <__memory_size+0x3d1d030>
    2598:	f20903b0 	0xf20903b0
    259c:	03821c03 	0x3821c03
    25a0:	03f27fbc 	0x3f27fbc
    25a4:	bcba00c7 	cache	0x1a,199(a1)
    25a8:	84bc8485 	lh	gp,-31611(a1)
    25ac:	89ae08f4 	lwl	t6,2292(t5)
    25b0:	6f037808 	0x6f037808
    25b4:	ba150382 	swr	s5,898(s0)
    25b8:	780883bc 	0x780883bc
    25bc:	f4843f08 	sdc1	$f4,16136(a0)
    25c0:	4b844df6 	c2	0x1844df6
    25c4:	3f087808 	0x3f087808
    25c8:	01040200 	0x1040200
    25cc:	0806ba06 	j	1ae818 <__memory_size+0x18f018>
    25d0:	4df6f43d 	0x4df6f43d
    25d4:	0878084b 	j	1e0212c <__memory_size+0x1de292c>
    25d8:	7608843f 	jalx	82210fc <__memory_size+0x82018fc>
    25dc:	4b844df6 	c2	0x1844df6
    25e0:	3f087808 	0x3f087808
    25e4:	01040200 	0x1040200
    25e8:	0806ba06 	j	1ae818 <__memory_size+0x18f018>
    25ec:	f676083d 	sdc1	$f22,2109(s3)
    25f0:	f2034b4d 	0xf2034b4d
    25f4:	08740802 	j	1d02008 <__memory_size+0x1ce2808>
    25f8:	821003ad 	lb	s0,941(s0)
    25fc:	01040200 	0x1040200
    2600:	00e40806 	srlv	at,a0,a3
    2604:	82030402 	lb	v1,1026(s0)
    2608:	04040200 	0x4040200
    260c:	02007408 	0x2007408
    2610:	00820604 	0x820604
    2614:	06060402 	0x6060402
    2618:	b208f583 	0xb208f583
    261c:	087c08bb 	j	1f022ec <__memory_size+0x1ee2aec>
    2620:	4b76083f 	c2	0x176083f
    2624:	77087c08 	jalx	c21f020 <__memory_size+0xc1ff820>
    2628:	f6bcf584 	sdc1	$f28,-2684(s5)
    262c:	8485bbbe 	lh	a1,-17474(a0)
    2630:	087c084b 	j	1f0212c <__memory_size+0x1ee292c>
    2634:	3f088476 	0x3f088476
    2638:	85bef7bc 	lh	s8,-2116(t5)
    263c:	4b858384 	c2	0x1858384
    2640:	75087c08 	jalx	421f020 <__memory_size+0x41ff820>
    2644:	4bad084c 	c2	0x1ad084c
    2648:	3d087c08 	0x3d087c08
    264c:	4b75084c 	c2	0x175084c
    2650:	75087c08 	jalx	421f020 <__memory_size+0x41ff820>
    2654:	02004ebb 	0x2004ebb
    2658:	ba060104 	swr	a2,260(s0)
    265c:	003d0806 	srlv	at,sp,at
    2660:	06010402 	bgez	s0,366c <__isr_vec_space+0x364c>
    2664:	0806ac08 	j	1ab020 <__memory_size+0x18b820>
    2668:	bfae083e 	cache	0xe,2110(sp)
    266c:	f4f47608 	sdc1	$f20,30216(a3)
    2670:	0e03af08 	jal	80ebc20 <__memory_size+0x80cc420>
    2674:	4bec08f2 	c2	0x1ec08f2
    2678:	01001802 	0x1001802
    267c:	00019001 	movt	s2,zero,$fcc0
    2680:	31000200 	andi	zero,t0,0x200
    2684:	01000001 	movf	zero,t0,$fcc0
    2688:	0d0efb01 	jal	43bec04 <__memory_size+0x439f404>
    268c:	01010100 	0x1010100
    2690:	00000001 	movf	zero,zero,$fcc0
    2694:	01000001 	movf	zero,t0,$fcc0
    2698:	2e2f2e2e 	sltiu	t7,s1,11822
    269c:	6f532f2e 	0x6f532f2e
    26a0:	65637275 	0x65637275
    26a4:	706f2f00 	0x706f2f00
    26a8:	6d692f74 	0x6d692f74
    26ac:	63657467 	0x63657467
    26b0:	6f6f542f 	0x6f6f542f
    26b4:	6168636c 	0x6168636c
    26b8:	2f736e69 	sltiu	s3,k1,28265
    26bc:	7370696d 	s16sdi	xr5,k1,52,
    26c0:	69746d2d 	0x69746d2d
    26c4:	666c652d 	0x666c652d
    26c8:	3130322f 	andi	s0,t1,0x322f
    26cc:	35302e36 	ori	s0,t1,0x2e36
    26d0:	2f33302d 	sltiu	s3,t9,12333
    26d4:	7370696d 	s16sdi	xr5,k1,52,
    26d8:	69746d2d 	0x69746d2d
    26dc:	666c652d 	0x666c652d
    26e0:	636e692f 	0x636e692f
    26e4:	6564756c 	0x6564756c
    26e8:	63616d2f 	0x63616d2f
    26ec:	656e6968 	0x656e6968
    26f0:	706f2f00 	0x706f2f00
    26f4:	6d692f74 	0x6d692f74
    26f8:	63657467 	0x63657467
    26fc:	6f6f542f 	0x6f6f542f
    2700:	6168636c 	0x6168636c
    2704:	2f736e69 	sltiu	s3,k1,28265
    2708:	7370696d 	s16sdi	xr5,k1,52,
    270c:	69746d2d 	0x69746d2d
    2710:	666c652d 	0x666c652d
    2714:	3130322f 	andi	s0,t1,0x322f
    2718:	35302e36 	ori	s0,t1,0x2e36
    271c:	2f33302d 	sltiu	s3,t9,12333
    2720:	7370696d 	s16sdi	xr5,k1,52,
    2724:	69746d2d 	0x69746d2d
    2728:	666c652d 	0x666c652d
    272c:	636e692f 	0x636e692f
    2730:	6564756c 	0x6564756c
    2734:	2f2e2e00 	sltiu	t6,t9,11776
    2738:	532f2e2e 	beql	t9,t7,dff4 <__isr_vec_space+0xdfd4>
    273c:	6372756f 	0x6372756f
    2740:	6f702f65 	0x6f702f65
    2744:	62617472 	0x62617472
    2748:	432f656c 	c0	0x12f656c
    274c:	5365646f 	beql	k1,a1,1b90c <__isr_vec_space+0x1b8ec>
    2750:	65706163 	0x65706163
    2754:	50494d2f 	beql	v0,t1,15c14 <__isr_vec_space+0x15bf4>
    2758:	67704653 	0x67704653
    275c:	2e2e0061 	sltiu	t6,s1,97
    2760:	2f2e2e2f 	sltiu	t6,t9,11823
    2764:	72756f53 	udi3	s3,s5,t5,0x1d
    2768:	692f6563 	0x692f6563
    276c:	756c636e 	jalx	5b18db8 <__memory_size+0x5af95b8>
    2770:	00006564 	0x6564
    2774:	7473696c 	jalx	1cda5b0 <__memory_size+0x1cbadb0>
    2778:	0100632e 	0x100632e
    277c:	645f0000 	0x645f0000
    2780:	75616665 	jalx	5859994 <__memory_size+0x583a194>
    2784:	745f746c 	jalx	17dd1b0 <__memory_size+0x17bd9b0>
    2788:	73657079 	0x73657079
    278c:	0200682e 	0x200682e
    2790:	74730000 	jalx	1cc0000 <__memory_size+0x1ca0800>
    2794:	746e6964 	jalx	1b9a590 <__memory_size+0x1b7ad90>
    2798:	0300682e 	0x300682e
    279c:	6f700000 	0x6f700000
    27a0:	616d7472 	0x616d7472
    27a4:	2e6f7263 	sltiu	t7,s3,29283
    27a8:	00040068 	0x40068
    27ac:	73696c00 	0x73696c00
    27b0:	00682e74 	teq	v1,t0,0xb9
    27b4:	00000005 	lsa	zero,zero,zero,0x1
    27b8:	bc020500 	cache	0x2,1280(zero)
    27bc:	038000a3 	0x38000a3
    27c0:	f60100cf 	sdc1	$f1,207(s0)
    27c4:	f4f3bef6 	sdc1	$f19,-16650(a3)
    27c8:	f4400888 	sdc1	$f0,2184(v0)
    27cc:	08400888 	j	1002220 <__memory_size+0xfe2a20>
    27d0:	ba0b033d 	swr	t3,829(s0)
    27d4:	bdf3f7bb 	cache	0x13,-2117(t7)
    27d8:	083d08bc 	j	f422f0 <__memory_size+0xf22af0>
    27dc:	033e0840 	0x33e0840
    27e0:	03f4ba10 	0x3f4ba10
    27e4:	003c081a 	0x3c081a
    27e8:	06030402 	bgezl	s0,37f4 <__isr_vec_space+0x37d4>
    27ec:	02003c08 	0x2003c08
    27f0:	06ba0104 	0x6ba0104
    27f4:	f3f3b308 	0xf3f3b308
    27f8:	08bcbebb 	j	2f2faec <__memory_size+0x2f102ec>
    27fc:	f540083d 	sdc1	$f0,2109(t2)
    2800:	083d08bc 	j	f422f0 <__memory_size+0xf22af0>
    2804:	f93e0842 	sdc2	$30,2114(t1)
    2808:	833e0883 	lb	s8,2179(t9)
    280c:	01001402 	0x1001402
    2810:	00023a01 	0x23a01
    2814:	8a000200 	lwl	zero,512(s0)
    2818:	01000001 	movf	zero,t0,$fcc0
    281c:	0d0efb01 	jal	43bec04 <__memory_size+0x439f404>
    2820:	01010100 	0x1010100
    2824:	00000001 	movf	zero,zero,$fcc0
    2828:	01000001 	movf	zero,t0,$fcc0
    282c:	2e2f2e2e 	sltiu	t7,s1,11822
    2830:	6f532f2e 	0x6f532f2e
    2834:	65637275 	0x65637275
    2838:	726f702f 	0x726f702f
    283c:	6c626174 	0x6c626174
    2840:	6f432f65 	0x6f432f65
    2844:	63536564 	0x63536564
    2848:	2f657061 	sltiu	a1,k1,28769
    284c:	5350494d 	beql	k0,s0,14d84 <__isr_vec_space+0x14d64>
    2850:	61677046 	0x61677046
    2854:	706f2f00 	0x706f2f00
    2858:	6d692f74 	0x6d692f74
    285c:	63657467 	0x63657467
    2860:	6f6f542f 	0x6f6f542f
    2864:	6168636c 	0x6168636c
    2868:	2f736e69 	sltiu	s3,k1,28265
    286c:	7370696d 	s16sdi	xr5,k1,52,
    2870:	69746d2d 	0x69746d2d
    2874:	666c652d 	0x666c652d
    2878:	3130322f 	andi	s0,t1,0x322f
    287c:	35302e36 	ori	s0,t1,0x2e36
    2880:	2f33302d 	sltiu	s3,t9,12333
    2884:	7370696d 	s16sdi	xr5,k1,52,
    2888:	69746d2d 	0x69746d2d
    288c:	666c652d 	0x666c652d
    2890:	636e692f 	0x636e692f
    2894:	6564756c 	0x6564756c
    2898:	63616d2f 	0x63616d2f
    289c:	656e6968 	0x656e6968
    28a0:	706f2f00 	0x706f2f00
    28a4:	6d692f74 	0x6d692f74
    28a8:	63657467 	0x63657467
    28ac:	6f6f542f 	0x6f6f542f
    28b0:	6168636c 	0x6168636c
    28b4:	2f736e69 	sltiu	s3,k1,28265
    28b8:	7370696d 	s16sdi	xr5,k1,52,
    28bc:	69746d2d 	0x69746d2d
    28c0:	666c652d 	0x666c652d
    28c4:	3130322f 	andi	s0,t1,0x322f
    28c8:	35302e36 	ori	s0,t1,0x2e36
    28cc:	2f33302d 	sltiu	s3,t9,12333
    28d0:	7370696d 	s16sdi	xr5,k1,52,
    28d4:	69746d2d 	0x69746d2d
    28d8:	666c652d 	0x666c652d
    28dc:	636e692f 	0x636e692f
    28e0:	6564756c 	0x6564756c
    28e4:	70696d2f 	0x70696d2f
    28e8:	6f2f0073 	0x6f2f0073
    28ec:	692f7470 	0x692f7470
    28f0:	6574676d 	0x6574676d
    28f4:	6f542f63 	0x6f542f63
    28f8:	68636c6f 	0x68636c6f
    28fc:	736e6961 	0x736e6961
    2900:	70696d2f 	0x70696d2f
    2904:	746d2d73 	jalx	1b4b5cc <__memory_size+0x1b2bdcc>
    2908:	6c652d69 	0x6c652d69
    290c:	30322f66 	andi	s2,at,0x2f66
    2910:	302e3631 	andi	t6,at,0x3631
    2914:	33302d35 	andi	s0,t9,0x2d35
    2918:	70696d2f 	0x70696d2f
    291c:	746d2d73 	jalx	1b4b5cc <__memory_size+0x1b2bdcc>
    2920:	6c652d69 	0x6c652d69
    2924:	6e692f66 	0x6e692f66
    2928:	64756c63 	0x64756c63
    292c:	2e2e0065 	sltiu	t6,s1,101
    2930:	2f2e2e2f 	sltiu	t6,t9,11823
    2934:	72756f53 	udi3	s3,s5,t5,0x1d
    2938:	692f6563 	0x692f6563
    293c:	756c636e 	jalx	5b18db8 <__memory_size+0x5af95b8>
    2940:	00006564 	0x6564
    2944:	74726f70 	jalx	1c9bdc0 <__memory_size+0x1c7c5c0>
    2948:	0100632e 	0x100632e
    294c:	645f0000 	0x645f0000
    2950:	75616665 	jalx	5859994 <__memory_size+0x583a194>
    2954:	745f746c 	jalx	17dd1b0 <__memory_size+0x17bd9b0>
    2958:	73657079 	0x73657079
    295c:	0200682e 	0x200682e
    2960:	336d0000 	andi	t5,k1,0x0
    2964:	2e306332 	sltiu	s0,s1,25394
    2968:	00030068 	0x30068
    296c:	64747300 	0x64747300
    2970:	2e746e69 	sltiu	s4,s3,28265
    2974:	00040068 	0x40068
    2978:	6f727000 	0x6f727000
    297c:	6665646a 	0x6665646a
    2980:	00682e73 	tltu	v1,t0,0xb9
    2984:	70000005 	msubu	zero,zero
    2988:	6d74726f 	0x6d74726f
    298c:	6f726361 	0x6f726361
    2990:	0100682e 	0x100682e
    2994:	623c0000 	0x623c0000
    2998:	746c6975 	jalx	1b1a5d4 <__memory_size+0x1afadd4>
    299c:	3e6e692d 	0x3e6e692d
    29a0:	00000000 	nop
    29a4:	02050000 	0x2050000
    29a8:	8000a668 	lb	zero,-22936(zero)
    29ac:	0101a003 	0x101a003
    29b0:	08bb83f3 	j	2ee0fcc <__memory_size+0x2ec17cc>
    29b4:	f5770875 	sdc1	$f23,2165(t3)
    29b8:	af08f5bc 	sw	t0,-2628(t8)
    29bc:	040200bd 	bltzl	zero,2cb4 <__isr_vec_space+0x2c94>
    29c0:	24020601 	li	v0,1537
    29c4:	3f080612 	0x3f080612
    29c8:	f3770883 	0xf3770883
    29cc:	f53f08bb 	sdc1	$f31,2235(t1)
    29d0:	01040200 	0x1040200
    29d4:	0806f206 	j	1bc818 <__memory_size+0x19d018>
    29d8:	f37a083d 	0xf37a083d
    29dc:	f97b0883 	sdc2	$27,2179(t3)
    29e0:	74080b03 	jalx	202c0c <__memory_size+0x1e340c>
    29e4:	bb878583 	swr	a3,-31357(gp)
    29e8:	084c8488 	j	1321220 <__memory_size+0x1301a20>
    29ec:	084cf57a 	j	133d5e8 <__memory_size+0x131dde8>
    29f0:	4b3e0843 	c2	0x13e0843
    29f4:	af087708 	sw	t0,30472(t8)
    29f8:	bcf3bcbb 	cache	0x13,-17221(a3)
    29fc:	3d08bcf3 	0x3d08bcf3
    2a00:	bbbcbbbc 	swr	gp,-17476(sp)
    2a04:	f3bc83bc 	0xf3bc83bc
    2a08:	84bcbbbc 	lh	gp,-17476(a1)
    2a0c:	f977084c 	sdc2	$23,2124(t3)
    2a10:	01040200 	0x1040200
    2a14:	0806ba06 	j	1ae818 <__memory_size+0x18f018>
    2a18:	0402003d 	bltzl	zero,2b10 <__isr_vec_space+0x2af0>
    2a1c:	30020601 	andi	v0,zero,0x601
    2a20:	04020012 	bltzl	zero,2a6c <__isr_vec_space+0x2a4c>
    2a24:	ad080601 	sw	t0,1537(t0)
    2a28:	003d0887 	0x3d0887
    2a2c:	bb010402 	swr	at,1026(t8)
    2a30:	003d0888 	0x3d0888
    2a34:	bb010402 	swr	at,1026(t8)
    2a38:	4b87bd87 	c2	0x187bd87
    2a3c:	87f43f08 	lh	s4,16136(ra)
    2a40:	f3f53f08 	0xf3f53f08
    2a44:	f57708bb 	sdc1	$f23,2235(t3)
    2a48:	1802bbf3 	0x1802bbf3
    2a4c:	1e010100 	0x1e010100
    2a50:	02000002 	0x2000002
    2a54:	00018300 	sll	s0,at,0xc
    2a58:	fb010100 	sdc2	$1,256(t8)
    2a5c:	01000d0e 	0x1000d0e
    2a60:	00010101 	0x10101
    2a64:	00010000 	sll	zero,at,0x0
    2a68:	2e2e0100 	sltiu	t6,s1,256
    2a6c:	2f2e2e2f 	sltiu	t6,t9,11823
    2a70:	72756f53 	udi3	s3,s5,t5,0x1d
    2a74:	702f6563 	s8std	xr5,at,-39,ptn3
    2a78:	6174726f 	0x6174726f
    2a7c:	2f656c62 	sltiu	a1,k1,27746
    2a80:	4d6d654d 	0x4d6d654d
    2a84:	00676e61 	0x676e61
    2a88:	74706f2f 	jalx	1c1bcbc <__memory_size+0x1bfc4bc>
    2a8c:	676d692f 	0x676d692f
    2a90:	2f636574 	sltiu	v1,k1,25972
    2a94:	6c6f6f54 	0x6c6f6f54
    2a98:	69616863 	0x69616863
    2a9c:	6d2f736e 	0x6d2f736e
    2aa0:	2d737069 	sltiu	s3,t3,28777
    2aa4:	2d69746d 	sltiu	t1,t3,29805
    2aa8:	2f666c65 	sltiu	a2,k1,27749
    2aac:	36313032 	ori	s1,s1,0x3032
    2ab0:	2d35302e 	sltiu	s5,t1,12334
    2ab4:	6c2f3330 	0x6c2f3330
    2ab8:	672f6269 	0x672f6269
    2abc:	6d2f6363 	0x6d2f6363
    2ac0:	2d737069 	sltiu	s3,t3,28777
    2ac4:	2d69746d 	sltiu	t1,t3,29805
    2ac8:	2f666c65 	sltiu	a2,k1,27749
    2acc:	2e392e34 	sltiu	t9,s1,11828
    2ad0:	6e692f32 	0x6e692f32
    2ad4:	64756c63 	0x64756c63
    2ad8:	6f2f0065 	0x6f2f0065
    2adc:	692f7470 	0x692f7470
    2ae0:	6574676d 	0x6574676d
    2ae4:	6f542f63 	0x6f542f63
    2ae8:	68636c6f 	0x68636c6f
    2aec:	736e6961 	0x736e6961
    2af0:	70696d2f 	0x70696d2f
    2af4:	746d2d73 	jalx	1b4b5cc <__memory_size+0x1b2bdcc>
    2af8:	6c652d69 	0x6c652d69
    2afc:	30322f66 	andi	s2,at,0x2f66
    2b00:	302e3631 	andi	t6,at,0x3631
    2b04:	33302d35 	andi	s0,t9,0x2d35
    2b08:	70696d2f 	0x70696d2f
    2b0c:	746d2d73 	jalx	1b4b5cc <__memory_size+0x1b2bdcc>
    2b10:	6c652d69 	0x6c652d69
    2b14:	6e692f66 	0x6e692f66
    2b18:	64756c63 	0x64756c63
    2b1c:	616d2f65 	0x616d2f65
    2b20:	6e696863 	0x6e696863
    2b24:	6f2f0065 	0x6f2f0065
    2b28:	692f7470 	0x692f7470
    2b2c:	6574676d 	0x6574676d
    2b30:	6f542f63 	0x6f542f63
    2b34:	68636c6f 	0x68636c6f
    2b38:	736e6961 	0x736e6961
    2b3c:	70696d2f 	0x70696d2f
    2b40:	746d2d73 	jalx	1b4b5cc <__memory_size+0x1b2bdcc>
    2b44:	6c652d69 	0x6c652d69
    2b48:	30322f66 	andi	s2,at,0x2f66
    2b4c:	302e3631 	andi	t6,at,0x3631
    2b50:	33302d35 	andi	s0,t9,0x2d35
    2b54:	70696d2f 	0x70696d2f
    2b58:	746d2d73 	jalx	1b4b5cc <__memory_size+0x1b2bdcc>
    2b5c:	6c652d69 	0x6c652d69
    2b60:	6e692f66 	0x6e692f66
    2b64:	64756c63 	0x64756c63
    2b68:	2e2e0065 	sltiu	t6,s1,101
    2b6c:	2f2e2e2f 	sltiu	t6,t9,11823
    2b70:	72756f53 	udi3	s3,s5,t5,0x1d
    2b74:	702f6563 	s8std	xr5,at,-39,ptn3
    2b78:	6174726f 	0x6174726f
    2b7c:	2f656c62 	sltiu	a1,k1,27746
    2b80:	65646f43 	0x65646f43
    2b84:	70616353 	udi3	v1,at,t4,0xd
    2b88:	494d2f65 	0x494d2f65
    2b8c:	70465350 	s32ldd	xr13,v0,1616
    2b90:	00006167 	0x6167
    2b94:	70616568 	lxhu	t4,v1,at,2
    2b98:	632e325f 	0x632e325f
    2b9c:	00000100 	sll	zero,zero,0x4
    2ba0:	64647473 	0x64647473
    2ba4:	682e6665 	0x682e6665
    2ba8:	00000200 	sll	zero,zero,0x8
    2bac:	6665645f 	0x6665645f
    2bb0:	746c7561 	jalx	1b1d584 <__memory_size+0x1afdd84>
    2bb4:	7079745f 	udi15	v1,t9,t6,0x11
    2bb8:	682e7365 	0x682e7365
    2bbc:	00000300 	sll	zero,zero,0xc
    2bc0:	69647473 	0x69647473
    2bc4:	682e746e 	0x682e746e
    2bc8:	00000400 	sll	zero,zero,0x10
    2bcc:	74726f70 	jalx	1c9bdc0 <__memory_size+0x1c7c5c0>
    2bd0:	7263616d 	s16sdi	xr5,s3,432,ptn0
    2bd4:	00682e6f 	0x682e6f
    2bd8:	00000005 	lsa	zero,zero,zero,0x1
    2bdc:	c0020500 	ll	v0,1280(zero)
    2be0:	038000ab 	0x38000ab
    2be4:	080101a0 	j	40680 <__memory_size+0x20e80>
    2be8:	bc864c3f 	cache	0x6,19519(a0)
    2bec:	08bc8783 	j	2f21e0c <__memory_size+0x2f0260c>
    2bf0:	00f6f53f 	0xf6f53f
    2bf4:	06010402 	bgez	s0,3c00 <__isr_vec_space+0x3be0>
    2bf8:	400806ba 	0x400806ba
    2bfc:	83848383 	lb	a0,-31869(gp)
    2c00:	040200b7 	bltzl	zero,2ee0 <__isr_vec_space+0x2ec0>
    2c04:	74080601 	jalx	201804 <__memory_size+0x1e2004>
    2c08:	08f6f906 	j	3dbe418 <__memory_size+0x3d9ec18>
    2c0c:	2402f540 	li	v0,-2752
    2c10:	7508f617 	jalx	423d85c <__memory_size+0x421e05c>
    2c14:	040200bd 	bltzl	zero,2f0c <__isr_vec_space+0x2eec>
    2c18:	ac080603 	sw	t0,1539(zero)
    2c1c:	01040200 	0x1040200
    2c20:	040200ba 	bltzl	zero,2f0c <__isr_vec_space+0x2eec>
    2c24:	06ac0804 	teqi	s5,2052
    2c28:	4208af08 	c0	0x8af08
    2c2c:	4b87bd86 	c2	0x187bd86
    2c30:	3d087808 	0x3d087808
    2c34:	4008be85 	0x4008be85
    2c38:	02008584 	0x2008584
    2c3c:	08060304 	j	180c10 <__memory_size+0x161410>
    2c40:	040200ac 	bltzl	zero,2ef4 <__isr_vec_space+0x2ed4>
    2c44:	0200ba01 	0x200ba01
    2c48:	ac080404 	sw	t0,1028(zero)
    2c4c:	04040200 	0x4040200
    2c50:	00ad0806 	srlv	at,t5,a1
    2c54:	08040402 	j	101008 <__memory_size+0xe1808>
    2c58:	7808843f 	0x7808843f
    2c5c:	40084bbb 	0x40084bbb
    2c60:	bf4008bc 	cache	0x0,2236(k0)
    2c64:	834d83f6 	lb	t5,-31754(k0)
    2c68:	bbbb834e 	swr	k1,-31922(sp)
    2c6c:	01001402 	0x1001402
    2c70:	0000d701 	0xd701
    2c74:	be000200 	cache	0x0,512(s0)
    2c78:	01000000 	0x1000000
    2c7c:	0d0efb01 	jal	43bec04 <__memory_size+0x439f404>
    2c80:	01010100 	0x1010100
    2c84:	00000001 	movf	zero,zero,$fcc0
    2c88:	01000001 	movf	zero,t0,$fcc0
    2c8c:	7263732f 	0x7263732f
    2c90:	68637461 	0x68637461
    2c94:	66706d2f 	0x66706d2f
    2c98:	626f6a2f 	0x626f6a2f
    2c9c:	34352f73 	ori	s5,at,0x2f73
    2ca0:	2f353933 	sltiu	s5,t9,14643
    2ca4:	39303834 	xori	s0,t1,0x3834
    2ca8:	34322f34 	ori	s2,at,0x2f34
    2cac:	38393130 	xori	t9,at,0x3130
    2cb0:	6168732f 	0x6168732f
    2cb4:	2f646572 	sltiu	a0,k1,25970
    2cb8:	2f636367 	sltiu	v1,k1,25447
    2cbc:	6c77656e 	0x6c77656e
    2cc0:	6c2f6269 	0x6c2f6269
    2cc4:	2f636269 	sltiu	v1,k1,25193
    2cc8:	6c647473 	0x6c647473
    2ccc:	2f006269 	sltiu	zero,t8,25193
    2cd0:	61726373 	0x61726373
    2cd4:	2f686374 	sltiu	t0,k1,25460
    2cd8:	2f66706d 	sltiu	a2,k1,28781
    2cdc:	73626f6a 	s16ldd	xr13,k1,310,ptn0
    2ce0:	3334352f 	andi	s4,t9,0x352f
    2ce4:	342f3539 	ori	t7,at,0x3539
    2ce8:	34393038 	ori	t9,at,0x3038
    2cec:	3034322f 	andi	s4,at,0x322f
    2cf0:	2f383931 	sltiu	t8,t9,14641
    2cf4:	72616873 	d32sar	xr1,xr10,xr5,xr8,9
    2cf8:	672f6465 	0x672f6465
    2cfc:	6e2f6363 	0x6e2f6363
    2d00:	696c7765 	0x696c7765
    2d04:	696c2f62 	0x696c2f62
    2d08:	692f6362 	0x692f6362
    2d0c:	756c636e 	jalx	5b18db8 <__memory_size+0x5af95b8>
    2d10:	00006564 	0x6564
    2d14:	78657461 	ld.h	$w17,202(t6)
    2d18:	632e7469 	0x632e7469
    2d1c:	00000100 	sll	zero,zero,0x4
    2d20:	78657461 	ld.h	$w17,202(t6)
    2d24:	682e7469 	0x682e7469
    2d28:	00000100 	sll	zero,zero,0x4
    2d2c:	6c647473 	0x6c647473
    2d30:	682e6269 	0x682e6269
    2d34:	00000200 	sll	zero,zero,0x8
    2d38:	02050000 	0x2050000
    2d3c:	8000afbc 	lb	zero,-20548(zero)
    2d40:	83013f03 	lb	at,16131(t8)
    2d44:	02834b81 	0x2834b81
    2d48:	0101000c 	syscall	0x40400
    2d4c:	000001a6 	0x1a6
    2d50:	01880002 	0x1880002
    2d54:	01010000 	0x1010000
    2d58:	000d0efb 	0xd0efb
    2d5c:	01010101 	0x1010101
    2d60:	01000000 	0x1000000
    2d64:	2f010000 	sltiu	at,t8,0
    2d68:	61726373 	0x61726373
    2d6c:	2f686374 	sltiu	t0,k1,25460
    2d70:	2f66706d 	sltiu	a2,k1,28781
    2d74:	73626f6a 	s16ldd	xr13,k1,310,ptn0
    2d78:	3334352f 	andi	s4,t9,0x352f
    2d7c:	342f3539 	ori	t7,at,0x3539
    2d80:	34393038 	ori	t9,at,0x3038
    2d84:	3034322f 	andi	s4,at,0x322f
    2d88:	2f383931 	sltiu	t8,t9,14641
    2d8c:	72616873 	d32sar	xr1,xr10,xr5,xr8,9
    2d90:	672f6465 	0x672f6465
    2d94:	6e2f6363 	0x6e2f6363
    2d98:	696c7765 	0x696c7765
    2d9c:	696c2f62 	0x696c2f62
    2da0:	732f6362 	s8ldd	xr13,t9,-40,ptn3
    2da4:	696c6474 	0x696c6474
    2da8:	732f0062 	s8ldd	xr1,t9,-64,ptn3
    2dac:	74617263 	jalx	185c98c <__memory_size+0x183d18c>
    2db0:	6d2f6863 	0x6d2f6863
    2db4:	6a2f6670 	0x6a2f6670
    2db8:	2f73626f 	sltiu	s3,k1,25199
    2dbc:	39333435 	xori	s3,t1,0x3435
    2dc0:	38342f35 	xori	s4,at,0x2f35
    2dc4:	2f343930 	sltiu	s4,t9,14640
    2dc8:	31303432 	andi	s0,t1,0x3432
    2dcc:	732f3839 	0x732f3839
    2dd0:	65726168 	0x65726168
    2dd4:	63672f64 	0x63672f64
    2dd8:	656e2f63 	0x656e2f63
    2ddc:	62696c77 	0x62696c77
    2de0:	62696c2f 	0x62696c2f
    2de4:	6e692f63 	0x6e692f63
    2de8:	64756c63 	0x64756c63
    2dec:	79732f65 	st.h	$w29,742(a1)
    2df0:	732f0073 	d32sar	xr1,xr0,xr12,xr11,12
    2df4:	74617263 	jalx	185c98c <__memory_size+0x183d18c>
    2df8:	6d2f6863 	0x6d2f6863
    2dfc:	6a2f6670 	0x6a2f6670
    2e00:	2f73626f 	sltiu	s3,k1,25199
    2e04:	39333435 	xori	s3,t1,0x3435
    2e08:	38342f35 	xori	s4,at,0x2f35
    2e0c:	2f343930 	sltiu	s4,t9,14640
    2e10:	32303432 	andi	s0,s1,0x3432
    2e14:	772f3236 	jalx	cbcc8d8 <__memory_size+0xcbad0d8>
    2e18:	2f6b726f 	sltiu	t3,k1,29295
    2e1c:	2d6a626f 	sltiu	t2,t3,25199
    2e20:	7370696d 	s16sdi	xr5,k1,52,
    2e24:	69746d2d 	0x69746d2d
    2e28:	666c652d 	0x666c652d
    2e2c:	6363672f 	0x6363672f
    2e30:	6363672f 	0x6363672f
    2e34:	636e692f 	0x636e692f
    2e38:	6564756c 	0x6564756c
    2e3c:	63732f00 	0x63732f00
    2e40:	63746172 	0x63746172
    2e44:	706d2f68 	lxhu	a1,v1,t5,3
    2e48:	6f6a2f66 	0x6f6a2f66
    2e4c:	352f7362 	ori	t7,t1,0x7362
    2e50:	35393334 	ori	t9,t1,0x3334
    2e54:	3038342f 	andi	t8,at,0x342f
    2e58:	322f3439 	andi	t7,s1,0x3439
    2e5c:	39313034 	xori	s1,t1,0x3034
    2e60:	68732f38 	0x68732f38
    2e64:	64657261 	0x64657261
    2e68:	6363672f 	0x6363672f
    2e6c:	77656e2f 	jalx	d95b8bc <__memory_size+0xd93c0bc>
    2e70:	2f62696c 	sltiu	v0,k1,26988
    2e74:	6362696c 	0x6362696c
    2e78:	636e692f 	0x636e692f
    2e7c:	6564756c 	0x6564756c
    2e80:	78650000 	andi.b	$w0,$w0,0x65
    2e84:	632e7469 	0x632e7469
    2e88:	00000100 	sll	zero,zero,0x4
    2e8c:	6b636f6c 	0x6b636f6c
    2e90:	0200682e 	0x200682e
    2e94:	745f0000 	jalx	17c0000 <__memory_size+0x17a0800>
    2e98:	73657079 	0x73657079
    2e9c:	0200682e 	0x200682e
    2ea0:	74730000 	jalx	1cc0000 <__memory_size+0x1ca0800>
    2ea4:	66656464 	0x66656464
    2ea8:	0300682e 	0x300682e
    2eac:	65720000 	0x65720000
    2eb0:	2e746e65 	sltiu	s4,s3,28261
    2eb4:	00020068 	0x20068
    2eb8:	64747300 	0x64747300
    2ebc:	2e62696c 	sltiu	v0,s3,26988
    2ec0:	00040068 	0x40068
    2ec4:	65746100 	0x65746100
    2ec8:	2e746978 	sltiu	s4,s3,27000
    2ecc:	00010068 	0x10068
    2ed0:	696e7500 	0x696e7500
    2ed4:	2e647473 	sltiu	a0,s3,29811
    2ed8:	00020068 	0x20068
    2edc:	05000000 	bltz	t0,2ee0 <__isr_vec_space+0x2ec0>
    2ee0:	00afe402 	0xafe402
    2ee4:	013b0380 	0x13b0380
    2ee8:	4a7a0350 	c2	0x7a0350
    2eec:	3d088488 	0x3d088488
    2ef0:	00080283 	sra	zero,t0,0xa
    2ef4:	01270101 	0x1270101
    2ef8:	00020000 	sll	zero,v0,0x0
    2efc:	00000121 	0x121
    2f00:	0efb0101 	jal	bec0404 <__memory_size+0xbea0c04>
    2f04:	0101000d 	break	0x101
    2f08:	00000101 	0x101
    2f0c:	00000100 	sll	zero,zero,0x4
    2f10:	63732f01 	0x63732f01
    2f14:	63746172 	0x63746172
    2f18:	706d2f68 	lxhu	a1,v1,t5,3
    2f1c:	6f6a2f66 	0x6f6a2f66
    2f20:	352f7362 	ori	t7,t1,0x7362
    2f24:	35393334 	ori	t9,t1,0x3334
    2f28:	3038342f 	andi	t8,at,0x342f
    2f2c:	322f3439 	andi	t7,s1,0x3439
    2f30:	39313034 	xori	s1,t1,0x3034
    2f34:	68732f38 	0x68732f38
    2f38:	64657261 	0x64657261
    2f3c:	6363672f 	0x6363672f
    2f40:	77656e2f 	jalx	d95b8bc <__memory_size+0xd93c0bc>
    2f44:	2f62696c 	sltiu	v0,k1,26988
    2f48:	6362696c 	0x6362696c
    2f4c:	636e692f 	0x636e692f
    2f50:	6564756c 	0x6564756c
    2f54:	7379732f 	0x7379732f
    2f58:	63732f00 	0x63732f00
    2f5c:	63746172 	0x63746172
    2f60:	706d2f68 	lxhu	a1,v1,t5,3
    2f64:	6f6a2f66 	0x6f6a2f66
    2f68:	352f7362 	ori	t7,t1,0x7362
    2f6c:	35393334 	ori	t9,t1,0x3334
    2f70:	3038342f 	andi	t8,at,0x342f
    2f74:	322f3439 	andi	t7,s1,0x3439
    2f78:	36323034 	ori	s2,s1,0x3034
    2f7c:	6f772f32 	0x6f772f32
    2f80:	6f2f6b72 	0x6f2f6b72
    2f84:	6d2d6a62 	0x6d2d6a62
    2f88:	2d737069 	sltiu	s3,t3,28777
    2f8c:	2d69746d 	sltiu	t1,t3,29805
    2f90:	2f666c65 	sltiu	a2,k1,27749
    2f94:	2f636367 	sltiu	v1,k1,25447
    2f98:	2f636367 	sltiu	v1,k1,25447
    2f9c:	6c636e69 	0x6c636e69
    2fa0:	00656475 	0x656475
    2fa4:	7263732f 	0x7263732f
    2fa8:	68637461 	0x68637461
    2fac:	66706d2f 	0x66706d2f
    2fb0:	626f6a2f 	0x626f6a2f
    2fb4:	34352f73 	ori	s5,at,0x2f73
    2fb8:	2f353933 	sltiu	s5,t9,14643
    2fbc:	39303834 	xori	s0,t1,0x3834
    2fc0:	34322f34 	ori	s2,at,0x2f34
    2fc4:	38393130 	xori	t9,at,0x3130
    2fc8:	6168732f 	0x6168732f
    2fcc:	2f646572 	sltiu	a0,k1,25970
    2fd0:	2f636367 	sltiu	v1,k1,25447
    2fd4:	6c77656e 	0x6c77656e
    2fd8:	6c2f6269 	0x6c2f6269
    2fdc:	2f636269 	sltiu	v1,k1,25193
    2fe0:	6e656572 	0x6e656572
    2fe4:	6c000074 	0x6c000074
    2fe8:	2e6b636f 	sltiu	t3,s3,25455
    2fec:	00010068 	0x10068
    2ff0:	79745f00 	ori.b	$w28,$w11,0x74
    2ff4:	2e736570 	sltiu	s3,s3,25968
    2ff8:	00010068 	0x10068
    2ffc:	64747300 	0x64747300
    3000:	2e666564 	sltiu	a2,s3,25956
    3004:	00020068 	0x20068
    3008:	65657200 	0x65657200
    300c:	682e746e 	0x682e746e
    3010:	00000100 	sll	zero,zero,0x4
    3014:	75706d69 	jalx	5c1b5a4 <__memory_size+0x5bfbda4>
    3018:	632e6572 	0x632e6572
    301c:	00000300 	sll	zero,zero,0xc
    3020:	00012500 	sll	a0,at,0x14
    3024:	09000200 	j	4000800 <__memory_size+0x3fe1000>
    3028:	01000001 	movf	zero,t0,$fcc0
    302c:	0d0efb01 	jal	43bec04 <__memory_size+0x439f404>
    3030:	01010100 	0x1010100
    3034:	00000001 	movf	zero,zero,$fcc0
    3038:	01000001 	movf	zero,t0,$fcc0
    303c:	7263732f 	0x7263732f
    3040:	68637461 	0x68637461
    3044:	66706d2f 	0x66706d2f
    3048:	626f6a2f 	0x626f6a2f
    304c:	34352f73 	ori	s5,at,0x2f73
    3050:	2f353933 	sltiu	s5,t9,14643
    3054:	39303834 	xori	s0,t1,0x3834
    3058:	34322f34 	ori	s2,at,0x2f34
    305c:	38393130 	xori	t9,at,0x3130
    3060:	6168732f 	0x6168732f
    3064:	2f646572 	sltiu	a0,k1,25970
    3068:	2f636367 	sltiu	v1,k1,25447
    306c:	6c77656e 	0x6c77656e
    3070:	6c2f6269 	0x6c2f6269
    3074:	2f636269 	sltiu	v1,k1,25193
    3078:	69727473 	0x69727473
    307c:	2f00676e 	sltiu	zero,t8,26478
    3080:	61726373 	0x61726373
    3084:	2f686374 	sltiu	t0,k1,25460
    3088:	2f66706d 	sltiu	a2,k1,28781
    308c:	73626f6a 	s16ldd	xr13,k1,310,ptn0
    3090:	3334352f 	andi	s4,t9,0x352f
    3094:	342f3539 	ori	t7,at,0x3539
    3098:	34393038 	ori	t9,at,0x3038
    309c:	3034322f 	andi	s4,at,0x322f
    30a0:	2f323632 	sltiu	s2,t9,13874
    30a4:	6b726f77 	0x6b726f77
    30a8:	6a626f2f 	0x6a626f2f
    30ac:	70696d2d 	s16sdi	xr4,v1,182,ptn1
    30b0:	746d2d73 	jalx	1b4b5cc <__memory_size+0x1b2bdcc>
    30b4:	6c652d69 	0x6c652d69
    30b8:	63672f66 	0x63672f66
    30bc:	63672f63 	0x63672f63
    30c0:	6e692f63 	0x6e692f63
    30c4:	64756c63 	0x64756c63
    30c8:	732f0065 	s8sdi	xr1,t9,-64,ptn3
    30cc:	74617263 	jalx	185c98c <__memory_size+0x183d18c>
    30d0:	6d2f6863 	0x6d2f6863
    30d4:	6a2f6670 	0x6a2f6670
    30d8:	2f73626f 	sltiu	s3,k1,25199
    30dc:	39333435 	xori	s3,t1,0x3435
    30e0:	38342f35 	xori	s4,at,0x2f35
    30e4:	2f343930 	sltiu	s4,t9,14640
    30e8:	31303432 	andi	s0,t1,0x3432
    30ec:	732f3839 	0x732f3839
    30f0:	65726168 	0x65726168
    30f4:	63672f64 	0x63672f64
    30f8:	656e2f63 	0x656e2f63
    30fc:	62696c77 	0x62696c77
    3100:	62696c2f 	0x62696c2f
    3104:	6e692f63 	0x6e692f63
    3108:	64756c63 	0x64756c63
    310c:	6d000065 	0x6d000065
    3110:	6d636d65 	0x6d636d65
    3114:	00632e70 	tge	v1,v1,0xb9
    3118:	73000001 	maddu	t8,zero
    311c:	65646474 	0x65646474
    3120:	00682e66 	0x682e66
    3124:	73000002 	mul	zero,t8,zero
    3128:	6e697274 	0x6e697274
    312c:	00682e67 	0x682e67
    3130:	00000003 	sra	zero,zero,0x0
    3134:	20020500 	addi	v0,zero,1280
    3138:	038000b0 	tge	gp,zero,0x2
    313c:	08170138 	j	5c04e0 <__memory_size+0x5a0ce0>
    3140:	2e03f476 	sltiu	v1,s0,-2954
    3144:	00080282 	srl	zero,t0,0xa
    3148:	01750101 	0x1750101
    314c:	00020000 	sll	zero,v0,0x0
    3150:	00000068 	0x68
    3154:	0efb0101 	jal	bec0404 <__memory_size+0xbea0c04>
    3158:	0101000d 	break	0x101
    315c:	00000101 	0x101
    3160:	00000100 	sll	zero,zero,0x4
    3164:	63732f01 	0x63732f01
    3168:	63746172 	0x63746172
    316c:	706d2f68 	lxhu	a1,v1,t5,3
    3170:	6f6a2f66 	0x6f6a2f66
    3174:	352f7362 	ori	t7,t1,0x7362
    3178:	35393334 	ori	t9,t1,0x3334
    317c:	3038342f 	andi	t8,at,0x342f
    3180:	322f3439 	andi	t7,s1,0x3439
    3184:	39313034 	xori	s1,t1,0x3034
    3188:	68732f38 	0x68732f38
    318c:	64657261 	0x64657261
    3190:	6363672f 	0x6363672f
    3194:	77656e2f 	jalx	d95b8bc <__memory_size+0xd93c0bc>
    3198:	2f62696c 	sltiu	v0,k1,26988
    319c:	6362696c 	0x6362696c
    31a0:	63616d2f 	0x63616d2f
    31a4:	656e6968 	0x656e6968
    31a8:	70696d2f 	0x70696d2f
    31ac:	6d000073 	0x6d000073
    31b0:	70636d65 	s8sdi	xr5,v1,-37,ptn0
    31b4:	00532e79 	0x532e79
    31b8:	00000001 	movf	zero,zero,$fcc0
    31bc:	58020500 	0x58020500
    31c0:	038000b0 	tge	gp,zero,0x2
    31c4:	4e0102bc 	c3	0x102bc
    31c8:	820a0314 	lb	t2,788(s0)
    31cc:	84134b4b 	lh	s3,19275(zero)
    31d0:	4b84134b 	c2	0x184134b
    31d4:	da034b4b 	ldc2	$3,19275(s0)
    31d8:	134b4a00 	beq	k0,t3,159dc <__isr_vec_space+0x159bc>
    31dc:	4a090383 	c2	0x90383
    31e0:	4b4b4c4b 	c2	0x14b4c4b
    31e4:	4a18034b 	c2	0x18034b
    31e8:	89134b4f 	lwl	s3,19279(t0)
    31ec:	4a09034b 	c2	0x9034b
    31f0:	4b4b4b4b 	c2	0x14b4b4b
    31f4:	4b4d4e4b 	c2	0x14d4e4b
    31f8:	4b4b4b4b 	c2	0x14b4b4b
    31fc:	4b4c4b4b 	c2	0x14c4b4b
    3200:	4b4b4b4b 	c2	0x14b4b4b
    3204:	4c4c4b4b 	0x4c4c4b4b
    3208:	4b4b4b4b 	c2	0x14b4b4b
    320c:	4b4b4b4b 	c2	0x14b4b4b
    3210:	0383134b 	0x383134b
    3214:	4c4b4a09 	0x4c4b4a09
    3218:	4b4b4b83 	c2	0x14b4b83
    321c:	4b4b4b4b 	c2	0x14b4b4b
    3220:	4b4b4b4b 	c2	0x14b4b4b
    3224:	4b4b4b4b 	c2	0x14b4b4b
    3228:	0a034b4b 	j	80d2d2c <__memory_size+0x80b352c>
    322c:	83134b4a 	lb	s3,19274(t8)
    3230:	4b4b4b4e 	c2	0x14b4b4e
    3234:	84138613 	lh	s3,-31213(zero)
    3238:	134b4b4b 	beq	k0,t3,15f68 <__isr_vec_space+0x15f48>
    323c:	820d0384 	lb	t5,900(s0)
    3240:	4b84134b 	c2	0x184134b
    3244:	034b4b4b 	0x34b4b4b
    3248:	134b4a0b 	beq	k0,t3,15a78 <__isr_vec_space+0x15a58>
    324c:	4c4b4d83 	0x4c4b4d83
    3250:	11034b4b 	beq	t0,v1,15f80 <__isr_vec_space+0x15f60>
    3254:	4b4b4b4a 	c2	0x14b4b4a
    3258:	86134b4f 	lh	s3,19279(s0)
    325c:	4b4b4c4b 	c2	0x14b4c4b
    3260:	4b4b4b4b 	c2	0x14b4b4b
    3264:	4b4b4b4b 	c2	0x14b4b4b
    3268:	4b4b4b4b 	c2	0x14b4b4b
    326c:	4b4b4b4b 	c2	0x14b4b4b
    3270:	4b4b4b4b 	c2	0x14b4b4b
    3274:	4b4b4b4b 	c2	0x14b4b4b
    3278:	4b4b4b4b 	c2	0x14b4b4b
    327c:	4b4b4b4b 	c2	0x14b4b4b
    3280:	4b4b4b4b 	c2	0x14b4b4b
    3284:	4b4b4b4b 	c2	0x14b4b4b
    3288:	4b4b4b4b 	c2	0x14b4b4b
    328c:	5283134b 	beql	s4,v1,7fbc <__isr_vec_space+0x7f9c>
    3290:	4b834c4b 	c2	0x1834c4b
    3294:	4b4b4b4b 	c2	0x14b4b4b
    3298:	4b4b4b4b 	c2	0x14b4b4b
    329c:	4b4b4b4b 	c2	0x14b4b4b
    32a0:	4b4b4b4b 	c2	0x14b4b4b
    32a4:	4b4b4b4b 	c2	0x14b4b4b
    32a8:	4b4b4b4b 	c2	0x14b4b4b
    32ac:	83134b50 	lb	s3,19280(t8)
    32b0:	4b4b4b4e 	c2	0x14b4b4e
    32b4:	1386134b 	beq	gp,a2,7fe4 <__isr_vec_space+0x7fc4>
    32b8:	4b4b4b84 	c2	0x14b4b84
    32bc:	08028413 	j	a104c <__memory_size+0x8184c>
    32c0:	d0010100 	0xd0010100
    32c4:	02000000 	0x2000000
    32c8:	00006800 	sll	t5,zero,0x0
    32cc:	fb010100 	sdc2	$1,256(t8)
    32d0:	01000d0e 	0x1000d0e
    32d4:	00010101 	0x10101
    32d8:	00010000 	sll	zero,at,0x0
    32dc:	732f0100 	0x732f0100
    32e0:	74617263 	jalx	185c98c <__memory_size+0x183d18c>
    32e4:	6d2f6863 	0x6d2f6863
    32e8:	6a2f6670 	0x6a2f6670
    32ec:	2f73626f 	sltiu	s3,k1,25199
    32f0:	39333435 	xori	s3,t1,0x3435
    32f4:	38342f35 	xori	s4,at,0x2f35
    32f8:	2f343930 	sltiu	s4,t9,14640
    32fc:	31303432 	andi	s0,t1,0x3432
    3300:	732f3839 	0x732f3839
    3304:	65726168 	0x65726168
    3308:	63672f64 	0x63672f64
    330c:	656e2f63 	0x656e2f63
    3310:	62696c77 	0x62696c77
    3314:	62696c2f 	0x62696c2f
    3318:	616d2f63 	0x616d2f63
    331c:	6e696863 	0x6e696863
    3320:	696d2f65 	0x696d2f65
    3324:	00007370 	tge	zero,zero,0x1cd
    3328:	736d656d 	s16sdi	xr5,k1,-334,ptn1
    332c:	532e7465 	beql	t9,t6,204c4 <__memory_size+0xcc4>
    3330:	00000100 	sll	zero,zero,0x4
    3334:	02050000 	0x2050000
    3338:	8000b3f4 	lb	zero,-19468(zero)
    333c:	0101e203 	0x101e203
    3340:	1386134b 	beq	gp,a2,8070 <__isr_vec_space+0x8050>
    3344:	4a090383 	c2	0x90383
    3348:	4a18034b 	c2	0x18034b
    334c:	4b83134b 	c2	0x183134b
    3350:	4b4a3103 	c2	0x14a3103
    3354:	034b8313 	0x34b8313
    3358:	134b4a09 	beq	k0,t3,15b80 <__isr_vec_space+0x15b60>
    335c:	4a090383 	c2	0x90383
    3360:	4a0c034b 	c2	0xc034b
    3364:	4d4b874b 	0x4d4b874b
    3368:	4b4b4b4b 	c2	0x14b4b4b
    336c:	4b4b4b4b 	c2	0x14b4b4b
    3370:	4b4b4b4b 	c2	0x14b4b4b
    3374:	4b4b4b4b 	c2	0x14b4b4b
    3378:	4c50834b 	0x4c50834b
    337c:	4b4b4b83 	c2	0x14b4b83
    3380:	4b4b4b4b 	c2	0x14b4b4b
    3384:	134b524b 	beq	k0,t3,17cb4 <__isr_vec_space+0x17c94>
    3388:	134b4e83 	beq	k0,t3,16d98 <__isr_vec_space+0x16d78>
    338c:	4b841386 	c2	0x1841386
    3390:	08028413 	j	a104c <__memory_size+0x8184c>
    3394:	ba010100 	swr	at,256(s0)
    3398:	02000001 	movf	zero,s0,$fcc0
    339c:	00018000 	sll	s0,at,0x0
    33a0:	fb010100 	sdc2	$1,256(t8)
    33a4:	01000d0e 	0x1000d0e
    33a8:	00010101 	0x10101
    33ac:	00010000 	sll	zero,at,0x0
    33b0:	732f0100 	0x732f0100
    33b4:	74617263 	jalx	185c98c <__memory_size+0x183d18c>
    33b8:	6d2f6863 	0x6d2f6863
    33bc:	6a2f6670 	0x6a2f6670
    33c0:	2f73626f 	sltiu	s3,k1,25199
    33c4:	39333435 	xori	s3,t1,0x3435
    33c8:	38342f35 	xori	s4,at,0x2f35
    33cc:	2f343930 	sltiu	s4,t9,14640
    33d0:	31303432 	andi	s0,t1,0x3432
    33d4:	732f3839 	0x732f3839
    33d8:	65726168 	0x65726168
    33dc:	63672f64 	0x63672f64
    33e0:	656e2f63 	0x656e2f63
    33e4:	62696c77 	0x62696c77
    33e8:	62696c2f 	0x62696c2f
    33ec:	74732f63 	jalx	1ccbd8c <__memory_size+0x1cac58c>
    33f0:	62696c64 	0x62696c64
    33f4:	63732f00 	0x63732f00
    33f8:	63746172 	0x63746172
    33fc:	706d2f68 	lxhu	a1,v1,t5,3
    3400:	6f6a2f66 	0x6f6a2f66
    3404:	352f7362 	ori	t7,t1,0x7362
    3408:	35393334 	ori	t9,t1,0x3334
    340c:	3038342f 	andi	t8,at,0x342f
    3410:	322f3439 	andi	t7,s1,0x3439
    3414:	36323034 	ori	s2,s1,0x3034
    3418:	6f772f32 	0x6f772f32
    341c:	6f2f6b72 	0x6f2f6b72
    3420:	6d2d6a62 	0x6d2d6a62
    3424:	2d737069 	sltiu	s3,t3,28777
    3428:	2d69746d 	sltiu	t1,t3,29805
    342c:	2f666c65 	sltiu	a2,k1,27749
    3430:	2f636367 	sltiu	v1,k1,25447
    3434:	2f636367 	sltiu	v1,k1,25447
    3438:	6c636e69 	0x6c636e69
    343c:	00656475 	0x656475
    3440:	7263732f 	0x7263732f
    3444:	68637461 	0x68637461
    3448:	66706d2f 	0x66706d2f
    344c:	626f6a2f 	0x626f6a2f
    3450:	34352f73 	ori	s5,at,0x2f73
    3454:	2f353933 	sltiu	s5,t9,14643
    3458:	39303834 	xori	s0,t1,0x3834
    345c:	34322f34 	ori	s2,at,0x2f34
    3460:	38393130 	xori	t9,at,0x3130
    3464:	6168732f 	0x6168732f
    3468:	2f646572 	sltiu	a0,k1,25970
    346c:	2f636367 	sltiu	v1,k1,25447
    3470:	6c77656e 	0x6c77656e
    3474:	6c2f6269 	0x6c2f6269
    3478:	2f636269 	sltiu	v1,k1,25193
    347c:	6c636e69 	0x6c636e69
    3480:	2f656475 	sltiu	a1,k1,25717
    3484:	00737973 	tltu	v1,s3,0x1e5
    3488:	7263732f 	0x7263732f
    348c:	68637461 	0x68637461
    3490:	66706d2f 	0x66706d2f
    3494:	626f6a2f 	0x626f6a2f
    3498:	34352f73 	ori	s5,at,0x2f73
    349c:	2f353933 	sltiu	s5,t9,14643
    34a0:	39303834 	xori	s0,t1,0x3834
    34a4:	34322f34 	ori	s2,at,0x2f34
    34a8:	38393130 	xori	t9,at,0x3130
    34ac:	6168732f 	0x6168732f
    34b0:	2f646572 	sltiu	a0,k1,25970
    34b4:	2f636367 	sltiu	v1,k1,25447
    34b8:	6c77656e 	0x6c77656e
    34bc:	6c2f6269 	0x6c2f6269
    34c0:	2f636269 	sltiu	v1,k1,25193
    34c4:	6c636e69 	0x6c636e69
    34c8:	00656475 	0x656475
    34cc:	615f5f00 	0x615f5f00
    34d0:	69786574 	0x69786574
    34d4:	00632e74 	teq	v1,v1,0xb9
    34d8:	73000001 	maddu	t8,zero
    34dc:	65646474 	0x65646474
    34e0:	00682e66 	0x682e66
    34e4:	6c000002 	0x6c000002
    34e8:	2e6b636f 	sltiu	t3,s3,25455
    34ec:	00030068 	0x30068
    34f0:	79745f00 	ori.b	$w28,$w11,0x74
    34f4:	2e736570 	sltiu	s3,s3,25968
    34f8:	00030068 	0x30068
    34fc:	65657200 	0x65657200
    3500:	682e746e 	0x682e746e
    3504:	00000300 	sll	zero,zero,0xc
    3508:	78657461 	ld.h	$w17,202(t6)
    350c:	682e7469 	0x682e7469
    3510:	00000100 	sll	zero,zero,0x4
    3514:	6c647473 	0x6c647473
    3518:	682e6269 	0x682e6269
    351c:	00000400 	sll	zero,zero,0x10
    3520:	02050000 	0x2050000
    3524:	8000b520 	lb	zero,-19168(zero)
    3528:	0100c703 	0x100c703
    352c:	4a780352 	c2	0x780352
    3530:	4a780352 	c2	0x780352
    3534:	834bec08 	lb	t3,-5112(k0)
    3538:	84f3f983 	lh	s3,-1661(a3)
    353c:	4b498a83 	c2	0x1498a83
    3540:	514b4c4b 	beql	t2,t3,16670 <__isr_vec_space+0x16650>
    3544:	bcba1803 	cache	0x1a,6147(a1)
    3548:	83bc4b47 	lb	gp,19271(sp)
    354c:	4b7808bc 	c2	0x17808bc
    3550:	01002002 	0x1002002
    3554:	0001f201 	0x1f201
    3558:	79000200 	ori.b	$w8,$w0,0x0
    355c:	01000001 	movf	zero,t0,$fcc0
    3560:	0d0efb01 	jal	43bec04 <__memory_size+0x439f404>
    3564:	01010100 	0x1010100
    3568:	00000001 	movf	zero,zero,$fcc0
    356c:	01000001 	movf	zero,t0,$fcc0
    3570:	7263732f 	0x7263732f
    3574:	68637461 	0x68637461
    3578:	66706d2f 	0x66706d2f
    357c:	626f6a2f 	0x626f6a2f
    3580:	34352f73 	ori	s5,at,0x2f73
    3584:	2f353933 	sltiu	s5,t9,14643
    3588:	39303834 	xori	s0,t1,0x3834
    358c:	34322f34 	ori	s2,at,0x2f34
    3590:	38393130 	xori	t9,at,0x3130
    3594:	6168732f 	0x6168732f
    3598:	2f646572 	sltiu	a0,k1,25970
    359c:	2f636367 	sltiu	v1,k1,25447
    35a0:	6c77656e 	0x6c77656e
    35a4:	6c2f6269 	0x6c2f6269
    35a8:	2f636269 	sltiu	v1,k1,25193
    35ac:	6c647473 	0x6c647473
    35b0:	2f006269 	sltiu	zero,t8,25193
    35b4:	61726373 	0x61726373
    35b8:	2f686374 	sltiu	t0,k1,25460
    35bc:	2f66706d 	sltiu	a2,k1,28781
    35c0:	73626f6a 	s16ldd	xr13,k1,310,ptn0
    35c4:	3334352f 	andi	s4,t9,0x352f
    35c8:	342f3539 	ori	t7,at,0x3539
    35cc:	34393038 	ori	t9,at,0x3038
    35d0:	3034322f 	andi	s4,at,0x322f
    35d4:	2f383931 	sltiu	t8,t9,14641
    35d8:	72616873 	d32sar	xr1,xr10,xr5,xr8,9
    35dc:	672f6465 	0x672f6465
    35e0:	6e2f6363 	0x6e2f6363
    35e4:	696c7765 	0x696c7765
    35e8:	696c2f62 	0x696c2f62
    35ec:	692f6362 	0x692f6362
    35f0:	756c636e 	jalx	5b18db8 <__memory_size+0x5af95b8>
    35f4:	732f6564 	s8ldi	xr5,t9,-39,ptn3
    35f8:	2f007379 	sltiu	zero,t8,29561
    35fc:	61726373 	0x61726373
    3600:	2f686374 	sltiu	t0,k1,25460
    3604:	2f66706d 	sltiu	a2,k1,28781
    3608:	73626f6a 	s16ldd	xr13,k1,310,ptn0
    360c:	3334352f 	andi	s4,t9,0x352f
    3610:	342f3539 	ori	t7,at,0x3539
    3614:	34393038 	ori	t9,at,0x3038
    3618:	3034322f 	andi	s4,at,0x322f
    361c:	2f323632 	sltiu	s2,t9,13874
    3620:	6b726f77 	0x6b726f77
    3624:	6a626f2f 	0x6a626f2f
    3628:	70696d2d 	s16sdi	xr4,v1,182,ptn1
    362c:	746d2d73 	jalx	1b4b5cc <__memory_size+0x1b2bdcc>
    3630:	6c652d69 	0x6c652d69
    3634:	63672f66 	0x63672f66
    3638:	63672f63 	0x63672f63
    363c:	6e692f63 	0x6e692f63
    3640:	64756c63 	0x64756c63
    3644:	732f0065 	s8sdi	xr1,t9,-64,ptn3
    3648:	74617263 	jalx	185c98c <__memory_size+0x183d18c>
    364c:	6d2f6863 	0x6d2f6863
    3650:	6a2f6670 	0x6a2f6670
    3654:	2f73626f 	sltiu	s3,k1,25199
    3658:	39333435 	xori	s3,t1,0x3435
    365c:	38342f35 	xori	s4,at,0x2f35
    3660:	2f343930 	sltiu	s4,t9,14640
    3664:	31303432 	andi	s0,t1,0x3432
    3668:	732f3839 	0x732f3839
    366c:	65726168 	0x65726168
    3670:	63672f64 	0x63672f64
    3674:	656e2f63 	0x656e2f63
    3678:	62696c77 	0x62696c77
    367c:	62696c2f 	0x62696c2f
    3680:	6e692f63 	0x6e692f63
    3684:	64756c63 	0x64756c63
    3688:	5f000065 	bgtzl	t8,3820 <__isr_vec_space+0x3800>
    368c:	6c61635f 	0x6c61635f
    3690:	74615f6c 	jalx	1857db0 <__memory_size+0x18385b0>
    3694:	74697865 	jalx	1a5e194 <__memory_size+0x1a3e994>
    3698:	0100632e 	0x100632e
    369c:	6f6c0000 	0x6f6c0000
    36a0:	682e6b63 	0x682e6b63
    36a4:	00000200 	sll	zero,zero,0x8
    36a8:	7079745f 	udi15	v1,t9,t6,0x11
    36ac:	682e7365 	0x682e7365
    36b0:	00000200 	sll	zero,zero,0x8
    36b4:	64647473 	0x64647473
    36b8:	682e6665 	0x682e6665
    36bc:	00000300 	sll	zero,zero,0xc
    36c0:	6e656572 	0x6e656572
    36c4:	00682e74 	teq	v1,t0,0xb9
    36c8:	73000002 	mul	zero,t8,zero
    36cc:	696c6474 	0x696c6474
    36d0:	00682e62 	0x682e62
    36d4:	00000004 	sllv	zero,zero,zero
    36d8:	30020500 	andi	v0,zero,0x500
    36dc:	038000b6 	tne	gp,zero,0x2
    36e0:	030100c3 	0x30100c3
    36e4:	71034a0f 	d16mace	xr8,xr2,xr13,xr0,AS,WW
    36e8:	00c4034a 	0xc4034a
    36ec:	7fbc034a 	0x7fbc034a
    36f0:	4a1c034a 	c2	0x1c034a
    36f4:	034a6403 	0x34a6403
    36f8:	034a00c4 	0x34a00c4
    36fc:	034a7fbc 	0x34a7fbc
    3700:	0124020f 	0x124020f
    3704:	894c49bb 	lwl	t4,18875(t2)
    3708:	01040200 	0x1040200
    370c:	8906f206 	lwl	a2,-3578(t0)
    3710:	02040200 	0x2040200
    3714:	c0068206 	ll	a2,-32250(zero)
    3718:	884d7708 	lwl	t5,30472(v0)
    371c:	820903f3 	lb	t1,1011(s0)
    3720:	01040200 	0x1040200
    3724:	0200ba06 	0x200ba06
    3728:	03060204 	0x3060204
    372c:	2c03ba5d 	sltiu	v1,zero,-17827
    3730:	020087ba 	0x20087ba
    3734:	ba060104 	swr	a2,260(s0)
    3738:	86838a06 	lh	v1,-30202(s4)
    373c:	825c034b 	lb	gp,843(s2)
    3740:	0387f4f3 	tltu	gp,a3,0x3d3
    3744:	2c028224 	sltiu	v0,zero,-32220
    3748:	56010100 	bnel	s0,at,3b4c <__isr_vec_space+0x3b2c>
    374c:	02000001 	movf	zero,s0,$fcc0
    3750:	00011300 	sll	v0,at,0xc
    3754:	fb010100 	sdc2	$1,256(t8)
    3758:	01000d0e 	0x1000d0e
    375c:	00010101 	0x10101
    3760:	00010000 	sll	zero,at,0x0
    3764:	732f0100 	0x732f0100
    3768:	74617263 	jalx	185c98c <__memory_size+0x183d18c>
    376c:	6d2f6863 	0x6d2f6863
    3770:	6a2f6670 	0x6a2f6670
    3774:	2f73626f 	sltiu	s3,k1,25199
    3778:	39333435 	xori	s3,t1,0x3435
    377c:	38342f35 	xori	s4,at,0x2f35
    3780:	2f343930 	sltiu	s4,t9,14640
    3784:	31303432 	andi	s0,t1,0x3432
    3788:	732f3839 	0x732f3839
    378c:	65726168 	0x65726168
    3790:	63672f64 	0x63672f64
    3794:	696c2f63 	0x696c2f63
    3798:	6f6c6762 	0x6f6c6762
    379c:	6d2f7373 	0x6d2f7373
    37a0:	2f737069 	sltiu	s3,k1,28777
    37a4:	00696875 	0x696875
    37a8:	7263732f 	0x7263732f
    37ac:	68637461 	0x68637461
    37b0:	66706d2f 	0x66706d2f
    37b4:	626f6a2f 	0x626f6a2f
    37b8:	34352f73 	ori	s5,at,0x2f73
    37bc:	2f353933 	sltiu	s5,t9,14643
    37c0:	39303834 	xori	s0,t1,0x3834
    37c4:	34322f34 	ori	s2,at,0x2f34
    37c8:	38393130 	xori	t9,at,0x3130
    37cc:	6168732f 	0x6168732f
    37d0:	2f646572 	sltiu	a0,k1,25970
    37d4:	2f636367 	sltiu	v1,k1,25447
    37d8:	6c77656e 	0x6c77656e
    37dc:	6c2f6269 	0x6c2f6269
    37e0:	2f636269 	sltiu	v1,k1,25193
    37e4:	6c636e69 	0x6c636e69
    37e8:	2f656475 	sltiu	a1,k1,25717
    37ec:	6863616d 	0x6863616d
    37f0:	00656e69 	0x656e69
    37f4:	7263732f 	0x7263732f
    37f8:	68637461 	0x68637461
    37fc:	66706d2f 	0x66706d2f
    3800:	626f6a2f 	0x626f6a2f
    3804:	34352f73 	ori	s5,at,0x2f73
    3808:	2f353933 	sltiu	s5,t9,14643
    380c:	39303834 	xori	s0,t1,0x3834
    3810:	34322f34 	ori	s2,at,0x2f34
    3814:	38393130 	xori	t9,at,0x3130
    3818:	6168732f 	0x6168732f
    381c:	2f646572 	sltiu	a0,k1,25970
    3820:	2f636367 	sltiu	v1,k1,25447
    3824:	6c77656e 	0x6c77656e
    3828:	6c2f6269 	0x6c2f6269
    382c:	2f636269 	sltiu	v1,k1,25193
    3830:	6c636e69 	0x6c636e69
    3834:	00656475 	0x656475
    3838:	69687500 	0x69687500
    383c:	6978655f 	0x6978655f
    3840:	00632e74 	teq	v1,v1,0xb9
    3844:	5f000001 	bgtzl	t8,384c <__isr_vec_space+0x382c>
    3848:	61666564 	0x61666564
    384c:	5f746c75 	0x5f746c75
    3850:	65707974 	0x65707974
    3854:	00682e73 	tltu	v1,t0,0xb9
    3858:	73000002 	mul	zero,t8,zero
    385c:	6e696474 	0x6e696474
    3860:	00682e74 	teq	v1,t0,0xb9
    3864:	00000003 	sra	zero,zero,0x0
    3868:	b0020500 	0xb0020500
    386c:	038000b7 	0x38000b7
    3870:	1603013c 	bne	s0,v1,3d64 <__isr_vec_space+0x3d44>
    3874:	4a6a0382 	c2	0x6a0382
    3878:	034a1403 	0x34a1403
    387c:	12034a6c 	beq	s0,v1,16230 <__isr_vec_space+0x16210>
    3880:	6c034c4a 	0x6c034c4a
    3884:	4a12034a 	c2	0x12034a
    3888:	034a6e03 	0x34a6e03
    388c:	6a034a16 	0x6a034a16
    3890:	4b4b4b4a 	c2	0x14b4b4a
    3894:	4a0d034c 	c2	0xd034c
    3898:	837e83be 	lb	s8,-31810(k1)
    389c:	f26d0383 	0xf26d0383
    38a0:	01000802 	0x1000802
    38a4:	0000a201 	0xa201
    38a8:	66000200 	0x66000200
    38ac:	01000000 	0x1000000
    38b0:	0d0efb01 	jal	43bec04 <__memory_size+0x439f404>
    38b4:	01010100 	0x1010100
    38b8:	00000001 	movf	zero,zero,$fcc0
    38bc:	01000001 	movf	zero,t0,$fcc0
    38c0:	7263732f 	0x7263732f
    38c4:	68637461 	0x68637461
    38c8:	66706d2f 	0x66706d2f
    38cc:	626f6a2f 	0x626f6a2f
    38d0:	34352f73 	ori	s5,at,0x2f73
    38d4:	2f353933 	sltiu	s5,t9,14643
    38d8:	39303834 	xori	s0,t1,0x3834
    38dc:	34322f34 	ori	s2,at,0x2f34
    38e0:	38393130 	xori	t9,at,0x3130
    38e4:	6168732f 	0x6168732f
    38e8:	2f646572 	sltiu	a0,k1,25970
    38ec:	2f636367 	sltiu	v1,k1,25447
    38f0:	6762696c 	0x6762696c
    38f4:	73736f6c 	s16ldi	xr13,k1,438,ptn2
    38f8:	70696d2f 	0x70696d2f
    38fc:	68752f73 	0x68752f73
    3900:	75000069 	jalx	40001a4 <__memory_size+0x3fe09a4>
    3904:	675f6968 	0x675f6968
    3908:	72617465 	s8sdi	xr1,s3,93,ptn0
    390c:	532e7367 	beql	t9,t6,206ac <__memory_size+0xeac>
    3910:	00000100 	sll	zero,zero,0x4
    3914:	02050000 	0x2050000
    3918:	8000b838 	lb	zero,-18376(zero)
    391c:	4b012a03 	c2	0x1012a03
    3920:	4d4c4b4c 	0x4d4c4b4c
    3924:	4b4b4b84 	c2	0x14b4b84
    3928:	4e4b4b83 	c3	0x4b4b83
    392c:	4c4c4b4b 	0x4c4c4b4b
    3930:	834b4b84 	lb	t3,19332(k0)
    3934:	4c4b4b4b 	0x4c4b4b4b
    3938:	4c4b4b4b 	0x4c4b4b4b
    393c:	4b4b844c 	c2	0x14b844c
    3940:	4b4e4b85 	c2	0x14e4b85
    3944:	0802144b 	j	8512c <__memory_size+0x6592c>
    3948:	3e010100 	0x3e010100
    394c:	02000001 	movf	zero,s0,$fcc0
    3950:	00011c00 	sll	v1,at,0x10
    3954:	fb010100 	sdc2	$1,256(t8)
    3958:	01000d0e 	0x1000d0e
    395c:	00010101 	0x10101
    3960:	00010000 	sll	zero,at,0x0
    3964:	732f0100 	0x732f0100
    3968:	74617263 	jalx	185c98c <__memory_size+0x183d18c>
    396c:	6d2f6863 	0x6d2f6863
    3970:	6a2f6670 	0x6a2f6670
    3974:	2f73626f 	sltiu	s3,k1,25199
    3978:	39333435 	xori	s3,t1,0x3435
    397c:	38342f35 	xori	s4,at,0x2f35
    3980:	2f343930 	sltiu	s4,t9,14640
    3984:	31303432 	andi	s0,t1,0x3432
    3988:	732f3839 	0x732f3839
    398c:	65726168 	0x65726168
    3990:	63672f64 	0x63672f64
    3994:	696c2f63 	0x696c2f63
    3998:	6f6c6762 	0x6f6c6762
    399c:	6d2f7373 	0x6d2f7373
    39a0:	2f737069 	sltiu	s3,k1,28777
    39a4:	00696875 	0x696875
    39a8:	7263732f 	0x7263732f
    39ac:	68637461 	0x68637461
    39b0:	66706d2f 	0x66706d2f
    39b4:	626f6a2f 	0x626f6a2f
    39b8:	34352f73 	ori	s5,at,0x2f73
    39bc:	2f353933 	sltiu	s5,t9,14643
    39c0:	39303834 	xori	s0,t1,0x3834
    39c4:	34322f34 	ori	s2,at,0x2f34
    39c8:	38393130 	xori	t9,at,0x3130
    39cc:	6168732f 	0x6168732f
    39d0:	2f646572 	sltiu	a0,k1,25970
    39d4:	2f636367 	sltiu	v1,k1,25447
    39d8:	6c77656e 	0x6c77656e
    39dc:	6c2f6269 	0x6c2f6269
    39e0:	2f636269 	sltiu	v1,k1,25193
    39e4:	6c636e69 	0x6c636e69
    39e8:	2f656475 	sltiu	a1,k1,25717
    39ec:	6863616d 	0x6863616d
    39f0:	00656e69 	0x656e69
    39f4:	7263732f 	0x7263732f
    39f8:	68637461 	0x68637461
    39fc:	66706d2f 	0x66706d2f
    3a00:	626f6a2f 	0x626f6a2f
    3a04:	34352f73 	ori	s5,at,0x2f73
    3a08:	2f353933 	sltiu	s5,t9,14643
    3a0c:	39303834 	xori	s0,t1,0x3834
    3a10:	34322f34 	ori	s2,at,0x2f34
    3a14:	38393130 	xori	t9,at,0x3130
    3a18:	6168732f 	0x6168732f
    3a1c:	2f646572 	sltiu	a0,k1,25970
    3a20:	2f636367 	sltiu	v1,k1,25447
    3a24:	6c77656e 	0x6c77656e
    3a28:	6c2f6269 	0x6c2f6269
    3a2c:	2f636269 	sltiu	v1,k1,25193
    3a30:	6c636e69 	0x6c636e69
    3a34:	00656475 	0x656475
    3a38:	69687500 	0x69687500
    3a3c:	7465675f 	jalx	1959d7c <__memory_size+0x193a57c>
    3a40:	6d61725f 	0x6d61725f
    3a44:	6e61725f 	0x6e61725f
    3a48:	632e6567 	0x632e6567
    3a4c:	00000100 	sll	zero,zero,0x4
    3a50:	6665645f 	0x6665645f
    3a54:	746c7561 	jalx	1b1d584 <__memory_size+0x1afdd84>
    3a58:	7079745f 	udi15	v1,t9,t6,0x11
    3a5c:	682e7365 	0x682e7365
    3a60:	00000200 	sll	zero,zero,0x8
    3a64:	69647473 	0x69647473
    3a68:	682e746e 	0x682e746e
    3a6c:	00000300 	sll	zero,zero,0xc
    3a70:	02050000 	0x2050000
    3a74:	8000b8f0 	lb	zero,-18192(zero)
    3a78:	17012703 	bne	t8,at,d688 <__isr_vec_space+0xd668>
    3a7c:	4b454f45 	c2	0x1454f45
    3a80:	4c83bc4e 	0x4c83bc4e
    3a84:	4b835086 	c2	0x1835086
    3a88:	01000802 	0x1000802
    3a8c:	00011201 	0x11201
    3a90:	6b000200 	0x6b000200
    3a94:	01000000 	0x1000000
    3a98:	0d0efb01 	jal	43bec04 <__memory_size+0x439f404>
    3a9c:	01010100 	0x1010100
    3aa0:	00000001 	movf	zero,zero,$fcc0
    3aa4:	01000001 	movf	zero,t0,$fcc0
    3aa8:	7263732f 	0x7263732f
    3aac:	68637461 	0x68637461
    3ab0:	66706d2f 	0x66706d2f
    3ab4:	626f6a2f 	0x626f6a2f
    3ab8:	34352f73 	ori	s5,at,0x2f73
    3abc:	2f353933 	sltiu	s5,t9,14643
    3ac0:	39303834 	xori	s0,t1,0x3834
    3ac4:	34322f34 	ori	s2,at,0x2f34
    3ac8:	38393130 	xori	t9,at,0x3130
    3acc:	6168732f 	0x6168732f
    3ad0:	2f646572 	sltiu	a0,k1,25970
    3ad4:	2f636367 	sltiu	v1,k1,25447
    3ad8:	6762696c 	0x6762696c
    3adc:	73736f6c 	s16ldi	xr13,k1,438,ptn2
    3ae0:	70696d2f 	0x70696d2f
    3ae4:	61682f73 	0x61682f73
    3ae8:	6d00006c 	0x6d00006c
    3aec:	5f737069 	0x5f737069
    3af0:	70637865 	s8sdi	xr1,v1,-34,ptn0
    3af4:	6e655f74 	0x6e655f74
    3af8:	2e797274 	sltiu	t9,s3,29300
    3afc:	00010053 	0x10053
    3b00:	05000000 	bltz	t0,3b04 <__isr_vec_space+0x3ae4>
    3b04:	00000002 	srl	zero,zero,0x0
    3b08:	00c30380 	0xc30380
    3b0c:	854b8301 	lh	t3,-31999(t2)
    3b10:	02838384 	0x2838384
    3b14:	83831854 	lb	v1,6228(gp)
    3b18:	83177002 	lb	s7,28674(t8)
    3b1c:	16700283 	bne	s3,s0,452c <__isr_vec_space+0x450c>
    3b20:	0802834d 	j	a0d34 <__memory_size+0x81534>
    3b24:	00010100 	sll	zero,at,0x4
    3b28:	b9ec0205 	swr	t4,517(t7)
    3b2c:	f3038000 	0xf3038000
    3b30:	4d4c0100 	lwxc1	$f4,t4(t2)
    3b34:	4b4b4b4b 	c2	0x14b4b4b
    3b38:	4b4b4b4b 	c2	0x14b4b4b
    3b3c:	4b4b4b4b 	c2	0x14b4b4b
    3b40:	4b4b4b4b 	c2	0x14b4b4b
    3b44:	4b4b4b4b 	c2	0x14b4b4b
    3b48:	4b4b4b4b 	c2	0x14b4b4b
    3b4c:	4b4b4c4b 	c2	0x14b4c4b
    3b50:	4b4d4b4b 	c2	0x14d4b4b
    3b54:	4b4f4b4b 	c2	0x14f4b4b
    3b58:	4b4b4d4b 	c2	0x14b4d4b
    3b5c:	4b4b4b4c 	c2	0x14b4b4c
    3b60:	4b4c834b 	c2	0x14c834b
    3b64:	4d4b4c83 	0x4d4b4c83
    3b68:	4b4b4b4d 	c2	0x14b4b4d
    3b6c:	844d4b4b 	lh	t5,19275(v0)
    3b70:	834e4d4d 	lb	t6,19789(k0)
    3b74:	4b4b4b88 	c2	0x14b4b88
    3b78:	4b4b4b4d 	c2	0x14b4b4d
    3b7c:	4b4b4b4b 	c2	0x14b4b4b
    3b80:	4b4b4b4b 	c2	0x14b4b4b
    3b84:	4b4b4b4b 	c2	0x14b4b4b
    3b88:	4b4b4b4b 	c2	0x14b4b4b
    3b8c:	4b4b4b4b 	c2	0x14b4b4b
    3b90:	4b4c4c4b 	c2	0x14c4c4b
    3b94:	4b4b4b4b 	c2	0x14b4b4b
    3b98:	4b4b4b4b 	c2	0x14b4b4b
    3b9c:	04024c4b 	bltzl	zero,16ccc <__isr_vec_space+0x16cac>
    3ba0:	a6010100 	sh	at,256(s0)
    3ba4:	02000000 	0x2000000
    3ba8:	00006e00 	sll	t5,zero,0x18
    3bac:	fb010100 	sdc2	$1,256(t8)
    3bb0:	01000d0e 	0x1000d0e
    3bb4:	00010101 	0x10101
    3bb8:	00010000 	sll	zero,at,0x0
    3bbc:	732f0100 	0x732f0100
    3bc0:	74617263 	jalx	185c98c <__memory_size+0x183d18c>
    3bc4:	6d2f6863 	0x6d2f6863
    3bc8:	6a2f6670 	0x6a2f6670
    3bcc:	2f73626f 	sltiu	s3,k1,25199
    3bd0:	39333435 	xori	s3,t1,0x3435
    3bd4:	38342f35 	xori	s4,at,0x2f35
    3bd8:	2f343930 	sltiu	s4,t9,14640
    3bdc:	31303432 	andi	s0,t1,0x3432
    3be0:	732f3839 	0x732f3839
    3be4:	65726168 	0x65726168
    3be8:	63672f64 	0x63672f64
    3bec:	696c2f63 	0x696c2f63
    3bf0:	6f6c6762 	0x6f6c6762
    3bf4:	6d2f7373 	0x6d2f7373
    3bf8:	2f737069 	sltiu	s3,k1,28777
    3bfc:	006c6168 	0x6c6168
    3c00:	70696d00 	0x70696d00
    3c04:	78655f73 	0x78655f73
    3c08:	5f747063 	0x5f747063
    3c0c:	69676572 	0x69676572
    3c10:	72657473 	d32sar	xr1,xr13,xr5,xr9,9
    3c14:	0100532e 	0x100532e
    3c18:	00000000 	nop
    3c1c:	b93c0205 	swr	gp,517(t1)
    3c20:	38038000 	xori	v1,zero,0x8000
    3c24:	4b4b4f01 	c2	0x14b4f01
    3c28:	4b838352 	c2	0x1838352
    3c2c:	844b4d83 	lh	t3,19843(v0)
    3c30:	864a0903 	lh	t2,2307(s2)
    3c34:	4d4d4b4b 	0x4d4d4b4b
    3c38:	4c4b4b85 	0x4c4b4b85
    3c3c:	134b4b85 	beq	k0,t3,16a54 <__isr_vec_space+0x16a34>
    3c40:	4b4b8586 	c2	0x14b8586
    3c44:	4c854b4d 	0x4c854b4d
    3c48:	01000802 	0x1000802
    3c4c:	Address 0x0000000000003c4c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	syscall
       4:	ffffffff 	sdc3	$31,-1(ra)
       8:	7c010001 	0x7c010001
       c:	001d0d1f 	0x1d0d1f
      10:	0000001c 	0x1c
      14:	00000000 	nop
      18:	80000a54 	lb	zero,2644(zero)
      1c:	00000044 	0x44
      20:	44080e44 	0x44080e44
      24:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
      28:	1d0d681e 	0x1d0d681e
      2c:	000ede48 	0xede48
      30:	00000018 	mult	zero,zero
      34:	00000000 	nop
      38:	80000a98 	lb	zero,2712(zero)
      3c:	00000198 	0x198
      40:	48280e44 	0x48280e44
      44:	029e019f 	0x29e019f
      48:	001e0d44 	0x1e0d44
      4c:	00000020 	add	zero,zero,zero
      50:	00000000 	nop
      54:	80000c30 	lb	zero,3120(zero)
      58:	00000088 	0x88
      5c:	48200e44 	0x48200e44
      60:	029e019f 	0x29e019f
      64:	021e0d44 	0x21e0d44
      68:	4c1d0d64 	0x4c1d0d64
      6c:	000edfde 	0xedfde
      70:	00000018 	mult	zero,zero
      74:	00000000 	nop
      78:	80000cb8 	lb	zero,3256(zero)
      7c:	000000a8 	0xa8
      80:	44100e44 	0x44100e44
      84:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
      88:	0000001e 	0x1e
      8c:	00000018 	mult	zero,zero
      90:	00000000 	nop
      94:	80000d60 	lb	zero,3424(zero)
      98:	00000070 	tge	zero,zero,0x1
      9c:	48200e44 	0x48200e44
      a0:	029e019f 	0x29e019f
      a4:	001e0d44 	0x1e0d44
      a8:	00000018 	mult	zero,zero
      ac:	00000000 	nop
      b0:	80000dd0 	lb	zero,3536(zero)
      b4:	000000cc 	syscall	0x3
      b8:	48200e44 	0x48200e44
      bc:	029e019f 	0x29e019f
      c0:	001e0d44 	0x1e0d44
      c4:	00000020 	add	zero,zero,zero
      c8:	00000000 	nop
      cc:	80000e9c 	lb	zero,3740(zero)
      d0:	00000038 	0x38
      d4:	48180e44 	0x48180e44
      d8:	029e019f 	0x29e019f
      dc:	541e0d44 	bnel	zero,s8,35f0 <__isr_vec_space+0x35d0>
      e0:	de4c1d0d 	ldc3	$12,7437(s2)
      e4:	00000edf 	0xedf
      e8:	0000000c 	syscall
      ec:	ffffffff 	sdc3	$31,-1(ra)
      f0:	7c010001 	0x7c010001
      f4:	001d0d1f 	0x1d0d1f
      f8:	00000018 	mult	zero,zero
      fc:	000000e8 	0xe8
     100:	80000ed4 	lb	zero,3796(zero)
     104:	00000038 	0x38
     108:	48180e44 	0x48180e44
     10c:	029e019f 	0x29e019f
     110:	001e0d44 	0x1e0d44
     114:	0000001c 	0x1c
     118:	000000e8 	0xe8
     11c:	80000f0c 	lb	zero,3852(zero)
     120:	00000020 	add	zero,zero,zero
     124:	44080e44 	0x44080e44
     128:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
     12c:	1d0d441e 	0x1d0d441e
     130:	000ede48 	0xede48
     134:	00000018 	mult	zero,zero
     138:	000000e8 	0xe8
     13c:	80000f2c 	lb	zero,3884(zero)
     140:	00000064 	0x64
     144:	48100e44 	0x48100e44
     148:	029e019f 	0x29e019f
     14c:	001e0d44 	0x1e0d44
     150:	0000001c 	0x1c
     154:	000000e8 	0xe8
     158:	80000f90 	lb	zero,3984(zero)
     15c:	00000020 	add	zero,zero,zero
     160:	44080e44 	0x44080e44
     164:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
     168:	1d0d441e 	0x1d0d441e
     16c:	000ede48 	0xede48
     170:	00000018 	mult	zero,zero
     174:	000000e8 	0xe8
     178:	80000fb0 	lb	zero,4016(zero)
     17c:	0000006c 	0x6c
     180:	48100e44 	0x48100e44
     184:	029e019f 	0x29e019f
     188:	001e0d44 	0x1e0d44
     18c:	00000020 	add	zero,zero,zero
     190:	000000e8 	0xe8
     194:	8000101c 	lb	zero,4124(zero)
     198:	00000040 	ssnop
     19c:	48180e44 	0x48180e44
     1a0:	029e019f 	0x29e019f
     1a4:	5c1e0d44 	0x5c1e0d44
     1a8:	de4c1d0d 	ldc3	$12,7437(s2)
     1ac:	00000edf 	0xedf
     1b0:	00000020 	add	zero,zero,zero
     1b4:	000000e8 	0xe8
     1b8:	8000105c 	lb	zero,4188(zero)
     1bc:	00000060 	0x60
     1c0:	44100e44 	0x44100e44
     1c4:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
     1c8:	0d44021e 	jal	5100878 <__memory_size+0x50e1078>
     1cc:	0ede481d 	jal	b792074 <__memory_size+0xb772874>
     1d0:	00000000 	nop
     1d4:	0000000c 	syscall
     1d8:	ffffffff 	sdc3	$31,-1(ra)
     1dc:	7c010001 	0x7c010001
     1e0:	001d0d1f 	0x1d0d1f
     1e4:	00000020 	add	zero,zero,zero
     1e8:	000001d4 	0x1d4
     1ec:	800010bc 	lb	zero,4284(zero)
     1f0:	00000078 	0x78
     1f4:	48280e44 	0x48280e44
     1f8:	029e019f 	0x29e019f
     1fc:	021e0d44 	0x21e0d44
     200:	4c1d0d54 	0x4c1d0d54
     204:	000edfde 	0xedfde
     208:	00000018 	mult	zero,zero
     20c:	000001d4 	0x1d4
     210:	80001134 	lb	zero,4404(zero)
     214:	0000019c 	0x19c
     218:	48300e44 	0x48300e44
     21c:	029e019f 	0x29e019f
     220:	001e0d44 	0x1e0d44
     224:	00000020 	add	zero,zero,zero
     228:	000001d4 	0x1d4
     22c:	800012d0 	lb	zero,4816(zero)
     230:	00000064 	0x64
     234:	44100e44 	0x44100e44
     238:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
     23c:	0d48021e 	jal	5200878 <__memory_size+0x51e1078>
     240:	0ede481d 	jal	b792074 <__memory_size+0xb772874>
     244:	00000000 	nop
     248:	00000024 	and	zero,zero,zero
     24c:	000001d4 	0x1d4
     250:	80001334 	lb	zero,4916(zero)
     254:	00000174 	teq	zero,zero,0x5
     258:	48280e44 	0x48280e44
     25c:	029e019f 	0x29e019f
     260:	031e0d44 	0x31e0d44
     264:	1d0d0150 	0x1d0d0150
     268:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     26c:	00000000 	nop
     270:	0000000c 	syscall
     274:	ffffffff 	sdc3	$31,-1(ra)
     278:	7c010001 	0x7c010001
     27c:	001d0d1f 	0x1d0d1f
     280:	00000020 	add	zero,zero,zero
     284:	00000270 	tge	zero,zero,0x9
     288:	800014a8 	lb	zero,5288(zero)
     28c:	000000a8 	0xa8
     290:	48200e44 	0x48200e44
     294:	029e019f 	0x29e019f
     298:	021e0d44 	0x21e0d44
     29c:	4c1d0d84 	0x4c1d0d84
     2a0:	000edfde 	0xedfde
     2a4:	00000020 	add	zero,zero,zero
     2a8:	00000270 	tge	zero,zero,0x9
     2ac:	80001550 	lb	zero,5456(zero)
     2b0:	00000114 	0x114
     2b4:	44100e44 	0x44100e44
     2b8:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
     2bc:	0df8021e 	jal	7e00878 <__memory_size+0x7de1078>
     2c0:	0ede481d 	jal	b792074 <__memory_size+0xb772874>
     2c4:	00000000 	nop
     2c8:	00000018 	mult	zero,zero
     2cc:	00000270 	tge	zero,zero,0x9
     2d0:	80001664 	lb	zero,5732(zero)
     2d4:	0000010c 	syscall	0x4
     2d8:	48280e44 	0x48280e44
     2dc:	029e019f 	0x29e019f
     2e0:	001e0d44 	0x1e0d44
     2e4:	00000020 	add	zero,zero,zero
     2e8:	00000270 	tge	zero,zero,0x9
     2ec:	80001770 	lb	zero,6000(zero)
     2f0:	000000fc 	0xfc
     2f4:	48180e44 	0x48180e44
     2f8:	029e019f 	0x29e019f
     2fc:	021e0d44 	0x21e0d44
     300:	4c1d0dd8 	0x4c1d0dd8
     304:	000edfde 	0xedfde
     308:	00000018 	mult	zero,zero
     30c:	00000270 	tge	zero,zero,0x9
     310:	8000186c 	lb	zero,6252(zero)
     314:	000000f4 	teq	zero,zero,0x3
     318:	48280e44 	0x48280e44
     31c:	029e019f 	0x29e019f
     320:	001e0d44 	0x1e0d44
     324:	00000020 	add	zero,zero,zero
     328:	00000270 	tge	zero,zero,0x9
     32c:	80001960 	lb	zero,6496(zero)
     330:	00000068 	0x68
     334:	48180e44 	0x48180e44
     338:	029e019f 	0x29e019f
     33c:	021e0d44 	0x21e0d44
     340:	4c1d0d44 	0x4c1d0d44
     344:	000edfde 	0xedfde
     348:	00000024 	and	zero,zero,zero
     34c:	00000270 	tge	zero,zero,0x9
     350:	800019c8 	lb	zero,6600(zero)
     354:	00000178 	0x178
     358:	48180e44 	0x48180e44
     35c:	029e019f 	0x29e019f
     360:	031e0d44 	0x31e0d44
     364:	1d0d0154 	0x1d0d0154
     368:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     36c:	00000000 	nop
     370:	00000020 	add	zero,zero,zero
     374:	00000270 	tge	zero,zero,0x9
     378:	80001b40 	lb	zero,6976(zero)
     37c:	000000f0 	tge	zero,zero,0x3
     380:	48200e44 	0x48200e44
     384:	029e019f 	0x29e019f
     388:	021e0d44 	0x21e0d44
     38c:	4c1d0dcc 	0x4c1d0dcc
     390:	000edfde 	0xedfde
     394:	00000020 	add	zero,zero,zero
     398:	00000270 	tge	zero,zero,0x9
     39c:	80001c30 	lb	zero,7216(zero)
     3a0:	00000084 	0x84
     3a4:	48200e44 	0x48200e44
     3a8:	029e019f 	0x29e019f
     3ac:	021e0d44 	0x21e0d44
     3b0:	4c1d0d60 	madd.s	$f21,$f0,$f1,$f29
     3b4:	000edfde 	0xedfde
     3b8:	00000020 	add	zero,zero,zero
     3bc:	00000270 	tge	zero,zero,0x9
     3c0:	80001cb4 	lb	zero,7348(zero)
     3c4:	000000a8 	0xa8
     3c8:	48180e44 	0x48180e44
     3cc:	029e019f 	0x29e019f
     3d0:	021e0d44 	0x21e0d44
     3d4:	4c1d0d84 	0x4c1d0d84
     3d8:	000edfde 	0xedfde
     3dc:	00000024 	and	zero,zero,zero
     3e0:	00000270 	tge	zero,zero,0x9
     3e4:	80001d5c 	lb	zero,7516(zero)
     3e8:	00000274 	teq	zero,zero,0x9
     3ec:	48200e44 	0x48200e44
     3f0:	029e019f 	0x29e019f
     3f4:	031e0d44 	0x31e0d44
     3f8:	1d0d0250 	0x1d0d0250
     3fc:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     400:	00000000 	nop
     404:	0000001c 	0x1c
     408:	00000270 	tge	zero,zero,0x9
     40c:	80001fd0 	lb	zero,8144(zero)
     410:	00000048 	0x48
     414:	44080e44 	0x44080e44
     418:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
     41c:	1d0d6c1e 	0x1d0d6c1e
     420:	000ede48 	0xede48
     424:	0000001c 	0x1c
     428:	00000270 	tge	zero,zero,0x9
     42c:	80002018 	lb	zero,8216(zero)
     430:	0000002c 	0x2c
     434:	44080e44 	0x44080e44
     438:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
     43c:	1d0d501e 	0x1d0d501e
     440:	000ede48 	0xede48
     444:	0000000c 	syscall
     448:	ffffffff 	sdc3	$31,-1(ra)
     44c:	7c010001 	0x7c010001
     450:	001d0d1f 	0x1d0d1f
     454:	00000024 	and	zero,zero,zero
     458:	00000444 	0x444
     45c:	80002044 	lb	zero,8260(zero)
     460:	00000130 	tge	zero,zero,0x4
     464:	48280e44 	0x48280e44
     468:	029e019f 	0x29e019f
     46c:	031e0d44 	0x31e0d44
     470:	1d0d010c 	0x1d0d010c
     474:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     478:	00000000 	nop
     47c:	00000018 	mult	zero,zero
     480:	00000444 	0x444
     484:	80002174 	lb	zero,8564(zero)
     488:	0000016c 	0x16c
     48c:	48200e44 	0x48200e44
     490:	029e019f 	0x29e019f
     494:	001e0d44 	0x1e0d44
     498:	00000018 	mult	zero,zero
     49c:	00000444 	0x444
     4a0:	800022e0 	lb	zero,8928(zero)
     4a4:	0000011c 	0x11c
     4a8:	48280e44 	0x48280e44
     4ac:	029e019f 	0x29e019f
     4b0:	001e0d44 	0x1e0d44
     4b4:	00000018 	mult	zero,zero
     4b8:	00000444 	0x444
     4bc:	800023fc 	lb	zero,9212(zero)
     4c0:	00000284 	0x284
     4c4:	48280e44 	0x48280e44
     4c8:	029e019f 	0x29e019f
     4cc:	001e0d44 	0x1e0d44
     4d0:	00000024 	and	zero,zero,zero
     4d4:	00000444 	0x444
     4d8:	80002680 	lb	zero,9856(zero)
     4dc:	000004d4 	0x4d4
     4e0:	48200e44 	0x48200e44
     4e4:	029e019f 	0x29e019f
     4e8:	031e0d44 	0x31e0d44
     4ec:	1d0d04b0 	0x1d0d04b0
     4f0:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     4f4:	00000000 	nop
     4f8:	00000024 	and	zero,zero,zero
     4fc:	00000444 	0x444
     500:	80002b54 	lb	zero,11092(zero)
     504:	000002d0 	0x2d0
     508:	48280e44 	0x48280e44
     50c:	029e019f 	0x29e019f
     510:	031e0d44 	0x31e0d44
     514:	1d0d02ac 	0x1d0d02ac
     518:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     51c:	00000000 	nop
     520:	00000020 	add	zero,zero,zero
     524:	00000444 	0x444
     528:	80002e24 	lb	zero,11812(zero)
     52c:	000000a8 	0xa8
     530:	48280e44 	0x48280e44
     534:	029e019f 	0x29e019f
     538:	021e0d44 	0x21e0d44
     53c:	4c1d0d84 	0x4c1d0d84
     540:	000edfde 	0xedfde
     544:	00000024 	and	zero,zero,zero
     548:	00000444 	0x444
     54c:	80002ecc 	lb	zero,11980(zero)
     550:	00000230 	tge	zero,zero,0x8
     554:	48200e44 	0x48200e44
     558:	029e019f 	0x29e019f
     55c:	031e0d44 	0x31e0d44
     560:	1d0d020c 	0x1d0d020c
     564:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     568:	00000000 	nop
     56c:	00000024 	and	zero,zero,zero
     570:	00000444 	0x444
     574:	800030fc 	lb	zero,12540(zero)
     578:	00000184 	0x184
     57c:	48300e44 	0x48300e44
     580:	029e019f 	0x29e019f
     584:	031e0d44 	0x31e0d44
     588:	1d0d0160 	0x1d0d0160
     58c:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     590:	00000000 	nop
     594:	00000020 	add	zero,zero,zero
     598:	00000444 	0x444
     59c:	80003280 	lb	zero,12928(zero)
     5a0:	00000080 	sll	zero,zero,0x2
     5a4:	44100e44 	0x44100e44
     5a8:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
     5ac:	0d64021e 	jal	5900878 <__memory_size+0x58e1078>
     5b0:	0ede481d 	jal	b792074 <__memory_size+0xb772874>
     5b4:	00000000 	nop
     5b8:	0000000c 	syscall
     5bc:	ffffffff 	sdc3	$31,-1(ra)
     5c0:	7c010001 	0x7c010001
     5c4:	001d0d1f 	0x1d0d1f
     5c8:	00000020 	add	zero,zero,zero
     5cc:	000005b8 	0x5b8
     5d0:	80003300 	lb	zero,13056(zero)
     5d4:	00000098 	0x98
     5d8:	48280e44 	0x48280e44
     5dc:	029e019f 	0x29e019f
     5e0:	021e0d44 	0x21e0d44
     5e4:	4c1d0d74 	0x4c1d0d74
     5e8:	000edfde 	0xedfde
     5ec:	00000020 	add	zero,zero,zero
     5f0:	000005b8 	0x5b8
     5f4:	80003398 	lb	zero,13208(zero)
     5f8:	00000080 	sll	zero,zero,0x2
     5fc:	48280e44 	0x48280e44
     600:	029e019f 	0x29e019f
     604:	021e0d44 	0x21e0d44
     608:	4c1d0d5c 	0x4c1d0d5c
     60c:	000edfde 	0xedfde
     610:	00000020 	add	zero,zero,zero
     614:	000005b8 	0x5b8
     618:	80003418 	lb	zero,13336(zero)
     61c:	000000bc 	0xbc
     620:	48180e44 	0x48180e44
     624:	029e019f 	0x29e019f
     628:	021e0d44 	0x21e0d44
     62c:	4c1d0d98 	0x4c1d0d98
     630:	000edfde 	0xedfde
     634:	00000024 	and	zero,zero,zero
     638:	000005b8 	0x5b8
     63c:	800034d4 	lb	zero,13524(zero)
     640:	00000128 	0x128
     644:	48300e44 	0x48300e44
     648:	029e019f 	0x29e019f
     64c:	031e0d44 	0x31e0d44
     650:	1d0d0104 	0x1d0d0104
     654:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     658:	00000000 	nop
     65c:	00000020 	add	zero,zero,zero
     660:	000005b8 	0x5b8
     664:	800035fc 	lb	zero,13820(zero)
     668:	0000004c 	syscall	0x1
     66c:	48180e44 	0x48180e44
     670:	029e019f 	0x29e019f
     674:	681e0d44 	0x681e0d44
     678:	de4c1d0d 	ldc3	$12,7437(s2)
     67c:	00000edf 	0xedf
     680:	00000020 	add	zero,zero,zero
     684:	000005b8 	0x5b8
     688:	80003648 	lb	zero,13896(zero)
     68c:	0000005c 	0x5c
     690:	48200e44 	0x48200e44
     694:	029e019f 	0x29e019f
     698:	781e0d44 	0x781e0d44
     69c:	de4c1d0d 	ldc3	$12,7437(s2)
     6a0:	00000edf 	0xedf
     6a4:	00000020 	add	zero,zero,zero
     6a8:	000005b8 	0x5b8
     6ac:	800036a4 	lb	zero,13988(zero)
     6b0:	00000064 	0x64
     6b4:	48200e44 	0x48200e44
     6b8:	029e019f 	0x29e019f
     6bc:	021e0d44 	0x21e0d44
     6c0:	4c1d0d40 	0x4c1d0d40
     6c4:	000edfde 	0xedfde
     6c8:	00000020 	add	zero,zero,zero
     6cc:	000005b8 	0x5b8
     6d0:	80003708 	lb	zero,14088(zero)
     6d4:	0000005c 	0x5c
     6d8:	48200e44 	0x48200e44
     6dc:	029e019f 	0x29e019f
     6e0:	781e0d44 	0x781e0d44
     6e4:	de4c1d0d 	ldc3	$12,7437(s2)
     6e8:	00000edf 	0xedf
     6ec:	00000020 	add	zero,zero,zero
     6f0:	000005b8 	0x5b8
     6f4:	80003764 	lb	zero,14180(zero)
     6f8:	000000f4 	teq	zero,zero,0x3
     6fc:	48280e44 	0x48280e44
     700:	029e019f 	0x29e019f
     704:	021e0d44 	0x21e0d44
     708:	4c1d0dd0 	0x4c1d0dd0
     70c:	000edfde 	0xedfde
     710:	00000018 	mult	zero,zero
     714:	000005b8 	0x5b8
     718:	80003858 	lb	zero,14424(zero)
     71c:	0000004c 	syscall	0x1
     720:	48200e44 	0x48200e44
     724:	029e019f 	0x29e019f
     728:	001e0d44 	0x1e0d44
     72c:	00000024 	and	zero,zero,zero
     730:	000005b8 	0x5b8
     734:	800038a4 	lb	zero,14500(zero)
     738:	00000128 	0x128
     73c:	4c300e44 	0x4c300e44
     740:	029e019f 	0x29e019f
     744:	0d440390 	jal	5100e40 <__memory_size+0x50e1640>
     748:	0dfc021e 	jal	7f00878 <__memory_size+0x7ee1078>
     74c:	ded0501d 	ldc3	$16,20509(s6)
     750:	00000edf 	0xedf
     754:	00000020 	add	zero,zero,zero
     758:	000005b8 	0x5b8
     75c:	800039cc 	lb	zero,14796(zero)
     760:	00000070 	tge	zero,zero,0x1
     764:	44100e44 	0x44100e44
     768:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
     76c:	0d54021e 	jal	5500878 <__memory_size+0x54e1078>
     770:	0ede481d 	jal	b792074 <__memory_size+0xb772874>
     774:	00000000 	nop
     778:	00000020 	add	zero,zero,zero
     77c:	000005b8 	0x5b8
     780:	80003a3c 	lb	zero,14908(zero)
     784:	0000007c 	0x7c
     788:	48200e44 	0x48200e44
     78c:	029e019f 	0x29e019f
     790:	021e0d44 	0x21e0d44
     794:	4c1d0d58 	0x4c1d0d58
     798:	000edfde 	0xedfde
     79c:	00000020 	add	zero,zero,zero
     7a0:	000005b8 	0x5b8
     7a4:	80003ab8 	lb	zero,15032(zero)
     7a8:	00000114 	0x114
     7ac:	48200e44 	0x48200e44
     7b0:	029e019f 	0x29e019f
     7b4:	021e0d44 	0x21e0d44
     7b8:	4c1d0df0 	nmadd.s	$f23,$f0,$f1,$f29
     7bc:	000edfde 	0xedfde
     7c0:	00000024 	and	zero,zero,zero
     7c4:	000005b8 	0x5b8
     7c8:	80003bcc 	lb	zero,15308(zero)
     7cc:	00000260 	0x260
     7d0:	48480e44 	0x48480e44
     7d4:	029e019f 	0x29e019f
     7d8:	031e0d44 	0x31e0d44
     7dc:	1d0d023c 	0x1d0d023c
     7e0:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     7e4:	00000000 	nop
     7e8:	00000024 	and	zero,zero,zero
     7ec:	000005b8 	0x5b8
     7f0:	80003e2c 	lb	zero,15916(zero)
     7f4:	00000158 	0x158
     7f8:	48380e44 	0x48380e44
     7fc:	029e019f 	0x29e019f
     800:	031e0d44 	0x31e0d44
     804:	1d0d0134 	0x1d0d0134
     808:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     80c:	00000000 	nop
     810:	00000020 	add	zero,zero,zero
     814:	000005b8 	0x5b8
     818:	80003f84 	lb	zero,16260(zero)
     81c:	00000094 	0x94
     820:	48180e44 	0x48180e44
     824:	029e019f 	0x29e019f
     828:	021e0d44 	0x21e0d44
     82c:	4c1d0d70 	nmadd.s	$f21,$f0,$f1,$f29
     830:	000edfde 	0xedfde
     834:	00000020 	add	zero,zero,zero
     838:	000005b8 	0x5b8
     83c:	80004018 	lb	zero,16408(zero)
     840:	0000007c 	0x7c
     844:	48200e44 	0x48200e44
     848:	029e019f 	0x29e019f
     84c:	021e0d44 	0x21e0d44
     850:	4c1d0d58 	0x4c1d0d58
     854:	000edfde 	0xedfde
     858:	00000020 	add	zero,zero,zero
     85c:	000005b8 	0x5b8
     860:	80004094 	lb	zero,16532(zero)
     864:	00000074 	teq	zero,zero,0x1
     868:	48200e44 	0x48200e44
     86c:	029e019f 	0x29e019f
     870:	021e0d44 	0x21e0d44
     874:	4c1d0d50 	0x4c1d0d50
     878:	000edfde 	0xedfde
     87c:	00000020 	add	zero,zero,zero
     880:	000005b8 	0x5b8
     884:	80004108 	lb	zero,16648(zero)
     888:	00000074 	teq	zero,zero,0x1
     88c:	48200e44 	0x48200e44
     890:	029e019f 	0x29e019f
     894:	021e0d44 	0x21e0d44
     898:	4c1d0d50 	0x4c1d0d50
     89c:	000edfde 	0xedfde
     8a0:	00000020 	add	zero,zero,zero
     8a4:	000005b8 	0x5b8
     8a8:	8000417c 	lb	zero,16764(zero)
     8ac:	00000080 	sll	zero,zero,0x2
     8b0:	48300e44 	0x48300e44
     8b4:	029e019f 	0x29e019f
     8b8:	021e0d44 	0x21e0d44
     8bc:	4c1d0d5c 	0x4c1d0d5c
     8c0:	000edfde 	0xedfde
     8c4:	00000020 	add	zero,zero,zero
     8c8:	000005b8 	0x5b8
     8cc:	800041fc 	lb	zero,16892(zero)
     8d0:	000000a0 	0xa0
     8d4:	48300e44 	0x48300e44
     8d8:	029e019f 	0x29e019f
     8dc:	021e0d44 	0x21e0d44
     8e0:	4c1d0d7c 	0x4c1d0d7c
     8e4:	000edfde 	0xedfde
     8e8:	0000000c 	syscall
     8ec:	ffffffff 	sdc3	$31,-1(ra)
     8f0:	7c010001 	0x7c010001
     8f4:	001d0d1f 	0x1d0d1f
     8f8:	00000020 	add	zero,zero,zero
     8fc:	000008e8 	0x8e8
     900:	8000429c 	lb	zero,17052(zero)
     904:	00000064 	0x64
     908:	48200e44 	0x48200e44
     90c:	029e019f 	0x29e019f
     910:	021e0d44 	0x21e0d44
     914:	4c1d0d40 	0x4c1d0d40
     918:	000edfde 	0xedfde
     91c:	00000024 	and	zero,zero,zero
     920:	000008e8 	0x8e8
     924:	80004300 	lb	zero,17152(zero)
     928:	00000268 	0x268
     92c:	48300e44 	0x48300e44
     930:	029e019f 	0x29e019f
     934:	031e0d44 	0x31e0d44
     938:	1d0d0244 	0x1d0d0244
     93c:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     940:	00000000 	nop
     944:	00000024 	and	zero,zero,zero
     948:	000008e8 	0x8e8
     94c:	80004568 	lb	zero,17768(zero)
     950:	000002c4 	0x2c4
     954:	48380e44 	0x48380e44
     958:	029e019f 	0x29e019f
     95c:	031e0d44 	0x31e0d44
     960:	1d0d02a0 	0x1d0d02a0
     964:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     968:	00000000 	nop
     96c:	00000020 	add	zero,zero,zero
     970:	000008e8 	0x8e8
     974:	8000482c 	lb	zero,18476(zero)
     978:	000000b8 	0xb8
     97c:	48200e44 	0x48200e44
     980:	029e019f 	0x29e019f
     984:	021e0d44 	0x21e0d44
     988:	4c1d0d94 	0x4c1d0d94
     98c:	000edfde 	0xedfde
     990:	00000020 	add	zero,zero,zero
     994:	000008e8 	0x8e8
     998:	800048e4 	lb	zero,18660(zero)
     99c:	0000005c 	0x5c
     9a0:	48280e44 	0x48280e44
     9a4:	029e019f 	0x29e019f
     9a8:	781e0d44 	0x781e0d44
     9ac:	de4c1d0d 	ldc3	$12,7437(s2)
     9b0:	00000edf 	0xedf
     9b4:	00000024 	and	zero,zero,zero
     9b8:	000008e8 	0x8e8
     9bc:	80004940 	lb	zero,18752(zero)
     9c0:	000001f8 	0x1f8
     9c4:	48400e44 	0x48400e44
     9c8:	029e019f 	0x29e019f
     9cc:	031e0d44 	0x31e0d44
     9d0:	1d0d01d4 	0x1d0d01d4
     9d4:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     9d8:	00000000 	nop
     9dc:	00000020 	add	zero,zero,zero
     9e0:	000008e8 	0x8e8
     9e4:	80004b38 	lb	zero,19256(zero)
     9e8:	000000b8 	0xb8
     9ec:	48200e44 	0x48200e44
     9f0:	029e019f 	0x29e019f
     9f4:	021e0d44 	0x21e0d44
     9f8:	4c1d0d94 	0x4c1d0d94
     9fc:	000edfde 	0xedfde
     a00:	00000020 	add	zero,zero,zero
     a04:	000008e8 	0x8e8
     a08:	80004bf0 	lb	zero,19440(zero)
     a0c:	00000040 	ssnop
     a10:	48180e44 	0x48180e44
     a14:	029e019f 	0x29e019f
     a18:	5c1e0d44 	0x5c1e0d44
     a1c:	de4c1d0d 	ldc3	$12,7437(s2)
     a20:	00000edf 	0xedf
     a24:	00000020 	add	zero,zero,zero
     a28:	000008e8 	0x8e8
     a2c:	80004c30 	lb	zero,19504(zero)
     a30:	00000040 	ssnop
     a34:	48180e44 	0x48180e44
     a38:	029e019f 	0x29e019f
     a3c:	5c1e0d44 	0x5c1e0d44
     a40:	de4c1d0d 	ldc3	$12,7437(s2)
     a44:	00000edf 	0xedf
     a48:	00000020 	add	zero,zero,zero
     a4c:	000008e8 	0x8e8
     a50:	80004c70 	lb	zero,19568(zero)
     a54:	00000084 	0x84
     a58:	44100e44 	0x44100e44
     a5c:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
     a60:	0d68021e 	jal	5a00878 <__memory_size+0x59e1078>
     a64:	0ede481d 	jal	b792074 <__memory_size+0xb772874>
     a68:	00000000 	nop
     a6c:	0000000c 	syscall
     a70:	ffffffff 	sdc3	$31,-1(ra)
     a74:	7c010001 	0x7c010001
     a78:	001d0d1f 	0x1d0d1f
     a7c:	00000024 	and	zero,zero,zero
     a80:	00000a6c 	0xa6c
     a84:	80004cf4 	lb	zero,19700(zero)
     a88:	000001e0 	0x1e0
     a8c:	48380e44 	0x48380e44
     a90:	029e019f 	0x29e019f
     a94:	031e0d44 	0x31e0d44
     a98:	1d0d01bc 	0x1d0d01bc
     a9c:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     aa0:	00000000 	nop
     aa4:	00000024 	and	zero,zero,zero
     aa8:	00000a6c 	0xa6c
     aac:	80004ed4 	lb	zero,20180(zero)
     ab0:	000001fc 	0x1fc
     ab4:	48200e44 	0x48200e44
     ab8:	029e019f 	0x29e019f
     abc:	031e0d44 	0x31e0d44
     ac0:	1d0d01d8 	0x1d0d01d8
     ac4:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     ac8:	00000000 	nop
     acc:	00000024 	and	zero,zero,zero
     ad0:	00000a6c 	0xa6c
     ad4:	800050d0 	lb	zero,20688(zero)
     ad8:	00000168 	0x168
     adc:	4c280e44 	0x4c280e44
     ae0:	029e019f 	0x29e019f
     ae4:	0d440390 	jal	5100e40 <__memory_size+0x50e1640>
     ae8:	013c031e 	0x13c031e
     aec:	d0501d0d 	0xd0501d0d
     af0:	000edfde 	0xedfde
     af4:	00000024 	and	zero,zero,zero
     af8:	00000a6c 	0xa6c
     afc:	80005238 	lb	zero,21048(zero)
     b00:	000001c4 	0x1c4
     b04:	4c280e44 	0x4c280e44
     b08:	029e019f 	0x29e019f
     b0c:	0d440390 	jal	5100e40 <__memory_size+0x50e1640>
     b10:	0198031e 	0x198031e
     b14:	d0501d0d 	0xd0501d0d
     b18:	000edfde 	0xedfde
     b1c:	00000024 	and	zero,zero,zero
     b20:	00000a6c 	0xa6c
     b24:	800053fc 	lb	zero,21500(zero)
     b28:	000001bc 	0x1bc
     b2c:	4c380e44 	0x4c380e44
     b30:	029e019f 	0x29e019f
     b34:	0d440390 	jal	5100e40 <__memory_size+0x50e1640>
     b38:	0190031e 	0x190031e
     b3c:	d0501d0d 	0xd0501d0d
     b40:	000edfde 	0xedfde
     b44:	00000024 	and	zero,zero,zero
     b48:	00000a6c 	0xa6c
     b4c:	800055b8 	lb	zero,21944(zero)
     b50:	000000bc 	0xbc
     b54:	4c280e44 	0x4c280e44
     b58:	029e019f 	0x29e019f
     b5c:	0d440390 	jal	5100e40 <__memory_size+0x50e1640>
     b60:	0d90021e 	jal	6400878 <__memory_size+0x63e1078>
     b64:	ded0501d 	ldc3	$16,20509(s6)
     b68:	00000edf 	0xedf
     b6c:	00000024 	and	zero,zero,zero
     b70:	00000a6c 	0xa6c
     b74:	80005674 	lb	zero,22132(zero)
     b78:	0000013c 	0x13c
     b7c:	48280e44 	0x48280e44
     b80:	029e019f 	0x29e019f
     b84:	031e0d44 	0x31e0d44
     b88:	1d0d0118 	0x1d0d0118
     b8c:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     b90:	00000000 	nop
     b94:	00000020 	add	zero,zero,zero
     b98:	00000a6c 	0xa6c
     b9c:	800057b0 	lb	zero,22448(zero)
     ba0:	0000006c 	0x6c
     ba4:	48200e44 	0x48200e44
     ba8:	029e019f 	0x29e019f
     bac:	021e0d44 	0x21e0d44
     bb0:	4c1d0d48 	0x4c1d0d48
     bb4:	000edfde 	0xedfde
     bb8:	00000020 	add	zero,zero,zero
     bbc:	00000a6c 	0xa6c
     bc0:	8000581c 	lb	zero,22556(zero)
     bc4:	00000074 	teq	zero,zero,0x1
     bc8:	48280e44 	0x48280e44
     bcc:	029e019f 	0x29e019f
     bd0:	021e0d44 	0x21e0d44
     bd4:	4c1d0d50 	0x4c1d0d50
     bd8:	000edfde 	0xedfde
     bdc:	00000024 	and	zero,zero,zero
     be0:	00000a6c 	0xa6c
     be4:	80005890 	lb	zero,22672(zero)
     be8:	00000288 	0x288
     bec:	48300e44 	0x48300e44
     bf0:	029e019f 	0x29e019f
     bf4:	031e0d44 	0x31e0d44
     bf8:	1d0d0264 	0x1d0d0264
     bfc:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     c00:	00000000 	nop
     c04:	00000024 	and	zero,zero,zero
     c08:	00000a6c 	0xa6c
     c0c:	80005b18 	lb	zero,23320(zero)
     c10:	000001c8 	0x1c8
     c14:	4c280e44 	0x4c280e44
     c18:	029e019f 	0x29e019f
     c1c:	0d440390 	jal	5100e40 <__memory_size+0x50e1640>
     c20:	019c031e 	0x19c031e
     c24:	d0501d0d 	0xd0501d0d
     c28:	000edfde 	0xedfde
     c2c:	00000020 	add	zero,zero,zero
     c30:	00000a6c 	0xa6c
     c34:	80005ce0 	lb	zero,23776(zero)
     c38:	000000d4 	0xd4
     c3c:	48200e44 	0x48200e44
     c40:	029e019f 	0x29e019f
     c44:	021e0d44 	0x21e0d44
     c48:	4c1d0db0 	nmadd.s	$f22,$f0,$f1,$f29
     c4c:	000edfde 	0xedfde
     c50:	00000024 	and	zero,zero,zero
     c54:	00000a6c 	0xa6c
     c58:	80005db4 	lb	zero,23988(zero)
     c5c:	00000144 	0x144
     c60:	48200e44 	0x48200e44
     c64:	029e019f 	0x29e019f
     c68:	031e0d44 	0x31e0d44
     c6c:	1d0d0120 	0x1d0d0120
     c70:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     c74:	00000000 	nop
     c78:	00000024 	and	zero,zero,zero
     c7c:	00000a6c 	0xa6c
     c80:	80005ef8 	lb	zero,24312(zero)
     c84:	00000148 	0x148
     c88:	48280e44 	0x48280e44
     c8c:	029e019f 	0x29e019f
     c90:	031e0d44 	0x31e0d44
     c94:	1d0d0124 	0x1d0d0124
     c98:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     c9c:	00000000 	nop
     ca0:	00000020 	add	zero,zero,zero
     ca4:	00000a6c 	0xa6c
     ca8:	80006040 	lb	zero,24640(zero)
     cac:	00000118 	0x118
     cb0:	48280e44 	0x48280e44
     cb4:	029e019f 	0x29e019f
     cb8:	021e0d44 	0x21e0d44
     cbc:	4c1d0df4 	0x4c1d0df4
     cc0:	000edfde 	0xedfde
     cc4:	00000020 	add	zero,zero,zero
     cc8:	00000a6c 	0xa6c
     ccc:	80006158 	lb	zero,24920(zero)
     cd0:	00000080 	sll	zero,zero,0x2
     cd4:	48200e44 	0x48200e44
     cd8:	029e019f 	0x29e019f
     cdc:	021e0d44 	0x21e0d44
     ce0:	4c1d0d5c 	0x4c1d0d5c
     ce4:	000edfde 	0xedfde
     ce8:	0000001c 	0x1c
     cec:	00000a6c 	0xa6c
     cf0:	800061d8 	lb	zero,25048(zero)
     cf4:	0000002c 	0x2c
     cf8:	44080e44 	0x44080e44
     cfc:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
     d00:	1d0d501e 	0x1d0d501e
     d04:	000ede48 	0xede48
     d08:	00000024 	and	zero,zero,zero
     d0c:	00000a6c 	0xa6c
     d10:	80006204 	lb	zero,25092(zero)
     d14:	000001f0 	tge	zero,zero,0x7
     d18:	48280e44 	0x48280e44
     d1c:	029e019f 	0x29e019f
     d20:	031e0d44 	0x31e0d44
     d24:	1d0d01cc 	0x1d0d01cc
     d28:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     d2c:	00000000 	nop
     d30:	0000001c 	0x1c
     d34:	00000a6c 	0xa6c
     d38:	800063f4 	lb	zero,25588(zero)
     d3c:	0000002c 	0x2c
     d40:	44100e44 	0x44100e44
     d44:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
     d48:	1d0d501e 	0x1d0d501e
     d4c:	000ede48 	0xede48
     d50:	0000001c 	0x1c
     d54:	00000a6c 	0xa6c
     d58:	80006420 	lb	zero,25632(zero)
     d5c:	00000030 	tge	zero,zero
     d60:	44100e44 	0x44100e44
     d64:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
     d68:	1d0d541e 	0x1d0d541e
     d6c:	000ede48 	0xede48
     d70:	0000001c 	0x1c
     d74:	00000a6c 	0xa6c
     d78:	80006450 	lb	zero,25680(zero)
     d7c:	00000024 	and	zero,zero,zero
     d80:	44080e44 	0x44080e44
     d84:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
     d88:	1d0d481e 	0x1d0d481e
     d8c:	000ede48 	0xede48
     d90:	00000020 	add	zero,zero,zero
     d94:	00000a6c 	0xa6c
     d98:	80006474 	lb	zero,25716(zero)
     d9c:	00000074 	teq	zero,zero,0x1
     da0:	48200e44 	0x48200e44
     da4:	029e019f 	0x29e019f
     da8:	021e0d44 	0x21e0d44
     dac:	4c1d0d50 	0x4c1d0d50
     db0:	000edfde 	0xedfde
     db4:	00000024 	and	zero,zero,zero
     db8:	00000a6c 	0xa6c
     dbc:	800064e8 	lb	zero,25832(zero)
     dc0:	00000270 	tge	zero,zero,0x9
     dc4:	48300e44 	0x48300e44
     dc8:	029e019f 	0x29e019f
     dcc:	031e0d44 	0x31e0d44
     dd0:	1d0d024c 	0x1d0d024c
     dd4:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     dd8:	00000000 	nop
     ddc:	00000024 	and	zero,zero,zero
     de0:	00000a6c 	0xa6c
     de4:	80006758 	lb	zero,26456(zero)
     de8:	00000198 	0x198
     dec:	48280e44 	0x48280e44
     df0:	029e019f 	0x29e019f
     df4:	031e0d44 	0x31e0d44
     df8:	1d0d0174 	0x1d0d0174
     dfc:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     e00:	00000000 	nop
     e04:	00000020 	add	zero,zero,zero
     e08:	00000a6c 	0xa6c
     e0c:	800068f0 	lb	zero,26864(zero)
     e10:	00000078 	0x78
     e14:	48180e44 	0x48180e44
     e18:	029e019f 	0x29e019f
     e1c:	021e0d44 	0x21e0d44
     e20:	4c1d0d54 	0x4c1d0d54
     e24:	000edfde 	0xedfde
     e28:	00000020 	add	zero,zero,zero
     e2c:	00000a6c 	0xa6c
     e30:	80006968 	lb	zero,26984(zero)
     e34:	000000b0 	tge	zero,zero,0x2
     e38:	48180e44 	0x48180e44
     e3c:	029e019f 	0x29e019f
     e40:	021e0d44 	0x21e0d44
     e44:	4c1d0d8c 	0x4c1d0d8c
     e48:	000edfde 	0xedfde
     e4c:	00000020 	add	zero,zero,zero
     e50:	00000a6c 	0xa6c
     e54:	80006a18 	lb	zero,27160(zero)
     e58:	00000090 	0x90
     e5c:	48180e44 	0x48180e44
     e60:	029e019f 	0x29e019f
     e64:	021e0d44 	0x21e0d44
     e68:	4c1d0d6c 	0x4c1d0d6c
     e6c:	000edfde 	0xedfde
     e70:	00000024 	and	zero,zero,zero
     e74:	00000a6c 	0xa6c
     e78:	80006aa8 	lb	zero,27304(zero)
     e7c:	00000148 	0x148
     e80:	48200e44 	0x48200e44
     e84:	029e019f 	0x29e019f
     e88:	031e0d44 	0x31e0d44
     e8c:	1d0d0124 	0x1d0d0124
     e90:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     e94:	00000000 	nop
     e98:	00000024 	and	zero,zero,zero
     e9c:	00000a6c 	0xa6c
     ea0:	80006bf0 	lb	zero,27632(zero)
     ea4:	00000144 	0x144
     ea8:	48200e44 	0x48200e44
     eac:	029e019f 	0x29e019f
     eb0:	031e0d44 	0x31e0d44
     eb4:	1d0d0120 	0x1d0d0120
     eb8:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     ebc:	00000000 	nop
     ec0:	00000020 	add	zero,zero,zero
     ec4:	00000a6c 	0xa6c
     ec8:	80006d34 	lb	zero,27956(zero)
     ecc:	00000064 	0x64
     ed0:	48180e44 	0x48180e44
     ed4:	029e019f 	0x29e019f
     ed8:	021e0d44 	0x21e0d44
     edc:	4c1d0d40 	0x4c1d0d40
     ee0:	000edfde 	0xedfde
     ee4:	00000024 	and	zero,zero,zero
     ee8:	00000a6c 	0xa6c
     eec:	80006d98 	lb	zero,28056(zero)
     ef0:	00000150 	0x150
     ef4:	48200e44 	0x48200e44
     ef8:	029e019f 	0x29e019f
     efc:	031e0d44 	0x31e0d44
     f00:	1d0d012c 	0x1d0d012c
     f04:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
     f08:	00000000 	nop
     f0c:	0000001c 	0x1c
     f10:	00000a6c 	0xa6c
     f14:	80006ee8 	lb	zero,28392(zero)
     f18:	00000028 	0x28
     f1c:	44080e44 	0x44080e44
     f20:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
     f24:	1d0d4c1e 	0x1d0d4c1e
     f28:	000ede48 	0xede48
     f2c:	00000018 	mult	zero,zero
     f30:	00000a6c 	0xa6c
     f34:	80006f10 	lb	zero,28432(zero)
     f38:	00000060 	0x60
     f3c:	48200e44 	0x48200e44
     f40:	029e019f 	0x29e019f
     f44:	001e0d44 	0x1e0d44
     f48:	00000020 	add	zero,zero,zero
     f4c:	00000a6c 	0xa6c
     f50:	80006f70 	lb	zero,28528(zero)
     f54:	000000e0 	0xe0
     f58:	48200e44 	0x48200e44
     f5c:	029e019f 	0x29e019f
     f60:	021e0d44 	0x21e0d44
     f64:	4c1d0dbc 	0x4c1d0dbc
     f68:	000edfde 	0xedfde
     f6c:	00000020 	add	zero,zero,zero
     f70:	00000a6c 	0xa6c
     f74:	80007050 	lb	zero,28752(zero)
     f78:	000000c8 	0xc8
     f7c:	48200e44 	0x48200e44
     f80:	029e019f 	0x29e019f
     f84:	021e0d44 	0x21e0d44
     f88:	4c1d0da4 	0x4c1d0da4
     f8c:	000edfde 	0xedfde
     f90:	00000020 	add	zero,zero,zero
     f94:	00000a6c 	0xa6c
     f98:	80007118 	lb	zero,28952(zero)
     f9c:	00000070 	tge	zero,zero,0x1
     fa0:	44100e44 	0x44100e44
     fa4:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
     fa8:	0d54021e 	jal	5500878 <__memory_size+0x54e1078>
     fac:	0ede481d 	jal	b792074 <__memory_size+0xb772874>
     fb0:	00000000 	nop
     fb4:	00000020 	add	zero,zero,zero
     fb8:	00000a6c 	0xa6c
     fbc:	80007188 	lb	zero,29064(zero)
     fc0:	0000006c 	0x6c
     fc4:	48280e44 	0x48280e44
     fc8:	029e019f 	0x29e019f
     fcc:	021e0d44 	0x21e0d44
     fd0:	4c1d0d48 	0x4c1d0d48
     fd4:	000edfde 	0xedfde
     fd8:	00000020 	add	zero,zero,zero
     fdc:	00000a6c 	0xa6c
     fe0:	800071f4 	lb	zero,29172(zero)
     fe4:	0000004c 	syscall	0x1
     fe8:	48180e44 	0x48180e44
     fec:	029e019f 	0x29e019f
     ff0:	681e0d44 	0x681e0d44
     ff4:	de4c1d0d 	ldc3	$12,7437(s2)
     ff8:	00000edf 	0xedf
     ffc:	00000020 	add	zero,zero,zero
    1000:	00000a6c 	0xa6c
    1004:	80007240 	lb	zero,29248(zero)
    1008:	00000074 	teq	zero,zero,0x1
    100c:	44100e44 	0x44100e44
    1010:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
    1014:	0d58021e 	jal	5600878 <__memory_size+0x55e1078>
    1018:	0ede481d 	jal	b792074 <__memory_size+0xb772874>
    101c:	00000000 	nop
    1020:	0000001c 	0x1c
    1024:	00000a6c 	0xa6c
    1028:	800072b4 	lb	zero,29364(zero)
    102c:	0000002c 	0x2c
    1030:	44100e44 	0x44100e44
    1034:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
    1038:	1d0d501e 	0x1d0d501e
    103c:	000ede48 	0xede48
    1040:	00000020 	add	zero,zero,zero
    1044:	00000a6c 	0xa6c
    1048:	800072e0 	lb	zero,29408(zero)
    104c:	00000060 	0x60
    1050:	44100e44 	0x44100e44
    1054:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
    1058:	0d44021e 	jal	5100878 <__memory_size+0x50e1078>
    105c:	0ede481d 	jal	b792074 <__memory_size+0xb772874>
    1060:	00000000 	nop
    1064:	00000024 	and	zero,zero,zero
    1068:	00000a6c 	0xa6c
    106c:	80007340 	lb	zero,29504(zero)
    1070:	000001b8 	0x1b8
    1074:	48200e44 	0x48200e44
    1078:	029e019f 	0x29e019f
    107c:	031e0d44 	0x31e0d44
    1080:	1d0d0194 	0x1d0d0194
    1084:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
    1088:	00000000 	nop
    108c:	00000024 	and	zero,zero,zero
    1090:	00000a6c 	0xa6c
    1094:	800074f8 	lb	zero,29944(zero)
    1098:	000001c0 	sll	zero,zero,0x7
    109c:	48200e44 	0x48200e44
    10a0:	029e019f 	0x29e019f
    10a4:	031e0d44 	0x31e0d44
    10a8:	1d0d019c 	0x1d0d019c
    10ac:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
    10b0:	00000000 	nop
    10b4:	00000024 	and	zero,zero,zero
    10b8:	00000a6c 	0xa6c
    10bc:	800076b8 	lb	zero,30392(zero)
    10c0:	000000d4 	0xd4
    10c4:	4c280e44 	0x4c280e44
    10c8:	029e019f 	0x29e019f
    10cc:	0d440390 	jal	5100e40 <__memory_size+0x50e1640>
    10d0:	0da8021e 	jal	6a00878 <__memory_size+0x69e1078>
    10d4:	ded0501d 	ldc3	$16,20509(s6)
    10d8:	00000edf 	0xedf
    10dc:	00000020 	add	zero,zero,zero
    10e0:	00000a6c 	0xa6c
    10e4:	8000778c 	lb	zero,30604(zero)
    10e8:	0000008c 	syscall	0x2
    10ec:	48100e44 	0x48100e44
    10f0:	0290019e 	0x290019e
    10f4:	021e0d44 	0x21e0d44
    10f8:	4c1d0d68 	msub.s	$f21,$f0,$f1,$f29
    10fc:	000eded0 	0xeded0
    1100:	0000001c 	0x1c
    1104:	00000a6c 	0xa6c
    1108:	80007818 	lb	zero,30744(zero)
    110c:	00000048 	0x48
    1110:	44100e44 	0x44100e44
    1114:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
    1118:	1d0d6c1e 	0x1d0d6c1e
    111c:	000ede48 	0xede48
    1120:	0000001c 	0x1c
    1124:	00000a6c 	0xa6c
    1128:	80007860 	lb	zero,30816(zero)
    112c:	00000040 	ssnop
    1130:	44080e44 	0x44080e44
    1134:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
    1138:	1d0d641e 	0x1d0d641e
    113c:	000ede48 	0xede48
    1140:	00000020 	add	zero,zero,zero
    1144:	00000a6c 	0xa6c
    1148:	800078a0 	lb	zero,30880(zero)
    114c:	00000100 	sll	zero,zero,0x4
    1150:	48200e44 	0x48200e44
    1154:	029e019f 	0x29e019f
    1158:	021e0d44 	0x21e0d44
    115c:	4c1d0ddc 	0x4c1d0ddc
    1160:	000edfde 	0xedfde
    1164:	00000024 	and	zero,zero,zero
    1168:	00000a6c 	0xa6c
    116c:	800079a0 	lb	zero,31136(zero)
    1170:	00000144 	0x144
    1174:	48200e44 	0x48200e44
    1178:	029e019f 	0x29e019f
    117c:	031e0d44 	0x31e0d44
    1180:	1d0d0120 	0x1d0d0120
    1184:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
    1188:	00000000 	nop
    118c:	00000024 	and	zero,zero,zero
    1190:	00000a6c 	0xa6c
    1194:	80007ae4 	lb	zero,31460(zero)
    1198:	00000248 	0x248
    119c:	48280e44 	0x48280e44
    11a0:	029e019f 	0x29e019f
    11a4:	031e0d44 	0x31e0d44
    11a8:	1d0d0224 	0x1d0d0224
    11ac:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
    11b0:	00000000 	nop
    11b4:	00000024 	and	zero,zero,zero
    11b8:	00000a6c 	0xa6c
    11bc:	80007d2c 	lb	zero,32044(zero)
    11c0:	00000280 	sll	zero,zero,0xa
    11c4:	48280e44 	0x48280e44
    11c8:	029e019f 	0x29e019f
    11cc:	031e0d44 	0x31e0d44
    11d0:	1d0d025c 	0x1d0d025c
    11d4:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
    11d8:	00000000 	nop
    11dc:	00000024 	and	zero,zero,zero
    11e0:	00000a6c 	0xa6c
    11e4:	80007fac 	lb	zero,32684(zero)
    11e8:	000001b0 	tge	zero,zero,0x6
    11ec:	48280e44 	0x48280e44
    11f0:	029e019f 	0x29e019f
    11f4:	031e0d44 	0x31e0d44
    11f8:	1d0d018c 	0x1d0d018c
    11fc:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
    1200:	00000000 	nop
    1204:	00000020 	add	zero,zero,zero
    1208:	00000a6c 	0xa6c
    120c:	8000815c 	lb	zero,-32420(zero)
    1210:	00000094 	0x94
    1214:	48200e44 	0x48200e44
    1218:	029e019f 	0x29e019f
    121c:	021e0d44 	0x21e0d44
    1220:	4c1d0d70 	nmadd.s	$f21,$f0,$f1,$f29
    1224:	000edfde 	0xedfde
    1228:	00000024 	and	zero,zero,zero
    122c:	00000a6c 	0xa6c
    1230:	800081f0 	lb	zero,-32272(zero)
    1234:	00000144 	0x144
    1238:	48200e44 	0x48200e44
    123c:	029e019f 	0x29e019f
    1240:	031e0d44 	0x31e0d44
    1244:	1d0d0120 	0x1d0d0120
    1248:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
    124c:	00000000 	nop
    1250:	0000000c 	syscall
    1254:	ffffffff 	sdc3	$31,-1(ra)
    1258:	7c010001 	0x7c010001
    125c:	001d0d1f 	0x1d0d1f
    1260:	00000024 	and	zero,zero,zero
    1264:	00001250 	0x1250
    1268:	80008334 	lb	zero,-31948(zero)
    126c:	00000188 	0x188
    1270:	48200e44 	0x48200e44
    1274:	029e019f 	0x29e019f
    1278:	031e0d44 	0x31e0d44
    127c:	1d0d0164 	0x1d0d0164
    1280:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
    1284:	00000000 	nop
    1288:	00000020 	add	zero,zero,zero
    128c:	00001250 	0x1250
    1290:	800084bc 	lb	zero,-31556(zero)
    1294:	000000dc 	0xdc
    1298:	48300e44 	0x48300e44
    129c:	029e019f 	0x29e019f
    12a0:	021e0d44 	0x21e0d44
    12a4:	4c1d0db8 	nmsub.s	$f22,$f0,$f1,$f29
    12a8:	000edfde 	0xedfde
    12ac:	00000020 	add	zero,zero,zero
    12b0:	00001250 	0x1250
    12b4:	80008598 	lb	zero,-31336(zero)
    12b8:	00000098 	0x98
    12bc:	48180e44 	0x48180e44
    12c0:	029e019f 	0x29e019f
    12c4:	021e0d44 	0x21e0d44
    12c8:	4c1d0d74 	0x4c1d0d74
    12cc:	000edfde 	0xedfde
    12d0:	00000020 	add	zero,zero,zero
    12d4:	00001250 	0x1250
    12d8:	80008630 	lb	zero,-31184(zero)
    12dc:	00000068 	0x68
    12e0:	48180e44 	0x48180e44
    12e4:	029e019f 	0x29e019f
    12e8:	021e0d44 	0x21e0d44
    12ec:	4c1d0d44 	0x4c1d0d44
    12f0:	000edfde 	0xedfde
    12f4:	00000020 	add	zero,zero,zero
    12f8:	00001250 	0x1250
    12fc:	80008698 	lb	zero,-31080(zero)
    1300:	00000068 	0x68
    1304:	48280e44 	0x48280e44
    1308:	029e019f 	0x29e019f
    130c:	021e0d44 	0x21e0d44
    1310:	4c1d0d44 	0x4c1d0d44
    1314:	000edfde 	0xedfde
    1318:	00000024 	and	zero,zero,zero
    131c:	00001250 	0x1250
    1320:	80008700 	lb	zero,-30976(zero)
    1324:	000000c8 	0xc8
    1328:	4c280e44 	0x4c280e44
    132c:	029e019f 	0x29e019f
    1330:	0d440390 	jal	5100e40 <__memory_size+0x50e1640>
    1334:	0d9c021e 	jal	6700878 <__memory_size+0x66e1078>
    1338:	ded0501d 	ldc3	$16,20509(s6)
    133c:	00000edf 	0xedf
    1340:	00000024 	and	zero,zero,zero
    1344:	00001250 	0x1250
    1348:	800087c8 	lb	zero,-30776(zero)
    134c:	000000dc 	0xdc
    1350:	4c280e44 	0x4c280e44
    1354:	029e019f 	0x29e019f
    1358:	0d440390 	jal	5100e40 <__memory_size+0x50e1640>
    135c:	0db0021e 	jal	6c00878 <__memory_size+0x6be1078>
    1360:	ded0501d 	ldc3	$16,20509(s6)
    1364:	00000edf 	0xedf
    1368:	00000020 	add	zero,zero,zero
    136c:	00001250 	0x1250
    1370:	800088a4 	lb	zero,-30556(zero)
    1374:	000000ac 	0xac
    1378:	48200e44 	0x48200e44
    137c:	029e019f 	0x29e019f
    1380:	021e0d44 	0x21e0d44
    1384:	4c1d0d88 	0x4c1d0d88
    1388:	000edfde 	0xedfde
    138c:	00000024 	and	zero,zero,zero
    1390:	00001250 	0x1250
    1394:	80008950 	lb	zero,-30384(zero)
    1398:	00000410 	0x410
    139c:	48400e44 	0x48400e44
    13a0:	029e019f 	0x29e019f
    13a4:	031e0d44 	0x31e0d44
    13a8:	1d0d03ec 	0x1d0d03ec
    13ac:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
    13b0:	00000000 	nop
    13b4:	00000024 	and	zero,zero,zero
    13b8:	00001250 	0x1250
    13bc:	80008d60 	lb	zero,-29344(zero)
    13c0:	00000230 	tge	zero,zero,0x8
    13c4:	48280e44 	0x48280e44
    13c8:	029e019f 	0x29e019f
    13cc:	031e0d44 	0x31e0d44
    13d0:	1d0d020c 	0x1d0d020c
    13d4:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
    13d8:	00000000 	nop
    13dc:	00000024 	and	zero,zero,zero
    13e0:	00001250 	0x1250
    13e4:	80008f90 	lb	zero,-28784(zero)
    13e8:	000001f4 	teq	zero,zero,0x7
    13ec:	48300e44 	0x48300e44
    13f0:	029e019f 	0x29e019f
    13f4:	031e0d44 	0x31e0d44
    13f8:	1d0d01d0 	0x1d0d01d0
    13fc:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
    1400:	00000000 	nop
    1404:	00000024 	and	zero,zero,zero
    1408:	00001250 	0x1250
    140c:	80009184 	lb	zero,-28284(zero)
    1410:	0000040c 	syscall	0x10
    1414:	48400e44 	0x48400e44
    1418:	029e019f 	0x29e019f
    141c:	031e0d44 	0x31e0d44
    1420:	1d0d03e8 	0x1d0d03e8
    1424:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
    1428:	00000000 	nop
    142c:	00000024 	and	zero,zero,zero
    1430:	00001250 	0x1250
    1434:	80009590 	lb	zero,-27248(zero)
    1438:	0000018c 	syscall	0x6
    143c:	48300e44 	0x48300e44
    1440:	029e019f 	0x29e019f
    1444:	031e0d44 	0x31e0d44
    1448:	1d0d0168 	0x1d0d0168
    144c:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
    1450:	00000000 	nop
    1454:	00000024 	and	zero,zero,zero
    1458:	00001250 	0x1250
    145c:	8000971c 	lb	zero,-26852(zero)
    1460:	0000012c 	0x12c
    1464:	48280e44 	0x48280e44
    1468:	029e019f 	0x29e019f
    146c:	031e0d44 	0x31e0d44
    1470:	1d0d0108 	0x1d0d0108
    1474:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
    1478:	00000000 	nop
    147c:	00000020 	add	zero,zero,zero
    1480:	00001250 	0x1250
    1484:	80009848 	lb	zero,-26552(zero)
    1488:	0000006c 	0x6c
    148c:	48200e44 	0x48200e44
    1490:	029e019f 	0x29e019f
    1494:	021e0d44 	0x21e0d44
    1498:	4c1d0d48 	0x4c1d0d48
    149c:	000edfde 	0xedfde
    14a0:	00000020 	add	zero,zero,zero
    14a4:	00001250 	0x1250
    14a8:	800098b4 	lb	zero,-26444(zero)
    14ac:	00000080 	sll	zero,zero,0x2
    14b0:	48200e44 	0x48200e44
    14b4:	029e019f 	0x29e019f
    14b8:	021e0d44 	0x21e0d44
    14bc:	4c1d0d5c 	0x4c1d0d5c
    14c0:	000edfde 	0xedfde
    14c4:	00000020 	add	zero,zero,zero
    14c8:	00001250 	0x1250
    14cc:	80009934 	lb	zero,-26316(zero)
    14d0:	0000005c 	0x5c
    14d4:	48200e44 	0x48200e44
    14d8:	029e019f 	0x29e019f
    14dc:	781e0d44 	0x781e0d44
    14e0:	de4c1d0d 	ldc3	$12,7437(s2)
    14e4:	00000edf 	0xedf
    14e8:	00000020 	add	zero,zero,zero
    14ec:	00001250 	0x1250
    14f0:	80009990 	lb	zero,-26224(zero)
    14f4:	00000060 	0x60
    14f8:	48200e44 	0x48200e44
    14fc:	029e019f 	0x29e019f
    1500:	7c1e0d44 	ins	s8,zero,0x15,0xffffffed
    1504:	de4c1d0d 	ldc3	$12,7437(s2)
    1508:	00000edf 	0xedf
    150c:	00000024 	and	zero,zero,zero
    1510:	00001250 	0x1250
    1514:	800099f0 	lb	zero,-26128(zero)
    1518:	000001c8 	0x1c8
    151c:	48200e44 	0x48200e44
    1520:	029e019f 	0x29e019f
    1524:	031e0d44 	0x31e0d44
    1528:	1d0d01a4 	0x1d0d01a4
    152c:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
    1530:	00000000 	nop
    1534:	00000020 	add	zero,zero,zero
    1538:	00001250 	0x1250
    153c:	80009bb8 	lb	zero,-25672(zero)
    1540:	000000ac 	0xac
    1544:	48180e44 	0x48180e44
    1548:	029e019f 	0x29e019f
    154c:	021e0d44 	0x21e0d44
    1550:	4c1d0d88 	0x4c1d0d88
    1554:	000edfde 	0xedfde
    1558:	00000024 	and	zero,zero,zero
    155c:	00001250 	0x1250
    1560:	80009c64 	lb	zero,-25500(zero)
    1564:	00000184 	0x184
    1568:	48200e44 	0x48200e44
    156c:	029e019f 	0x29e019f
    1570:	031e0d44 	0x31e0d44
    1574:	1d0d0160 	0x1d0d0160
    1578:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
    157c:	00000000 	nop
    1580:	00000020 	add	zero,zero,zero
    1584:	00001250 	0x1250
    1588:	80009de8 	lb	zero,-25112(zero)
    158c:	00000064 	0x64
    1590:	48200e44 	0x48200e44
    1594:	029e019f 	0x29e019f
    1598:	021e0d44 	0x21e0d44
    159c:	4c1d0d40 	0x4c1d0d40
    15a0:	000edfde 	0xedfde
    15a4:	00000020 	add	zero,zero,zero
    15a8:	00001250 	0x1250
    15ac:	80009e4c 	lb	zero,-25012(zero)
    15b0:	00000074 	teq	zero,zero,0x1
    15b4:	48200e44 	0x48200e44
    15b8:	029e019f 	0x29e019f
    15bc:	021e0d44 	0x21e0d44
    15c0:	4c1d0d50 	0x4c1d0d50
    15c4:	000edfde 	0xedfde
    15c8:	00000020 	add	zero,zero,zero
    15cc:	00001250 	0x1250
    15d0:	80009ec0 	lb	zero,-24896(zero)
    15d4:	0000006c 	0x6c
    15d8:	48200e44 	0x48200e44
    15dc:	029e019f 	0x29e019f
    15e0:	021e0d44 	0x21e0d44
    15e4:	4c1d0d48 	0x4c1d0d48
    15e8:	000edfde 	0xedfde
    15ec:	00000020 	add	zero,zero,zero
    15f0:	00001250 	0x1250
    15f4:	80009f2c 	lb	zero,-24788(zero)
    15f8:	0000007c 	0x7c
    15fc:	48200e44 	0x48200e44
    1600:	029e019f 	0x29e019f
    1604:	021e0d44 	0x21e0d44
    1608:	4c1d0d58 	0x4c1d0d58
    160c:	000edfde 	0xedfde
    1610:	00000020 	add	zero,zero,zero
    1614:	00001250 	0x1250
    1618:	80009fa8 	lb	zero,-24664(zero)
    161c:	000000c4 	0xc4
    1620:	48200e44 	0x48200e44
    1624:	029e019f 	0x29e019f
    1628:	021e0d44 	0x21e0d44
    162c:	4c1d0da0 	madd.s	$f22,$f0,$f1,$f29
    1630:	000edfde 	0xedfde
    1634:	00000020 	add	zero,zero,zero
    1638:	00001250 	0x1250
    163c:	8000a06c 	lb	zero,-24468(zero)
    1640:	00000048 	0x48
    1644:	48200e44 	0x48200e44
    1648:	029e019f 	0x29e019f
    164c:	641e0d44 	0x641e0d44
    1650:	de4c1d0d 	ldc3	$12,7437(s2)
    1654:	00000edf 	0xedf
    1658:	00000020 	add	zero,zero,zero
    165c:	00001250 	0x1250
    1660:	8000a0b4 	lb	zero,-24396(zero)
    1664:	00000090 	0x90
    1668:	48200e44 	0x48200e44
    166c:	029e019f 	0x29e019f
    1670:	021e0d44 	0x21e0d44
    1674:	4c1d0d6c 	0x4c1d0d6c
    1678:	000edfde 	0xedfde
    167c:	00000020 	add	zero,zero,zero
    1680:	00001250 	0x1250
    1684:	8000a144 	lb	zero,-24252(zero)
    1688:	00000098 	0x98
    168c:	48200e44 	0x48200e44
    1690:	029e019f 	0x29e019f
    1694:	021e0d44 	0x21e0d44
    1698:	4c1d0d74 	0x4c1d0d74
    169c:	000edfde 	0xedfde
    16a0:	00000020 	add	zero,zero,zero
    16a4:	00001250 	0x1250
    16a8:	8000a1dc 	lb	zero,-24100(zero)
    16ac:	00000054 	0x54
    16b0:	48200e44 	0x48200e44
    16b4:	029e019f 	0x29e019f
    16b8:	701e0d44 	0x701e0d44
    16bc:	de4c1d0d 	ldc3	$12,7437(s2)
    16c0:	00000edf 	0xedf
    16c4:	00000020 	add	zero,zero,zero
    16c8:	00001250 	0x1250
    16cc:	8000a230 	lb	zero,-24016(zero)
    16d0:	0000004c 	syscall	0x1
    16d4:	48200e44 	0x48200e44
    16d8:	029e019f 	0x29e019f
    16dc:	681e0d44 	0x681e0d44
    16e0:	de4c1d0d 	ldc3	$12,7437(s2)
    16e4:	00000edf 	0xedf
    16e8:	00000024 	and	zero,zero,zero
    16ec:	00001250 	0x1250
    16f0:	8000a27c 	lb	zero,-23940(zero)
    16f4:	00000140 	pause
    16f8:	48280e44 	0x48280e44
    16fc:	029e019f 	0x29e019f
    1700:	031e0d44 	0x31e0d44
    1704:	1d0d011c 	0x1d0d011c
    1708:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
    170c:	00000000 	nop
    1710:	0000000c 	syscall
    1714:	ffffffff 	sdc3	$31,-1(ra)
    1718:	7c010001 	0x7c010001
    171c:	001d0d1f 	0x1d0d1f
    1720:	00000020 	add	zero,zero,zero
    1724:	00001710 	0x1710
    1728:	8000a3bc 	lb	zero,-23620(zero)
    172c:	00000068 	0x68
    1730:	44080e44 	0x44080e44
    1734:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
    1738:	0d4c021e 	jal	5300878 <__memory_size+0x52e1078>
    173c:	0ede481d 	jal	b792074 <__memory_size+0xb772874>
    1740:	00000000 	nop
    1744:	0000001c 	0x1c
    1748:	00001710 	0x1710
    174c:	8000a424 	lb	zero,-23516(zero)
    1750:	0000002c 	0x2c
    1754:	44080e44 	0x44080e44
    1758:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
    175c:	1d0d501e 	0x1d0d501e
    1760:	000ede48 	0xede48
    1764:	00000020 	add	zero,zero,zero
    1768:	00001710 	0x1710
    176c:	8000a450 	lb	zero,-23472(zero)
    1770:	0000008c 	syscall	0x2
    1774:	44100e44 	0x44100e44
    1778:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
    177c:	0d70021e 	jal	5c00878 <__memory_size+0x5be1078>
    1780:	0ede481d 	jal	b792074 <__memory_size+0xb772874>
    1784:	00000000 	nop
    1788:	00000020 	add	zero,zero,zero
    178c:	00001710 	0x1710
    1790:	8000a4dc 	lb	zero,-23332(zero)
    1794:	000000ec 	0xec
    1798:	44100e44 	0x44100e44
    179c:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
    17a0:	0dd0021e 	jal	7400878 <__memory_size+0x73e1078>
    17a4:	0ede481d 	jal	b792074 <__memory_size+0xb772874>
    17a8:	00000000 	nop
    17ac:	00000020 	add	zero,zero,zero
    17b0:	00001710 	0x1710
    17b4:	8000a5c8 	lb	zero,-23096(zero)
    17b8:	000000a0 	0xa0
    17bc:	44100e44 	0x44100e44
    17c0:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
    17c4:	0d84021e 	jal	6100878 <__memory_size+0x60e1078>
    17c8:	0ede481d 	jal	b792074 <__memory_size+0xb772874>
    17cc:	00000000 	nop
    17d0:	0000000c 	syscall
    17d4:	ffffffff 	sdc3	$31,-1(ra)
    17d8:	7c010001 	0x7c010001
    17dc:	001d0d1f 	0x1d0d1f
    17e0:	00000020 	add	zero,zero,zero
    17e4:	000017d0 	0x17d0
    17e8:	8000a668 	lb	zero,-22936(zero)
    17ec:	00000054 	0x54
    17f0:	48080e44 	0x48080e44
    17f4:	0290019e 	0x290019e
    17f8:	701e0d44 	0x701e0d44
    17fc:	d04c1d0d 	0xd04c1d0d
    1800:	00000ede 	0xede
    1804:	00000020 	add	zero,zero,zero
    1808:	000017d0 	0x17d0
    180c:	8000a6bc 	lb	zero,-22852(zero)
    1810:	000000ac 	0xac
    1814:	48200e44 	0x48200e44
    1818:	029e019f 	0x29e019f
    181c:	021e0d44 	0x21e0d44
    1820:	4c1d0d88 	0x4c1d0d88
    1824:	000edfde 	0xedfde
    1828:	0000001c 	0x1c
    182c:	000017d0 	0x17d0
    1830:	8000a768 	lb	zero,-22680(zero)
    1834:	00000030 	tge	zero,zero
    1838:	44080e44 	0x44080e44
    183c:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
    1840:	1d0d541e 	0x1d0d541e
    1844:	000ede48 	0xede48
    1848:	00000020 	add	zero,zero,zero
    184c:	000017d0 	0x17d0
    1850:	8000a798 	lb	zero,-22632(zero)
    1854:	0000004c 	syscall	0x1
    1858:	48180e44 	0x48180e44
    185c:	029e019f 	0x29e019f
    1860:	681e0d44 	0x681e0d44
    1864:	de4c1d0d 	ldc3	$12,7437(s2)
    1868:	00000edf 	0xedf
    186c:	00000020 	add	zero,zero,zero
    1870:	000017d0 	0x17d0
    1874:	8000a7e4 	lb	zero,-22556(zero)
    1878:	00000030 	tge	zero,zero
    187c:	48180e44 	0x48180e44
    1880:	029e019f 	0x29e019f
    1884:	4c1e0d44 	0x4c1e0d44
    1888:	de4c1d0d 	ldc3	$12,7437(s2)
    188c:	00000edf 	0xedf
    1890:	00000020 	add	zero,zero,zero
    1894:	000017d0 	0x17d0
    1898:	8000a814 	lb	zero,-22508(zero)
    189c:	00000078 	0x78
    18a0:	48180e44 	0x48180e44
    18a4:	029e019f 	0x29e019f
    18a8:	021e0d44 	0x21e0d44
    18ac:	4c1d0d54 	0x4c1d0d54
    18b0:	000edfde 	0xedfde
    18b4:	00000020 	add	zero,zero,zero
    18b8:	000017d0 	0x17d0
    18bc:	8000a88c 	lb	zero,-22388(zero)
    18c0:	00000058 	0x58
    18c4:	48100e44 	0x48100e44
    18c8:	0290019e 	0x290019e
    18cc:	741e0d44 	jalx	783510 <__memory_size+0x763d10>
    18d0:	d04c1d0d 	0xd04c1d0d
    18d4:	00000ede 	0xede
    18d8:	00000024 	and	zero,zero,zero
    18dc:	000017d0 	0x17d0
    18e0:	8000a8e4 	lb	zero,-22300(zero)
    18e4:	00000128 	0x128
    18e8:	48080e44 	0x48080e44
    18ec:	0290019e 	0x290019e
    18f0:	031e0d44 	0x31e0d44
    18f4:	1d0d0104 	0x1d0d0104
    18f8:	0eded04c 	jal	b7b4130 <__memory_size+0xb794930>
    18fc:	00000000 	nop
    1900:	00000018 	mult	zero,zero
    1904:	000017d0 	0x17d0
    1908:	8000aa0c 	lb	zero,-22004(zero)
    190c:	00000084 	0x84
    1910:	48200e44 	0x48200e44
    1914:	029e019f 	0x29e019f
    1918:	001e0d44 	0x1e0d44
    191c:	00000018 	mult	zero,zero
    1920:	000017d0 	0x17d0
    1924:	8000aa90 	lb	zero,-21872(zero)
    1928:	00000028 	0x28
    192c:	44080e44 	0x44080e44
    1930:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
    1934:	0000001e 	0x1e
    1938:	00000018 	mult	zero,zero
    193c:	000017d0 	0x17d0
    1940:	8000aab8 	lb	zero,-21832(zero)
    1944:	00000028 	0x28
    1948:	44080e44 	0x44080e44
    194c:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
    1950:	0000001e 	0x1e
    1954:	0000001c 	0x1c
    1958:	000017d0 	0x17d0
    195c:	8000aae0 	lb	zero,-21792(zero)
    1960:	0000002c 	0x2c
    1964:	44100e44 	0x44100e44
    1968:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
    196c:	1d0d501e 	0x1d0d501e
    1970:	000ede48 	0xede48
    1974:	0000001c 	0x1c
    1978:	000017d0 	0x17d0
    197c:	8000ab0c 	lb	zero,-21748(zero)
    1980:	0000002c 	0x2c
    1984:	44080e44 	0x44080e44
    1988:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
    198c:	1d0d501e 	0x1d0d501e
    1990:	000ede48 	0xede48
    1994:	00000020 	add	zero,zero,zero
    1998:	000017d0 	0x17d0
    199c:	8000ab38 	lb	zero,-21704(zero)
    19a0:	00000044 	0x44
    19a4:	48200e44 	0x48200e44
    19a8:	029e019f 	0x29e019f
    19ac:	601e0d44 	0x601e0d44
    19b0:	de4c1d0d 	ldc3	$12,7437(s2)
    19b4:	00000edf 	0xedf
    19b8:	00000020 	add	zero,zero,zero
    19bc:	000017d0 	0x17d0
    19c0:	8000ab7c 	lb	zero,-21636(zero)
    19c4:	00000044 	0x44
    19c8:	48200e44 	0x48200e44
    19cc:	029e019f 	0x29e019f
    19d0:	601e0d44 	0x601e0d44
    19d4:	de4c1d0d 	ldc3	$12,7437(s2)
    19d8:	00000edf 	0xedf
    19dc:	0000000c 	syscall
    19e0:	ffffffff 	sdc3	$31,-1(ra)
    19e4:	7c010001 	0x7c010001
    19e8:	001d0d1f 	0x1d0d1f
    19ec:	00000024 	and	zero,zero,zero
    19f0:	000019dc 	0x19dc
    19f4:	8000abc0 	lb	zero,-21568(zero)
    19f8:	00000228 	0x228
    19fc:	48300e44 	0x48300e44
    1a00:	029e019f 	0x29e019f
    1a04:	031e0d44 	0x31e0d44
    1a08:	1d0d0204 	0x1d0d0204
    1a0c:	0edfde4c 	jal	b7f7930 <__memory_size+0xb7d8130>
    1a10:	00000000 	nop
    1a14:	00000020 	add	zero,zero,zero
    1a18:	000019dc 	0x19dc
    1a1c:	8000ade8 	lb	zero,-21016(zero)
    1a20:	000000e0 	0xe0
    1a24:	48280e44 	0x48280e44
    1a28:	029e019f 	0x29e019f
    1a2c:	021e0d44 	0x21e0d44
    1a30:	4c1d0dbc 	0x4c1d0dbc
    1a34:	000edfde 	0xedfde
    1a38:	0000001c 	0x1c
    1a3c:	000019dc 	0x19dc
    1a40:	8000aec8 	lb	zero,-20792(zero)
    1a44:	00000024 	and	zero,zero,zero
    1a48:	44080e44 	0x44080e44
    1a4c:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
    1a50:	1d0d481e 	0x1d0d481e
    1a54:	000ede48 	0xede48
    1a58:	0000001c 	0x1c
    1a5c:	000019dc 	0x19dc
    1a60:	8000aeec 	lb	zero,-20756(zero)
    1a64:	00000020 	add	zero,zero,zero
    1a68:	44080e44 	0x44080e44
    1a6c:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
    1a70:	1d0d441e 	0x1d0d441e
    1a74:	000ede48 	0xede48
    1a78:	00000020 	add	zero,zero,zero
    1a7c:	000019dc 	0x19dc
    1a80:	8000af0c 	lb	zero,-20724(zero)
    1a84:	00000068 	0x68
    1a88:	44100e44 	0x44100e44
    1a8c:	0d44019e 	jal	5100678 <__memory_size+0x50e0e78>
    1a90:	0d4c021e 	jal	5300878 <__memory_size+0x52e1078>
    1a94:	0ede481d 	jal	b792074 <__memory_size+0xb772874>
    1a98:	00000000 	nop
    1a9c:	0000000c 	syscall
    1aa0:	ffffffff 	sdc3	$31,-1(ra)
    1aa4:	7c010001 	0x7c010001
    1aa8:	001d0d1f 	0x1d0d1f
    1aac:	00000018 	mult	zero,zero
    1ab0:	00001a9c 	0x1a9c
    1ab4:	8000afbc 	lb	zero,-20548(zero)
    1ab8:	00000028 	0x28
    1abc:	50180e44 	beql	zero,t8,53d0 <__isr_vec_space+0x53b0>
    1ac0:	0e54019f 	jal	950067c <__memory_size+0x94e0e7c>
    1ac4:	0000df00 	sll	k1,zero,0x1c
    1ac8:	0000000c 	syscall
    1acc:	ffffffff 	sdc3	$31,-1(ra)
    1ad0:	7c010001 	0x7c010001
    1ad4:	001d0d1f 	0x1d0d1f
    1ad8:	00000014 	0x14
    1adc:	00001ac8 	0x1ac8
    1ae0:	8000afe4 	lb	zero,-20508(zero)
    1ae4:	0000003c 	0x3c
    1ae8:	4c180e44 	0x4c180e44
    1aec:	019f0290 	0x19f0290
    1af0:	0000000c 	syscall
    1af4:	ffffffff 	sdc3	$31,-1(ra)
    1af8:	7c010001 	0x7c010001
    1afc:	001d0d1f 	0x1d0d1f
    1b00:	0000000c 	syscall
    1b04:	00001af0 	tge	zero,zero,0x6b
    1b08:	8000b020 	lb	zero,-20448(zero)
    1b0c:	00000038 	0x38
    1b10:	0000000c 	syscall
    1b14:	ffffffff 	sdc3	$31,-1(ra)
    1b18:	7c010001 	0x7c010001
    1b1c:	001d0d1f 	0x1d0d1f
    1b20:	0000002c 	0x2c
    1b24:	00001b10 	0x1b10
    1b28:	8000b520 	lb	zero,-19168(zero)
    1b2c:	00000110 	0x110
    1b30:	48280e44 	0x48280e44
    1b34:	94480690 	lhu	t0,1680(v0)
    1b38:	03934802 	0x3934802
    1b3c:	4c049248 	0x4c049248
    1b40:	019f0591 	0x19f0591
    1b44:	000ee002 	srl	gp,t6,0x0
    1b48:	d3d2d1d0 	0xd3d2d1d0
    1b4c:	0000dfd4 	0xdfd4
    1b50:	0000000c 	syscall
    1b54:	ffffffff 	sdc3	$31,-1(ra)
    1b58:	7c010001 	0x7c010001
    1b5c:	001d0d1f 	0x1d0d1f
    1b60:	00000038 	0x38
    1b64:	00001b50 	0x1b50
    1b68:	8000b630 	lb	zero,-18896(zero)
    1b6c:	00000180 	sll	zero,zero,0x6
    1b70:	48400e44 	0x48400e44
    1b74:	97480793 	lhu	t0,1939(k0)
    1b78:	04965003 	0x4965003
    1b7c:	9f600694 	0x9f600694
    1b80:	95029e01 	lhu	v0,-25087(t0)
    1b84:	91089205 	lbu	t0,-28155(t0)
    1b88:	030a9009 	0x30a9009
    1b8c:	000e013c 	0xe013c
    1b90:	d3d2d1d0 	0xd3d2d1d0
    1b94:	d7d6d5d4 	ldc1	$f22,-10796(s8)
    1b98:	0000dfde 	0xdfde
    1b9c:	0000000c 	syscall
    1ba0:	ffffffff 	sdc3	$31,-1(ra)
    1ba4:	7c010001 	0x7c010001
    1ba8:	001d0d1f 	0x1d0d1f
    1bac:	00000020 	add	zero,zero,zero
    1bb0:	00001b9c 	0x1b9c
    1bb4:	8000b7b0 	lb	zero,-18512(zero)
    1bb8:	00000088 	0x88
    1bbc:	44280e44 	0x44280e44
    1bc0:	91480392 	lbu	t0,914(t2)
    1bc4:	05904804 	bltzal	t4,13bd8 <__isr_vec_space+0x13bb8>
    1bc8:	9f029354 	0x9f029354
    1bcc:	00000001 	movf	zero,zero,$fcc0
    1bd0:	0000000c 	syscall
    1bd4:	ffffffff 	sdc3	$31,-1(ra)
    1bd8:	7c010001 	0x7c010001
    1bdc:	001d0d1f 	0x1d0d1f
    1be0:	0000000c 	syscall
    1be4:	00001bd0 	0x1bd0
    1be8:	8000b8f0 	lb	zero,-18192(zero)
    1bec:	0000004c 	syscall	0x1

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	69755f5f 	0x69755f5f
       4:	5f38746e 	0x5f38746e
       8:	69540074 	0x69540074
       c:	79546b63 	ld.d	$w13,2720(t5)
      10:	745f6570 	jalx	17d95c0 <__memory_size+0x17b9dc0>
      14:	69616d00 	0x69616d00
      18:	6c625f6e 	0x6c625f6e
      1c:	796b6e69 	0x796b6e69
      20:	73756a5f 	udi15	k1,s5,t5,0x9
      24:	50760074 	beql	v1,s6,1f8 <__isr_vec_space+0x1d8>
      28:	65547261 	0x65547261
      2c:	6f547473 	0x6f547473
      30:	656c6767 	0x656c6767
      34:	0044454c 	syscall	0x11115
      38:	75657551 	jalx	595d544 <__memory_size+0x593dd44>
      3c:	6e614865 	0x6e614865
      40:	5f656c64 	0x5f656c64
      44:	41760074 	0x41760074
      48:	72657373 	d32sar	xr13,xr12,xr5,xr9,9
      4c:	6c614374 	0x6c614374
      50:	0064656c 	0x64656c
      54:	726f5076 	0x726f5076
      58:	61745374 	0x61745374
      5c:	69467472 	0x69467472
      60:	54747372 	bnel	v1,s4,1ce2c <__isr_vec_space+0x1ce0c>
      64:	006b7361 	0x6b7361
      68:	69736e75 	0x69736e75
      6c:	64656e67 	0x64656e67
      70:	61686320 	0x61686320
      74:	756a0072 	jalx	5a801c8 <__memory_size+0x5a609c8>
      78:	61547473 	0x61547473
      7c:	70006b73 	d32sar	xr13,xr10,xr1,xr0,0
      80:	75517672 	jalx	545d9c8 <__memory_size+0x543e1c8>
      84:	52657565 	beql	s3,a1,1d61c <__isr_vec_space+0x1d5fc>
      88:	69656365 	0x69656365
      8c:	61546576 	0x61546576
      90:	73006b73 	d32sar	xr13,xr10,xr1,xr0,12
      94:	74726f68 	jalx	1c9bda0 <__memory_size+0x1c7c5a0>
      98:	736e7520 	0x736e7520
      9c:	656e6769 	0x656e6769
      a0:	6e692064 	0x6e692064
      a4:	72730074 	q16sll	xr1,xr0,xr12,xr12,9
      a8:	616d2f63 	0x616d2f63
      ac:	625f6e69 	0x625f6e69
      b0:	6b6e696c 	0x6b6e696c
      b4:	00632e79 	0x632e79
      b8:	4c5f4f49 	0x4c5f4f49
      bc:	00524445 	0x524445
      c0:	61566c75 	0x61566c75
      c4:	5465756c 	bnel	v1,a1,1d678 <__isr_vec_space+0x1d658>
      c8:	6e65536f 	0x6e65536f
      cc:	6c750064 	0x6c750064
      d0:	65636552 	0x65636552
      d4:	64657669 	0x64657669
      d8:	756c6156 	jalx	5b18558 <__memory_size+0x5af8d58>
      dc:	5f5f0065 	0x5f5f0065
      e0:	746e6975 	jalx	1b9a5d4 <__memory_size+0x1b7add4>
      e4:	745f3233 	jalx	17cc8cc <__memory_size+0x17ad0cc>
      e8:	50767000 	beql	v1,s6,1c0ec <__isr_vec_space+0x1c0cc>
      ec:	6d617261 	0x6d617261
      f0:	72657465 	s8sdi	xr1,s3,93,ptn1
      f4:	69540073 	0x69540073
      f8:	4872656d 	mfhc2	s2,0x656d
      fc:	6c646e61 	0x6c646e61
     100:	00745f65 	0x745f65
     104:	676e6f6c 	0x676e6f6c
     108:	6e6f6c20 	0x6e6f6c20
     10c:	6e752067 	0x6e752067
     110:	6e676973 	0x6e676973
     114:	69206465 	0x69206465
     118:	7000746e 	0x7000746e
     11c:	6c427672 	0x6c427672
     120:	796b6e69 	0x796b6e69
     124:	656d6954 	0x656d6954
     128:	6c614372 	0x6c614372
     12c:	6361626c 	0x6361626c
     130:	6973006b 	0x6973006b
     134:	7974657a 	0x7974657a
     138:	6d006570 	0x6d006570
     13c:	5f6e6961 	0x5f6e6961
     140:	6e696c62 	0x6e696c62
     144:	7800796b 	0x7800796b
     148:	7478654e 	jalx	1e19538 <__memory_size+0x1df9d38>
     14c:	656b6157 	0x656b6157
     150:	656d6954 	0x656d6954
     154:	6e6f6c00 	0x6e6f6c00
     158:	6f6c2067 	0x6f6c2067
     15c:	6920676e 	0x6920676e
     160:	2f00746e 	sltiu	zero,t8,29806
     164:	656d6f68 	0x656d6f68
     168:	6972672f 	0x6972672f
     16c:	2f796568 	sltiu	t9,k1,25960
     170:	44555453 	0x44555453
     174:	6572462f 	0x6572462f
     178:	4f545265 	c3	0x1545265
     17c:	696d5f53 	0x696d5f53
     180:	442f7370 	0x442f7370
     184:	2f6f6d65 	sltiu	t7,k1,28005
     188:	5350494d 	beql	k0,s0,126c0 <__isr_vec_space+0x126a0>
     18c:	61677066 	0x61677066
     190:	646f435f 	0x646f435f
     194:	61635365 	0x61635365
     198:	73006570 	d32sll	xr5,xr9,xr1,xr0,12
     19c:	74726f68 	jalx	1c9bda0 <__memory_size+0x1c7c5a0>
     1a0:	746e6920 	jalx	1b9a480 <__memory_size+0x1b7ac80>
     1a4:	554e4700 	bnel	t2,t6,11da8 <__isr_vec_space+0x11d88>
     1a8:	34204320 	ori	zero,at,0x4320
     1ac:	322e392e 	andi	t6,s1,0x392e
     1b0:	656d2d20 	0x656d2d20
     1b4:	6d2d206c 	0x6d2d206c
     1b8:	6d2d6f6e 	0x6d2d6f6e
     1bc:	2d207563 	sltiu	zero,t1,30051
     1c0:	666f736d 	0x666f736d
     1c4:	6c662d74 	0x6c662d74
     1c8:	2074616f 	addi	s4,v1,24943
     1cc:	72616d2d 	s16sdi	xr4,s3,182,ptn0
     1d0:	6d3d6863 	0x6d3d6863
     1d4:	636b3431 	0x636b3431
     1d8:	706d2d20 	0x706d2d20
     1dc:	2d20746c 	sltiu	zero,t1,29804
     1e0:	7370696d 	s16sdi	xr5,k1,52,
     1e4:	32723233 	andi	s2,s3,0x3233
     1e8:	736d2d20 	0x736d2d20
     1ec:	69636e79 	0x69636e79
     1f0:	616d2d20 	0x616d2d20
     1f4:	333d6962 	andi	sp,t9,0x6962
     1f8:	672d2032 	0x672d2032
     1fc:	304f2d20 	andi	t7,v0,0x2d20
     200:	76727000 	jalx	9c9c000 <__memory_size+0x9c7c800>
     204:	75657551 	jalx	595d544 <__memory_size+0x593dd44>
     208:	6e655365 	0x6e655365
     20c:	73615464 	s8ldi	xr1,k1,85,ptn0
     210:	4255006b 	c0	0x55006b
     214:	54657361 	bnel	v1,a1,1cf9c <__isr_vec_space+0x1cf7c>
     218:	5f657079 	0x5f657079
     21c:	78750074 	0x78750074
     220:	0044454c 	syscall	0x11115
     224:	70704176 	0x70704176
     228:	6163696c 	0x6163696c
     22c:	6e6f6974 	0x6e6f6974
     230:	6b636954 	0x6b636954
     234:	6b6f6f48 	0x6b6f6f48
     238:	73615400 	0x73615400
     23c:	6e61486b 	0x6e61486b
     240:	5f656c64 	0x5f656c64
     244:	65720074 	0x65720074
     248:	5f323367 	0x5f323367
     24c:	616d0074 	0x616d0074
     250:	70006e69 	0x70006e69
     254:	6c694663 	0x6c694663
     258:	6d614e65 	0x6d614e65
     25c:	72700065 	s8sdi	xr1,s3,0,
     260:	74655376 	jalx	1954dd8 <__memory_size+0x19355d8>
     264:	61487075 	0x61487075
     268:	61776472 	0x61776472
     26c:	76006572 	jalx	80195c8 <__memory_size+0x7ff9dc8>
     270:	6c707041 	0x6c707041
     274:	74616369 	jalx	1858da4 <__memory_size+0x18395a4>
     278:	4d6e6f69 	msub.d	$f29,$f11,$f13,$f14
     27c:	6f6c6c61 	0x6f6c6c61
     280:	69614663 	0x69614663
     284:	4864656c 	mfhc2	a0,0x656c
     288:	006b6f6f 	0x6b6f6f
     28c:	69466370 	0x69466370
     290:	7500656c 	jalx	40195b0 <__memory_size+0x3ff9db0>
     294:	6e694c6c 	0x6e694c6c
     298:	72730065 	s8sdi	xr1,s3,-64,
     29c:	616d2f63 	0x616d2f63
     2a0:	632e6e69 	0x632e6e69
     2a4:	54787000 	bnel	v1,t8,1c2a8 <__isr_vec_space+0x1c288>
     2a8:	006b7361 	0x6b7361
     2ac:	61546370 	0x61546370
     2b0:	614e6b73 	0x614e6b73
     2b4:	7500656d 	jalx	40195b4 <__memory_size+0x3ff9db4>
     2b8:	6e694c6c 	0x6e694c6c
     2bc:	6d754e65 	0x6d754e65
     2c0:	00726562 	0x726562
     2c4:	70704176 	0x70704176
     2c8:	6163696c 	0x6163696c
     2cc:	6e6f6974 	0x6e6f6974
     2d0:	63617453 	0x63617453
     2d4:	65764f6b 	0x65764f6b
     2d8:	6f6c6672 	0x6f6c6672
     2dc:	6f6f4877 	0x6f6f4877
     2e0:	6c75006b 	0x6c75006b
     2e4:	74617453 	jalx	185d14c <__memory_size+0x183d94c>
     2e8:	76007375 	jalx	801cdd4 <__memory_size+0x7ffd5d4>
     2ec:	6c707041 	0x6c707041
     2f0:	74616369 	jalx	1858da4 <__memory_size+0x18395a4>
     2f4:	496e6f69 	0x496e6f69
     2f8:	48656c64 	mfhc2	a1,0x6c64
     2fc:	006b6f6f 	0x6b6f6f
     300:	61436c75 	0x61436c75
     304:	6f436c6c 	0x6f436c6c
     308:	00746e75 	0x746e75
     30c:	61745376 	0x61745376
     310:	75517472 	jalx	545d1c8 <__memory_size+0x543d9c8>
     314:	4f657565 	c3	0x1657565
     318:	77726576 	jalx	dc995d8 <__memory_size+0xdc79dd8>
     31c:	65746972 	0x65746972
     320:	6b736154 	0x6b736154
     324:	546c7500 	bnel	v1,t4,1d728 <__isr_vec_space+0x1d708>
     328:	78003278 	0x78003278
     32c:	6b736154 	0x6b736154
     330:	75657551 	jalx	595d544 <__memory_size+0x593dd44>
     334:	6c750065 	0x6c750065
     338:	756c6156 	jalx	5b18558 <__memory_size+0x5af8d58>
     33c:	49780065 	0x49780065
     340:	65545253 	0x65545253
     344:	74537473 	jalx	14dd1cc <__memory_size+0x14bd9cc>
     348:	73757461 	0x73757461
     34c:	546c7500 	bnel	v1,t4,1d750 <__isr_vec_space+0x1d730>
     350:	2e003178 	sltiu	zero,s0,12664
     354:	6f432f2e 	0x6f432f2e
     358:	6e6f6d6d 	0x6e6f6d6d
     35c:	6e694d2f 	0x6e694d2f
     360:	6c616d69 	0x6c616d69
     364:	6575512f 	0x6575512f
     368:	764f6575 	jalx	93d95d4 <__memory_size+0x93b9dd4>
     36c:	72777265 	s8sdi	xr9,s3,-36,
     370:	2e657469 	sltiu	a1,s3,29801
     374:	72700063 	s8std	xr1,s3,0,
     378:	65755176 	0x65755176
     37c:	764f6575 	jalx	93d95d4 <__memory_size+0x93b9dd4>
     380:	72777265 	s8sdi	xr9,s3,-36,
     384:	54657469 	bnel	v1,a1,1d52c <__isr_vec_space+0x1d50c>
     388:	006b7361 	0x6b7361
     38c:	6f4c6c75 	0x6f4c6c75
     390:	6f43706f 	0x6f43706f
     394:	65746e75 	0x65746e75
     398:	78750072 	0x78750072
     39c:	6f697250 	0x6f697250
     3a0:	79746972 	0x79746972
     3a4:	75517600 	jalx	545d800 <__memory_size+0x543e000>
     3a8:	4f657565 	c3	0x1657565
     3ac:	77726576 	jalx	dc995d8 <__memory_size+0xdc79dd8>
     3b0:	65746972 	0x65746972
     3b4:	69726550 	0x69726550
     3b8:	6369646f 	0x6369646f
     3bc:	44525349 	0x44525349
     3c0:	006f6d65 	0x6f6d65
     3c4:	78526c75 	0x78526c75
     3c8:	51787500 	beql	t3,t8,1d7cc <__isr_vec_space+0x1d7ac>
     3cc:	65756575 	0x65756575
     3d0:	676e654c 	0x676e654c
     3d4:	78006874 	0x78006874
     3d8:	51525349 	beql	t2,s2,15100 <__isr_vec_space+0x150e0>
     3dc:	65756575 	0x65756575
     3e0:	4e6c7500 	c3	0x6c7500
     3e4:	65626d75 	0x65626d75
     3e8:	53664f72 	beql	k1,a2,141b4 <__isr_vec_space+0x14194>
     3ec:	63746977 	0x63746977
     3f0:	73614368 	lxhu	t0,k1,at,1
     3f4:	78007365 	st.h	$w13,0(t6)
     3f8:	75517349 	jalx	545cd24 <__memory_size+0x543d524>
     3fc:	4f657565 	c3	0x1657565
     400:	77726576 	jalx	dc995d8 <__memory_size+0xdc79dd8>
     404:	65746972 	0x65746972
     408:	6b736154 	0x6b736154
     40c:	6c697453 	0x6c697453
     410:	6e75526c 	0x6e75526c
     414:	676e696e 	0x676e696e
     418:	51787500 	beql	t3,t8,1d81c <__isr_vec_space+0x1d7fc>
     41c:	65756575 	0x65756575
     420:	72576f54 	s32ldir	xr13,s2,1900
     424:	54657469 	bnel	v1,a1,1d5cc <__isr_vec_space+0x1d5ac>
     428:	6c75006f 	0x6c75006f
     42c:	54525349 	bnel	v0,s2,15154 <__isr_vec_space+0x15134>
     430:	6c615678 	0x6c615678
     434:	70006575 	q16slr	xr5,xr9,xr1,xr0,0
     438:	68437672 	0x68437672
     43c:	526b6365 	beql	s3,t3,191d4 <__isr_vec_space+0x191b4>
     440:	69656365 	0x69656365
     444:	56646576 	bnel	s3,a0,19a20 <__isr_vec_space+0x19a00>
     448:	65756c61 	0x65756c61
     44c:	75517800 	jalx	545e000 <__memory_size+0x543e800>
     450:	53657565 	beql	k1,a1,1d9e8 <__isr_vec_space+0x1d9c8>
     454:	70007465 	s8sdi	xr1,zero,29,ptn0
     458:	65537672 	0x65537672
     45c:	6f54646e 	0x6f54646e
     460:	75657551 	jalx	595d544 <__memory_size+0x593dd44>
     464:	536e4965 	beql	k1,t6,129fc <__isr_vec_space+0x129dc>
     468:	72467465 	s8sdi	xr1,s2,-99,ptn1
     46c:	53496d6f 	beql	k0,t1,1ba2c <__isr_vec_space+0x1ba0c>
     470:	69730052 	0x69730052
     474:	745f657a 	jalx	17d95e8 <__memory_size+0x17b9de8>
     478:	456c7500 	bz.v	$w12,1d87c <__isr_vec_space+0x1d85c>
     47c:	63657078 	0x63657078
     480:	52646574 	beql	s3,a0,19a54 <__isr_vec_space+0x19a34>
     484:	69656365 	0x69656365
     488:	00646576 	tne	v1,a0,0x195
     48c:	65526c75 	0x65526c75
     490:	76696563 	jalx	9a5958c <__memory_size+0x9a39d8c>
     494:	78006465 	st.h	$w17,0(t4)
     498:	75657551 	jalx	595d544 <__memory_size+0x593dd44>
     49c:	556e4965 	bnel	t3,t6,12a34 <__isr_vec_space+0x12a14>
     4a0:	78006573 	0x78006573
     4a4:	69746341 	0x69746341
     4a8:	65746176 	0x65746176
     4ac:	65755164 	0x65755164
     4b0:	75006575 	jalx	40195d4 <__memory_size+0x3ff9dd4>
     4b4:	6f6f4c6c 	0x6f6f4c6c
     4b8:	75007370 	jalx	401cdc0 <__memory_size+0x3ffd5c0>
     4bc:	7078456c 	s16ldi	xr5,v1,34,ptn3
     4c0:	65746365 	0x65746365
     4c4:	63655264 	0x63655264
     4c8:	65766965 	0x65766965
     4cc:	6f724664 	0x6f724664
     4d0:	5253496d 	beql	s2,s3,12a88 <__isr_vec_space+0x12a68>
     4d4:	76727000 	jalx	9c9c000 <__memory_size+0x9c7c800>
     4d8:	63656843 	0x63656843
     4dc:	6365526b 	0x6365526b
     4e0:	65766965 	0x65766965
     4e4:	6c615664 	0x6c615664
     4e8:	69576575 	0x69576575
     4ec:	6e696874 	0x6e696874
     4f0:	65707845 	0x65707845
     4f4:	64657463 	0x64657463
     4f8:	676e6152 	0x676e6152
     4fc:	75510065 	jalx	5440194 <__memory_size+0x5420994>
     500:	53657565 	beql	k1,a1,1da98 <__isr_vec_space+0x1da78>
     504:	61487465 	0x61487465
     508:	656c646e 	0x656c646e
     50c:	7000745f 	udi15	zero,zero,t6,0x11
     510:	61527672 	0x61527672
     514:	7000646e 	0x7000646e
     518:	75517672 	jalx	545d9c8 <__memory_size+0x543e1c8>
     51c:	53657565 	beql	k1,a1,1dab4 <__isr_vec_space+0x1da94>
     520:	65537465 	0x65537465
     524:	6e69646e 	0x6e69646e
     528:	73615467 	d32sarw	xr1,xr5,xr5,k1
     52c:	7551006b 	jalx	54401ac <__memory_size+0x54209ac>
     530:	53657565 	beql	k1,a1,1dac8 <__isr_vec_space+0x1daa8>
     534:	654d7465 	0x654d7465
     538:	7265626d 	s16sdi	xr9,s3,-336,ptn0
     53c:	646e6148 	0x646e6148
     540:	745f656c 	jalx	17d95b0 <__memory_size+0x17b9db0>
     544:	71456500 	0x71456500
     548:	506c6175 	beql	v1,t4,18b20 <__isr_vec_space+0x18b00>
     54c:	726f6972 	0x726f6972
     550:	00797469 	0x797469
     554:	53767270 	beql	k1,s6,1cf18 <__isr_vec_space+0x1cef8>
     558:	70757465 	s8sdi	xr1,v1,93,
     55c:	74736554 	jalx	1cd9550 <__memory_size+0x1cb9d50>
     560:	516c7500 	beql	t3,t4,1d964 <__isr_vec_space+0x1d944>
     564:	65756575 	0x65756575
     568:	64657355 	0x64657355
     56c:	6e756f43 	0x6e756f43
     570:	00726574 	teq	v1,s2,0x195
     574:	78456c75 	0x78456c75
     578:	74636570 	jalx	18d95c0 <__memory_size+0x18b9dc0>
     57c:	65526465 	0x65526465
     580:	76696563 	jalx	9a5958c <__memory_size+0x9a39d8c>
     584:	72466465 	s8sdi	xr1,s2,-103,ptn1
     588:	61546d6f 	0x61546d6f
     58c:	75006b73 	jalx	401adcc <__memory_size+0x3ffb5cc>
     590:	6379436c 	0x6379436c
     594:	6f43656c 	0x6f43656c
     598:	65746e75 	0x65746e75
     59c:	53780072 	beql	k1,t8,768 <__isr_vec_space+0x748>
     5a0:	70757465 	s8sdi	xr1,v1,93,
     5a4:	706d6f43 	0x706d6f43
     5a8:	6574656c 	0x6574656c
     5ac:	72417800 	0x72417800
     5b0:	65755165 	0x65755165
     5b4:	65536575 	0x65536575
     5b8:	73615474 	q16sll	xr1,xr5,xr5,xr8,13
     5bc:	7453736b 	jalx	14dcdac <__memory_size+0x14bd5ac>
     5c0:	526c6c69 	beql	s3,t4,1b768 <__isr_vec_space+0x1b748>
     5c4:	696e6e75 	0x696e6e75
     5c8:	7600676e 	jalx	8019db8 <__memory_size+0x7ffa5b8>
     5cc:	72617453 	udi3	s3,at,t6,0x11
     5d0:	65755174 	0x65755174
     5d4:	65536575 	0x65536575
     5d8:	73615474 	q16sll	xr1,xr5,xr5,xr8,13
     5dc:	7000736b 	s16std	xr13,zero,56,ptn0
     5e0:	52537672 	beql	s2,s3,1dfac <__isr_vec_space+0x1df8c>
     5e4:	00646e61 	0x646e61
     5e8:	65755178 	0x65755178
     5ec:	65536575 	0x65536575
     5f0:	73615474 	q16sll	xr1,xr5,xr5,xr8,13
     5f4:	7453736b 	jalx	14dcdac <__memory_size+0x14bd5ac>
     5f8:	73757461 	0x73757461
     5fc:	76727000 	jalx	9c9c000 <__memory_size+0x9c7c800>
     600:	75657551 	jalx	595d544 <__memory_size+0x593dd44>
     604:	74655365 	jalx	1954d94 <__memory_size+0x1935594>
     608:	65636552 	0x65636552
     60c:	6e697669 	0x6e697669
     610:	73615467 	d32sarw	xr1,xr5,xr5,k1
     614:	4278006b 	c0	0x78006b
     618:	6b636f6c 	0x6b636f6c
     61c:	656d6954 	0x656d6954
     620:	4c6c7500 	0x4c6c7500
     624:	43747361 	c0	0x1747361
     628:	656c6379 	0x656c6379
     62c:	6e756f43 	0x6e756f43
     630:	00726574 	teq	v1,s2,0x195
     634:	65537875 	0x65537875
     638:	78006465 	st.h	$w17,0(t4)
     63c:	75657551 	jalx	595d544 <__memory_size+0x593dd44>
     640:	2e007365 	sltiu	zero,s0,29541
     644:	6f432f2e 	0x6f432f2e
     648:	6e6f6d6d 	0x6e6f6d6d
     64c:	6e694d2f 	0x6e694d2f
     650:	6c616d69 	0x6c616d69
     654:	6575512f 	0x6575512f
     658:	65536575 	0x65536575
     65c:	00632e74 	teq	v1,v1,0xb9
     660:	43767270 	c0	0x1767270
     664:	676e6168 	0x676e6168
     668:	6c655265 	0x6c655265
     66c:	76697461 	jalx	9a5d184 <__memory_size+0x9a3d984>
     670:	69725065 	0x69725065
     674:	7469726f 	jalx	1a5c9bc <__memory_size+0x1a3d1bc>
     678:	00736569 	0x736569
     67c:	4c785465 	0x4c785465
     680:	7265776f 	0x7265776f
     684:	6f697250 	0x6f697250
     688:	79746972 	0x79746972
     68c:	4e787500 	c3	0x787500
     690:	52747865 	beql	s3,s4,1e828 <__isr_vec_space+0x1e808>
     694:	00646e61 	0x646e61
     698:	48785465 	mfhc2	t8,0x5465
     69c:	65686769 	0x65686769
     6a0:	69725072 	0x69725072
     6a4:	7469726f 	jalx	1a5c9bc <__memory_size+0x1a3d1bc>
     6a8:	51780079 	beql	t3,t8,890 <__isr_vec_space+0x870>
     6ac:	65756575 	0x65756575
     6b0:	53746553 	beql	k1,s4,19c00 <__isr_vec_space+0x19be0>
     6b4:	69646e65 	0x69646e65
     6b8:	6154676e 	0x6154676e
     6bc:	76006b73 	jalx	801adcc <__memory_size+0x7ffb5cc>
     6c0:	75657551 	jalx	595d544 <__memory_size+0x593dd44>
     6c4:	74655365 	jalx	1954d94 <__memory_size+0x1935594>
     6c8:	65636341 	0x65636341
     6cc:	75517373 	jalx	545cdcc <__memory_size+0x543d5cc>
     6d0:	53657565 	beql	k1,a1,1dc68 <__isr_vec_space+0x1dc48>
     6d4:	72467465 	s8sdi	xr1,s2,-99,ptn1
     6d8:	53496d6f 	beql	k0,t1,1bc98 <__isr_vec_space+0x1bc78>
     6dc:	51780052 	beql	t3,t8,828 <__isr_vec_space+0x808>
     6e0:	65756575 	0x65756575
     6e4:	52746553 	beql	s3,s4,19c34 <__isr_vec_space+0x19c14>
     6e8:	69656365 	0x69656365
     6ec:	676e6976 	0x676e6976
     6f0:	6b736154 	0x6b736154
     6f4:	76727000 	jalx	9c9c000 <__memory_size+0x9c7c800>
     6f8:	65636552 	0x65636552
     6fc:	46657669 	c1	0x657669
     700:	516d6f72 	beql	t3,t5,1c4cc <__isr_vec_space+0x1c4ac>
     704:	65756575 	0x65756575
     708:	65536e49 	0x65536e49
     70c:	6f724674 	0x6f724674
     710:	5253496d 	beql	s2,s3,12cc8 <__isr_vec_space+0x12ca8>
     714:	4c6c7500 	0x4c6c7500
     718:	49747361 	0x49747361
     71c:	78545253 	dotp_s.w	$w9,$w10,$w20
     720:	756c6156 	jalx	5b18558 <__memory_size+0x5af8d58>
     724:	6c750065 	0x6c750065
     728:	7473614c 	jalx	1cd8530 <__memory_size+0x1cb8d30>
     72c:	75657551 	jalx	595d544 <__memory_size+0x593dd44>
     730:	65735565 	0x65735565
     734:	756f4364 	jalx	5bd0d90 <__memory_size+0x5bb1590>
     738:	7265746e 	0x7265746e
     73c:	546c7500 	bnel	v1,t4,1db40 <__isr_vec_space+0x1db20>
     740:	546b7361 	bnel	v1,t3,1d4c8 <__isr_vec_space+0x1d4a8>
     744:	6c615678 	0x6c615678
     748:	2e006575 	sltiu	zero,s0,25973
     74c:	6f432f2e 	0x6f432f2e
     750:	6e6f6d6d 	0x6e6f6d6d
     754:	6e694d2f 	0x6e694d2f
     758:	6c616d69 	0x6c616d69
     75c:	6576452f 	0x6576452f
     760:	7247746e 	0x7247746e
     764:	7370756f 	0x7370756f
     768:	6f6d6544 	0x6f6d6544
     76c:	7500632e 	jalx	4018cb8 <__memory_size+0x3ff94b8>
     770:	6572506c 	0x6572506c
     774:	756f6976 	jalx	5bda5d8 <__memory_size+0x5bbadd8>
     778:	52534973 	beql	s2,s3,12d48 <__isr_vec_space+0x12d28>
     77c:	6c637943 	0x6c637943
     780:	78007365 	st.h	$w13,0(t6)
     784:	6e657645 	0x6e657645
     788:	6f724774 	0x6f724774
     78c:	75007075 	jalx	401c1d4 <__memory_size+0x3ffc9d4>
     790:	6572506c 	0x6572506c
     794:	756f6976 	jalx	5bda5d8 <__memory_size+0x5bbadd8>
     798:	69615773 	0x69615773
     79c:	74694274 	jalx	1a509d0 <__memory_size+0x1a311d0>
     7a0:	6c637943 	0x6c637943
     7a4:	70007365 	s8sdi	xr13,zero,28,ptn0
     7a8:	65547672 	0x65547672
     7ac:	6c537473 	0x6c537473
     7b0:	54657661 	bnel	v1,a1,1e138 <__isr_vec_space+0x1e118>
     7b4:	006b7361 	0x6b7361
     7b8:	6e657645 	0x6e657645
     7bc:	74694274 	jalx	1a509d0 <__memory_size+0x1a311d0>
     7c0:	00745f73 	tltu	v1,s4,0x17d
     7c4:	73654d78 	0x73654d78
     7c8:	65676173 	0x65676173
     7cc:	74736f50 	jalx	1cdbd40 <__memory_size+0x1cbc540>
     7d0:	75006465 	jalx	4019194 <__memory_size+0x3ff9994>
     7d4:	7365546c 	s16ldi	xr1,k1,-342,ptn0
     7d8:	616c5374 	0x616c5374
     7dc:	79436576 	0x79436576
     7e0:	73656c63 	s8std	xr1,k1,91,ptn1
     7e4:	76727000 	jalx	9c9c000 <__memory_size+0x9c7c800>
     7e8:	636e7953 	0x636e7953
     7ec:	6b736154 	0x6b736154
     7f0:	42787500 	c0	0x787500
     7f4:	75007469 	jalx	401d1a4 <__memory_size+0x3ffd9a4>
     7f8:	74694278 	jalx	1a509e0 <__memory_size+0x1a311e0>
     7fc:	76450073 	jalx	91401cc <__memory_size+0x91209cc>
     800:	47746e65 	bz.d	$w20,1c198 <__isr_vec_space+0x1c178>
     804:	70756f72 	0x70756f72
     808:	646e6148 	0x646e6148
     80c:	745f656c 	jalx	17d95b0 <__memory_size+0x17b9db0>
     810:	50787500 	beql	v1,t8,1dc14 <__isr_vec_space+0x1dbf4>
     814:	42646e65 	c0	0x646e65
     818:	00737469 	0x737469
     81c:	656c4378 	0x656c4378
     820:	69427261 	0x69427261
     824:	6f437374 	0x6f437374
     828:	00746e75 	0x746e75
     82c:	65527875 	0x65527875
     830:	6e727574 	0x6e727574
     834:	76006465 	jalx	8019194 <__memory_size+0x7ff9994>
     838:	69726550 	0x69726550
     83c:	6369646f 	0x6369646f
     840:	6e657645 	0x6e657645
     844:	6f724774 	0x6f724774
     848:	50737075 	beql	v1,s3,1ca20 <__isr_vec_space+0x1ca00>
     84c:	65636f72 	0x65636f72
     850:	6e697373 	0x6e697373
     854:	6c750067 	0x6c750067
     858:	76657250 	jalx	995c940 <__memory_size+0x993d140>
     85c:	73756f69 	0x73756f69
     860:	42746553 	c0	0x746553
     864:	79437469 	0x79437469
     868:	73656c63 	s8std	xr1,k1,91,ptn1
     86c:	65537800 	0x65537800
     870:	74694274 	jalx	1a509d0 <__memory_size+0x1a311d0>
     874:	6e756f43 	0x6e756f43
     878:	52650074 	beql	s3,a1,a4c <__isr_vec_space+0xa2c>
     87c:	79646165 	st.h	$w5,712(t4)
     880:	74537600 	jalx	14dd800 <__memory_size+0x14be000>
     884:	45747261 	bz.v	$w20,1d20c <__isr_vec_space+0x1d1ec>
     888:	746e6576 	jalx	1b995d8 <__memory_size+0x1b79dd8>
     88c:	756f7247 	jalx	5bdc91c <__memory_size+0x5bbd11c>
     890:	73615470 	d32sll	xr1,xr5,xr5,xr8,13
     894:	7000736b 	s16std	xr13,zero,56,ptn0
     898:	69427672 	0x69427672
     89c:	6d6f4374 	0x6d6f4374
     8a0:	616e6962 	0x616e6962
     8a4:	6e6f6974 	0x6e6f6974
     8a8:	74736554 	jalx	1cd9550 <__memory_size+0x1cb9d50>
     8ac:	7473614d 	jalx	1cd8534 <__memory_size+0x1cb8d34>
     8b0:	75467265 	jalx	519c994 <__memory_size+0x517d194>
     8b4:	6974636e 	0x6974636e
     8b8:	78006e6f 	0x78006e6f
     8bc:	45525349 	0x45525349
     8c0:	746e6576 	jalx	1b995d8 <__memory_size+0x1b79dd8>
     8c4:	756f7247 	jalx	5bdc91c <__memory_size+0x5bbd11c>
     8c8:	6c750070 	0x6c750070
     8cc:	43525349 	c0	0x1525349
     8d0:	656c6379 	0x656c6379
     8d4:	43780073 	c0	0x1780073
     8d8:	436c6c61 	c0	0x16c6c61
     8dc:	746e756f 	jalx	1b9d5bc <__memory_size+0x1b7ddbc>
     8e0:	76727000 	jalx	9c9c000 <__memory_size+0x9c7c800>
     8e4:	66726550 	0x66726550
     8e8:	546d726f 	bnel	v1,t5,1d2a8 <__isr_vec_space+0x1d288>
     8ec:	536b7361 	beql	k1,t3,1d674 <__isr_vec_space+0x1d654>
     8f0:	54636e79 	bnel	v1,v1,1c2d8 <__isr_vec_space+0x1c2b8>
     8f4:	73747365 	s8sdi	xr13,k1,28,
     8f8:	65446500 	0x65446500
     8fc:	6574656c 	0x6574656c
     900:	53780064 	beql	k1,t8,a94 <__isr_vec_space+0xa74>
     904:	54636e79 	bnel	v1,v1,1c2ec <__isr_vec_space+0x1c2cc>
     908:	316b7361 	andi	t3,t3,0x7361
     90c:	79537800 	ori.b	$w0,$w15,0x53
     910:	6154636e 	0x6154636e
     914:	00326b73 	tltu	at,s2,0x1ad
     918:	73755365 	s8sdi	xr13,k1,84,
     91c:	646e6570 	0x646e6570
     920:	70006465 	s8sdi	xr1,zero,25,ptn0
     924:	65547672 	0x65547672
     928:	614d7473 	0x614d7473
     92c:	72657473 	d32sar	xr1,xr13,xr5,xr9,9
     930:	6b736154 	0x6b736154
     934:	546c7500 	bnel	v1,t4,1dd38 <__isr_vec_space+0x1dd18>
     938:	4d747365 	0x4d747365
     93c:	65747361 	0x65747361
     940:	63794372 	0x63794372
     944:	0073656c 	0x73656c
     948:	79537875 	0x79537875
     94c:	7268636e 	0x7268636e
     950:	73696e6f 	0x73696e6f
     954:	6f697461 	0x6f697461
     958:	7469426e 	jalx	1a509b8 <__memory_size+0x1a311b8>
     95c:	65547800 	0x65547800
     960:	6c537473 	0x6c537473
     964:	54657661 	bnel	v1,a1,1e2ec <__isr_vec_space+0x1e2cc>
     968:	486b7361 	mfhc2	t3,0x7361
     96c:	6c646e61 	0x6c646e61
     970:	52650065 	beql	s3,a1,b08 <__isr_vec_space+0xae8>
     974:	696e6e75 	0x696e6e75
     978:	6500676e 	0x6500676e
     97c:	636f6c42 	0x636f6c42
     980:	0064656b 	0x64656b
     984:	65724178 	0x65724178
     988:	6e657645 	0x6e657645
     98c:	6f724774 	0x6f724774
     990:	61547075 	0x61547075
     994:	53736b73 	beql	k1,s3,1b764 <__isr_vec_space+0x1b744>
     998:	6c6c6974 	0x6c6c6974
     99c:	6e6e7552 	0x6e6e7552
     9a0:	00676e69 	0x676e69
     9a4:	69427875 	0x69427875
     9a8:	6f547374 	0x6f547374
     9ac:	00746553 	0x746553
     9b0:	61745378 	0x61745378
     9b4:	00737574 	teq	v1,s3,0x1d5
     9b8:	53767270 	beql	k1,s6,1d37c <__isr_vec_space+0x1d35c>
     9bc:	63656c65 	0x63656c65
     9c0:	65766974 	0x65766974
     9c4:	73746942 	0x73746942
     9c8:	74736554 	jalx	1cd9550 <__memory_size+0x1cb9d50>
     9cc:	7473614d 	jalx	1cd8534 <__memory_size+0x1cb8d34>
     9d0:	75467265 	jalx	519c994 <__memory_size+0x517d194>
     9d4:	6974636e 	0x6974636e
     9d8:	65006e6f 	0x65006e6f
     9dc:	61766e49 	0x61766e49
     9e0:	0064696c 	0x64696c
     9e4:	74654778 	jalx	1951de0 <__memory_size+0x19325e0>
     9e8:	73746942 	0x73746942
     9ec:	6e756f43 	0x6e756f43
     9f0:	45780074 	bz.v	$w24,bc4 <__isr_vec_space+0xba4>
     9f4:	726f7272 	0x726f7272
     9f8:	53497800 	beql	k0,t1,1e9fc <__isr_vec_space+0x1e9dc>
     9fc:	73655452 	udi2	k1,a1,t2,0x11
     a00:	72724574 	q16sll	xr5,xr1,xr9,xr12,9
     a04:	7000726f 	0x7000726f
     a08:	65537672 	0x65537672
     a0c:	7463656c 	jalx	18d95b0 <__memory_size+0x18b9db0>
     a10:	42657669 	c0	0x657669
     a14:	54737469 	bnel	v1,s3,1dbbc <__isr_vec_space+0x1db9c>
     a18:	53747365 	beql	k1,s4,1d7b0 <__isr_vec_space+0x1d790>
     a1c:	6576616c 	0x6576616c
     a20:	636e7546 	0x636e7546
     a24:	6e6f6974 	0x6e6f6974
     a28:	6d695400 	0x6d695400
     a2c:	61507265 	0x61507265
     a30:	656d6172 	0x656d6172
     a34:	5f726574 	0x5f726574
     a38:	54780074 	bnel	v1,t8,c0c <__isr_vec_space+0xbec>
     a3c:	72656d69 	0x72656d69
     a40:	6e497349 	0x6e497349
     a44:	69746341 	0x69746341
     a48:	694c6576 	0x694c6576
     a4c:	44007473 	0x44007473
     a50:	6f6d6561 	0x6f6d6561
     a54:	7361546e 	0x7361546e
     a58:	73654d6b 	s16std	xr5,k1,-346,ptn0
     a5c:	65676173 	0x65676173
     a60:	7600745f 	jalx	801d17c <__memory_size+0x7ffd97c>
     a64:	656d6954 	0x656d6954
     a68:	74655372 	jalx	1954dc8 <__memory_size+0x19355c8>
     a6c:	656d6954 	0x656d6954
     a70:	00444972 	tlt	v0,a0,0x125
     a74:	65547870 	0x65547870
     a78:	7400706d 	jalx	1c1b4 <__isr_vec_space+0x1c194>
     a7c:	6954726d 	0x6954726d
     a80:	5072656d 	beql	v1,s2,1a038 <__isr_vec_space+0x1a018>
     a84:	6d617261 	0x6d617261
     a88:	72657465 	s8sdi	xr1,s3,93,ptn1
     a8c:	43780073 	c0	0x1780073
     a90:	616d6d6f 	0x616d6d6f
     a94:	4449646e 	0x4449646e
     a98:	6e655000 	0x6e655000
     a9c:	46646564 	c1	0x646564
     aa0:	74636e75 	jalx	18db9d4 <__memory_size+0x18bc1d4>
     aa4:	5f6e6f69 	0x5f6e6f69
     aa8:	69540074 	0x69540074
     aac:	4372656d 	c0	0x172656d
     ab0:	626c6c61 	0x626c6c61
     ab4:	466b6361 	c1	0x6b6361
     ab8:	74636e75 	jalx	18db9d4 <__memory_size+0x18bc1d4>
     abc:	5f6e6f69 	0x5f6e6f69
     ac0:	63700074 	0x63700074
     ac4:	656d6954 	0x656d6954
     ac8:	6d614e72 	0x6d614e72
     acc:	78700065 	st.h	$w1,224(zero)
     ad0:	76657250 	jalx	995c940 <__memory_size+0x993d140>
     ad4:	73756f69 	0x73756f69
     ad8:	654e7800 	0x654e7800
     adc:	78457478 	0x78457478
     ae0:	79726970 	0x79726970
     ae4:	656d6954 	0x656d6954
     ae8:	69547800 	0x69547800
     aec:	4c72656d 	0x4c72656d
     af0:	49747369 	0x49747369
     af4:	006d6574 	teq	v1,t5,0x195
     af8:	78654e78 	0x78654e78
     afc:	70784574 	q16sll	xr5,xr1,xr1,xr14,1
     b00:	54657269 	bnel	v1,a1,1d4a8 <__isr_vec_space+0x1d488>
     b04:	00656d69 	0x656d69
     b08:	69547670 	0x69547670
     b0c:	4772656d 	bz.d	$w18,1a0c4 <__isr_vec_space+0x1a0a4>
     b10:	69547465 	0x69547465
     b14:	4972656d 	0x4972656d
     b18:	72700044 	0x72700044
     b1c:	6f725076 	0x6f725076
     b20:	73736563 	s8std	xr5,k1,-39,
     b24:	69707845 	0x69707845
     b28:	54646572 	bnel	v1,a0,1a0f4 <__isr_vec_space+0x1a0d4>
     b2c:	72656d69 	0x72656d69
     b30:	49547800 	0x49547800
     b34:	0052454d 	break	0x52,0x115
     b38:	6d695478 	0x6d695478
     b3c:	61547265 	0x61547265
     b40:	61486b73 	0x61486b73
     b44:	656c646e 	0x656c646e
     b48:	65527800 	0x65527800
     b4c:	746c7573 	jalx	1b1d5cc <__memory_size+0x1afddcc>
     b50:	69547800 	0x69547800
     b54:	4372656d 	c0	0x172656d
     b58:	74616572 	jalx	18595c8 <__memory_size+0x1839dc8>
     b5c:	72700065 	s8sdi	xr1,s3,0,
     b60:	69775376 	0x69775376
     b64:	54686374 	bnel	v1,t0,19938 <__isr_vec_space+0x19918>
     b68:	72656d69 	0x72656d69
     b6c:	7473694c 	jalx	1cda530 <__memory_size+0x1cbad30>
     b70:	72700073 	d32sar	xr1,xr0,xr0,xr12,9
     b74:	696e4976 	0x696e4976
     b78:	6c616974 	0x6c616974
     b7c:	4e657369 	msub.d	$f13,$f19,$f14,$f5
     b80:	69547765 	0x69547765
     b84:	0072656d 	0x72656d
     b88:	654e7870 	0x654e7870
     b8c:	6d695477 	0x6d695477
     b90:	78007265 	st.h	$w9,0(t6)
     b94:	6c6c6143 	0x6c6c6143
     b98:	6b636162 	0x6b636162
     b9c:	61726150 	0x61726150
     ba0:	6574656d 	0x6574656d
     ba4:	74007372 	jalx	1cdc8 <__isr_vec_space+0x1cda8>
     ba8:	6143726d 	0x6143726d
     bac:	61626c6c 	0x61626c6c
     bb0:	61506b63 	0x61506b63
     bb4:	656d6172 	0x656d6172
     bb8:	73726574 	q16sll	xr5,xr9,xr9,xr12,13
     bbc:	654d7800 	0x654d7800
     bc0:	67617373 	0x67617373
     bc4:	76700065 	jalx	9c00194 <__memory_size+0x9be0994>
     bc8:	61726150 	0x61726150
     bcc:	6574656d 	0x6574656d
     bd0:	78003172 	0x78003172
     bd4:	7373654d 	0x7373654d
     bd8:	56656761 	bnel	s3,a1,1a960 <__isr_vec_space+0x1a940>
     bdc:	65756c61 	0x65756c61
     be0:	73694c00 	0x73694c00
     be4:	00745f74 	teq	v1,s4,0x17d
     be8:	696e694d 	0x696e694d
     bec:	7473694c 	jalx	1cda530 <__memory_size+0x1cbad30>
     bf0:	6d657449 	0x6d657449
     bf4:	7000745f 	udi15	zero,zero,t6,0x11
     bf8:	6c614378 	0x6c614378
     bfc:	6361626c 	0x6361626c
     c00:	5478006b 	bnel	v1,t8,db0 <__isr_vec_space+0xd90>
     c04:	72656d69 	0x72656d69
     c08:	61657243 	0x61657243
     c0c:	69546574 	0x69546574
     c10:	5472656d 	bnel	v1,s2,1a1c8 <__isr_vec_space+0x1a1a8>
     c14:	006b7361 	0x6b7361
     c18:	61437870 	0x61437870
     c1c:	61626c6c 	0x61626c6c
     c20:	75466b63 	jalx	519ad8c <__memory_size+0x517b58c>
     c24:	6974636e 	0x6974636e
     c28:	78006e6f 	0x78006e6f
     c2c:	5453494c 	bnel	v0,s3,13160 <__isr_vec_space+0x13140>
     c30:	69547800 	0x69547800
     c34:	5072656d 	beql	v1,s2,1a1ec <__isr_vec_space+0x1a1cc>
     c38:	6f697265 	0x6f697265
     c3c:	546e4964 	bnel	v1,t6,131d0 <__isr_vec_space+0x131b0>
     c40:	736b6369 	0x736b6369
     c44:	6d695400 	0x6d695400
     c48:	745f7265 	jalx	17dc994 <__memory_size+0x17bd194>
     c4c:	74497800 	jalx	125e000 <__memory_size+0x123e800>
     c50:	61566d65 	0x61566d65
     c54:	0065756c 	0x65756c
     c58:	43767270 	c0	0x1767270
     c5c:	6b636568 	0x6b636568
     c60:	56726f46 	bnel	s3,s2,1c97c <__isr_vec_space+0x1c95c>
     c64:	64696c61 	0x64696c61
     c68:	7473694c 	jalx	1cda530 <__memory_size+0x1cbad30>
     c6c:	51646e41 	beql	t3,a0,1c574 <__isr_vec_space+0x1c554>
     c70:	65756575 	0x65756575
     c74:	614c7800 	0x614c7800
     c78:	69547473 	0x69547473
     c7c:	7800656d 	0x7800656d
     c80:	656d6954 	0x656d6954
     c84:	72615072 	0x72615072
     c88:	74656d61 	jalx	195b584 <__memory_size+0x193bd84>
     c8c:	00737265 	0x737265
     c90:	53767270 	beql	k1,s6,1d654 <__isr_vec_space+0x1d634>
     c94:	6c706d61 	0x6c706d61
     c98:	6d695465 	0x6d695465
     c9c:	776f4e65 	jalx	dbd3994 <__memory_size+0xdbb4194>
     ca0:	52767000 	beql	s3,s6,1cca4 <__isr_vec_space+0x1cc84>
     ca4:	72757465 	s8sdi	xr1,s3,93,
     ca8:	4c78006e 	msub.ps	$f1,$f3,$f0,$f24
     cac:	5f545349 	0x5f545349
     cb0:	4d455449 	0x4d455449
     cb4:	436c7500 	c0	0x16c7500
     cb8:	65737561 	0x65737561
     cbc:	506c7500 	beql	v1,t4,1e0c0 <__isr_vec_space+0x1e0a0>
     cc0:	6d617261 	0x6d617261
     cc4:	72657465 	s8sdi	xr1,s3,93,ptn1
     cc8:	76700032 	jalx	9c000c8 <__memory_size+0x9be08c8>
     ccc:	4977654e 	0x4977654e
     cd0:	54780044 	bnel	v1,t8,de4 <__isr_vec_space+0xdc4>
     cd4:	72656d69 	0x72656d69
     cd8:	69547349 	0x69547349
     cdc:	4172656d 	0x4172656d
     ce0:	76697463 	jalx	9a5d18c <__memory_size+0x9a3d98c>
     ce4:	76700065 	jalx	9c00194 <__memory_size+0x9be0994>
     ce8:	656d6954 	0x656d6954
     cec:	00444972 	tlt	v0,a0,0x125
     cf0:	69546370 	0x69546370
     cf4:	4772656d 	bz.d	$w18,1a2ac <__isr_vec_space+0x1a28c>
     cf8:	614e7465 	0x614e7465
     cfc:	7000656d 	s16sdi	xr5,zero,50,ptn0
     d00:	72507672 	0x72507672
     d04:	7365636f 	0x7365636f
     d08:	63655273 	0x63655273
     d0c:	65766965 	0x65766965
     d10:	6d6f4364 	0x6d6f4364
     d14:	646e616d 	0x646e616d
     d18:	54780073 	bnel	v1,t8,ee8 <__isr_vec_space+0xec8>
     d1c:	72656d69 	0x72656d69
     d20:	656e6547 	0x656e6547
     d24:	43636972 	c0	0x1636972
     d28:	616d6d6f 	0x616d6d6f
     d2c:	7000646e 	0x7000646e
     d30:	6e6f4376 	0x6e6f4376
     d34:	6e696174 	0x6e696174
     d38:	70007265 	s8sdi	xr9,zero,28,ptn0
     d3c:	65477672 	0x65477672
     d40:	78654e74 	0x78654e74
     d44:	70784574 	q16sll	xr5,xr1,xr1,xr14,1
     d48:	54657269 	bnel	v1,a1,1d6f0 <__isr_vec_space+0x1d6d0>
     d4c:	00656d69 	0x656d69
     d50:	6c6c6143 	0x6c6c6143
     d54:	6b636162 	0x6b636162
     d58:	61726150 	0x61726150
     d5c:	6574656d 	0x6574656d
     d60:	745f7372 	jalx	17dcdc8 <__memory_size+0x17bd5c8>
     d64:	704f7800 	0x704f7800
     d68:	6e6f6974 	0x6e6f6974
     d6c:	61566c61 	0x61566c61
     d70:	0065756c 	0x65756c
     d74:	764f7870 	jalx	93de1c0 <__memory_size+0x93be9c0>
     d78:	6c667265 	0x6c667265
     d7c:	6954776f 	0x6954776f
     d80:	4c72656d 	0x4c72656d
     d84:	00747369 	0x747369
     d88:	654e7870 	0x654e7870
     d8c:	70007478 	q8mul	xr1,xr13,xr1,xr0
     d90:	69547672 	0x69547672
     d94:	5472656d 	bnel	v1,s2,1a34c <__isr_vec_space+0x1a32c>
     d98:	006b7361 	0x6b7361
     d9c:	49767270 	0x49767270
     da0:	7265736e 	0x7265736e
     da4:	6d695474 	0x6d695474
     da8:	6e497265 	0x6e497265
     dac:	69746341 	0x69746341
     db0:	694c6576 	0x694c6576
     db4:	78007473 	0x78007473
     db8:	656d6954 	0x656d6954
     dbc:	65755172 	0x65755172
     dc0:	78006575 	0x78006575
     dc4:	69746341 	0x69746341
     dc8:	69546576 	0x69546576
     dcc:	4c72656d 	0x4c72656d
     dd0:	31747369 	andi	s4,t3,0x7369
     dd4:	63417800 	0x63417800
     dd8:	65766974 	0x65766974
     ddc:	656d6954 	0x656d6954
     de0:	73694c72 	0x73694c72
     de4:	78003274 	0x78003274
     de8:	636e7546 	0x636e7546
     dec:	6e6f6974 	0x6e6f6974
     df0:	65506f54 	0x65506f54
     df4:	2e00646e 	sltiu	zero,s0,25710
     df8:	2e2e2f2e 	sltiu	t6,s1,12078
     dfc:	756f532f 	jalx	5bd4cbc <__memory_size+0x5bb54bc>
     e00:	2f656372 	sltiu	a1,k1,25458
     e04:	656d6974 	0x656d6974
     e08:	632e7372 	0x632e7372
     e0c:	69547800 	0x69547800
     e10:	6f4e656d 	0x6f4e656d
     e14:	78700077 	0x78700077
     e18:	7473694c 	jalx	1cda530 <__memory_size+0x1cbad30>
     e1c:	45736157 	bz.v	$w19,1937c <__isr_vec_space+0x1935c>
     e20:	7974706d 	0x7974706d
     e24:	654d7800 	0x654d7800
     e28:	67617373 	0x67617373
     e2c:	00444965 	0x444965
     e30:	754e7875 	jalx	539e1d4 <__memory_size+0x537e9d4>
     e34:	7265626d 	s16sdi	xr9,s3,-336,ptn0
     e38:	7449664f 	jalx	125993c <__memory_size+0x123a13c>
     e3c:	00736d65 	0x736d65
     e40:	54726d74 	bnel	v1,s2,1c414 <__isr_vec_space+0x1c3f4>
     e44:	72656d69 	0x72656d69
     e48:	746e6f43 	jalx	1b9bd0c <__memory_size+0x1b7c50c>
     e4c:	006c6f72 	tlt	v1,t4,0x1bd
     e50:	75437870 	jalx	50de1c0 <__memory_size+0x50be9c0>
     e54:	6e657272 	0x6e657272
     e58:	6d695474 	0x6d695474
     e5c:	694c7265 	0x694c7265
     e60:	70007473 	d32sar	xr1,xr13,xr1,xr0,0
     e64:	72507672 	0x72507672
     e68:	7365636f 	0x7365636f
     e6c:	6d695473 	0x6d695473
     e70:	724f7265 	s8sdi	xr9,s2,-36,ptn3
     e74:	636f6c42 	0x636f6c42
     e78:	7361546b 	s16std	xr1,k1,170,ptn0
     e7c:	5478006b 	bnel	v1,t8,102c <__isr_vec_space+0x100c>
     e80:	72656d69 	0x72656d69
     e84:	646e6550 	0x646e6550
     e88:	636e7546 	0x636e7546
     e8c:	6e6f6974 	0x6e6f6974
     e90:	6c6c6143 	0x6c6c6143
     e94:	6d6f7246 	0x6d6f7246
     e98:	00525349 	0x525349
     e9c:	75417875 	jalx	505e1d4 <__memory_size+0x503e9d4>
     ea0:	65526f74 	0x65526f74
     ea4:	64616f6c 	0x64616f6c
     ea8:	48787000 	mfhc2	t8,$14
     eac:	65686769 	0x65686769
     eb0:	69725072 	0x69725072
     eb4:	7469726f 	jalx	1a5c9bc <__memory_size+0x1a3d1bc>
     eb8:	73615479 	0x73615479
     ebc:	6b6f576b 	0x6b6f576b
     ec0:	78006e65 	st.h	$w25,0(t5)
     ec4:	636f7250 	0x636f7250
     ec8:	54737365 	bnel	v1,s3,1dc60 <__isr_vec_space+0x1dc40>
     ecc:	72656d69 	0x72656d69
     ed0:	00776f4e 	0x776f4e
     ed4:	774f7670 	jalx	d3dd9c0 <__memory_size+0xd3be1c0>
     ed8:	0072656e 	0x72656e
     edc:	54726d74 	bnel	v1,s2,1c4b0 <__isr_vec_space+0x1c490>
     ee0:	72656d69 	0x72656d69
     ee4:	75657551 	jalx	595d544 <__memory_size+0x593dd44>
     ee8:	73654d65 	s8sdi	xr5,k1,83,ptn1
     eec:	65676173 	0x65676173
     ef0:	69547800 	0x69547800
     ef4:	4772656d 	bz.d	$w18,1a4ac <__isr_vec_space+0x1a48c>
     ef8:	65507465 	0x65507465
     efc:	646f6972 	0x646f6972
     f00:	69547800 	0x69547800
     f04:	4772656d 	bz.d	$w18,1a4bc <__isr_vec_space+0x1a49c>
     f08:	69547465 	0x69547465
     f0c:	4472656d 	0x4472656d
     f10:	6f6d6561 	0x6f6d6561
     f14:	7361546e 	0x7361546e
     f18:	6e61486b 	0x6e61486b
     f1c:	00656c64 	0x656c64
     f20:	6d695478 	0x6d695478
     f24:	65507265 	0x65507265
     f28:	7546646e 	jalx	51991b8 <__memory_size+0x51799b8>
     f2c:	6974636e 	0x6974636e
     f30:	61436e6f 	0x61436e6f
     f34:	70006c6c 	s16ldi	xr1,zero,54,ptn0
     f38:	646e4978 	0x646e4978
     f3c:	78007865 	st.h	$w1,0(t7)
     f40:	656d6954 	0x656d6954
     f44:	74654772 	jalx	1951dc8 <__memory_size+0x19325c8>
     f48:	69707845 	0x69707845
     f4c:	69547972 	0x69547972
     f50:	7000656d 	s16sdi	xr5,zero,50,ptn0
     f54:	6d695478 	0x6d695478
     f58:	78007265 	st.h	$w9,0(t6)
     f5c:	6d6d6f43 	0x6d6d6f43
     f60:	54646e61 	bnel	v1,a0,1c8e8 <__isr_vec_space+0x1c8c8>
     f64:	00656d69 	0x656d69
     f68:	4e494d78 	nmsub.s	$f21,$f18,$f9,$f9
     f6c:	494c5f49 	0x494c5f49
     f70:	495f5453 	0x495f5453
     f74:	004d4554 	0x4d4554
     f78:	69547870 	0x69547870
     f7c:	4c72656d 	0x4c72656d
     f80:	73747369 	0x73747369
     f84:	65726557 	0x65726557
     f88:	74697753 	jalx	1a5dd4c <__memory_size+0x1a3e54c>
     f8c:	64656863 	0x64656863
     f90:	65527800 	0x65527800
     f94:	64616f6c 	0x64616f6c
     f98:	656d6954 	0x656d6954
     f9c:	76457800 	jalx	915e000 <__memory_size+0x913e800>
     fa0:	47746e65 	bz.d	$w20,1c938 <__isr_vec_space+0x1c918>
     fa4:	70756f72 	0x70756f72
     fa8:	61657243 	0x61657243
     fac:	78006574 	0x78006574
     fb0:	74696157 	jalx	1a5855c <__memory_size+0x1a38d5c>
     fb4:	41726f46 	0x41726f46
     fb8:	69426c6c 	0x69426c6c
     fbc:	70007374 	q16sll	xr13,xr12,xr1,xr0,0
     fc0:	73694c78 	0x73694c78
     fc4:	646e4574 	0x646e4574
     fc8:	6c437800 	0x6c437800
     fcc:	4f726165 	c3	0x1726165
     fd0:	6978456e 	0x6978456e
     fd4:	57780074 	bnel	k1,t8,11a8 <__isr_vec_space+0x1188>
     fd8:	43746961 	c0	0x1746961
     fdc:	69646e6f 	0x69646e6f
     fe0:	6e6f6974 	0x6e6f6974
     fe4:	0074654d 	break	0x74,0x195
     fe8:	69427875 	0x69427875
     fec:	61577374 	0x61577374
     ff0:	64657469 	0x64657469
     ff4:	00726f46 	0x726f46
     ff8:	65764576 	0x65764576
     ffc:	7247746e 	0x7247746e
    1000:	4470756f 	0x4470756f
    1004:	74656c65 	jalx	195b194 <__memory_size+0x193b994>
    1008:	78750065 	st.h	$w1,234(zero)
    100c:	73746942 	0x73746942
    1010:	61576f54 	0x61576f54
    1014:	6f467469 	0x6f467469
    1018:	45760072 	bz.v	$w22,11e4 <__isr_vec_space+0x11c4>
    101c:	746e6576 	jalx	1b995d8 <__memory_size+0x1b79dd8>
    1020:	756f7247 	jalx	5bdc91c <__memory_size+0x5bbd11c>
    1024:	656c4370 	0x656c4370
    1028:	69427261 	0x69427261
    102c:	61437374 	0x61437374
    1030:	61626c6c 	0x61626c6c
    1034:	70006b63 	s8std	xr13,zero,26,ptn0
    1038:	73694c78 	0x73694c78
    103c:	45780074 	bz.v	$w24,1210 <__isr_vec_space+0x11f0>
    1040:	746e6576 	jalx	1b995d8 <__memory_size+0x1b79dd8>
    1044:	756f7247 	jalx	5bdc91c <__memory_size+0x5bbd11c>
    1048:	66654470 	0x66654470
    104c:	74696e69 	jalx	1a5b9a4 <__memory_size+0x1a3c1a4>
    1050:	006e6f69 	0x6e6f69
    1054:	694c7870 	0x694c7870
    1058:	74497473 	jalx	125d1cc <__memory_size+0x123d9cc>
    105c:	75006d65 	jalx	401b594 <__memory_size+0x3ffbd94>
    1060:	7469426c 	jalx	1a509b0 <__memory_size+0x1a311b0>
    1064:	536f5473 	beql	k1,t7,16234 <__isr_vec_space+0x16214>
    1068:	2e007465 	sltiu	zero,s0,29797
    106c:	2e2e2f2e 	sltiu	t6,s1,12078
    1070:	756f532f 	jalx	5bd4cbc <__memory_size+0x5bb54bc>
    1074:	2f656372 	sltiu	a1,k1,25458
    1078:	6e657665 	0x6e657665
    107c:	72675f74 	q16sll	xr13,xr7,xr13,xr9,9
    1080:	7370756f 	0x7370756f
    1084:	7800632e 	0x7800632e
    1088:	6e657645 	0x6e657645
    108c:	6f724774 	0x6f724774
    1090:	79537075 	0x79537075
    1094:	7800636e 	0x7800636e
    1098:	6e657645 	0x6e657645
    109c:	6f724774 	0x6f724774
    10a0:	6c437075 	0x6c437075
    10a4:	42726165 	c0	0x726165
    10a8:	00737469 	0x737469
    10ac:	76457670 	jalx	915d9c0 <__memory_size+0x913e1c0>
    10b0:	47746e65 	bz.d	$w20,1ca48 <__isr_vec_space+0x1ca28>
    10b4:	70756f72 	0x70756f72
    10b8:	76457800 	jalx	915e000 <__memory_size+0x913e800>
    10bc:	47746e65 	bz.d	$w20,1ca54 <__isr_vec_space+0x1ca34>
    10c0:	70756f72 	0x70756f72
    10c4:	74696157 	jalx	1a5855c <__memory_size+0x1a38d5c>
    10c8:	73746942 	0x73746942
    10cc:	76727000 	jalx	9c9c000 <__memory_size+0x9c7c800>
    10d0:	74736554 	jalx	1cd9550 <__memory_size+0x1cb9d50>
    10d4:	74696157 	jalx	1a5855c <__memory_size+0x1a38d5c>
    10d8:	646e6f43 	0x646e6f43
    10dc:	6f697469 	0x6f697469
    10e0:	7875006e 	0x7875006e
    10e4:	6769724f 	0x6769724f
    10e8:	6c616e69 	0x6c616e69
    10ec:	56746942 	bnel	s3,s4,1b5f8 <__isr_vec_space+0x1b5d8>
    10f0:	65756c61 	0x65756c61
    10f4:	45787500 	bz.v	$w24,1e4f8 <__isr_vec_space+0x1e4d8>
    10f8:	746e6576 	jalx	1b995d8 <__memory_size+0x1b79dd8>
    10fc:	73746942 	0x73746942
    1100:	43787500 	c0	0x1787500
    1104:	72746e6f 	0x72746e6f
    1108:	69426c6f 	0x69426c6f
    110c:	78007374 	0x78007374
    1110:	6e657645 	0x6e657645
    1114:	6f724774 	0x6f724774
    1118:	65477075 	0x65477075
    111c:	74694274 	jalx	1a509d0 <__memory_size+0x1a311d0>
    1120:	6f724673 	0x6f724673
    1124:	5253496d 	beql	s2,s3,136dc <__isr_vec_space+0x136bc>
    1128:	76457800 	jalx	915e000 <__memory_size+0x913e800>
    112c:	47746e65 	bz.d	$w20,1cac4 <__isr_vec_space+0x1caa4>
    1130:	70756f72 	0x70756f72
    1134:	42746553 	c0	0x746553
    1138:	00737469 	0x737469
    113c:	65527875 	0x65527875
    1140:	6e727574 	0x6e727574
    1144:	53787500 	beql	k1,t8,1e548 <__isr_vec_space+0x1e528>
    1148:	64657661 	0x64657661
    114c:	65746e49 	0x65746e49
    1150:	70757272 	0x70757272
    1154:	61745374 	0x61745374
    1158:	00737574 	teq	v1,s3,0x1d5
    115c:	74614d78 	jalx	18535e0 <__memory_size+0x1833de0>
    1160:	6f466863 	0x6f466863
    1164:	00646e75 	0x646e75
    1168:	69427875 	0x69427875
    116c:	6f547374 	0x6f547374
    1170:	61656c43 	0x61656c43
    1174:	78700072 	0x78700072
    1178:	6e657645 	0x6e657645
    117c:	74694274 	jalx	1a509d0 <__memory_size+0x1a311d0>
    1180:	54780073 	bnel	v1,t8,1350 <__isr_vec_space+0x1330>
    1184:	6f656d69 	0x6f656d69
    1188:	634f7475 	0x634f7475
    118c:	72727563 	s8std	xr5,s3,-99,
    1190:	76006465 	jalx	8019194 <__memory_size+0x7ff9994>
    1194:	6e657645 	0x6e657645
    1198:	6f724774 	0x6f724774
    119c:	65537075 	0x65537075
    11a0:	74694274 	jalx	1a509d0 <__memory_size+0x1a311d0>
    11a4:	6c614373 	0x6c614373
    11a8:	6361626c 	0x6361626c
    11ac:	7875006b 	0x7875006b
    11b0:	72727543 	0x72727543
    11b4:	45746e65 	bz.v	$w20,1cb4c <__isr_vec_space+0x1cb2c>
    11b8:	746e6576 	jalx	1b995d8 <__memory_size+0x1b79dd8>
    11bc:	73746942 	0x73746942
    11c0:	54787000 	bnel	v1,t8,1d1c4 <__isr_vec_space+0x1d1a4>
    11c4:	736b7361 	0x736b7361
    11c8:	74696157 	jalx	1a5855c <__memory_size+0x1a38d5c>
    11cc:	46676e69 	c1	0x676e69
    11d0:	6942726f 	0x6942726f
    11d4:	78007374 	0x78007374
    11d8:	65726c41 	0x65726c41
    11dc:	59796461 	0x59796461
    11e0:	646c6569 	0x646c6569
    11e4:	75006465 	jalx	4019194 <__memory_size+0x3ff9994>
    11e8:	7469426c 	jalx	1a509b0 <__memory_size+0x1a311b0>
    11ec:	436f5473 	c0	0x16f5473
    11f0:	7261656c 	s16ldi	xr5,s3,178,ptn0
    11f4:	65764500 	0x65764500
    11f8:	7247746e 	0x7247746e
    11fc:	5f70756f 	0x5f70756f
    1200:	78700074 	0x78700074
    1204:	736e6f43 	0x736e6f43
    1208:	73694c74 	q16sll	xr1,xr3,xr5,xr10,13
    120c:	78700074 	0x78700074
    1210:	74617453 	jalx	185d14c <__memory_size+0x183d94c>
    1214:	73694c65 	s8sdi	xr1,k1,83,ptn2
    1218:	78750074 	0x78750074
    121c:	646e6550 	0x646e6550
    1220:	6f436465 	0x6f436465
    1224:	73746e75 	q16slr	xr9,xr11,xr1,xr13,13
    1228:	426c7500 	c0	0x6c7500
    122c:	54737469 	bnel	v1,s3,1e3d4 <__isr_vec_space+0x1e3b4>
    1230:	656c436f 	0x656c436f
    1234:	6e4f7261 	0x6e4f7261
    1238:	74697845 	jalx	1a5e114 <__memory_size+0x1a3e914>
    123c:	76727000 	jalx	9c9c000 <__memory_size+0x9c7c800>
    1240:	74696e49 	jalx	1a5b924 <__memory_size+0x1a3c124>
    1244:	696c6169 	0x696c6169
    1248:	654e6573 	0x654e6573
    124c:	73615477 	q16sar	xr1,xr5,xr5,xr8,13
    1250:	5478006b 	bnel	v1,t8,1400 <__isr_vec_space+0x13e0>
    1254:	476b7361 	bz.d	$w11,1dfdc <__isr_vec_space+0x1dfbc>
    1258:	63537465 	0x63537465
    125c:	75646568 	jalx	59195a0 <__memory_size+0x58f9da0>
    1260:	5372656c 	beql	k1,s2,1a814 <__isr_vec_space+0x1a7f4>
    1264:	65746174 	0x65746174
    1268:	6f4e6500 	0x6f4e6500
    126c:	69746341 	0x69746341
    1270:	75006e6f 	jalx	401b9bc <__memory_size+0x3ffc1bc>
    1274:	706f5478 	0x706f5478
    1278:	64616552 	0x64616552
    127c:	69725079 	0x69725079
    1280:	7469726f 	jalx	1a5c9bc <__memory_size+0x1a3d1bc>
    1284:	78700079 	0x78700079
    1288:	6e657645 	0x6e657645
    128c:	73694c74 	q16sll	xr1,xr3,xr5,xr10,13
    1290:	53780074 	beql	k1,t8,1464 <__isr_vec_space+0x1444>
    1294:	64656863 	0x64656863
    1298:	72656c75 	q16slr	xr1,xr11,xr5,xr9,9
    129c:	6e6e7552 	0x6e6e7552
    12a0:	00676e69 	0x676e69
    12a4:	73615476 	0x73615476
    12a8:	6972506b 	0x6972506b
    12ac:	7469726f 	jalx	1a5c9bc <__memory_size+0x1a3d1bc>
    12b0:	686e4979 	0x686e4979
    12b4:	74697265 	jalx	1a5c994 <__memory_size+0x1a3d194>
    12b8:	61745300 	0x61745300
    12bc:	79546b63 	ld.d	$w13,2720(t5)
    12c0:	745f6570 	jalx	17d95c0 <__memory_size+0x17b9dc0>
    12c4:	49547800 	0x49547800
    12c8:	4f5f454d 	c3	0x15f454d
    12cc:	75005455 	jalx	4015154 <__memory_size+0x3ff5954>
    12d0:	6c654478 	0x6c654478
    12d4:	64657465 	0x64657465
    12d8:	6b736154 	0x6b736154
    12dc:	69615773 	0x69615773
    12e0:	676e6974 	0x676e6974
    12e4:	61656c43 	0x61656c43
    12e8:	0070556e 	0x70556e
    12ec:	65527870 	0x65527870
    12f0:	54796461 	bnel	v1,t9,1a478 <__isr_vec_space+0x1a458>
    12f4:	736b7361 	0x736b7361
    12f8:	7473694c 	jalx	1cda530 <__memory_size+0x1cbad30>
    12fc:	57780073 	bnel	k1,t8,14cc <__isr_vec_space+0x14ac>
    1300:	49746961 	0x49746961
    1304:	6665646e 	0x6665646e
    1308:	74696e69 	jalx	1a5b9a4 <__memory_size+0x1a3c1a4>
    130c:	00796c65 	0x796c65
    1310:	73615476 	0x73615476
    1314:	7465536b 	jalx	1954dac <__memory_size+0x19355ac>
    1318:	656d6954 	0x656d6954
    131c:	5374754f 	beql	k1,s4,1e85c <__isr_vec_space+0x1e83c>
    1320:	65746174 	0x65746174
    1324:	61547800 	0x61547800
    1328:	65476b73 	0x65476b73
    132c:	6972656e 	0x6972656e
    1330:	746f4e63 	jalx	1bd398c <__memory_size+0x1bb418c>
    1334:	46796669 	c1	0x796669
    1338:	496d6f72 	0x496d6f72
    133c:	78005253 	0x78005253
    1340:	6b736154 	0x6b736154
    1344:	72636e49 	0x72636e49
    1348:	6e656d65 	0x6e656d65
    134c:	63695474 	0x63695474
    1350:	4478006b 	0x4478006b
    1354:	79616c65 	st.h	$w17,706(t5)
    1358:	61546465 	0x61546465
    135c:	694c6b73 	0x694c6b73
    1360:	00317473 	tltu	at,s1,0x1d1
    1364:	6c654478 	0x6c654478
    1368:	64657961 	0x64657961
    136c:	6b736154 	0x6b736154
    1370:	7473694c 	jalx	1cda530 <__memory_size+0x1cbad30>
    1374:	4f780032 	c3	0x1780032
    1378:	66726576 	0x66726576
    137c:	43776f6c 	c0	0x1776f6c
    1380:	746e756f 	jalx	1b9d5bc <__memory_size+0x1b7ddbc>
    1384:	506c7500 	beql	v1,t4,1e788 <__isr_vec_space+0x1e768>
    1388:	6d617261 	0x6d617261
    138c:	72657465 	s8sdi	xr1,s3,93,ptn1
    1390:	52650073 	beql	s3,a1,1560 <__isr_vec_space+0x1540>
    1394:	72757465 	s8sdi	xr1,s3,93,
    1398:	5478006e 	bnel	v1,t8,1554 <__isr_vec_space+0x1534>
    139c:	546b7361 	bnel	v1,t3,1e124 <__isr_vec_space+0x1e104>
    13a0:	7365526f 	0x7365526f
    13a4:	00656d75 	0x656d75
    13a8:	61547875 	0x61547875
    13ac:	65476b73 	0x65476b73
    13b0:	6d754e74 	0x6d754e74
    13b4:	4f726562 	c3	0x1726562
    13b8:	73615466 	s32mulu	xr1,xr5,k1,at
    13bc:	7400736b 	jalx	1cdac <__isr_vec_space+0x1cd8c>
    13c0:	43546b73 	c0	0x1546b73
    13c4:	63750042 	0x63750042
    13c8:	69746f4e 	0x69746f4e
    13cc:	74537966 	jalx	14de598 <__memory_size+0x14bed98>
    13d0:	00657461 	0x657461
    13d4:	65695978 	0x65695978
    13d8:	6552646c 	0x6552646c
    13dc:	72697571 	d32slr	xr5,xr13,xr5,xr10,9
    13e0:	78006465 	st.h	$w17,0(t4)
    13e4:	6b736154 	0x6b736154
    13e8:	656e6547 	0x656e6547
    13ec:	4e636972 	c3	0x636972
    13f0:	6669746f 	0x6669746f
    13f4:	78700079 	0x78700079
    13f8:	6c626e55 	0x6c626e55
    13fc:	656b636f 	0x656b636f
    1400:	42435464 	c0	0x435464
    1404:	53737500 	beql	k1,s3,1e808 <__isr_vec_space+0x1e7e8>
    1408:	6b636174 	0x6b636174
    140c:	74706544 	jalx	1c19510 <__memory_size+0x1bf9d10>
    1410:	43780068 	c0	0x1780068
    1414:	7261656c 	s16ldi	xr5,s3,178,ptn0
    1418:	6e756f43 	0x6e756f43
    141c:	456e4f74 	bz.v	$w14,151f0 <__isr_vec_space+0x151d0>
    1420:	00746978 	0x746978
    1424:	74655365 	jalx	1954d94 <__memory_size+0x1935594>
    1428:	756c6156 	jalx	5b18558 <__memory_size+0x5af8d58>
    142c:	74695765 	jalx	1a55d94 <__memory_size+0x1a36594>
    1430:	65764f68 	0x65764f68
    1434:	69727772 	0x69727772
    1438:	78006574 	0x78006574
    143c:	6b736154 	0x6b736154
    1440:	54746547 	bnel	v1,s4,1a960 <__isr_vec_space+0x1a940>
    1444:	436b6369 	c0	0x16b6369
    1448:	746e756f 	jalx	1b9d5bc <__memory_size+0x1b7ddbc>
    144c:	6d6f7246 	0x6d6f7246
    1450:	00525349 	0x525349
    1454:	61537875 	0x61537875
    1458:	49646576 	0x49646576
    145c:	7265746e 	0x7265746e
    1460:	74707572 	jalx	1c1d5c8 <__memory_size+0x1bfddc8>
    1464:	74617453 	jalx	185d14c <__memory_size+0x183d94c>
    1468:	6c750065 	0x6c750065
    146c:	73746942 	0x73746942
    1470:	6c436f54 	0x6c436f54
    1474:	4f726165 	c3	0x1726165
    1478:	746e456e 	jalx	1b915b8 <__memory_size+0x1b71db8>
    147c:	78007972 	0x78007972
    1480:	646e6550 	0x646e6550
    1484:	52676e69 	beql	s3,a3,1ce2c <__isr_vec_space+0x1ce0c>
    1488:	79646165 	st.h	$w5,712(t4)
    148c:	7473694c 	jalx	1cda530 <__memory_size+0x1cbad30>
    1490:	61547800 	0x61547800
    1494:	57736b73 	bnel	k1,s3,1c264 <__isr_vec_space+0x1c244>
    1498:	69746961 	0x69746961
    149c:	6554676e 	0x6554676e
    14a0:	6e696d72 	0x6e696d72
    14a4:	6f697461 	0x6f697461
    14a8:	5f5f006e 	0x5f5f006e
    14ac:	746e6975 	jalx	1b9a5d4 <__memory_size+0x1b7add4>
    14b0:	745f3631 	jalx	17cd8c4 <__memory_size+0x17ae0c4>
    14b4:	61547800 	0x61547800
    14b8:	65526b73 	0x65526b73
    14bc:	656d7573 	0x656d7573
    14c0:	6d6f7246 	0x6d6f7246
    14c4:	00525349 	0x525349
    14c8:	73615476 	0x73615476
    14cc:	7375536b 	s16std	xr13,k1,-344,
    14d0:	646e6570 	0x646e6570
    14d4:	006c6c41 	0x6c6c41
    14d8:	61547875 	0x61547875
    14dc:	65476b73 	0x65476b73
    14e0:	61745374 	0x61745374
    14e4:	69486b63 	0x69486b63
    14e8:	61576867 	0x61576867
    14ec:	4d726574 	0x4d726574
    14f0:	006b7261 	0x6b7261
    14f4:	73615476 	0x73615476
    14f8:	6978456b 	0x6978456b
    14fc:	69724374 	0x69724374
    1500:	61636974 	0x61636974
    1504:	7875006c 	0x7875006c
    1508:	65746e49 	0x65746e49
    150c:	70757272 	0x70757272
    1510:	73654e74 	q16sll	xr9,xr3,xr5,xr9,13
    1514:	676e6974 	0x676e6974
    1518:	6f4e6500 	0x6f4e6500
    151c:	79666974 	0x79666974
    1520:	69746341 	0x69746341
    1524:	70006e6f 	0x70006e6f
    1528:	74536375 	jalx	14d8dd4 <__memory_size+0x14b95d4>
    152c:	426b6361 	c0	0x6b6361
    1530:	00657479 	0x657479
    1534:	73615476 	0x73615476
    1538:	646e456b 	0x646e456b
    153c:	65686353 	0x65686353
    1540:	656c7564 	0x656c7564
    1544:	78750072 	0x78750072
    1548:	6b736154 	0x6b736154
    154c:	6f697250 	0x6f697250
    1550:	79746972 	0x79746972
    1554:	00746547 	0x746547
    1558:	6e6f4378 	0x6e6f4378
    155c:	69547473 	0x69547473
    1560:	6f436b63 	0x6f436b63
    1564:	00746e75 	0x746e75
    1568:	73755378 	0x73755378
    156c:	646e6570 	0x646e6570
    1570:	61546465 	0x61546465
    1574:	694c6b73 	0x694c6b73
    1578:	70007473 	d32sar	xr1,xr13,xr1,xr0,0
    157c:	6d614e63 	0x6d614e63
    1580:	6c750065 	0x6c750065
    1584:	6e756f43 	0x6e756f43
    1588:	73740074 	q16sll	xr1,xr0,xr0,xr13,13
    158c:	7361546b 	s16std	xr1,k1,170,ptn0
    1590:	6e6f436b 	0x6e6f436b
    1594:	6c6f7274 	0x6c6f7274
    1598:	636f6c42 	0x636f6c42
    159c:	7870006b 	0x7870006b
    15a0:	7265764f 	d16mace	xr9,xr13,xr5,xr9,SA,LW
    15a4:	776f6c66 	jalx	dbdb198 <__memory_size+0xdbbb998>
    15a8:	616c6544 	0x616c6544
    15ac:	54646579 	bnel	v1,a0,1ab94 <__isr_vec_space+0x1ab74>
    15b0:	4c6b7361 	madd.d	$f13,$f3,$f14,$f11
    15b4:	00747369 	0x747369
    15b8:	73615476 	0x73615476
    15bc:	616c506b 	0x616c506b
    15c0:	6e4f6563 	0x6e4f6563
    15c4:	6e657645 	0x6e657645
    15c8:	73694c74 	q16sll	xr1,xr3,xr5,xr10,13
    15cc:	54760074 	bnel	v1,s6,17a0 <__isr_vec_space+0x1780>
    15d0:	446b7361 	0x446b7361
    15d4:	79616c65 	st.h	$w17,706(t5)
    15d8:	54767000 	bnel	v1,s6,1d5dc <__isr_vec_space+0x1d5bc>
    15dc:	496b7361 	0x496b7361
    15e0:	6572636e 	0x6572636e
    15e4:	746e656d 	jalx	1b995b4 <__memory_size+0x1b79db4>
    15e8:	6574754d 	0x6574754d
    15ec:	6c654878 	0x6c654878
    15f0:	756f4364 	jalx	5bd0d90 <__memory_size+0x5bb1590>
    15f4:	7500746e 	jalx	401d1b8 <__memory_size+0x3ffd9b8>
    15f8:	746f4e6c 	jalx	1bd39b0 <__memory_size+0x1bb41b0>
    15fc:	65696669 	0x65696669
    1600:	6c615664 	0x6c615664
    1604:	75006575 	jalx	40195d4 <__memory_size+0x3ff9dd4>
    1608:	74754d78 	jalx	1d535e0 <__memory_size+0x1d33de0>
    160c:	73657865 	s8sdi	xr1,k1,94,ptn1
    1610:	646c6548 	0x646c6548
    1614:	61547800 	0x61547800
    1618:	72506b73 	d32sar	xr13,xr10,xr1,xr4,9
    161c:	69726f69 	0x69726f69
    1620:	69447974 	0x69447974
    1624:	686e6973 	0x686e6973
    1628:	74697265 	jalx	1a5c994 <__memory_size+0x1a3d194>
    162c:	61547800 	0x61547800
    1630:	65526b73 	0x65526b73
    1634:	65766f6d 	0x65766f6d
    1638:	6d6f7246 	0x6d6f7246
    163c:	6e657645 	0x6e657645
    1640:	73694c74 	q16sll	xr1,xr3,xr5,xr10,13
    1644:	53650074 	beql	k1,a1,1818 <__isr_vec_space+0x17f8>
    1648:	61567465 	0x61567465
    164c:	5765756c 	bnel	k1,a1,1ec00 <__isr_vec_space+0x1ebe0>
    1650:	6f687469 	0x6f687469
    1654:	764f7475 	jalx	93dd1d4 <__memory_size+0x93bd9d4>
    1658:	72777265 	s8sdi	xr9,s3,-36,
    165c:	00657469 	0x657469
    1660:	73615478 	0x73615478
    1664:	746f4e6b 	jalx	1bd39ac <__memory_size+0x1bb41ac>
    1668:	57796669 	bnel	k1,t9,1b010 <__isr_vec_space+0x1aff0>
    166c:	00746961 	0x746961
    1670:	74536c75 	jalx	14db1d4 <__memory_size+0x14bb9d4>
    1674:	446b6361 	0x446b6361
    1678:	68747065 	0x68747065
    167c:	68537800 	0x68537800
    1680:	646c756f 	0x646c756f
    1684:	616c6544 	0x616c6544
    1688:	72700079 	0x72700079
    168c:	6c644976 	0x6c644976
    1690:	73615465 	s8sdi	xr1,k1,85,ptn0
    1694:	4c78006b 	0x4c78006b
    1698:	49747369 	0x49747369
    169c:	706d4573 	d32sar	xr5,xr1,xr5,xr11,1
    16a0:	75007974 	jalx	401e5d0 <__memory_size+0x3ffedd0>
    16a4:	7361546c 	s16ldi	xr1,k1,170,ptn0
    16a8:	746f4e6b 	jalx	1bd39ac <__memory_size+0x1bb41ac>
    16ac:	54796669 	bnel	v1,t9,1b054 <__isr_vec_space+0x1b034>
    16b0:	00656b61 	0x656b61
    16b4:	73615476 	0x73615476
    16b8:	616c506b 	0x616c506b
    16bc:	6e4f6563 	0x6e4f6563
    16c0:	6e657645 	0x6e657645
    16c4:	73694c74 	q16sll	xr1,xr3,xr5,xr10,13
    16c8:	73655274 	q16sll	xr9,xr4,xr5,xr9,13
    16cc:	63697274 	0x63697274
    16d0:	00646574 	teq	v1,a0,0x195
    16d4:	73615478 	0x73615478
    16d8:	6572436b 	0x6572436b
    16dc:	00657461 	0x657461
    16e0:	41767270 	0x41767270
    16e4:	654e6464 	0x654e6464
    16e8:	73615477 	q16sar	xr1,xr5,xr5,xr8,13
    16ec:	526f546b 	beql	s3,t7,1689c <__isr_vec_space+0x1687c>
    16f0:	79646165 	st.h	$w5,712(t4)
    16f4:	7473694c 	jalx	1cda530 <__memory_size+0x1cbad30>
    16f8:	61546500 	0x61546500
    16fc:	65476b73 	0x65476b73
    1700:	61745374 	0x61745374
    1704:	70006574 	q16sll	xr5,xr9,xr1,xr0,0
    1708:	77654e78 	jalx	d9539e0 <__memory_size+0xd9341e0>
    170c:	00424354 	0x424354
    1710:	61547870 	0x61547870
    1714:	6f436b73 	0x6f436b73
    1718:	4d006564 	bc3f	1acac <__isr_vec_space+0x1ac8c>
    171c:	726f6d65 	s8sdi	xr5,s3,-37,ptn3
    1720:	67655279 	0x67655279
    1724:	5f6e6f69 	0x5f6e6f69
    1728:	4e780074 	c3	0x780074
    172c:	54747865 	bnel	v1,s4,1f8c4 <__memory_size+0xc4>
    1730:	556b7361 	bnel	t3,t3,1e4b8 <__isr_vec_space+0x1e498>
    1734:	6f6c626e 	0x6f6c626e
    1738:	69546b63 	0x69546b63
    173c:	7800656d 	0x7800656d
    1740:	6b636954 	0x6b636954
    1744:	6e756f43 	0x6e756f43
    1748:	6c750074 	0x6c750074
    174c:	676e654c 	0x676e654c
    1750:	6e496874 	0x6e496874
    1754:	65747942 	0x65747942
    1758:	6c750073 	0x6c750073
    175c:	63656843 	0x63656843
    1760:	6c61566b 	0x6c61566b
    1764:	70006575 	q16slr	xr5,xr9,xr1,xr0,0
    1768:	65527672 	0x65527672
    176c:	4e746573 	c3	0x746573
    1770:	54747865 	bnel	v1,s4,1f908 <__memory_size+0x108>
    1774:	556b7361 	bnel	t3,t3,1e4fc <__isr_vec_space+0x1e4dc>
    1778:	6f6c626e 	0x6f6c626e
    177c:	69546b63 	0x69546b63
    1780:	7800656d 	0x7800656d
    1784:	656d6954 	0x656d6954
    1788:	6e456e4f 	0x6e456e4f
    178c:	69726574 	0x69726574
    1790:	5400676e 	bnezl	zero,1b54c <__isr_vec_space+0x1b52c>
    1794:	466b7361 	c1	0x6b7361
    1798:	74636e75 	jalx	18db9d4 <__memory_size+0x18bc1d4>
    179c:	5f6e6f69 	0x5f6e6f69
    17a0:	75700074 	jalx	5c001d0 <__memory_size+0x5be09d0>
    17a4:	6572506c 	0x6572506c
    17a8:	756f6976 	jalx	5bda5d8 <__memory_size+0x5bbadd8>
    17ac:	746f4e73 	jalx	1bd39cc <__memory_size+0x1bb41cc>
    17b0:	63696669 	0x63696669
    17b4:	6f697461 	0x6f697461
    17b8:	6c61566e 	0x6c61566e
    17bc:	70006575 	q16slr	xr5,xr9,xr1,xr0,0
    17c0:	6d695478 	0x6d695478
    17c4:	74754f65 	jalx	1d53d94 <__memory_size+0x1d34594>
    17c8:	54787500 	bnel	v1,t8,1ebcc <__isr_vec_space+0x1ebac>
    17cc:	506b7361 	beql	v1,t3,1e554 <__isr_vec_space+0x1e534>
    17d0:	726f6972 	0x726f6972
    17d4:	47797469 	bz.d	$w25,1e97c <__isr_vec_space+0x1e95c>
    17d8:	72467465 	s8sdi	xr1,s2,-99,ptn1
    17dc:	53496d6f 	beql	k0,t1,1cd9c <__isr_vec_space+0x1cd7c>
    17e0:	54780052 	bnel	v1,t8,192c <__isr_vec_space+0x190c>
    17e4:	476b7361 	bz.d	$w11,1e56c <__isr_vec_space+0x1e54c>
    17e8:	69547465 	0x69547465
    17ec:	6f436b63 	0x6f436b63
    17f0:	00746e75 	0x746e75
    17f4:	656d6954 	0x656d6954
    17f8:	5f74754f 	0x5f74754f
    17fc:	78750074 	0x78750074
    1800:	6b736154 	0x6b736154
    1804:	626d754e 	0x626d754e
    1808:	65007265 	0x65007265
    180c:	69746341 	0x69746341
    1810:	75006e6f 	jalx	401b9bc <__memory_size+0x3ffc1bc>
    1814:	73615478 	0x73615478
    1818:	7365526b 	s16std	xr9,k1,-344,ptn0
    181c:	76457465 	jalx	915d194 <__memory_size+0x913d994>
    1820:	49746e65 	0x49746e65
    1824:	566d6574 	bnel	s3,t5,1adf8 <__isr_vec_space+0x1add8>
    1828:	65756c61 	0x65756c61
    182c:	61547600 	0x61547600
    1830:	72506b73 	d32sar	xr13,xr10,xr1,xr4,9
    1834:	69726f69 	0x69726f69
    1838:	65537974 	0x65537974
    183c:	54760074 	bnel	v1,s6,1a10 <__isr_vec_space+0x19f0>
    1840:	526b7361 	beql	s3,t3,1e5c8 <__isr_vec_space+0x1e5a8>
    1844:	6d757365 	0x6d757365
    1848:	54650065 	bnel	v1,a1,19e0 <__isr_vec_space+0x19c0>
    184c:	536b7361 	beql	k1,t3,1e5d4 <__isr_vec_space+0x1e5b4>
    1850:	65746174 	0x65746174
    1854:	61547800 	0x61547800
    1858:	6f546b73 	0x6f546b73
    185c:	72657551 	s32std	xr5,s3,1396
    1860:	54780079 	bnel	v1,t8,1a48 <__isr_vec_space+0x1a28>
    1864:	546b7361 	bnel	v1,t3,1e5ec <__isr_vec_space+0x1e5cc>
    1868:	746f4e6f 	jalx	1bd39bc <__memory_size+0x1bb41bc>
    186c:	00796669 	0x796669
    1870:	74655365 	jalx	1954d94 <__memory_size+0x1935594>
    1874:	73746942 	0x73746942
    1878:	4f637500 	c3	0x1637500
    187c:	69676972 	0x69676972
    1880:	4e6c616e 	msub.ps	$f5,$f19,$f12,$f12
    1884:	6669746f 	0x6669746f
    1888:	61745379 	0x61745379
    188c:	78006574 	0x78006574
    1890:	4f4d454d 	c3	0x14d454d
    1894:	525f5952 	beql	s2,ra,17de0 <__isr_vec_space+0x17dc0>
    1898:	4f494745 	c3	0x1494745
    189c:	5476004e 	bnel	v1,s6,19d8 <__isr_vec_space+0x19b8>
    18a0:	446b7361 	0x446b7361
    18a4:	74656c65 	jalx	195b194 <__memory_size+0x193b994>
    18a8:	54760065 	bnel	v1,s6,1a40 <__isr_vec_space+0x1a20>
    18ac:	536b7361 	beql	k1,t3,1e634 <__isr_vec_space+0x1e614>
    18b0:	63746977 	0x63746977
    18b4:	6e6f4368 	0x6e6f4368
    18b8:	74786574 	jalx	1e195d0 <__memory_size+0x1df9dd0>
    18bc:	754e7800 	jalx	539e000 <__memory_size+0x537e800>
    18c0:	4f664f6d 	c3	0x1664f6d
    18c4:	66726576 	0x66726576
    18c8:	73776f6c 	s16ldi	xr13,k1,-74,ptn2
    18cc:	64497800 	0x64497800
    18d0:	6154656c 	0x6154656c
    18d4:	61486b73 	0x61486b73
    18d8:	656c646e 	0x656c646e
    18dc:	61547800 	0x61547800
    18e0:	65526b73 	0x65526b73
    18e4:	656d7573 	0x656d7573
    18e8:	006c6c41 	0x6c6c41
    18ec:	73615476 	0x73615476
    18f0:	746f4e6b 	jalx	1bd39ac <__memory_size+0x1bb41ac>
    18f4:	47796669 	bz.d	$w25,1b29c <__isr_vec_space+0x1b27c>
    18f8:	46657669 	c1	0x657669
    18fc:	496d6f72 	0x496d6f72
    1900:	70005253 	udi3	zero,zero,t2,0x9
    1904:	6c654478 	0x6c654478
    1908:	64657961 	0x64657961
    190c:	6b736154 	0x6b736154
    1910:	7473694c 	jalx	1cda530 <__memory_size+0x1cbad30>
    1914:	76727000 	jalx	9c9c000 <__memory_size+0x9c7c800>
    1918:	6b736154 	0x6b736154
    191c:	61547349 	0x61547349
    1920:	75536b73 	jalx	54dadcc <__memory_size+0x54bb5cc>
    1924:	6e657073 	0x6e657073
    1928:	00646564 	0x646564
    192c:	69775378 	0x69775378
    1930:	52686374 	beql	s3,t0,1a704 <__isr_vec_space+0x1a6e4>
    1934:	69757165 	0x69757165
    1938:	00646572 	tlt	v1,a0,0x195
    193c:	754d7870 	jalx	535e1c0 <__memory_size+0x533e9c0>
    1940:	48786574 	mfhc2	t8,0x6574
    1944:	65646c6f 	0x65646c6f
    1948:	78700072 	0x78700072
    194c:	63617453 	0x63617453
    1950:	5478006b 	bnel	v1,t8,1b00 <__isr_vec_space+0x1ae0>
    1954:	546b7361 	bnel	v1,t3,1e6dc <__isr_vec_space+0x1e6bc>
    1958:	6c65446f 	0x6c65446f
    195c:	00657465 	0x657465
    1960:	73615478 	0x73615478
    1964:	536f546b 	beql	k1,t7,16b14 <__isr_vec_space+0x16af4>
    1968:	65707375 	0x65707375
    196c:	7800646e 	0x7800646e
    1970:	6b736154 	0x6b736154
    1974:	63656843 	0x63656843
    1978:	726f466b 	s16std	xr9,s3,-94,ptn1
    197c:	656d6954 	0x656d6954
    1980:	0074754f 	0x74754f
    1984:	72507870 	d32sll	xr1,xr14,xr1,xr4,9
    1988:	6f697665 	0x6f697665
    198c:	61577375 	0x61577375
    1990:	6954656b 	0x6954656b
    1994:	7000656d 	s16sdi	xr5,zero,50,ptn0
    1998:	6f4e6c75 	0x6f4e6c75
    199c:	69666974 	0x69666974
    19a0:	69746163 	0x69746163
    19a4:	61566e6f 	0x61566e6f
    19a8:	0065756c 	0x65756c
    19ac:	73615476 	0x73615476
    19b0:	73694d6b 	s16std	xr5,k1,166,ptn1
    19b4:	59646573 	0x59646573
    19b8:	646c6569 	0x646c6569
    19bc:	63757000 	0x63757000
    19c0:	4f646e45 	c3	0x1646e45
    19c4:	61745366 	0x61745366
    19c8:	70006b63 	s8std	xr13,zero,26,ptn0
    19cc:	73615463 	s8std	xr1,k1,85,ptn0
    19d0:	7465476b 	jalx	1951dac <__memory_size+0x19325ac>
    19d4:	656d614e 	0x656d614e
    19d8:	69547800 	0x69547800
    19dc:	00736b63 	0x736b63
    19e0:	73615476 	0x73615476
    19e4:	6174536b 	0x6174536b
    19e8:	63537472 	0x63537472
    19ec:	75646568 	jalx	59195a0 <__memory_size+0x58f9da0>
    19f0:	0072656c 	0x72656c
    19f4:	6e614378 	0x6e614378
    19f8:	636f6c42 	0x636f6c42
    19fc:	646e496b 	0x646e496b
    1a00:	6e696665 	0x6e696665
    1a04:	6c657469 	0x6c657469
    1a08:	75700079 	jalx	5c001e4 <__memory_size+0x5be09e4>
    1a0c:	6174536c 	0x6174536c
    1a10:	70006b63 	s8std	xr13,zero,26,ptn0
    1a14:	73614276 	0x73614276
    1a18:	64644165 	0x64644165
    1a1c:	73736572 	0x73736572
    1a20:	69547800 	0x69547800
    1a24:	54736b63 	bnel	v1,s3,1c7b4 <__isr_vec_space+0x1c794>
    1a28:	6c65446f 	0x6c65446f
    1a2c:	76007961 	jalx	801e584 <__memory_size+0x7ffed84>
    1a30:	6b736154 	0x6b736154
    1a34:	63616c50 	0x63616c50
    1a38:	556e4f65 	bnel	t3,t6,157d0 <__isr_vec_space+0x157b0>
    1a3c:	64726f6e 	0x64726f6e
    1a40:	64657265 	0x64657265
    1a44:	6e657645 	0x6e657645
    1a48:	73694c74 	q16sll	xr1,xr3,xr5,xr10,13
    1a4c:	54780074 	bnel	v1,t8,1c20 <__isr_vec_space+0x1c00>
    1a50:	526b7361 	beql	s3,t3,1e7d8 <__isr_vec_space+0x1e7b8>
    1a54:	766f6d65 	jalx	9bdb594 <__memory_size+0x9bbbd94>
    1a58:	6f724665 	0x6f724665
    1a5c:	6f6e556d 	0x6f6e556d
    1a60:	72656472 	0x72656472
    1a64:	76456465 	jalx	9159194 <__memory_size+0x9139994>
    1a68:	4c746e65 	0x4c746e65
    1a6c:	00747369 	0x747369
    1a70:	73615478 	0x73615478
    1a74:	746f4e6b 	jalx	1bd39ac <__memory_size+0x1bb41ac>
    1a78:	53796669 	beql	k1,t9,1b420 <__isr_vec_space+0x1b400>
    1a7c:	65746174 	0x65746174
    1a80:	61656c43 	0x61656c43
    1a84:	78700072 	0x78700072
    1a88:	6b636954 	0x6b636954
    1a8c:	576f5473 	bnel	k1,t7,16c5c <__isr_vec_space+0x16c3c>
    1a90:	00746961 	0x746961
    1a94:	6f547875 	0x6f547875
    1a98:	69725070 	0x69725070
    1a9c:	7469726f 	jalx	1a5c9bc <__memory_size+0x1a3d1bc>
    1aa0:	78750079 	0x78750079
    1aa4:	65736142 	0x65736142
    1aa8:	6f697250 	0x6f697250
    1aac:	79746972 	0x79746972
    1ab0:	61547600 	0x61547600
    1ab4:	65446b73 	0x65446b73
    1ab8:	5579616c 	bnel	t3,t9,1a06c <__isr_vec_space+0x1a04c>
    1abc:	6c69746e 	0x6c69746e
    1ac0:	50787500 	beql	v1,t8,1eec4 <__isr_vec_space+0x1eea4>
    1ac4:	726f6972 	0x726f6972
    1ac8:	55797469 	bnel	t3,t9,1ec70 <__isr_vec_space+0x1ec50>
    1acc:	4f646573 	c3	0x1646573
    1ad0:	746e456e 	jalx	1b915b8 <__memory_size+0x1b71db8>
    1ad4:	54007972 	bnezl	zero,200a0 <__memory_size+0x8a0>
    1ad8:	745f4243 	jalx	17d090c <__memory_size+0x17b110c>
    1adc:	76727000 	jalx	9c9c000 <__memory_size+0x9c7c800>
    1ae0:	656c6544 	0x656c6544
    1ae4:	43546574 	c0	0x1546574
    1ae8:	54760042 	bnel	v1,s6,1bf4 <__isr_vec_space+0x1bd4>
    1aec:	536b7361 	beql	k1,t3,1e874 <__isr_vec_space+0x1e854>
    1af0:	65707375 	0x65707375
    1af4:	7800646e 	0x7800646e
    1af8:	6b736154 	0x6b736154
    1afc:	43746547 	c0	0x1746547
    1b00:	65727275 	0x65727275
    1b04:	6154746e 	0x6154746e
    1b08:	61486b73 	0x61486b73
    1b0c:	656c646e 	0x656c646e
    1b10:	61547600 	0x61547600
    1b14:	6e456b73 	0x6e456b73
    1b18:	43726574 	c0	0x1726574
    1b1c:	69746972 	0x69746972
    1b20:	006c6163 	0x6c6163
    1b24:	54767270 	bnel	v1,s6,1e4e8 <__isr_vec_space+0x1e4c8>
    1b28:	436b7361 	c0	0x16b7361
    1b2c:	6b636568 	0x6b636568
    1b30:	65657246 	0x65657246
    1b34:	63617453 	0x63617453
    1b38:	6170536b 	0x6170536b
    1b3c:	78006563 	ld.d	$w21,0(t4)
    1b40:	69676552 	0x69676552
    1b44:	00736e6f 	0x736e6f
    1b48:	41767270 	0x41767270
    1b4c:	75436464 	jalx	50d9190 <__memory_size+0x50b9990>
    1b50:	6e657272 	0x6e657272
    1b54:	73615474 	q16sll	xr1,xr5,xr5,xr8,13
    1b58:	446f546b 	0x446f546b
    1b5c:	79616c65 	st.h	$w17,706(t5)
    1b60:	694c6465 	0x694c6465
    1b64:	70007473 	d32sar	xr1,xr13,xr1,xr0,0
    1b68:	72754378 	0x72754378
    1b6c:	746e6572 	jalx	1b995c8 <__memory_size+0x1b79dc8>
    1b70:	00424354 	0x424354
    1b74:	654e7875 	0x654e7875
    1b78:	69725077 	0x69725077
    1b7c:	7469726f 	jalx	1a5c9bc <__memory_size+0x1a3d1bc>
    1b80:	78750079 	0x78750079
    1b84:	72727543 	0x72727543
    1b88:	4e746e65 	c3	0x746e65
    1b8c:	65626d75 	0x65626d75
    1b90:	54664f72 	bnel	v1,a2,1595c <__isr_vec_space+0x1593c>
    1b94:	736b7361 	0x736b7361
    1b98:	69547800 	0x69547800
    1b9c:	6e49656d 	0x6e49656d
    1ba0:	6d657263 	0x6d657263
    1ba4:	00746e65 	0x746e65
    1ba8:	6d695478 	0x6d695478
    1bac:	576f5465 	bnel	k1,t7,16d44 <__isr_vec_space+0x16d24>
    1bb0:	00656b61 	0x656b61
    1bb4:	61745378 	0x61745378
    1bb8:	694c6574 	0x694c6574
    1bbc:	74497473 	jalx	125d1cc <__memory_size+0x123d9cc>
    1bc0:	75006d65 	jalx	401b594 <__memory_size+0x3ffbd94>
    1bc4:	6e655078 	0x6e655078
    1bc8:	54646564 	bnel	v1,a0,1b15c <__isr_vec_space+0x1b13c>
    1bcc:	736b6369 	0x736b6369
    1bd0:	54787000 	bnel	v1,t8,1dbd4 <__isr_vec_space+0x1dbb4>
    1bd4:	2e004243 	sltiu	zero,s0,16963
    1bd8:	2e2e2f2e 	sltiu	t6,s1,12078
    1bdc:	756f532f 	jalx	5bd4cbc <__memory_size+0x5bb54bc>
    1be0:	2f656372 	sltiu	a1,k1,25458
    1be4:	6b736174 	0x6b736174
    1be8:	00632e73 	tltu	v1,v1,0xb9
    1bec:	63537875 	0x63537875
    1bf0:	75646568 	jalx	59195a0 <__memory_size+0x58f9da0>
    1bf4:	5372656c 	beql	k1,s2,1b1a8 <__isr_vec_space+0x1b188>
    1bf8:	65707375 	0x65707375
    1bfc:	6465646e 	0x6465646e
    1c00:	54787000 	bnel	v1,t8,1dc04 <__isr_vec_space+0x1dbe4>
    1c04:	664f706f 	0x664f706f
    1c08:	63617453 	0x63617453
    1c0c:	7875006b 	0x7875006b
    1c10:	74697243 	jalx	1a5c90c <__memory_size+0x1a3d10c>
    1c14:	6c616369 	0x6c616369
    1c18:	7473654e 	jalx	1cd9538 <__memory_size+0x1cb9d38>
    1c1c:	00676e69 	0x676e69
    1c20:	49767270 	0x49767270
    1c24:	6974696e 	0x6974696e
    1c28:	73696c61 	0x73696c61
    1c2c:	73615465 	s8sdi	xr1,k1,85,ptn0
    1c30:	73694c6b 	s16std	xr1,k1,166,ptn1
    1c34:	70007374 	q16sll	xr13,xr12,xr1,xr0,0
    1c38:	65764578 	0x65764578
    1c3c:	694c746e 	0x694c746e
    1c40:	74497473 	jalx	125d1cc <__memory_size+0x123d9cc>
    1c44:	70006d65 	s8sdi	xr5,zero,27,ptn0
    1c48:	65724378 	0x65724378
    1c4c:	64657461 	0x64657461
    1c50:	6b736154 	0x6b736154
    1c54:	76727000 	jalx	9c9c000 <__memory_size+0x9c7c800>
    1c58:	63656843 	0x63656843
    1c5c:	7361546b 	s16std	xr1,k1,170,ptn0
    1c60:	6157736b 	0x6157736b
    1c64:	6e697469 	0x6e697469
    1c68:	72655467 	s32aln	xr1,xr5,xr5,s3
    1c6c:	616e696d 	0x616e696d
    1c70:	6e6f6974 	0x6e6f6974
    1c74:	526c7500 	beql	s3,t4,1f078 <__isr_vec_space+0x1f058>
    1c78:	72757465 	s8sdi	xr1,s3,93,
    1c7c:	7875006e 	0x7875006e
    1c80:	72727543 	0x72727543
    1c84:	42746e65 	c0	0x746e65
    1c88:	50657361 	beql	v1,a1,1ea10 <__isr_vec_space+0x1e9f0>
    1c8c:	726f6972 	0x726f6972
    1c90:	00797469 	0x797469
    1c94:	65695978 	0x65695978
    1c98:	6550646c 	0x6550646c
    1c9c:	6e69646e 	0x6e69646e
    1ca0:	72700067 	0x72700067
    1ca4:	746f4e76 	jalx	1bd39d8 <__memory_size+0x1bb41d8>
    1ca8:	51796669 	beql	t3,t9,1b650 <__isr_vec_space+0x1b630>
    1cac:	65756575 	0x65756575
    1cb0:	43746553 	c0	0x1746553
    1cb4:	61746e6f 	0x61746e6f
    1cb8:	72656e69 	0x72656e69
    1cbc:	75517800 	jalx	545e000 <__memory_size+0x543e800>
    1cc0:	52657565 	beql	s3,a1,1f258 <__isr_vec_space+0x1f238>
    1cc4:	69656365 	0x69656365
    1cc8:	72466576 	0x72466576
    1ccc:	53496d6f 	beql	k0,t1,1d28c <__isr_vec_space+0x1d26c>
    1cd0:	54780052 	bnel	v1,t8,1e1c <__isr_vec_space+0x1dfc>
    1cd4:	736b7361 	0x736b7361
    1cd8:	74696157 	jalx	1a5855c <__memory_size+0x1a38d5c>
    1cdc:	54676e69 	bnel	v1,a3,1d684 <__isr_vec_space+0x1d664>
    1ce0:	6365526f 	0x6365526f
    1ce4:	65766965 	0x65766965
    1ce8:	4d787000 	0x4d787000
    1cec:	78657475 	0x78657475
    1cf0:	4e787000 	c3	0x787000
    1cf4:	75517765 	jalx	545dd94 <__memory_size+0x543e594>
    1cf8:	00657565 	0x657565
    1cfc:	73615478 	0x73615478
    1d00:	6157736b 	0x6157736b
    1d04:	6e697469 	0x6e697469
    1d08:	536f5467 	beql	k1,t7,16ea8 <__isr_vec_space+0x16e88>
    1d0c:	00646e65 	0x646e65
    1d10:	75517875 	jalx	545e1d4 <__memory_size+0x543e9d4>
    1d14:	53657565 	beql	k1,a1,1f2ac <__isr_vec_space+0x1f28c>
    1d18:	65636170 	0x65636170
    1d1c:	61764173 	0x61764173
    1d20:	62616c69 	0x62616c69
    1d24:	6300656c 	0x6300656c
    1d28:	6f4c7854 	0x6f4c7854
    1d2c:	51006b63 	beqzl	t0,1cabc <__isr_vec_space+0x1ca9c>
    1d30:	65756575 	0x65756575
    1d34:	7800745f 	0x7800745f
    1d38:	79706f43 	0x79706f43
    1d3c:	69736f50 	0x69736f50
    1d40:	6e6f6974 	0x6e6f6974
    1d44:	75517600 	jalx	545d800 <__memory_size+0x543e000>
    1d48:	44657565 	0x44657565
    1d4c:	74656c65 	jalx	195b194 <__memory_size+0x193b994>
    1d50:	63700065 	0x63700065
    1d54:	64616552 	0x64616552
    1d58:	6d6f7246 	0x6d6f7246
    1d5c:	76727000 	jalx	9c9c000 <__memory_size+0x9c7c800>
    1d60:	74696e49 	jalx	1a5b924 <__memory_size+0x1a3c124>
    1d64:	696c6169 	0x696c6169
    1d68:	654e6573 	0x654e6573
    1d6c:	65755177 	0x65755177
    1d70:	75006575 	jalx	40195d4 <__memory_size+0x3ff9dd4>
    1d74:	74754d78 	jalx	1d535e0 <__memory_size+0x1d33de0>
    1d78:	69537865 	0x69537865
    1d7c:	5100657a 	beqzl	t0,1b368 <__isr_vec_space+0x1b348>
    1d80:	65756575 	0x65756575
    1d84:	69666544 	0x69666544
    1d88:	6974696e 	0x6974696e
    1d8c:	78006e6f 	0x78006e6f
    1d90:	75657551 	jalx	595d544 <__memory_size+0x593dd44>
    1d94:	6e654765 	0x6e654765
    1d98:	63697265 	0x63697265
    1d9c:	65636552 	0x65636552
    1da0:	00657669 	0x657669
    1da4:	49767270 	0x49767270
    1da8:	65755173 	0x65755173
    1dac:	6d456575 	0x6d456575
    1db0:	00797470 	tge	v1,t9,0x1d1
    1db4:	75427670 	jalx	509d9c0 <__memory_size+0x507e1c0>
    1db8:	72656666 	s32mulu	xr9,xr9,s3,a1
    1dbc:	4d787500 	0x4d787500
    1dc0:	61737365 	0x61737365
    1dc4:	57736567 	bnel	k1,s3,1b364 <__isr_vec_space+0x1b344>
    1dc8:	69746961 	0x69746961
    1dcc:	7800676e 	0x7800676e
    1dd0:	72746e45 	0x72746e45
    1dd4:	6d695479 	0x6d695479
    1dd8:	74655365 	jalx	1954d94 <__memory_size+0x1935594>
    1ddc:	61487800 	0x61487800
    1de0:	656c646e 	0x656c646e
    1de4:	75517800 	jalx	545e000 <__memory_size+0x543e800>
    1de8:	47657565 	bz.d	$w5,1f380 <__isr_vec_space+0x1f360>
    1dec:	72656e65 	s8sdi	xr9,s3,91,ptn1
    1df0:	65536369 	0x65536369
    1df4:	7246646e 	0x7246646e
    1df8:	53496d6f 	beql	k0,t1,1d3b8 <__isr_vec_space+0x1d398>
    1dfc:	72700052 	s32lddv	xr1,s3,s0,0
    1e00:	706f4376 	0x706f4376
    1e04:	74614479 	jalx	18511e4 <__memory_size+0x18319e4>
    1e08:	516f5461 	beql	t3,t7,16f90 <__isr_vec_space+0x16f70>
    1e0c:	65756575 	0x65756575
    1e10:	75517800 	jalx	545e000 <__memory_size+0x543e800>
    1e14:	47657565 	bz.d	$w5,1f3ac <__isr_vec_space+0x1f38c>
    1e18:	72656e65 	s8sdi	xr9,s3,91,ptn1
    1e1c:	65536369 	0x65536369
    1e20:	7500646e 	jalx	40191b8 <__memory_size+0x3ff99b8>
    1e24:	65744978 	0x65744978
    1e28:	7a69536d 	0x7a69536d
    1e2c:	78750065 	st.h	$w1,234(zero)
    1e30:	74696e49 	jalx	1a5b924 <__memory_size+0x1a3c124>
    1e34:	436c6169 	c0	0x16c6169
    1e38:	746e756f 	jalx	1b9d5bc <__memory_size+0x1b7ddbc>
    1e3c:	4d787500 	0x4d787500
    1e40:	78657475 	0x78657475
    1e44:	676e654c 	0x676e654c
    1e48:	70006874 	q16sll	xr1,xr10,xr1,xr0,0
    1e4c:	73497672 	0x73497672
    1e50:	75657551 	jalx	595d544 <__memory_size+0x593dd44>
    1e54:	6c754665 	0x6c754665
    1e58:	5178006c 	beql	t3,t8,200c <__isr_vec_space+0x1fec>
    1e5c:	65756575 	0x65756575
    1e60:	65766947 	0x65766947
    1e64:	6d6f7246 	0x6d6f7246
    1e68:	00525349 	0x525349
    1e6c:	75517875 	jalx	545e1d4 <__memory_size+0x543e9d4>
    1e70:	4d657565 	0x4d657565
    1e74:	61737365 	0x61737365
    1e78:	57736567 	bnel	k1,s3,1b418 <__isr_vec_space+0x1b3f8>
    1e7c:	69746961 	0x69746961
    1e80:	7246676e 	0x7246676e
    1e84:	53496d6f 	beql	k0,t1,1d444 <__isr_vec_space+0x1d424>
    1e88:	51780052 	beql	t3,t8,1fd4 <__isr_vec_space+0x1fb4>
    1e8c:	65756575 	0x65756575
    1e90:	656e6547 	0x656e6547
    1e94:	43636972 	c0	0x1636972
    1e98:	74616572 	jalx	18595c8 <__memory_size+0x1839dc8>
    1e9c:	51780065 	beql	t3,t8,2034 <__isr_vec_space+0x2014>
    1ea0:	65756575 	0x65756575
    1ea4:	61657243 	0x61657243
    1ea8:	754d6574 	jalx	53595d0 <__memory_size+0x5339dd0>
    1eac:	00786574 	teq	v1,t8,0x195
    1eb0:	2e2f2e2e 	sltiu	t7,s1,11822
    1eb4:	6f532f2e 	0x6f532f2e
    1eb8:	65637275 	0x65637275
    1ebc:	6575712f 	0x6575712f
    1ec0:	632e6575 	0x632e6575
    1ec4:	75517800 	jalx	545e000 <__memory_size+0x543e800>
    1ec8:	53657565 	beql	k1,a1,1f460 <__isr_vec_space+0x1f440>
    1ecc:	63656c65 	0x63656c65
    1ed0:	6f724674 	0x6f724674
    1ed4:	7465536d 	jalx	1954db4 <__memory_size+0x19355b4>
    1ed8:	6d6f7246 	0x6d6f7246
    1edc:	00525349 	0x525349
    1ee0:	49767270 	0x49767270
    1ee4:	6974696e 	0x6974696e
    1ee8:	73696c61 	0x73696c61
    1eec:	74754d65 	jalx	1d53594 <__memory_size+0x1d33d94>
    1ef0:	70007865 	s8sdi	xr1,zero,30,ptn0
    1ef4:	75516375 	jalx	5458dd4 <__memory_size+0x54395d4>
    1ef8:	53657565 	beql	k1,a1,1f490 <__isr_vec_space+0x1f470>
    1efc:	61726f74 	0x61726f74
    1f00:	78006567 	st.d	$w21,0(t4)
    1f04:	75657551 	jalx	595d544 <__memory_size+0x593dd44>
    1f08:	6d655265 	0x6d655265
    1f0c:	4665766f 	c1	0x65766f
    1f10:	536d6f72 	beql	k1,t5,1dcdc <__isr_vec_space+0x1dcbc>
    1f14:	75007465 	jalx	401d194 <__memory_size+0x3ffd994>
    1f18:	78614d78 	0x78614d78
    1f1c:	6e756f43 	0x6e756f43
    1f20:	51780074 	beql	t3,t8,20f4 <__isr_vec_space+0x20d4>
    1f24:	65756575 	0x65756575
    1f28:	61657243 	0x61657243
    1f2c:	65536574 	0x65536574
    1f30:	63700074 	0x63700074
    1f34:	6769724f 	0x6769724f
    1f38:	6c616e69 	0x6c616e69
    1f3c:	64616552 	0x64616552
    1f40:	69736f50 	0x69736f50
    1f44:	6e6f6974 	0x6e6f6974
    1f48:	51637500 	beql	t3,v1,1f34c <__isr_vec_space+0x1f32c>
    1f4c:	65756575 	0x65756575
    1f50:	65707954 	0x65707954
    1f54:	754a7800 	jalx	529e000 <__memory_size+0x527e800>
    1f58:	65507473 	0x65507473
    1f5c:	6e696b65 	0x6e696b65
    1f60:	63700067 	0x63700067
    1f64:	74697257 	jalx	1a5c95c <__memory_size+0x1a3d15c>
    1f68:	006f5465 	0x6f5465
    1f6c:	6e695f5f 	0x6e695f5f
    1f70:	745f3874 	jalx	17ce1d0 <__memory_size+0x17ae9d0>
    1f74:	75517800 	jalx	545e000 <__memory_size+0x543e800>
    1f78:	54657565 	bnel	v1,a1,1f510 <__isr_vec_space+0x1f4f0>
    1f7c:	4d656b61 	madd.d	$f13,$f11,$f13,$f5
    1f80:	78657475 	0x78657475
    1f84:	75636552 	jalx	58d9548 <__memory_size+0x58b9d48>
    1f88:	76697372 	jalx	9a5cdc8 <__memory_size+0x9a3d5c8>
    1f8c:	78750065 	st.h	$w1,234(zero)
    1f90:	676e654c 	0x676e654c
    1f94:	76006874 	jalx	801a1d0 <__memory_size+0x7ffa9d0>
    1f98:	75657551 	jalx	595d544 <__memory_size+0x593dd44>
    1f9c:	69615765 	0x69615765
    1fa0:	726f4674 	q16sll	xr9,xr1,xr13,xr11,9
    1fa4:	7373654d 	0x7373654d
    1fa8:	52656761 	beql	s3,a1,1bd30 <__isr_vec_space+0x1bd10>
    1fac:	72747365 	s8sdi	xr13,s3,28,
    1fb0:	65746369 	0x65746369
    1fb4:	78700064 	st.b	$w1,112(zero)
    1fb8:	75657551 	jalx	595d544 <__memory_size+0x593dd44>
    1fbc:	53724f65 	beql	k1,s2,15d54 <__isr_vec_space+0x15d34>
    1fc0:	70616d65 	s8sdi	xr5,v1,91,ptn0
    1fc4:	65726f68 	0x65726f68
    1fc8:	75517800 	jalx	545e000 <__memory_size+0x543e800>
    1fcc:	53657565 	beql	k1,a1,1f564 <__isr_vec_space+0x1f544>
    1fd0:	49657a69 	0x49657a69
    1fd4:	7479426e 	jalx	1e509b8 <__memory_size+0x1e311b8>
    1fd8:	70007365 	s8sdi	xr13,zero,28,ptn0
    1fdc:	65744976 	0x65744976
    1fe0:	516f546d 	beql	t3,t7,17198 <__isr_vec_space+0x17178>
    1fe4:	65756575 	0x65756575
    1fe8:	75517800 	jalx	545e000 <__memory_size+0x543e800>
    1fec:	49657565 	0x49657565
    1ff0:	65755173 	0x65755173
    1ff4:	75466575 	jalx	51995d4 <__memory_size+0x5179dd4>
    1ff8:	72466c6c 	s16ldi	xr1,s2,-202,ptn0
    1ffc:	53496d6f 	beql	k0,t1,1d5bc <__isr_vec_space+0x1d59c>
    2000:	78750052 	mulv.d	$w1,$w0,$w21
    2004:	75657551 	jalx	595d544 <__memory_size+0x593dd44>
    2008:	73654d65 	s8sdi	xr5,k1,83,ptn1
    200c:	65676173 	0x65676173
    2010:	69615773 	0x69615773
    2014:	676e6974 	0x676e6974
    2018:	54637000 	bnel	v1,v1,1e01c <__isr_vec_space+0x1dffc>
    201c:	006c6961 	0x6c6961
    2020:	75517870 	jalx	545e1c0 <__memory_size+0x543e9c0>
    2024:	00657565 	0x657565
    2028:	65527875 	0x65527875
    202c:	73727563 	s8std	xr5,k1,-99,
    2030:	43657669 	c0	0x1657669
    2034:	436c6c61 	c0	0x16c6c61
    2038:	746e756f 	jalx	1b9d5bc <__memory_size+0x1b7ddbc>
    203c:	75517800 	jalx	545e000 <__memory_size+0x543e800>
    2040:	53657565 	beql	k1,a1,1f5d8 <__isr_vec_space+0x1f5b8>
    2044:	63656c65 	0x63656c65
    2048:	6f724674 	0x6f724674
    204c:	7465536d 	jalx	1954db4 <__memory_size+0x19355b4>
    2050:	75517800 	jalx	545e000 <__memory_size+0x543e800>
    2054:	50657565 	beql	v1,a1,1f5ec <__isr_vec_space+0x1f5cc>
    2058:	466b6565 	c1	0x6b6565
    205c:	496d6f72 	0x496d6f72
    2060:	70005253 	udi3	zero,zero,t2,0x9
    2064:	6f437672 	0x6f437672
    2068:	61447970 	0x61447970
    206c:	72466174 	q16sll	xr5,xr8,xr9,xr1,9
    2070:	75516d6f 	jalx	545b5bc <__memory_size+0x543bdbc>
    2074:	00657565 	0x657565
    2078:	65486370 	0x65486370
    207c:	78006461 	ld.h	$w17,0(t4)
    2080:	75657551 	jalx	595d544 <__memory_size+0x593dd44>
    2084:	76694765 	jalx	9a51d94 <__memory_size+0x9a32594>
    2088:	74754d65 	jalx	1d53594 <__memory_size+0x1d33d94>
    208c:	65527865 	0x65527865
    2090:	73727563 	s8std	xr5,k1,-99,
    2094:	00657669 	0x657669
    2098:	55767270 	bnel	t3,s6,1ea5c <__isr_vec_space+0x1ea3c>
    209c:	636f6c6e 	0x636f6c6e
    20a0:	6575516b 	0x6575516b
    20a4:	78006575 	0x78006575
    20a8:	75657551 	jalx	595d544 <__memory_size+0x593dd44>
    20ac:	6e654765 	0x6e654765
    20b0:	63697265 	0x63697265
    20b4:	65736552 	0x65736552
    20b8:	51780074 	beql	t3,t8,228c <__isr_vec_space+0x226c>
    20bc:	65756575 	0x65756575
    20c0:	75517349 	jalx	545cd24 <__memory_size+0x543d524>
    20c4:	45657565 	bz.v	$w5,1f65c <__isr_vec_space+0x1f63c>
    20c8:	7974706d 	0x7974706d
    20cc:	6d6f7246 	0x6d6f7246
    20d0:	00525349 	0x525349
    20d4:	45555178 	bc1any4t	$fcc5,166b8 <__isr_vec_space+0x16698>
    20d8:	70004555 	s32sdi	xr5,zero,68
    20dc:	65755178 	0x65755178
    20e0:	65536575 	0x65536575
    20e4:	6e6f4374 	0x6e6f4374
    20e8:	6e696174 	0x6e696174
    20ec:	78007265 	st.h	$w9,0(t6)
    20f0:	69736f50 	0x69736f50
    20f4:	6e6f6974 	0x6e6f6974
    20f8:	75517800 	jalx	545e000 <__memory_size+0x543e800>
    20fc:	41657565 	0x41657565
    2100:	6f546464 	0x6f546464
    2104:	00746553 	0x746553
    2108:	4c785263 	0x4c785263
    210c:	006b636f 	0x6b636f
    2110:	76457875 	jalx	915e1d4 <__memory_size+0x913e9d4>
    2114:	51746e65 	beql	t3,s4,1daac <__isr_vec_space+0x1da8c>
    2118:	65756575 	0x65756575
    211c:	676e654c 	0x676e654c
    2120:	78006874 	0x78006874
    2124:	75657551 	jalx	595d544 <__memory_size+0x593dd44>
    2128:	65724365 	0x65724365
    212c:	43657461 	c0	0x1657461
    2130:	746e756f 	jalx	1b9d5bc <__memory_size+0x1b7ddbc>
    2134:	53676e69 	beql	k1,a3,1dadc <__isr_vec_space+0x1dabc>
    2138:	70616d65 	s8sdi	xr5,v1,91,ptn0
    213c:	65726f68 	0x65726f68
    2140:	49787000 	0x49787000
    2144:	546d6574 	bnel	v1,t5,1b718 <__isr_vec_space+0x1b6f8>
    2148:	6d65526f 	0x6d65526f
    214c:	0065766f 	0x65766f
    2150:	73694c76 	0x73694c76
    2154:	696e4974 	0x696e4974
    2158:	6c616974 	0x6c616974
    215c:	49657369 	0x49657369
    2160:	006d6574 	teq	v1,t5,0x195
    2164:	73694c76 	0x73694c76
    2168:	736e4974 	q16sll	xr5,xr2,xr9,xr11,13
    216c:	45747265 	bz.v	$w20,1eb04 <__isr_vec_space+0x1eae4>
    2170:	7600646e 	jalx	80191b8 <__memory_size+0x7ff99b8>
    2174:	7473694c 	jalx	1cda530 <__memory_size+0x1cbad30>
    2178:	74696e49 	jalx	1a5b924 <__memory_size+0x1a3c124>
    217c:	696c6169 	0x696c6169
    2180:	78006573 	0x78006573
    2184:	756c6156 	jalx	5b18558 <__memory_size+0x5af8d58>
    2188:	49664f65 	0x49664f65
    218c:	7265736e 	0x7265736e
    2190:	6e6f6974 	0x6e6f6974
    2194:	49787000 	0x49787000
    2198:	006d6574 	teq	v1,t5,0x195
    219c:	2e2f2e2e 	sltiu	t7,s1,11822
    21a0:	6f532f2e 	0x6f532f2e
    21a4:	65637275 	0x65637275
    21a8:	73696c2f 	0x73696c2f
    21ac:	00632e74 	teq	v1,v1,0xb9
    21b0:	74497870 	jalx	125e1c0 <__memory_size+0x123e9c0>
    21b4:	74617265 	jalx	185c994 <__memory_size+0x183d194>
    21b8:	7500726f 	jalx	401c9bc <__memory_size+0x3ffd1bc>
    21bc:	73694c78 	0x73694c78
    21c0:	6d655274 	0x6d655274
    21c4:	0065766f 	0x65766f
    21c8:	654e7870 	0x654e7870
    21cc:	73694c77 	q16sar	xr1,xr3,xr5,xr10,13
    21d0:	65744974 	0x65744974
    21d4:	4c76006d 	0x4c76006d
    21d8:	49747369 	0x49747369
    21dc:	7265736e 	0x7265736e
    21e0:	50780074 	beql	v1,t8,23b4 <__isr_vec_space+0x2394>
    21e4:	5374726f 	beql	k1,s4,1eba4 <__isr_vec_space+0x1eb84>
    21e8:	74726174 	jalx	1c985d0 <__memory_size+0x1c78dd0>
    21ec:	65686353 	0x65686353
    21f0:	656c7564 	0x656c7564
    21f4:	6e650072 	0x6e650072
    21f8:	656c6261 	0x656c6261
    21fc:	65746e49 	0x65746e49
    2200:	70757272 	0x70757272
    2204:	72007374 	q16sll	xr13,xr12,xr1,xr0,8
    2208:	765f7465 	jalx	97dd194 <__memory_size+0x97bd994>
    220c:	5f006c61 	bgtzl	t8,1d394 <__isr_vec_space+0x1d374>
    2210:	7370696d 	s16sdi	xr5,k1,52,
    2214:	746e695f 	jalx	1b9a57c <__memory_size+0x1b7ad7c>
    2218:	75727265 	jalx	5c9c994 <__memory_size+0x5c7d194>
    221c:	75007470 	jalx	401d1c0 <__memory_size+0x3ffd9c0>
    2220:	726f5078 	0x726f5078
    2224:	74655374 	jalx	1954dd0 <__memory_size+0x19355d0>
    2228:	65746e49 	0x65746e49
    222c:	70757272 	0x70757272
    2230:	73614d74 	q16sll	xr5,xr3,xr5,xr8,13
    2234:	6f72466b 	0x6f72466b
    2238:	5253496d 	beql	s2,s3,147f0 <__isr_vec_space+0x147d0>
    223c:	76727000 	jalx	9c9c000 <__memory_size+0x9c7c800>
    2240:	6b736154 	0x6b736154
    2244:	74697845 	jalx	1a5e114 <__memory_size+0x1a3e914>
    2248:	6f727245 	0x6f727245
    224c:	6f630072 	0x6f630072
    2250:	6769666e 	0x6769666e
    2254:	41454c43 	0x41454c43
    2258:	49545f52 	0x49545f52
    225c:	545f4b43 	bnel	v0,ra,14f6c <__isr_vec_space+0x14f4c>
    2260:	52454d49 	beql	s2,a1,15788 <__isr_vec_space+0x15768>
    2264:	544e495f 	bnel	v0,t6,147e4 <__isr_vec_space+0x147c4>
    2268:	55525245 	bnel	t2,s2,16b80 <__isr_vec_space+0x16b60>
    226c:	75005450 	jalx	4015140 <__memory_size+0x3ff5940>
    2270:	70784563 	s8std	xr5,v1,17,
    2274:	65746365 	0x65746365
    2278:	61745364 	0x61745364
    227c:	79426b63 	ld.d	$w13,2576(t5)
    2280:	00736574 	teq	v1,s3,0x195
    2284:	2e2f2e2e 	sltiu	t7,s1,11822
    2288:	6f532f2e 	0x6f532f2e
    228c:	65637275 	0x65637275
    2290:	726f702f 	0x726f702f
    2294:	6c626174 	0x6c626174
    2298:	6f432f65 	0x6f432f65
    229c:	63536564 	0x63536564
    22a0:	2f657061 	sltiu	a1,k1,28769
    22a4:	5350494d 	beql	k0,s0,147dc <__isr_vec_space+0x147bc>
    22a8:	61677046 	0x61677046
    22ac:	726f702f 	0x726f702f
    22b0:	00632e74 	teq	v1,v1,0xb9
    22b4:	636d656d 	0x636d656d
    22b8:	7600706d 	jalx	801c1b4 <__memory_size+0x7ffc9b4>
    22bc:	74726f50 	jalx	1c9bd40 <__memory_size+0x1c7c540>
    22c0:	72636e49 	0x72636e49
    22c4:	6e656d65 	0x6e656d65
    22c8:	63695474 	0x63695474
    22cc:	6547006b 	0x6547006b
    22d0:	61745374 	0x61745374
    22d4:	00737574 	teq	v1,s3,0x1d5
    22d8:	736d656d 	s16sdi	xr5,k1,-334,ptn1
    22dc:	72007465 	s8sdi	xr1,s0,29,ptn0
    22e0:	6f736165 	0x6f736165
    22e4:	6e65006e 	0x6e65006e
    22e8:	656c6261 	0x656c6261
    22ec:	656d6954 	0x656d6954
    22f0:	746e4972 	jalx	1b925c8 <__memory_size+0x1b72dc8>
    22f4:	53787500 	beql	k1,t8,1f6f8 <__isr_vec_space+0x1f6d8>
    22f8:	64657661 	0x64657661
    22fc:	74617453 	jalx	185d14c <__memory_size+0x183d94c>
    2300:	73007375 	q16slr	xr13,xr12,xr1,xr0,12
    2304:	75746174 	jalx	5d185d0 <__memory_size+0x5cf8dd0>
    2308:	50760073 	beql	v1,s6,24d8 <__isr_vec_space+0x24b8>
    230c:	4574726f 	bz.v	$w20,1eccc <__isr_vec_space+0x1ecac>
    2310:	6353646e 	0x6353646e
    2314:	75646568 	jalx	59195a0 <__memory_size+0x58f9da0>
    2318:	0072656c 	0x72656c
    231c:	61537875 	0x61537875
    2320:	53646576 	beql	k1,a0,1b8fc <__isr_vec_space+0x1b8dc>
    2324:	75746174 	jalx	5d185d0 <__memory_size+0x5cf8dd0>
    2328:	67655273 	0x67655273
    232c:	65747369 	0x65747369
    2330:	65730072 	0x65730072
    2334:	61765f74 	0x61765f74
    2338:	4978006c 	0x4978006c
    233c:	74535253 	jalx	14d494c <__memory_size+0x14b514c>
    2340:	546b6361 	bnel	v1,t3,1b0c8 <__isr_vec_space+0x1b0a8>
    2344:	7600706f 	jalx	801c1bc <__memory_size+0x7ffc9bc>
    2348:	6c707041 	0x6c707041
    234c:	74616369 	jalx	1858da4 <__memory_size+0x18395a4>
    2350:	536e6f69 	beql	k1,t6,1e0f8 <__isr_vec_space+0x1e0d8>
    2354:	70757465 	s8sdi	xr1,v1,93,
    2358:	6b636954 	0x6b636954
    235c:	656d6954 	0x656d6954
    2360:	746e4972 	jalx	1b925c8 <__memory_size+0x1b72dc8>
    2364:	75727265 	jalx	5c9c994 <__memory_size+0x5c7d194>
    2368:	76007470 	jalx	801d1c0 <__memory_size+0x7ffd9c0>
    236c:	74726f50 	jalx	1c9bd40 <__memory_size+0x1c7c540>
    2370:	61656c43 	0x61656c43
    2374:	746e4972 	jalx	1b925c8 <__memory_size+0x1b72dc8>
    2378:	75727265 	jalx	5c9c994 <__memory_size+0x5c7d194>
    237c:	614d7470 	0x614d7470
    2380:	72466b73 	d32sar	xr13,xr10,xr9,xr1,9
    2384:	53496d6f 	beql	k0,t1,1d944 <__isr_vec_space+0x1d924>
    2388:	49780052 	0x49780052
    238c:	74535253 	jalx	14d494c <__memory_size+0x14b514c>
    2390:	006b6361 	0x6b6361
    2394:	6c637963 	0x6c637963
    2398:	65507365 	0x65507365
    239c:	63695472 	0x63695472
    23a0:	7870006b 	0x7870006b
    23a4:	65646f43 	0x65646f43
    23a8:	50787000 	beql	v1,t8,1e3ac <__isr_vec_space+0x1e38c>
    23ac:	4974726f 	0x4974726f
    23b0:	6974696e 	0x6974696e
    23b4:	73696c61 	0x73696c61
    23b8:	61745365 	0x61745365
    23bc:	75006b63 	jalx	401ad8c <__memory_size+0x3ffb58c>
    23c0:	76615378 	jalx	9854de0 <__memory_size+0x98355e0>
    23c4:	61546465 	0x61546465
    23c8:	74536b73 	jalx	14dadcc <__memory_size+0x14bb5cc>
    23cc:	506b6361 	beql	v1,t3,1b154 <__isr_vec_space+0x1b134>
    23d0:	746e696f 	jalx	1b9a5bc <__memory_size+0x1b7adbc>
    23d4:	5f007265 	bgtzl	t8,1ed6c <__isr_vec_space+0x1ed4c>
    23d8:	7370696d 	s16sdi	xr5,k1,52,
    23dc:	6e61685f 	0x6e61685f
    23e0:	5f656c64 	0x5f656c64
    23e4:	65637865 	0x65637865
    23e8:	6f697470 	0x6f697470
    23ec:	6553006e 	0x6553006e
    23f0:	61745374 	0x61745374
    23f4:	00737574 	teq	v1,s3,0x1d5
    23f8:	2e2f2e2e 	sltiu	t7,s1,11822
    23fc:	6f532f2e 	0x6f532f2e
    2400:	65637275 	0x65637275
    2404:	726f702f 	0x726f702f
    2408:	6c626174 	0x6c626174
    240c:	654d2f65 	0x654d2f65
    2410:	6e614d6d 	0x6e614d6d
    2414:	65682f67 	0x65682f67
    2418:	325f7061 	andi	ra,s2,0x7061
    241c:	7800632e 	0x7800632e
    2420:	74726f50 	jalx	1c9bd40 <__memory_size+0x1c7c540>
    2424:	46746547 	c1	0x746547
    2428:	48656572 	mfhc2	a1,0x6572
    242c:	53706165 	beql	k1,s0,1a9c4 <__isr_vec_space+0x1a9a4>
    2430:	00657a69 	0x657a69
    2434:	4c425f41 	0x4c425f41
    2438:	5f4b434f 	0x5f4b434f
    243c:	4b4e494c 	c2	0x14e494c
    2440:	76727000 	jalx	9c9c000 <__memory_size+0x9c7c800>
    2444:	70616548 	d16mul	xr5,xr9,xr5,xr8,LW
    2448:	74696e49 	jalx	1a5b924 <__memory_size+0x1a3c124>
    244c:	6f6c4200 	0x6f6c4200
    2450:	694c6b63 	0x694c6b63
    2454:	745f6b6e 	jalx	17dadb8 <__memory_size+0x17bb5b8>
    2458:	42787000 	c0	0x787000
    245c:	6b636f6c 	0x6b636f6c
    2460:	4c787000 	0x4c787000
    2464:	006b6e69 	0x6b6e69
    2468:	6f507670 	0x6f507670
    246c:	614d7472 	0x614d7472
    2470:	636f6c6c 	0x636f6c6c
    2474:	46787000 	c1	0x787000
    2478:	74737269 	jalx	1cdc9a4 <__memory_size+0x1cbd1a4>
    247c:	65657246 	0x65657246
    2480:	636f6c42 	0x636f6c42
    2484:	6375006b 	0x6375006b
    2488:	70616548 	d16mul	xr5,xr9,xr5,xr8,LW
    248c:	6c427800 	0x6c427800
    2490:	536b636f 	beql	k1,t3,1b250 <__isr_vec_space+0x1b230>
    2494:	00657a69 	0x657a69
    2498:	61654878 	0x61654878
    249c:	73614870 	d32sll	xr1,xr2,xr5,xr8,13
    24a0:	6e656542 	0x6e656542
    24a4:	74696e49 	jalx	1a5b924 <__memory_size+0x1a3c124>
    24a8:	696c6169 	0x696c6169
    24ac:	00646573 	tltu	v1,a0,0x195
    24b0:	646e4578 	0x646e4578
    24b4:	50787000 	beql	v1,t8,1e4b8 <__isr_vec_space+0x1e498>
    24b8:	69766572 	0x69766572
    24bc:	4273756f 	c0	0x73756f
    24c0:	6b636f6c 	0x6b636f6c
    24c4:	6f507600 	0x6f507600
    24c8:	72467472 	0x72467472
    24cc:	68006565 	0x68006565
    24d0:	53706165 	beql	k1,s0,1aa68 <__isr_vec_space+0x1aa48>
    24d4:	43555254 	c0	0x1555254
    24d8:	49535f54 	0x49535f54
    24dc:	7800455a 	fcaf.w	$w21,$w8,$w0
    24e0:	72617453 	udi3	s3,at,t6,0x11
    24e4:	50760074 	beql	v1,s6,26b8 <__isr_vec_space+0x2698>
    24e8:	4974726f 	0x4974726f
    24ec:	6974696e 	0x6974696e
    24f0:	73696c61 	0x73696c61
    24f4:	6f6c4265 	0x6f6c4265
    24f8:	00736b63 	0x736b63
    24fc:	654e7870 	0x654e7870
    2500:	6f6c4277 	0x6f6c4277
    2504:	694c6b63 	0x694c6b63
    2508:	78006b6e 	0x78006b6e
    250c:	746e6157 	jalx	1b9855c <__memory_size+0x1b78d5c>
    2510:	69536465 	0x69536465
    2514:	7000657a 	q8mac	xr5,xr9,xr1,xr0,AA
    2518:	6c416375 	0x6c416375
    251c:	656e6769 	0x656e6769
    2520:	61654864 	0x61654864
    2524:	46780070 	c1	0x780070
    2528:	42656572 	c0	0x656572
    252c:	73657479 	0x73657479
    2530:	616d6552 	0x616d6552
    2534:	6e696e69 	0x6e696e69
    2538:	78700067 	st.d	$w1,896(zero)
    253c:	7478654e 	jalx	1e19538 <__memory_size+0x1df9d38>
    2540:	65657246 	0x65657246
    2544:	636f6c42 	0x636f6c42
    2548:	5f5f006b 	0x5f5f006b
    254c:	78657461 	ld.h	$w17,202(t6)
    2550:	745f7469 	jalx	17dd1a4 <__memory_size+0x17bd9a4>
    2554:	73657079 	0x73657079
    2558:	63732f00 	0x63732f00
    255c:	63746172 	0x63746172
    2560:	706d2f68 	lxhu	a1,v1,t5,3
    2564:	6f6a2f66 	0x6f6a2f66
    2568:	352f7362 	ori	t7,t1,0x7362
    256c:	35393334 	ori	t9,t1,0x3334
    2570:	3038342f 	andi	t8,at,0x342f
    2574:	322f3439 	andi	t7,s1,0x3439
    2578:	39313034 	xori	s1,t1,0x3034
    257c:	68732f38 	0x68732f38
    2580:	64657261 	0x64657261
    2584:	6363672f 	0x6363672f
    2588:	77656e2f 	jalx	d95b8bc <__memory_size+0xd93c0bc>
    258c:	2f62696c 	sltiu	v0,k1,26988
    2590:	6362696c 	0x6362696c
    2594:	6474732f 	0x6474732f
    2598:	2f62696c 	sltiu	v0,k1,26988
    259c:	78657461 	ld.h	$w17,202(t6)
    25a0:	632e7469 	0x632e7469
    25a4:	725f5f00 	0x725f5f00
    25a8:	73696765 	s8sdi	xr13,k1,89,ptn2
    25ac:	5f726574 	0x5f726574
    25b0:	74697865 	jalx	1a5e194 <__memory_size+0x1a3e994>
    25b4:	636f7270 	0x636f7270
    25b8:	655f5f00 	0x655f5f00
    25bc:	6e6f5f74 	0x6e6f5f74
    25c0:	74697865 	jalx	1a5e194 <__memory_size+0x1a3e994>
    25c4:	554e4700 	bnel	t2,t6,141c8 <__isr_vec_space+0x141a8>
    25c8:	34204320 	ori	zero,at,0x4320
    25cc:	322e392e 	andi	t6,s1,0x392e
    25d0:	656d2d20 	0x656d2d20
    25d4:	6d2d206c 	0x6d2d206c
    25d8:	33737069 	andi	s3,k1,0x7069
    25dc:	20327232 	addi	s2,at,29234
    25e0:	62616d2d 	0x62616d2d
    25e4:	32333d69 	andi	s3,s1,0x3d69
    25e8:	736d2d20 	0x736d2d20
    25ec:	2d74666f 	sltiu	s4,t3,26223
    25f0:	616f6c66 	0x616f6c66
    25f4:	6d2d2074 	0x6d2d2074
    25f8:	65746e69 	0x65746e69
    25fc:	6e696c72 	0x6e696c72
    2600:	696d2d6b 	0x696d2d6b
    2604:	36317370 	ori	s1,s1,0x7370
    2608:	636d2d20 	0x636d2d20
    260c:	2d65646f 	sltiu	a1,t3,25711
    2610:	64616572 	0x64616572
    2614:	656c6261 	0x656c6261
    2618:	206f6e3d 	addi	t7,v1,28221
    261c:	6f6e6d2d 	0x6f6e6d2d
    2620:	6f70672d 	0x6f70672d
    2624:	2d207470 	sltiu	zero,t1,29808
    2628:	7370696d 	s16sdi	xr5,k1,52,
    262c:	32723233 	andi	s2,s3,0x3233
    2630:	616d2d20 	0x616d2d20
    2634:	333d6962 	andi	sp,t9,0x6962
    2638:	6d2d2032 	0x6d2d2032
    263c:	74666f73 	jalx	199bdcc <__memory_size+0x197c5cc>
    2640:	6f6c662d 	0x6f6c662d
    2644:	2d207461 	sltiu	zero,t1,29793
    2648:	746c706d 	jalx	1b1c1b4 <__memory_size+0x1afc9b4>
    264c:	736d2d20 	0x736d2d20
    2650:	69636e79 	0x69636e79
    2654:	20672d20 	addi	a3,v1,11552
    2658:	20324f2d 	addi	s2,at,20269
    265c:	20734f2d 	addi	s3,v1,20269
    2660:	6f6e662d 	0x6f6e662d
    2664:	6975622d 	0x6975622d
    2668:	6e69746c 	0x6e69746c
    266c:	655f5f00 	0x655f5f00
    2670:	78635f74 	0x78635f74
    2674:	5f5f0061 	0x5f5f0061
    2678:	615f7465 	0x615f7465
    267c:	69786574 	0x69786574
    2680:	645f0074 	0x645f0074
    2684:	685f6f73 	0x685f6f73
    2688:	6c646e61 	0x6c646e61
    268c:	725f0065 	s8sdi	xr1,s2,-64,
    2690:	34646e61 	ori	a0,v1,0x6e61
    2694:	655f0038 	0x655f0038
    2698:	6772656d 	0x6772656d
    269c:	79636e65 	st.h	$w25,710(t5)
    26a0:	63775f00 	0x63775f00
    26a4:	6d6f7472 	0x6d6f7472
    26a8:	74735f62 	jalx	1cd7d88 <__memory_size+0x1cb8588>
    26ac:	00657461 	0x657461
    26b0:	7363775f 	udi15	k1,v1,t6,0x1d
    26b4:	6d6f7472 	0x6d6f7472
    26b8:	735f7362 	s8ldd	xr13,k0,-36,ptn7
    26bc:	65746174 	0x65746174
    26c0:	626c5f00 	0x626c5f00
    26c4:	7a697366 	st.w	$w13,-1628(t6)
    26c8:	6d5f0065 	0x6d5f0065
    26cc:	6f747262 	0x6f747262
    26d0:	735f6377 	q16sar	xr13,xr8,xr13,xr7,13
    26d4:	65746174 	0x65746174
    26d8:	63775f00 	0x63775f00
    26dc:	626d6f74 	0x626d6f74
    26e0:	6174735f 	0x6174735f
    26e4:	5f006574 	bgtzl	t8,1bcb8 <__isr_vec_space+0x1bc98>
    26e8:	5f6d745f 	0x5f6d745f
    26ec:	00636573 	tltu	v1,v1,0x195
    26f0:	7562755f 	jalx	589d57c <__memory_size+0x587dd7c>
    26f4:	5f5f0066 	0x5f5f0066
    26f8:	685f6d74 	0x685f6d74
    26fc:	0072756f 	0x72756f
    2700:	66735f5f 	0x66735f5f
    2704:	6e6f5f00 	0x6e6f5f00
    2708:	6978655f 	0x6978655f
    270c:	72615f74 	q16sll	xr13,xr7,xr5,xr8,9
    2710:	5f007367 	bgtzl	t8,1f4b0 <__isr_vec_space+0x1f490>
    2714:	6b6f6f63 	0x6b6f6f63
    2718:	5f006569 	bgtzl	t8,1bcc0 <__isr_vec_space+0x1bca0>
    271c:	6c67735f 	0x6c67735f
    2720:	5f006575 	bgtzl	t8,1bcf8 <__isr_vec_space+0x1bcd8>
    2724:	67616c66 	0x67616c66
    2728:	695f0073 	0x695f0073
    272c:	78635f73 	0x78635f73
    2730:	735f0061 	0x735f0061
    2734:	6e696474 	0x6e696474
    2738:	6c625f00 	0x6c625f00
    273c:	7a69736b 	0x7a69736b
    2740:	635f0065 	0x635f0065
    2744:	75627476 	jalx	589d1d8 <__memory_size+0x587d9d8>
    2748:	6f5f0066 	0x6f5f0066
    274c:	65736666 	0x65736666
    2750:	6d5f0074 	0x6d5f0074
    2754:	74727362 	jalx	1c9cd88 <__memory_size+0x1c7d588>
    2758:	7363776f 	0x7363776f
    275c:	6174735f 	0x6174735f
    2760:	5f006574 	bgtzl	t8,1bd34 <__isr_vec_space+0x1bd14>
    2764:	6c72626d 	0x6c72626d
    2768:	735f6e65 	s8sdi	xr9,k0,-37,
    276c:	65746174 	0x65746174
    2770:	6e665f00 	0x6e665f00
    2774:	73677261 	0x73677261
    2778:	6e665f00 	0x6e665f00
    277c:	735f0073 	d32sar	xr1,xr0,xr12,xr7,13
    2780:	006e6769 	0x6e6769
    2784:	6f6c665f 	0x6f6c665f
    2788:	745f6b63 	jalx	17dad8c <__memory_size+0x17bb58c>
    278c:	74735f00 	jalx	1cd7c00 <__memory_size+0x1cb8400>
    2790:	72726564 	s8ldi	xr5,s3,-103,ptn4
    2794:	69425f00 	0x69425f00
    2798:	746e6967 	jalx	1b9a59c <__memory_size+0x1b7ad9c>
    279c:	61675f00 	0x61675f00
    27a0:	5f616d6d 	0x5f616d6d
    27a4:	6e676973 	0x6e676973
    27a8:	006d6167 	0x6d6167
    27ac:	6165725f 	0x6165725f
    27b0:	725f0064 	s8ldi	xr1,s2,-64,ptn7
    27b4:	6c757365 	0x6c757365
    27b8:	006b5f74 	teq	v1,t3,0x17d
    27bc:	6d745f5f 	0x6d745f5f
    27c0:	775f5f00 	jalx	d7d7c00 <__memory_size+0xd7b8400>
    27c4:	00626863 	0x626863
    27c8:	6474735f 	0x6474735f
    27cc:	0074756f 	0x74756f
    27d0:	7476635f 	jalx	1d98d7c <__memory_size+0x1d7957c>
    27d4:	006e656c 	0x6e656c
    27d8:	6c69665f 	0x6c69665f
    27dc:	6e5f0065 	0x6e5f0065
    27e0:	73626f69 	0x73626f69
    27e4:	74615f00 	jalx	1857c00 <__memory_size+0x1838400>
    27e8:	74697865 	jalx	1a5e194 <__memory_size+0x1a3e994>
    27ec:	735f0030 	d32sll	xr0,xr0,xr12,xr7,13
    27f0:	616e6769 	0x616e6769
    27f4:	75625f6c 	jalx	5897db0 <__memory_size+0x58785b0>
    27f8:	615f0066 	0x615f0066
    27fc:	69746373 	0x69746373
    2800:	625f656d 	0x625f656d
    2804:	5f006675 	bgtzl	t8,1c1dc <__isr_vec_space+0x1c1bc>
    2808:	75736572 	jalx	5cd95c8 <__memory_size+0x5cb9dc8>
    280c:	5f00746c 	bgtzl	t8,1f9c0 <__memory_size+0x1c0>
    2810:	6863775f 	0x6863775f
    2814:	6e697700 	0x6e697700
    2818:	00745f74 	teq	v1,s4,0x17d
    281c:	616c665f 	0x616c665f
    2820:	00327367 	0x327367
    2824:	6972775f 	0x6972775f
    2828:	5f006574 	bgtzl	t8,1bdfc <__isr_vec_space+0x1bddc>
    282c:	5f6d745f 	0x5f6d745f
    2830:	72616579 	0x72616579
    2834:	656e5f00 	0x656e5f00
    2838:	00667478 	0x667478
    283c:	6d745f5f 	0x6d745f5f
    2840:	6e6f6d5f 	0x6e6f6d5f
    2844:	735f5f00 	0x735f5f00
    2848:	69646964 	0x69646964
    284c:	0074696e 	0x74696e
    2850:	66666f5f 	0x66666f5f
    2854:	5f00745f 	bgtzl	t8,1f9d4 <__memory_size+0x1d4>
    2858:	6c61635f 	0x6c61635f
    285c:	78655f6c 	0x78655f6c
    2860:	72707469 	0x72707469
    2864:	0073636f 	0x73636f
    2868:	6572665f 	0x6572665f
    286c:	73696c65 	s8sdi	xr1,k1,91,ptn2
    2870:	6d5f0074 	0x6d5f0074
    2874:	61747362 	0x61747362
    2878:	745f6574 	jalx	17d95d0 <__memory_size+0x17b9dd0>
    287c:	4f4c5f00 	c3	0x14c5f00
    2880:	525f4b43 	beql	s2,ra,15590 <__isr_vec_space+0x15570>
    2884:	52554345 	beql	s2,s5,1359c <__isr_vec_space+0x1357c>
    2888:	45564953 	0x45564953
    288c:	5f00545f 	bgtzl	t8,17a0c <__isr_vec_space+0x179ec>
    2890:	5f6d745f 	0x5f6d745f
    2894:	7961646d 	0x7961646d
    2898:	656e5f00 	0x656e5f00
    289c:	685f0077 	0x685f0077
    28a0:	7272655f 	udi15	s3,s2,t4,0x15
    28a4:	5f006f6e 	bgtzl	t8,1e660 <__isr_vec_space+0x1e640>
    28a8:	5f6d745f 	0x5f6d745f
    28ac:	79616479 	0x79616479
    28b0:	735f5f00 	0x735f5f00
    28b4:	00667562 	0x667562
    28b8:	626f695f 	0x626f695f
    28bc:	5f5f0073 	0x5f5f0073
    28c0:	454c4946 	bc1any4f	$fcc3,14ddc <__isr_vec_space+0x14dbc>
    28c4:	63732f00 	0x63732f00
    28c8:	63746172 	0x63746172
    28cc:	706d2f68 	lxhu	a1,v1,t5,3
    28d0:	6f6a2f66 	0x6f6a2f66
    28d4:	352f7362 	ori	t7,t1,0x7362
    28d8:	35393334 	ori	t9,t1,0x3334
    28dc:	3038342f 	andi	t8,at,0x342f
    28e0:	322f3439 	andi	t7,s1,0x3439
    28e4:	39313034 	xori	s1,t1,0x3034
    28e8:	68732f38 	0x68732f38
    28ec:	64657261 	0x64657261
    28f0:	6363672f 	0x6363672f
    28f4:	77656e2f 	jalx	d95b8bc <__memory_size+0xd93c0bc>
    28f8:	2f62696c 	sltiu	v0,k1,26988
    28fc:	6362696c 	0x6362696c
    2900:	6474732f 	0x6474732f
    2904:	2f62696c 	sltiu	v0,k1,26988
    2908:	74697865 	jalx	1a5e194 <__memory_size+0x1a3e994>
    290c:	5f00632e 	bgtzl	t8,1b5c8 <__isr_vec_space+0x1b5a8>
    2910:	4946735f 	0x4946735f
    2914:	5f00454c 	bgtzl	t8,13e48 <__isr_vec_space+0x13e28>
    2918:	7473626d 	jalx	1cd89b4 <__memory_size+0x1cb91b4>
    291c:	00657461 	0x657461
    2920:	6e61725f 	0x6e61725f
    2924:	656e5f64 	0x656e5f64
    2928:	5f007478 	bgtzl	t8,1fb0c <__memory_size+0x30c>
    292c:	656c626d 	0x656c626d
    2930:	74735f6e 	jalx	1cd7db8 <__memory_size+0x1cb85b8>
    2934:	00657461 	0x657461
    2938:	636e695f 	0x636e695f
    293c:	6e695f00 	0x6e695f00
    2940:	635f0064 	0x635f0064
    2944:	65727275 	0x65727275
    2948:	6c5f746e 	0x6c5f746e
    294c:	6c61636f 	0x6c61636f
    2950:	5f5f0065 	0x5f5f0065
    2954:	61656c63 	0x61656c63
    2958:	0070756e 	0x70756e
    295c:	78616d5f 	0x78616d5f
    2960:	00736477 	0x736477
    2964:	6565725f 	0x6565725f
    2968:	5f00746e 	bgtzl	t8,1fb24 <__memory_size+0x324>
    296c:	64656573 	0x64656573
    2970:	635f5f00 	0x635f5f00
    2974:	746e756f 	jalx	1b9d5bc <__memory_size+0x1b7ddbc>
    2978:	765f5f00 	jalx	97d7c00 <__memory_size+0x97b8400>
    297c:	65756c61 	0x65756c61
    2980:	65735f00 	0x65735f00
    2984:	5f006b65 	bgtzl	t8,1d71c <__isr_vec_space+0x1d6fc>
    2988:	736f7066 	s32mulu	xr1,xr12,k1,t7
    298c:	5f00745f 	bgtzl	t8,1fb0c <__memory_size+0x30c>
    2990:	5f6d745f 	0x5f6d745f
    2994:	006e696d 	0x6e696d
    2998:	6c756d5f 	0x6c756d5f
    299c:	735f0074 	q16sll	xr1,xr0,xr12,xr7,13
    29a0:	6f747274 	0x6f747274
    29a4:	616c5f6b 	0x616c5f6b
    29a8:	5f007473 	bgtzl	t8,1fb78 <__memory_size+0x378>
    29ac:	79746e66 	st.w	$w25,1488(t5)
    29b0:	00736570 	tge	v1,s3,0x195
    29b4:	6464615f 	0x6464615f
    29b8:	555f5f00 	bnel	t2,ra,1a5bc <__isr_vec_space+0x1a59c>
    29bc:	676e6f4c 	0x676e6f4c
    29c0:	65675f00 	0x65675f00
    29c4:	74616474 	jalx	18591d0 <__memory_size+0x18399d0>
    29c8:	72655f65 	s8sdi	xr13,s3,87,ptn1
    29cc:	675f0072 	0x675f0072
    29d0:	61626f6c 	0x61626f6c
    29d4:	6d695f6c 	0x6d695f6c
    29d8:	65727570 	0x65727570
    29dc:	7274705f 	udi15	s3,s4,t6,0x1
    29e0:	75635f00 	jalx	58d7c00 <__memory_size+0x58b8400>
    29e4:	6e657272 	0x6e657272
    29e8:	61635f74 	0x61635f74
    29ec:	6f676574 	0x6f676574
    29f0:	5f007972 	bgtzl	t8,20fbc <__memory_size+0x17bc>
    29f4:	73756e75 	q16slr	xr9,xr11,xr5,xr13,13
    29f8:	725f6465 	s8sdi	xr1,s2,-39,
    29fc:	00646e61 	0x646e61
    2a00:	7364775f 	udi15	k1,a0,t6,0x1d
    2a04:	745f5f00 	jalx	17d7c00 <__memory_size+0x17b8400>
    2a08:	64775f6d 	0x64775f6d
    2a0c:	5f007961 	bgtzl	t8,20f94 <__memory_size+0x1794>
    2a10:	65756c67 	0x65756c67
    2a14:	6d6e5f00 	0x6d6e5f00
    2a18:	6f6c6c61 	0x6f6c6c61
    2a1c:	6c5f0063 	0x6c5f0063
    2a20:	5f613436 	0x5f613436
    2a24:	00667562 	0x667562
    2a28:	6769735f 	0x6769735f
    2a2c:	6e75665f 	0x6e75665f
    2a30:	6e5f0063 	0x6e5f0063
    2a34:	00667562 	0x667562
    2a38:	756e755f 	jalx	5b9d57c <__memory_size+0x5b7dd7c>
    2a3c:	00646573 	tltu	v1,a0,0x195
    2a40:	6d745f5f 	0x6d745f5f
    2a44:	6473695f 	0x6473695f
    2a48:	5f007473 	bgtzl	t8,1fc18 <__memory_size+0x418>
    2a4c:	61636f6c 	0x61636f6c
    2a50:	6d69746c 	0x6d69746c
    2a54:	75625f65 	jalx	5897d94 <__memory_size+0x5878594>
    2a58:	635f0066 	0x635f0066
    2a5c:	65736f6c 	0x65736f6c
    2a60:	34725f00 	ori	s2,v1,0x5f00
    2a64:	6d5f0038 	0x6d5f0038
    2a68:	776f7462 	jalx	dbdd188 <__memory_size+0xdbbd988>
    2a6c:	74735f63 	jalx	1cd7d8c <__memory_size+0x1cb858c>
    2a70:	00657461 	0x657461
    2a74:	7335705f 	udi15	t9,s5,t6,0x1
    2a78:	706d6900 	0x706d6900
    2a7c:	5f657275 	0x5f657275
    2a80:	61746164 	0x61746164
    2a84:	63732f00 	0x63732f00
    2a88:	63746172 	0x63746172
    2a8c:	706d2f68 	lxhu	a1,v1,t5,3
    2a90:	6f6a2f66 	0x6f6a2f66
    2a94:	352f7362 	ori	t7,t1,0x7362
    2a98:	35393334 	ori	t9,t1,0x3334
    2a9c:	3038342f 	andi	t8,at,0x342f
    2aa0:	322f3439 	andi	t7,s1,0x3439
    2aa4:	39313034 	xori	s1,t1,0x3034
    2aa8:	68732f38 	0x68732f38
    2aac:	64657261 	0x64657261
    2ab0:	6363672f 	0x6363672f
    2ab4:	77656e2f 	jalx	d95b8bc <__memory_size+0xd93c0bc>
    2ab8:	2f62696c 	sltiu	v0,k1,26988
    2abc:	6362696c 	0x6362696c
    2ac0:	6565722f 	0x6565722f
    2ac4:	692f746e 	0x692f746e
    2ac8:	7275706d 	s16sdi	xr1,s3,-328,
    2acc:	00632e65 	0x632e65
    2ad0:	7263732f 	0x7263732f
    2ad4:	68637461 	0x68637461
    2ad8:	66706d2f 	0x66706d2f
    2adc:	626f6a2f 	0x626f6a2f
    2ae0:	34352f73 	ori	s5,at,0x2f73
    2ae4:	2f353933 	sltiu	s5,t9,14643
    2ae8:	39303834 	xori	s0,t1,0x3834
    2aec:	34322f34 	ori	s2,at,0x2f34
    2af0:	38393130 	xori	t9,at,0x3130
    2af4:	6168732f 	0x6168732f
    2af8:	2f646572 	sltiu	a0,k1,25970
    2afc:	2f636367 	sltiu	v1,k1,25447
    2b00:	6c77656e 	0x6c77656e
    2b04:	6c2f6269 	0x6c2f6269
    2b08:	2f636269 	sltiu	v1,k1,25193
    2b0c:	69727473 	0x69727473
    2b10:	6d2f676e 	0x6d2f676e
    2b14:	6d636d65 	0x6d636d65
    2b18:	00632e70 	tge	v1,v1,0xb9
    2b1c:	7263732f 	0x7263732f
    2b20:	68637461 	0x68637461
    2b24:	66706d2f 	0x66706d2f
    2b28:	626f6a2f 	0x626f6a2f
    2b2c:	34352f73 	ori	s5,at,0x2f73
    2b30:	2f353933 	sltiu	s5,t9,14643
    2b34:	39303834 	xori	s0,t1,0x3834
    2b38:	34322f34 	ori	s2,at,0x2f34
    2b3c:	38393130 	xori	t9,at,0x3130
    2b40:	6168732f 	0x6168732f
    2b44:	2f646572 	sltiu	a0,k1,25970
    2b48:	2f636367 	sltiu	v1,k1,25447
    2b4c:	6c77656e 	0x6c77656e
    2b50:	6c2f6269 	0x6c2f6269
    2b54:	2f636269 	sltiu	v1,k1,25193
    2b58:	6c647473 	0x6c647473
    2b5c:	5f2f6269 	0x5f2f6269
    2b60:	6574615f 	0x6574615f
    2b64:	2e746978 	sltiu	s4,s3,27000
    2b68:	72660063 	s8std	xr1,s3,-128,ptn1
    2b6c:	6c006565 	0x6c006565
    2b70:	70747361 	0x70747361
    2b74:	73657200 	0x73657200
    2b78:	74726174 	jalx	1c985d0 <__memory_size+0x1c78dd0>
    2b7c:	615f5f00 	0x615f5f00
    2b80:	69786574 	0x69786574
    2b84:	6f6c5f74 	0x6f6c5f74
    2b88:	2f006b63 	sltiu	zero,t8,27491
    2b8c:	61726373 	0x61726373
    2b90:	2f686374 	sltiu	t0,k1,25460
    2b94:	2f66706d 	sltiu	a2,k1,28781
    2b98:	73626f6a 	s16ldd	xr13,k1,310,ptn0
    2b9c:	3334352f 	andi	s4,t9,0x352f
    2ba0:	342f3539 	ori	t7,at,0x3539
    2ba4:	34393038 	ori	t9,at,0x3038
    2ba8:	3034322f 	andi	s4,at,0x322f
    2bac:	2f383931 	sltiu	t8,t9,14641
    2bb0:	72616873 	d32sar	xr1,xr10,xr5,xr8,9
    2bb4:	672f6465 	0x672f6465
    2bb8:	6e2f6363 	0x6e2f6363
    2bbc:	696c7765 	0x696c7765
    2bc0:	696c2f62 	0x696c2f62
    2bc4:	732f6362 	s8ldd	xr13,t9,-40,ptn3
    2bc8:	696c6474 	0x696c6474
    2bcc:	5f5f2f62 	0x5f5f2f62
    2bd0:	6c6c6163 	0x6c6c6163
    2bd4:	6574615f 	0x6574615f
    2bd8:	2e746978 	sltiu	s4,s3,27000
    2bdc:	732f0063 	s8std	xr1,t9,-64,ptn3
    2be0:	74617263 	jalx	185c98c <__memory_size+0x183d18c>
    2be4:	6d2f6863 	0x6d2f6863
    2be8:	6a2f6670 	0x6a2f6670
    2bec:	2f73626f 	sltiu	s3,k1,25199
    2bf0:	39333435 	xori	s3,t1,0x3435
    2bf4:	38342f35 	xori	s4,at,0x2f35
    2bf8:	2f343930 	sltiu	s4,t9,14640
    2bfc:	31303432 	andi	s0,t1,0x3432
    2c00:	732f3839 	0x732f3839
    2c04:	65726168 	0x65726168
    2c08:	63672f64 	0x63672f64
    2c0c:	696c2f63 	0x696c2f63
    2c10:	6f6c6762 	0x6f6c6762
    2c14:	6d2f7373 	0x6d2f7373
    2c18:	2f737069 	sltiu	s3,k1,28777
    2c1c:	2f696875 	sltiu	t1,k1,26741
    2c20:	5f696875 	0x5f696875
    2c24:	74697865 	jalx	1a5e194 <__memory_size+0x1a3e994>
    2c28:	5f00632e 	bgtzl	t8,1b8e4 <__isr_vec_space+0x1b8c4>
    2c2c:	7465725f 	jalx	195c97c <__memory_size+0x193d17c>
    2c30:	5f6e7275 	0x5f6e7275
    2c34:	625f6f74 	0x625f6f74
    2c38:	00746f6f 	0x746f6f
    2c3c:	74697865 	jalx	1a5e194 <__memory_size+0x1a3e994>
    2c40:	646f635f 	0x646f635f
    2c44:	5f5f0065 	0x5f5f0065
    2c48:	74697865 	jalx	1a5e194 <__memory_size+0x1a3e994>
    2c4c:	554e4700 	bnel	t2,t6,14850 <__isr_vec_space+0x14830>
    2c50:	34204320 	ori	zero,at,0x4320
    2c54:	322e392e 	andi	t6,s1,0x392e
    2c58:	656d2d20 	0x656d2d20
    2c5c:	6d2d206c 	0x6d2d206c
    2c60:	65646f63 	0x65646f63
    2c64:	6165722d 	0x6165722d
    2c68:	6c626164 	0x6c626164
    2c6c:	6f6e3d65 	0x6f6e3d65
    2c70:	696d2d20 	0x696d2d20
    2c74:	7265746e 	0x7265746e
    2c78:	6b6e696c 	0x6b6e696c
    2c7c:	70696d2d 	s16sdi	xr4,v1,182,ptn1
    2c80:	20363173 	addi	s6,at,12659
    2c84:	6f636d2d 	0x6f636d2d
    2c88:	722d6564 	s8ldi	xr5,s1,89,ptn3
    2c8c:	61646165 	0x61646165
    2c90:	3d656c62 	0x3d656c62
    2c94:	2d206f6e 	sltiu	zero,t1,28526
    2c98:	2d6f6e6d 	sltiu	t7,t3,28269
    2c9c:	706f7067 	0x706f7067
    2ca0:	6d2d2074 	0x6d2d2074
    2ca4:	33737069 	andi	s3,k1,0x7069
    2ca8:	20327232 	addi	s2,at,29234
    2cac:	62616d2d 	0x62616d2d
    2cb0:	32333d69 	andi	s3,s1,0x3d69
    2cb4:	736d2d20 	0x736d2d20
    2cb8:	2d74666f 	sltiu	s4,t3,26223
    2cbc:	616f6c66 	0x616f6c66
    2cc0:	6d2d2074 	0x6d2d2074
    2cc4:	20746c70 	addi	s4,v1,27760
    2cc8:	79736d2d 	0x79736d2d
    2ccc:	2069636e 	addi	t1,v1,25454
    2cd0:	2d20672d 	sltiu	zero,t1,26413
    2cd4:	4f2d2067 	c3	0x12d2067
    2cd8:	4f2d2032 	c3	0x12d2032
    2cdc:	4f2d2073 	c3	0x12d2073
    2ce0:	4f2d2032 	c3	0x12d2032
    2ce4:	4f2d2032 	c3	0x12d2032
    2ce8:	5f5f0073 	0x5f5f0073
    2cec:	5f657375 	0x5f657375
    2cf0:	70637865 	s8sdi	xr1,v1,-34,ptn0
    2cf4:	6f625f74 	0x6f625f74
    2cf8:	5f00746f 	bgtzl	t8,1feb8 <__memory_size+0x6b8>
    2cfc:	746e695f 	jalx	1b9a57c <__memory_size+0x1b7ad7c>
    2d00:	745f3233 	jalx	17cc8cc <__memory_size+0x17ad0cc>
    2d04:	67726100 	0x67726100
    2d08:	5f5f0031 	0x5f5f0031
    2d0c:	5f746567 	0x5f746567
    2d10:	72617473 	d32sar	xr1,xr13,xr5,xr8,9
    2d14:	5f707574 	0x5f707574
    2d18:	00564542 	0x564542
    2d1c:	7263732f 	0x7263732f
    2d20:	68637461 	0x68637461
    2d24:	66706d2f 	0x66706d2f
    2d28:	626f6a2f 	0x626f6a2f
    2d2c:	34352f73 	ori	s5,at,0x2f73
    2d30:	2f353933 	sltiu	s5,t9,14643
    2d34:	39303834 	xori	s0,t1,0x3834
    2d38:	34322f34 	ori	s2,at,0x2f34
    2d3c:	38393130 	xori	t9,at,0x3130
    2d40:	6168732f 	0x6168732f
    2d44:	2f646572 	sltiu	a0,k1,25970
    2d48:	2f636367 	sltiu	v1,k1,25447
    2d4c:	6762696c 	0x6762696c
    2d50:	73736f6c 	s16ldi	xr13,k1,438,ptn2
    2d54:	70696d2f 	0x70696d2f
    2d58:	68752f73 	0x68752f73
    2d5c:	68752f69 	0x68752f69
    2d60:	65675f69 	0x65675f69
    2d64:	61725f74 	0x61725f74
    2d68:	61725f6d 	0x61725f6d
    2d6c:	2e65676e 	sltiu	a1,s3,26478
    2d70:	5f5f0063 	0x5f5f0063
    2d74:	6f6d656d 	0x6f6d656d
    2d78:	735f7972 	0x735f7972
    2d7c:	00657a69 	0x657a69
    2d80:	78655f72 	0x78655f72
    2d84:	746e6574 	jalx	1b995d0 <__memory_size+0x1b79dd0>
    2d88:	6d617200 	0x6d617200
    2d8c:	7478655f 	jalx	1e1957c <__memory_size+0x1df9d7c>
    2d90:	00746e65 	0x746e65
    2d94:	656d5f5f 	0x656d5f5f
    2d98:	79726f6d 	0x79726f6d
    2d9c:	7361625f 	udi15	k1,at,t4,0x9
    2da0:	5f720065 	0x5f720065
    2da4:	65736162 	0x65736162
    2da8:	6d617200 	0x6d617200
    2dac:	7361625f 	udi15	k1,at,t4,0x9
    2db0:	675f0065 	0x675f0065
    2db4:	725f7465 	s8sdi	xr1,s2,-35,
    2db8:	725f6d61 	0x725f6d61
    2dbc:	65676e61 	0x65676e61
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
   0:	00000000 	nop
   4:	00000010 	mfhi	zero
   8:	10540001 	beq	v0,s4,10 <ABIFlags_flags1>
   c:	1b000000 	blez	t8,10 <ABIFlags_flags1>
  10:	01000000 	0x1000000
  14:	001b5500 	sll	t2,k1,0x14
  18:	00280000 	0x280000
  1c:	00040000 	sll	zero,a0,0x0
  20:	9f5401f3 	0x9f5401f3
	...
  30:	00000017 	0x17
  34:	17540001 	bne	k0,s4,3c <__isr_vec_space+0x1c>
  38:	3c000000 	lui	zero,0x0
  3c:	01000000 	0x1000000
  40:	00006000 	sll	t4,zero,0x0
	...
  4c:	00040000 	sll	zero,a0,0x0
  50:	00010000 	sll	zero,at,0x0
  54:	00000456 	0x456
  58:	00001400 	sll	v0,zero,0x10
  5c:	73000700 	0x73000700
  60:	00762000 	0x762000
  64:	00149f22 	0x149f22
  68:	00300000 	0x300000
  6c:	00060000 	sll	zero,a2,0x0
  70:	00730076 	tne	v1,s3,0x1
  74:	00309f1c 	0x309f1c
  78:	00380000 	0x380000
  7c:	00070000 	sll	zero,a3,0x0
  80:	76200073 	jalx	88001cc <__memory_size+0x87e09cc>
  84:	009f2200 	0x9f2200
	...
  90:	04000000 	bltz	zero,94 <__isr_vec_space+0x74>
  94:	01000000 	0x1000000
  98:	00045400 	sll	t2,a0,0x10
  9c:	00100000 	sll	zero,s0,0x0
  a0:	00060000 	sll	zero,a2,0x0
  a4:	00730074 	teq	v1,s3,0x1
  a8:	00109f22 	0x109f22
  ac:	001c0000 	sll	zero,gp,0x0
  b0:	00010000 	sll	zero,at,0x0
  b4:	00001c52 	0x1c52
  b8:	00003000 	sll	a2,zero,0x0
  bc:	73000800 	madd	$ac1,t8,zero
  c0:	22007400 	addi	zero,s0,29696
  c4:	309f1c31 	andi	ra,a0,0x1c31
  c8:	38000000 	xori	zero,zero,0x0
  cc:	06000000 	bltz	s0,d0 <__isr_vec_space+0xb0>
  d0:	73007400 	0x73007400
  d4:	009f2200 	0x9f2200
	...
  e0:	04000000 	bltz	zero,e4 <__isr_vec_space+0xc4>
  e4:	01000000 	0x1000000
  e8:	00045500 	sll	t2,a0,0x14
  ec:	00140000 	sll	zero,s4,0x0
  f0:	00060000 	sll	zero,a2,0x0
  f4:	00730075 	0x730075
  f8:	00149f22 	0x149f22
  fc:	00300000 	0x300000
 100:	00080000 	sll	zero,t0,0x0
 104:	00750073 	tltu	v1,s5,0x1
 108:	9f1c3122 	0x9f1c3122
 10c:	00000030 	tge	zero,zero
 110:	00000038 	0x38
 114:	00750006 	srlv	zero,s5,v1
 118:	9f220073 	0x9f220073
	...
 128:	00000064 	0x64
 12c:	64540001 	0x64540001
 130:	04000000 	bltz	zero,134 <__isr_vec_space+0x114>
 134:	01000001 	movf	zero,t0,$fcc0
 138:	01046100 	0x1046100
 13c:	01100000 	0x1100000
 140:	00040000 	sll	zero,a0,0x0
 144:	9f5401f3 	0x9f5401f3
	...
 154:	00000064 	0x64
 158:	64550001 	0x64550001
 15c:	6c000000 	0x6c000000
 160:	01000000 	0x1000000
 164:	006c6200 	0x6c6200
 168:	00730000 	0x730000
 16c:	00010000 	sll	zero,at,0x0
 170:	00007355 	0x7355
 174:	00010000 	sll	zero,at,0x0
 178:	62000100 	0x62000100
 17c:	00000100 	sll	zero,zero,0x4
 180:	00000110 	0x110
 184:	01f30004 	sllv	zero,s3,t7
 188:	00009f55 	0x9f55
	...
 194:	00640000 	0x640000
 198:	00010000 	sll	zero,at,0x0
 19c:	00006456 	0x6456
 1a0:	00006c00 	sll	t5,zero,0x10
 1a4:	64000100 	0x64000100
 1a8:	0000006c 	0x6c
 1ac:	00000073 	tltu	zero,zero,0x1
 1b0:	73560001 	maddu	k0,s6
 1b4:	f8000000 	sdc2	$0,0(zero)
 1b8:	01000000 	0x1000000
 1bc:	00f86400 	0xf86400
 1c0:	01100000 	0x1100000
 1c4:	00040000 	sll	zero,a0,0x0
 1c8:	9f5601f3 	0x9f5601f3
	...
 1d8:	00000064 	0x64
 1dc:	64570001 	0x64570001
 1e0:	6c000000 	0x6c000000
 1e4:	01000000 	0x1000000
 1e8:	006c6300 	0x6c6300
 1ec:	00730000 	0x730000
 1f0:	00010000 	sll	zero,at,0x0
 1f4:	00007357 	0x7357
 1f8:	0000fc00 	sll	ra,zero,0x10
 1fc:	63000100 	0x63000100
 200:	000000fc 	0xfc
 204:	00000110 	0x110
 208:	01f30004 	sllv	zero,s3,t7
 20c:	00009f57 	0x9f57
 210:	00000000 	nop
 214:	009c0000 	0x9c0000
 218:	00d40000 	0xd40000
 21c:	00040000 	sll	zero,a0,0x0
 220:	9f018872 	0x9f018872
	...
 22c:	00000034 	teq	zero,zero
 230:	00000058 	0x58
 234:	58520001 	0x58520001
 238:	64000000 	0x64000000
 23c:	03000000 	0x3000000
 240:	02c88000 	0x2c88000
 244:	0000006c 	0x6c
 248:	00000073 	tltu	zero,zero,0x1
 24c:	c8800003 	lwc2	$0,3(a0)
 250:	00007402 	srl	t6,zero,0x10
 254:	0000e800 	sll	sp,zero,0x0
 258:	52000100 	beqzl	s0,65c <__isr_vec_space+0x63c>
 25c:	00000000 	nop
	...
 268:	0000004c 	syscall	0x1
 26c:	4c540001 	ldxc1	$f0,s4(v0)
 270:	60000000 	0x60000000
 274:	01000001 	movf	zero,t0,$fcc0
 278:	01606600 	0x1606600
 27c:	01800000 	0x1800000
 280:	00040000 	sll	zero,a0,0x0
 284:	9f5401f3 	0x9f5401f3
	...
 294:	0000004c 	syscall	0x1
 298:	4c550001 	ldxc1	$f0,s5(v0)
 29c:	68000000 	0x68000000
 2a0:	01000001 	movf	zero,t0,$fcc0
 2a4:	01686400 	0x1686400
 2a8:	01800000 	0x1800000
 2ac:	00040000 	sll	zero,a0,0x0
 2b0:	9f5501f3 	0x9f5501f3
	...
 2bc:	00000110 	0x110
 2c0:	00000118 	0x118
 2c4:	00820002 	0x820002
 2c8:	0000011c 	0x11c
 2cc:	00000124 	0x124
 2d0:	00520001 	0x520001
 2d4:	00000000 	nop
 2d8:	58000000 	blezl	zero,2dc <__isr_vec_space+0x2bc>
 2dc:	1c000000 	bgtz	zero,2e0 <__isr_vec_space+0x2c0>
 2e0:	01000001 	movf	zero,t0,$fcc0
 2e4:	011c6200 	0x11c6200
 2e8:	01240000 	0x1240000
 2ec:	00010000 	sll	zero,at,0x0
 2f0:	00012452 	0x12452
 2f4:	00017000 	sll	t6,at,0x0
 2f8:	62000100 	0x62000100
	...
 304:	00000110 	0x110
 308:	00000118 	0x118
 30c:	00820007 	srav	zero,v0,a0
 310:	01882306 	0x1882306
 314:	00011c9f 	0x11c9f
 318:	00012400 	sll	a0,at,0x10
 31c:	72000400 	0x72000400
 320:	009f0188 	0x9f0188
 324:	00000000 	nop
 328:	68000000 	0x68000000
 32c:	54000000 	bnezl	zero,330 <__isr_vec_space+0x310>
 330:	01000001 	movf	zero,t0,$fcc0
 334:	00006500 	sll	t4,zero,0x14
 338:	00000000 	nop
 33c:	00780000 	0x780000
 340:	00e40000 	0xe40000
 344:	00050000 	sll	zero,a1,0x0
 348:	24008531 	li	zero,-31439
 34c:	0000e49f 	0xe49f
 350:	0000ec00 	sll	sp,zero,0x10
 354:	31000500 	andi	zero,t0,0x500
 358:	9f240185 	0x9f240185
 35c:	00000124 	0x124
 360:	00000154 	0x154
 364:	85310005 	lh	s1,5(t1)
 368:	009f2400 	0x9f2400
 36c:	00000000 	nop
 370:	90000000 	lbu	zero,0(zero)
 374:	c7000000 	lwc1	$f0,0(t8)
 378:	01000000 	0x1000000
 37c:	01245300 	0x1245300
 380:	013b0000 	0x13b0000
 384:	00010000 	sll	zero,at,0x0
 388:	00014453 	0x14453
 38c:	00014b00 	sll	t1,at,0xc
 390:	53000100 	beqzl	t8,794 <__isr_vec_space+0x774>
 394:	00000000 	nop
 398:	00000000 	nop
 39c:	000000b4 	teq	zero,zero,0x2
 3a0:	000000e0 	0xe0
 3a4:	246e0001 	addiu	t6,v1,1
 3a8:	54000001 	bnezl	zero,3b0 <__isr_vec_space+0x390>
 3ac:	01000001 	movf	zero,t0,$fcc0
 3b0:	00006e00 	sll	t5,zero,0x18
	...
 3bc:	00340000 	0x340000
 3c0:	00010000 	sll	zero,at,0x0
 3c4:	00003454 	0x3454
 3c8:	00008800 	sll	s1,zero,0x0
 3cc:	63000100 	0x63000100
	...
 3dc:	00000038 	0x38
 3e0:	38540001 	xori	s4,v0,0x1
 3e4:	4c000000 	lwxc1	$f0,zero(zero)
 3e8:	01000000 	0x1000000
 3ec:	00005600 	sll	t2,zero,0x18
	...
 3f8:	00380000 	0x380000
 3fc:	00010000 	sll	zero,at,0x0
 400:	00003855 	0x3855
 404:	00004c00 	sll	t1,zero,0x10
 408:	57000100 	bnezl	t8,80c <__isr_vec_space+0x7ec>
 40c:	00000000 	nop
 410:	00000000 	nop

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	00000014 	0x14
   4:	00000018 	mult	zero,zero
   8:	00000078 	0x78
   c:	000000e0 	0xe0
  10:	00000124 	0x124
  14:	0000014c 	syscall	0x5
	...
  20:	ffffffff 	sdc3	$31,-1(ra)
  24:	00000000 	nop
  28:	80000000 	lb	zero,0(zero)
  2c:	80000194 	lb	zero,404(zero)
  30:	8000b9ec 	lb	zero,-17940(zero)
  34:	8000bbb4 	lb	zero,-17484(zero)
	...

Disassembly of section .reginfo:

00000000 <.reginfo>:
   0:	b200037c 	0xb200037c
	...
  14:	8001422d 	lb	at,16941(zero)

Disassembly of section .pdr:

00000000 <.pdr>:
       0:	80000204 	lb	zero,516(zero)
	...
      20:	80000320 	lb	zero,800(zero)
	...
      40:	80000384 	lb	zero,900(zero)
	...
      60:	80000458 	lb	zero,1112(zero)
	...
      80:	9fc00000 	0x9fc00000
	...
      a0:	9fc00014 	0x9fc00014
	...
      c0:	9fc000b0 	0x9fc000b0
	...
      e0:	9fc00108 	0x9fc00108
	...
     100:	9fc00168 	0x9fc00168
	...
     120:	9fc00288 	0x9fc00288
	...
     140:	9fc00308 	0x9fc00308
	...
     160:	8000063c 	lb	zero,1596(zero)
	...
     180:	800007dc 	lb	zero,2012(zero)
	...
     1a0:	80000898 	lb	zero,2200(zero)
	...
     1c0:	80000a54 	lb	zero,2644(zero)
     1c4:	40000000 	mfc0	zero,c0_index
     1c8:	fffffffc 	sdc3	$31,-4(ra)
	...
     1d4:	00000008 	jr	zero
     1d8:	0000001e 	0x1e
     1dc:	0000001f 	0x1f
     1e0:	80000a98 	lb	zero,2712(zero)
     1e4:	c0000000 	ll	zero,0(zero)
     1e8:	fffffffc 	sdc3	$31,-4(ra)
	...
     1f4:	00000028 	0x28
     1f8:	0000001e 	0x1e
     1fc:	0000001f 	0x1f
     200:	80000c30 	lb	zero,3120(zero)
     204:	c0000000 	ll	zero,0(zero)
     208:	fffffffc 	sdc3	$31,-4(ra)
	...
     214:	00000020 	add	zero,zero,zero
     218:	0000001e 	0x1e
     21c:	0000001f 	0x1f
     220:	80000cb8 	lb	zero,3256(zero)
     224:	40000000 	mfc0	zero,c0_index
     228:	fffffffc 	sdc3	$31,-4(ra)
	...
     234:	00000010 	mfhi	zero
     238:	0000001e 	0x1e
     23c:	0000001f 	0x1f
     240:	80000d60 	lb	zero,3424(zero)
     244:	c0000000 	ll	zero,0(zero)
     248:	fffffffc 	sdc3	$31,-4(ra)
	...
     254:	00000020 	add	zero,zero,zero
     258:	0000001e 	0x1e
     25c:	0000001f 	0x1f
     260:	80000dd0 	lb	zero,3536(zero)
     264:	c0000000 	ll	zero,0(zero)
     268:	fffffffc 	sdc3	$31,-4(ra)
	...
     274:	00000020 	add	zero,zero,zero
     278:	0000001e 	0x1e
     27c:	0000001f 	0x1f
     280:	80000e9c 	lb	zero,3740(zero)
     284:	c0000000 	ll	zero,0(zero)
     288:	fffffffc 	sdc3	$31,-4(ra)
	...
     294:	00000018 	mult	zero,zero
     298:	0000001e 	0x1e
     29c:	0000001f 	0x1f
     2a0:	80000ed4 	lb	zero,3796(zero)
     2a4:	c0000000 	ll	zero,0(zero)
     2a8:	fffffffc 	sdc3	$31,-4(ra)
	...
     2b4:	00000018 	mult	zero,zero
     2b8:	0000001e 	0x1e
     2bc:	0000001f 	0x1f
     2c0:	80000f0c 	lb	zero,3852(zero)
     2c4:	40000000 	mfc0	zero,c0_index
     2c8:	fffffffc 	sdc3	$31,-4(ra)
	...
     2d4:	00000008 	jr	zero
     2d8:	0000001e 	0x1e
     2dc:	0000001f 	0x1f
     2e0:	80000f2c 	lb	zero,3884(zero)
     2e4:	c0000000 	ll	zero,0(zero)
     2e8:	fffffffc 	sdc3	$31,-4(ra)
	...
     2f4:	00000010 	mfhi	zero
     2f8:	0000001e 	0x1e
     2fc:	0000001f 	0x1f
     300:	80000f90 	lb	zero,3984(zero)
     304:	40000000 	mfc0	zero,c0_index
     308:	fffffffc 	sdc3	$31,-4(ra)
	...
     314:	00000008 	jr	zero
     318:	0000001e 	0x1e
     31c:	0000001f 	0x1f
     320:	80000fb0 	lb	zero,4016(zero)
     324:	c0000000 	ll	zero,0(zero)
     328:	fffffffc 	sdc3	$31,-4(ra)
	...
     334:	00000010 	mfhi	zero
     338:	0000001e 	0x1e
     33c:	0000001f 	0x1f
     340:	8000101c 	lb	zero,4124(zero)
     344:	c0000000 	ll	zero,0(zero)
     348:	fffffffc 	sdc3	$31,-4(ra)
	...
     354:	00000018 	mult	zero,zero
     358:	0000001e 	0x1e
     35c:	0000001f 	0x1f
     360:	8000105c 	lb	zero,4188(zero)
     364:	40000000 	mfc0	zero,c0_index
     368:	fffffffc 	sdc3	$31,-4(ra)
	...
     374:	00000010 	mfhi	zero
     378:	0000001e 	0x1e
     37c:	0000001f 	0x1f
     380:	800010bc 	lb	zero,4284(zero)
     384:	c0000000 	ll	zero,0(zero)
     388:	fffffffc 	sdc3	$31,-4(ra)
	...
     394:	00000028 	0x28
     398:	0000001e 	0x1e
     39c:	0000001f 	0x1f
     3a0:	80001134 	lb	zero,4404(zero)
     3a4:	c0000000 	ll	zero,0(zero)
     3a8:	fffffffc 	sdc3	$31,-4(ra)
	...
     3b4:	00000030 	tge	zero,zero
     3b8:	0000001e 	0x1e
     3bc:	0000001f 	0x1f
     3c0:	800012d0 	lb	zero,4816(zero)
     3c4:	40000000 	mfc0	zero,c0_index
     3c8:	fffffffc 	sdc3	$31,-4(ra)
	...
     3d4:	00000010 	mfhi	zero
     3d8:	0000001e 	0x1e
     3dc:	0000001f 	0x1f
     3e0:	80001334 	lb	zero,4916(zero)
     3e4:	c0000000 	ll	zero,0(zero)
     3e8:	fffffffc 	sdc3	$31,-4(ra)
	...
     3f4:	00000028 	0x28
     3f8:	0000001e 	0x1e
     3fc:	0000001f 	0x1f
     400:	800014a8 	lb	zero,5288(zero)
     404:	c0000000 	ll	zero,0(zero)
     408:	fffffffc 	sdc3	$31,-4(ra)
	...
     414:	00000020 	add	zero,zero,zero
     418:	0000001e 	0x1e
     41c:	0000001f 	0x1f
     420:	80001550 	lb	zero,5456(zero)
     424:	40000000 	mfc0	zero,c0_index
     428:	fffffffc 	sdc3	$31,-4(ra)
	...
     434:	00000010 	mfhi	zero
     438:	0000001e 	0x1e
     43c:	0000001f 	0x1f
     440:	80001664 	lb	zero,5732(zero)
     444:	c0000000 	ll	zero,0(zero)
     448:	fffffffc 	sdc3	$31,-4(ra)
	...
     454:	00000028 	0x28
     458:	0000001e 	0x1e
     45c:	0000001f 	0x1f
     460:	80001770 	lb	zero,6000(zero)
     464:	c0000000 	ll	zero,0(zero)
     468:	fffffffc 	sdc3	$31,-4(ra)
	...
     474:	00000018 	mult	zero,zero
     478:	0000001e 	0x1e
     47c:	0000001f 	0x1f
     480:	8000186c 	lb	zero,6252(zero)
     484:	c0000000 	ll	zero,0(zero)
     488:	fffffffc 	sdc3	$31,-4(ra)
	...
     494:	00000028 	0x28
     498:	0000001e 	0x1e
     49c:	0000001f 	0x1f
     4a0:	80001960 	lb	zero,6496(zero)
     4a4:	c0000000 	ll	zero,0(zero)
     4a8:	fffffffc 	sdc3	$31,-4(ra)
	...
     4b4:	00000018 	mult	zero,zero
     4b8:	0000001e 	0x1e
     4bc:	0000001f 	0x1f
     4c0:	800019c8 	lb	zero,6600(zero)
     4c4:	c0000000 	ll	zero,0(zero)
     4c8:	fffffffc 	sdc3	$31,-4(ra)
	...
     4d4:	00000018 	mult	zero,zero
     4d8:	0000001e 	0x1e
     4dc:	0000001f 	0x1f
     4e0:	80001b40 	lb	zero,6976(zero)
     4e4:	c0000000 	ll	zero,0(zero)
     4e8:	fffffffc 	sdc3	$31,-4(ra)
	...
     4f4:	00000020 	add	zero,zero,zero
     4f8:	0000001e 	0x1e
     4fc:	0000001f 	0x1f
     500:	80001c30 	lb	zero,7216(zero)
     504:	c0000000 	ll	zero,0(zero)
     508:	fffffffc 	sdc3	$31,-4(ra)
	...
     514:	00000020 	add	zero,zero,zero
     518:	0000001e 	0x1e
     51c:	0000001f 	0x1f
     520:	80001cb4 	lb	zero,7348(zero)
     524:	c0000000 	ll	zero,0(zero)
     528:	fffffffc 	sdc3	$31,-4(ra)
	...
     534:	00000018 	mult	zero,zero
     538:	0000001e 	0x1e
     53c:	0000001f 	0x1f
     540:	80001d5c 	lb	zero,7516(zero)
     544:	c0000000 	ll	zero,0(zero)
     548:	fffffffc 	sdc3	$31,-4(ra)
	...
     554:	00000020 	add	zero,zero,zero
     558:	0000001e 	0x1e
     55c:	0000001f 	0x1f
     560:	80001fd0 	lb	zero,8144(zero)
     564:	40000000 	mfc0	zero,c0_index
     568:	fffffffc 	sdc3	$31,-4(ra)
	...
     574:	00000008 	jr	zero
     578:	0000001e 	0x1e
     57c:	0000001f 	0x1f
     580:	80002018 	lb	zero,8216(zero)
     584:	40000000 	mfc0	zero,c0_index
     588:	fffffffc 	sdc3	$31,-4(ra)
	...
     594:	00000008 	jr	zero
     598:	0000001e 	0x1e
     59c:	0000001f 	0x1f
     5a0:	80002044 	lb	zero,8260(zero)
     5a4:	c0000000 	ll	zero,0(zero)
     5a8:	fffffffc 	sdc3	$31,-4(ra)
	...
     5b4:	00000028 	0x28
     5b8:	0000001e 	0x1e
     5bc:	0000001f 	0x1f
     5c0:	80002174 	lb	zero,8564(zero)
     5c4:	c0000000 	ll	zero,0(zero)
     5c8:	fffffffc 	sdc3	$31,-4(ra)
	...
     5d4:	00000020 	add	zero,zero,zero
     5d8:	0000001e 	0x1e
     5dc:	0000001f 	0x1f
     5e0:	800022e0 	lb	zero,8928(zero)
     5e4:	c0000000 	ll	zero,0(zero)
     5e8:	fffffffc 	sdc3	$31,-4(ra)
	...
     5f4:	00000028 	0x28
     5f8:	0000001e 	0x1e
     5fc:	0000001f 	0x1f
     600:	800023fc 	lb	zero,9212(zero)
     604:	c0000000 	ll	zero,0(zero)
     608:	fffffffc 	sdc3	$31,-4(ra)
	...
     614:	00000028 	0x28
     618:	0000001e 	0x1e
     61c:	0000001f 	0x1f
     620:	80002680 	lb	zero,9856(zero)
     624:	c0000000 	ll	zero,0(zero)
     628:	fffffffc 	sdc3	$31,-4(ra)
	...
     634:	00000020 	add	zero,zero,zero
     638:	0000001e 	0x1e
     63c:	0000001f 	0x1f
     640:	80002b54 	lb	zero,11092(zero)
     644:	c0000000 	ll	zero,0(zero)
     648:	fffffffc 	sdc3	$31,-4(ra)
	...
     654:	00000028 	0x28
     658:	0000001e 	0x1e
     65c:	0000001f 	0x1f
     660:	80002e24 	lb	zero,11812(zero)
     664:	c0000000 	ll	zero,0(zero)
     668:	fffffffc 	sdc3	$31,-4(ra)
	...
     674:	00000028 	0x28
     678:	0000001e 	0x1e
     67c:	0000001f 	0x1f
     680:	80002ecc 	lb	zero,11980(zero)
     684:	c0000000 	ll	zero,0(zero)
     688:	fffffffc 	sdc3	$31,-4(ra)
	...
     694:	00000020 	add	zero,zero,zero
     698:	0000001e 	0x1e
     69c:	0000001f 	0x1f
     6a0:	800030fc 	lb	zero,12540(zero)
     6a4:	c0000000 	ll	zero,0(zero)
     6a8:	fffffffc 	sdc3	$31,-4(ra)
	...
     6b4:	00000030 	tge	zero,zero
     6b8:	0000001e 	0x1e
     6bc:	0000001f 	0x1f
     6c0:	80003280 	lb	zero,12928(zero)
     6c4:	40000000 	mfc0	zero,c0_index
     6c8:	fffffffc 	sdc3	$31,-4(ra)
	...
     6d4:	00000010 	mfhi	zero
     6d8:	0000001e 	0x1e
     6dc:	0000001f 	0x1f
     6e0:	80003300 	lb	zero,13056(zero)
     6e4:	c0000000 	ll	zero,0(zero)
     6e8:	fffffffc 	sdc3	$31,-4(ra)
	...
     6f4:	00000028 	0x28
     6f8:	0000001e 	0x1e
     6fc:	0000001f 	0x1f
     700:	80003398 	lb	zero,13208(zero)
     704:	c0000000 	ll	zero,0(zero)
     708:	fffffffc 	sdc3	$31,-4(ra)
	...
     714:	00000028 	0x28
     718:	0000001e 	0x1e
     71c:	0000001f 	0x1f
     720:	80003418 	lb	zero,13336(zero)
     724:	c0000000 	ll	zero,0(zero)
     728:	fffffffc 	sdc3	$31,-4(ra)
	...
     734:	00000018 	mult	zero,zero
     738:	0000001e 	0x1e
     73c:	0000001f 	0x1f
     740:	800034d4 	lb	zero,13524(zero)
     744:	c0000000 	ll	zero,0(zero)
     748:	fffffffc 	sdc3	$31,-4(ra)
	...
     754:	00000030 	tge	zero,zero
     758:	0000001e 	0x1e
     75c:	0000001f 	0x1f
     760:	800035fc 	lb	zero,13820(zero)
     764:	c0000000 	ll	zero,0(zero)
     768:	fffffffc 	sdc3	$31,-4(ra)
	...
     774:	00000018 	mult	zero,zero
     778:	0000001e 	0x1e
     77c:	0000001f 	0x1f
     780:	80003648 	lb	zero,13896(zero)
     784:	c0000000 	ll	zero,0(zero)
     788:	fffffffc 	sdc3	$31,-4(ra)
	...
     794:	00000020 	add	zero,zero,zero
     798:	0000001e 	0x1e
     79c:	0000001f 	0x1f
     7a0:	800036a4 	lb	zero,13988(zero)
     7a4:	c0000000 	ll	zero,0(zero)
     7a8:	fffffffc 	sdc3	$31,-4(ra)
	...
     7b4:	00000020 	add	zero,zero,zero
     7b8:	0000001e 	0x1e
     7bc:	0000001f 	0x1f
     7c0:	80003708 	lb	zero,14088(zero)
     7c4:	c0000000 	ll	zero,0(zero)
     7c8:	fffffffc 	sdc3	$31,-4(ra)
	...
     7d4:	00000020 	add	zero,zero,zero
     7d8:	0000001e 	0x1e
     7dc:	0000001f 	0x1f
     7e0:	80003764 	lb	zero,14180(zero)
     7e4:	c0000000 	ll	zero,0(zero)
     7e8:	fffffffc 	sdc3	$31,-4(ra)
	...
     7f4:	00000028 	0x28
     7f8:	0000001e 	0x1e
     7fc:	0000001f 	0x1f
     800:	80003858 	lb	zero,14424(zero)
     804:	c0000000 	ll	zero,0(zero)
     808:	fffffffc 	sdc3	$31,-4(ra)
	...
     814:	00000020 	add	zero,zero,zero
     818:	0000001e 	0x1e
     81c:	0000001f 	0x1f
     820:	800038a4 	lb	zero,14500(zero)
     824:	c0010000 	ll	at,0(zero)
     828:	fffffffc 	sdc3	$31,-4(ra)
	...
     834:	00000030 	tge	zero,zero
     838:	0000001e 	0x1e
     83c:	0000001f 	0x1f
     840:	800039cc 	lb	zero,14796(zero)
     844:	40000000 	mfc0	zero,c0_index
     848:	fffffffc 	sdc3	$31,-4(ra)
	...
     854:	00000010 	mfhi	zero
     858:	0000001e 	0x1e
     85c:	0000001f 	0x1f
     860:	80003a3c 	lb	zero,14908(zero)
     864:	c0000000 	ll	zero,0(zero)
     868:	fffffffc 	sdc3	$31,-4(ra)
	...
     874:	00000020 	add	zero,zero,zero
     878:	0000001e 	0x1e
     87c:	0000001f 	0x1f
     880:	80003ab8 	lb	zero,15032(zero)
     884:	c0000000 	ll	zero,0(zero)
     888:	fffffffc 	sdc3	$31,-4(ra)
	...
     894:	00000020 	add	zero,zero,zero
     898:	0000001e 	0x1e
     89c:	0000001f 	0x1f
     8a0:	80003bcc 	lb	zero,15308(zero)
     8a4:	c0000000 	ll	zero,0(zero)
     8a8:	fffffffc 	sdc3	$31,-4(ra)
	...
     8b4:	00000048 	0x48
     8b8:	0000001e 	0x1e
     8bc:	0000001f 	0x1f
     8c0:	80003e2c 	lb	zero,15916(zero)
     8c4:	c0000000 	ll	zero,0(zero)
     8c8:	fffffffc 	sdc3	$31,-4(ra)
	...
     8d4:	00000038 	0x38
     8d8:	0000001e 	0x1e
     8dc:	0000001f 	0x1f
     8e0:	80003f84 	lb	zero,16260(zero)
     8e4:	c0000000 	ll	zero,0(zero)
     8e8:	fffffffc 	sdc3	$31,-4(ra)
	...
     8f4:	00000018 	mult	zero,zero
     8f8:	0000001e 	0x1e
     8fc:	0000001f 	0x1f
     900:	80004018 	lb	zero,16408(zero)
     904:	c0000000 	ll	zero,0(zero)
     908:	fffffffc 	sdc3	$31,-4(ra)
	...
     914:	00000020 	add	zero,zero,zero
     918:	0000001e 	0x1e
     91c:	0000001f 	0x1f
     920:	80004094 	lb	zero,16532(zero)
     924:	c0000000 	ll	zero,0(zero)
     928:	fffffffc 	sdc3	$31,-4(ra)
	...
     934:	00000020 	add	zero,zero,zero
     938:	0000001e 	0x1e
     93c:	0000001f 	0x1f
     940:	80004108 	lb	zero,16648(zero)
     944:	c0000000 	ll	zero,0(zero)
     948:	fffffffc 	sdc3	$31,-4(ra)
	...
     954:	00000020 	add	zero,zero,zero
     958:	0000001e 	0x1e
     95c:	0000001f 	0x1f
     960:	8000417c 	lb	zero,16764(zero)
     964:	c0000000 	ll	zero,0(zero)
     968:	fffffffc 	sdc3	$31,-4(ra)
	...
     974:	00000030 	tge	zero,zero
     978:	0000001e 	0x1e
     97c:	0000001f 	0x1f
     980:	800041fc 	lb	zero,16892(zero)
     984:	c0000000 	ll	zero,0(zero)
     988:	fffffffc 	sdc3	$31,-4(ra)
	...
     994:	00000030 	tge	zero,zero
     998:	0000001e 	0x1e
     99c:	0000001f 	0x1f
     9a0:	8000429c 	lb	zero,17052(zero)
     9a4:	c0000000 	ll	zero,0(zero)
     9a8:	fffffffc 	sdc3	$31,-4(ra)
	...
     9b4:	00000020 	add	zero,zero,zero
     9b8:	0000001e 	0x1e
     9bc:	0000001f 	0x1f
     9c0:	80004300 	lb	zero,17152(zero)
     9c4:	c0000000 	ll	zero,0(zero)
     9c8:	fffffffc 	sdc3	$31,-4(ra)
	...
     9d4:	00000030 	tge	zero,zero
     9d8:	0000001e 	0x1e
     9dc:	0000001f 	0x1f
     9e0:	80004568 	lb	zero,17768(zero)
     9e4:	c0000000 	ll	zero,0(zero)
     9e8:	fffffffc 	sdc3	$31,-4(ra)
	...
     9f4:	00000038 	0x38
     9f8:	0000001e 	0x1e
     9fc:	0000001f 	0x1f
     a00:	8000482c 	lb	zero,18476(zero)
     a04:	c0000000 	ll	zero,0(zero)
     a08:	fffffffc 	sdc3	$31,-4(ra)
	...
     a14:	00000020 	add	zero,zero,zero
     a18:	0000001e 	0x1e
     a1c:	0000001f 	0x1f
     a20:	800048e4 	lb	zero,18660(zero)
     a24:	c0000000 	ll	zero,0(zero)
     a28:	fffffffc 	sdc3	$31,-4(ra)
	...
     a34:	00000028 	0x28
     a38:	0000001e 	0x1e
     a3c:	0000001f 	0x1f
     a40:	80004940 	lb	zero,18752(zero)
     a44:	c0000000 	ll	zero,0(zero)
     a48:	fffffffc 	sdc3	$31,-4(ra)
	...
     a54:	00000040 	ssnop
     a58:	0000001e 	0x1e
     a5c:	0000001f 	0x1f
     a60:	80004b38 	lb	zero,19256(zero)
     a64:	c0000000 	ll	zero,0(zero)
     a68:	fffffffc 	sdc3	$31,-4(ra)
	...
     a74:	00000020 	add	zero,zero,zero
     a78:	0000001e 	0x1e
     a7c:	0000001f 	0x1f
     a80:	80004bf0 	lb	zero,19440(zero)
     a84:	c0000000 	ll	zero,0(zero)
     a88:	fffffffc 	sdc3	$31,-4(ra)
	...
     a94:	00000018 	mult	zero,zero
     a98:	0000001e 	0x1e
     a9c:	0000001f 	0x1f
     aa0:	80004c30 	lb	zero,19504(zero)
     aa4:	c0000000 	ll	zero,0(zero)
     aa8:	fffffffc 	sdc3	$31,-4(ra)
	...
     ab4:	00000018 	mult	zero,zero
     ab8:	0000001e 	0x1e
     abc:	0000001f 	0x1f
     ac0:	80004c70 	lb	zero,19568(zero)
     ac4:	40000000 	mfc0	zero,c0_index
     ac8:	fffffffc 	sdc3	$31,-4(ra)
	...
     ad4:	00000010 	mfhi	zero
     ad8:	0000001e 	0x1e
     adc:	0000001f 	0x1f
     ae0:	80004cf4 	lb	zero,19700(zero)
     ae4:	c0000000 	ll	zero,0(zero)
     ae8:	fffffffc 	sdc3	$31,-4(ra)
	...
     af4:	00000038 	0x38
     af8:	0000001e 	0x1e
     afc:	0000001f 	0x1f
     b00:	80004ed4 	lb	zero,20180(zero)
     b04:	c0000000 	ll	zero,0(zero)
     b08:	fffffffc 	sdc3	$31,-4(ra)
	...
     b14:	00000020 	add	zero,zero,zero
     b18:	0000001e 	0x1e
     b1c:	0000001f 	0x1f
     b20:	800050d0 	lb	zero,20688(zero)
     b24:	c0010000 	ll	at,0(zero)
     b28:	fffffffc 	sdc3	$31,-4(ra)
	...
     b34:	00000028 	0x28
     b38:	0000001e 	0x1e
     b3c:	0000001f 	0x1f
     b40:	80005238 	lb	zero,21048(zero)
     b44:	c0010000 	ll	at,0(zero)
     b48:	fffffffc 	sdc3	$31,-4(ra)
	...
     b54:	00000028 	0x28
     b58:	0000001e 	0x1e
     b5c:	0000001f 	0x1f
     b60:	800053fc 	lb	zero,21500(zero)
     b64:	c0010000 	ll	at,0(zero)
     b68:	fffffffc 	sdc3	$31,-4(ra)
	...
     b74:	00000038 	0x38
     b78:	0000001e 	0x1e
     b7c:	0000001f 	0x1f
     b80:	800055b8 	lb	zero,21944(zero)
     b84:	c0010000 	ll	at,0(zero)
     b88:	fffffffc 	sdc3	$31,-4(ra)
	...
     b94:	00000028 	0x28
     b98:	0000001e 	0x1e
     b9c:	0000001f 	0x1f
     ba0:	80005674 	lb	zero,22132(zero)
     ba4:	c0000000 	ll	zero,0(zero)
     ba8:	fffffffc 	sdc3	$31,-4(ra)
	...
     bb4:	00000028 	0x28
     bb8:	0000001e 	0x1e
     bbc:	0000001f 	0x1f
     bc0:	800057b0 	lb	zero,22448(zero)
     bc4:	c0000000 	ll	zero,0(zero)
     bc8:	fffffffc 	sdc3	$31,-4(ra)
	...
     bd4:	00000020 	add	zero,zero,zero
     bd8:	0000001e 	0x1e
     bdc:	0000001f 	0x1f
     be0:	8000581c 	lb	zero,22556(zero)
     be4:	c0000000 	ll	zero,0(zero)
     be8:	fffffffc 	sdc3	$31,-4(ra)
	...
     bf4:	00000028 	0x28
     bf8:	0000001e 	0x1e
     bfc:	0000001f 	0x1f
     c00:	80005890 	lb	zero,22672(zero)
     c04:	c0000000 	ll	zero,0(zero)
     c08:	fffffffc 	sdc3	$31,-4(ra)
	...
     c14:	00000030 	tge	zero,zero
     c18:	0000001e 	0x1e
     c1c:	0000001f 	0x1f
     c20:	80005b18 	lb	zero,23320(zero)
     c24:	c0010000 	ll	at,0(zero)
     c28:	fffffffc 	sdc3	$31,-4(ra)
	...
     c34:	00000028 	0x28
     c38:	0000001e 	0x1e
     c3c:	0000001f 	0x1f
     c40:	80005ce0 	lb	zero,23776(zero)
     c44:	c0000000 	ll	zero,0(zero)
     c48:	fffffffc 	sdc3	$31,-4(ra)
	...
     c54:	00000020 	add	zero,zero,zero
     c58:	0000001e 	0x1e
     c5c:	0000001f 	0x1f
     c60:	80005db4 	lb	zero,23988(zero)
     c64:	c0000000 	ll	zero,0(zero)
     c68:	fffffffc 	sdc3	$31,-4(ra)
	...
     c74:	00000020 	add	zero,zero,zero
     c78:	0000001e 	0x1e
     c7c:	0000001f 	0x1f
     c80:	80005ef8 	lb	zero,24312(zero)
     c84:	c0000000 	ll	zero,0(zero)
     c88:	fffffffc 	sdc3	$31,-4(ra)
	...
     c94:	00000028 	0x28
     c98:	0000001e 	0x1e
     c9c:	0000001f 	0x1f
     ca0:	80006040 	lb	zero,24640(zero)
     ca4:	c0000000 	ll	zero,0(zero)
     ca8:	fffffffc 	sdc3	$31,-4(ra)
	...
     cb4:	00000028 	0x28
     cb8:	0000001e 	0x1e
     cbc:	0000001f 	0x1f
     cc0:	80006158 	lb	zero,24920(zero)
     cc4:	c0000000 	ll	zero,0(zero)
     cc8:	fffffffc 	sdc3	$31,-4(ra)
	...
     cd4:	00000020 	add	zero,zero,zero
     cd8:	0000001e 	0x1e
     cdc:	0000001f 	0x1f
     ce0:	800061d8 	lb	zero,25048(zero)
     ce4:	40000000 	mfc0	zero,c0_index
     ce8:	fffffffc 	sdc3	$31,-4(ra)
	...
     cf4:	00000008 	jr	zero
     cf8:	0000001e 	0x1e
     cfc:	0000001f 	0x1f
     d00:	80006204 	lb	zero,25092(zero)
     d04:	c0000000 	ll	zero,0(zero)
     d08:	fffffffc 	sdc3	$31,-4(ra)
	...
     d14:	00000028 	0x28
     d18:	0000001e 	0x1e
     d1c:	0000001f 	0x1f
     d20:	800063f4 	lb	zero,25588(zero)
     d24:	40000000 	mfc0	zero,c0_index
     d28:	fffffffc 	sdc3	$31,-4(ra)
	...
     d34:	00000010 	mfhi	zero
     d38:	0000001e 	0x1e
     d3c:	0000001f 	0x1f
     d40:	80006420 	lb	zero,25632(zero)
     d44:	40000000 	mfc0	zero,c0_index
     d48:	fffffffc 	sdc3	$31,-4(ra)
	...
     d54:	00000010 	mfhi	zero
     d58:	0000001e 	0x1e
     d5c:	0000001f 	0x1f
     d60:	80006450 	lb	zero,25680(zero)
     d64:	40000000 	mfc0	zero,c0_index
     d68:	fffffffc 	sdc3	$31,-4(ra)
	...
     d74:	00000008 	jr	zero
     d78:	0000001e 	0x1e
     d7c:	0000001f 	0x1f
     d80:	80006474 	lb	zero,25716(zero)
     d84:	c0000000 	ll	zero,0(zero)
     d88:	fffffffc 	sdc3	$31,-4(ra)
	...
     d94:	00000020 	add	zero,zero,zero
     d98:	0000001e 	0x1e
     d9c:	0000001f 	0x1f
     da0:	800064e8 	lb	zero,25832(zero)
     da4:	c0000000 	ll	zero,0(zero)
     da8:	fffffffc 	sdc3	$31,-4(ra)
	...
     db4:	00000030 	tge	zero,zero
     db8:	0000001e 	0x1e
     dbc:	0000001f 	0x1f
     dc0:	80006758 	lb	zero,26456(zero)
     dc4:	c0000000 	ll	zero,0(zero)
     dc8:	fffffffc 	sdc3	$31,-4(ra)
	...
     dd4:	00000028 	0x28
     dd8:	0000001e 	0x1e
     ddc:	0000001f 	0x1f
     de0:	800068f0 	lb	zero,26864(zero)
     de4:	c0000000 	ll	zero,0(zero)
     de8:	fffffffc 	sdc3	$31,-4(ra)
	...
     df4:	00000018 	mult	zero,zero
     df8:	0000001e 	0x1e
     dfc:	0000001f 	0x1f
     e00:	80006968 	lb	zero,26984(zero)
     e04:	c0000000 	ll	zero,0(zero)
     e08:	fffffffc 	sdc3	$31,-4(ra)
	...
     e14:	00000018 	mult	zero,zero
     e18:	0000001e 	0x1e
     e1c:	0000001f 	0x1f
     e20:	80006a18 	lb	zero,27160(zero)
     e24:	c0000000 	ll	zero,0(zero)
     e28:	fffffffc 	sdc3	$31,-4(ra)
	...
     e34:	00000018 	mult	zero,zero
     e38:	0000001e 	0x1e
     e3c:	0000001f 	0x1f
     e40:	80006aa8 	lb	zero,27304(zero)
     e44:	c0000000 	ll	zero,0(zero)
     e48:	fffffffc 	sdc3	$31,-4(ra)
	...
     e54:	00000020 	add	zero,zero,zero
     e58:	0000001e 	0x1e
     e5c:	0000001f 	0x1f
     e60:	80006bf0 	lb	zero,27632(zero)
     e64:	c0000000 	ll	zero,0(zero)
     e68:	fffffffc 	sdc3	$31,-4(ra)
	...
     e74:	00000020 	add	zero,zero,zero
     e78:	0000001e 	0x1e
     e7c:	0000001f 	0x1f
     e80:	80006d34 	lb	zero,27956(zero)
     e84:	c0000000 	ll	zero,0(zero)
     e88:	fffffffc 	sdc3	$31,-4(ra)
	...
     e94:	00000018 	mult	zero,zero
     e98:	0000001e 	0x1e
     e9c:	0000001f 	0x1f
     ea0:	80006d98 	lb	zero,28056(zero)
     ea4:	c0000000 	ll	zero,0(zero)
     ea8:	fffffffc 	sdc3	$31,-4(ra)
	...
     eb4:	00000020 	add	zero,zero,zero
     eb8:	0000001e 	0x1e
     ebc:	0000001f 	0x1f
     ec0:	80006ee8 	lb	zero,28392(zero)
     ec4:	40000000 	mfc0	zero,c0_index
     ec8:	fffffffc 	sdc3	$31,-4(ra)
	...
     ed4:	00000008 	jr	zero
     ed8:	0000001e 	0x1e
     edc:	0000001f 	0x1f
     ee0:	80006f10 	lb	zero,28432(zero)
     ee4:	c0000000 	ll	zero,0(zero)
     ee8:	fffffffc 	sdc3	$31,-4(ra)
	...
     ef4:	00000020 	add	zero,zero,zero
     ef8:	0000001e 	0x1e
     efc:	0000001f 	0x1f
     f00:	80006f70 	lb	zero,28528(zero)
     f04:	c0000000 	ll	zero,0(zero)
     f08:	fffffffc 	sdc3	$31,-4(ra)
	...
     f14:	00000020 	add	zero,zero,zero
     f18:	0000001e 	0x1e
     f1c:	0000001f 	0x1f
     f20:	80007050 	lb	zero,28752(zero)
     f24:	c0000000 	ll	zero,0(zero)
     f28:	fffffffc 	sdc3	$31,-4(ra)
	...
     f34:	00000020 	add	zero,zero,zero
     f38:	0000001e 	0x1e
     f3c:	0000001f 	0x1f
     f40:	80007118 	lb	zero,28952(zero)
     f44:	40000000 	mfc0	zero,c0_index
     f48:	fffffffc 	sdc3	$31,-4(ra)
	...
     f54:	00000010 	mfhi	zero
     f58:	0000001e 	0x1e
     f5c:	0000001f 	0x1f
     f60:	80007188 	lb	zero,29064(zero)
     f64:	c0000000 	ll	zero,0(zero)
     f68:	fffffffc 	sdc3	$31,-4(ra)
	...
     f74:	00000028 	0x28
     f78:	0000001e 	0x1e
     f7c:	0000001f 	0x1f
     f80:	800071f4 	lb	zero,29172(zero)
     f84:	c0000000 	ll	zero,0(zero)
     f88:	fffffffc 	sdc3	$31,-4(ra)
	...
     f94:	00000018 	mult	zero,zero
     f98:	0000001e 	0x1e
     f9c:	0000001f 	0x1f
     fa0:	80007240 	lb	zero,29248(zero)
     fa4:	40000000 	mfc0	zero,c0_index
     fa8:	fffffffc 	sdc3	$31,-4(ra)
	...
     fb4:	00000010 	mfhi	zero
     fb8:	0000001e 	0x1e
     fbc:	0000001f 	0x1f
     fc0:	800072b4 	lb	zero,29364(zero)
     fc4:	40000000 	mfc0	zero,c0_index
     fc8:	fffffffc 	sdc3	$31,-4(ra)
	...
     fd4:	00000010 	mfhi	zero
     fd8:	0000001e 	0x1e
     fdc:	0000001f 	0x1f
     fe0:	800072e0 	lb	zero,29408(zero)
     fe4:	40000000 	mfc0	zero,c0_index
     fe8:	fffffffc 	sdc3	$31,-4(ra)
	...
     ff4:	00000010 	mfhi	zero
     ff8:	0000001e 	0x1e
     ffc:	0000001f 	0x1f
    1000:	80007340 	lb	zero,29504(zero)
    1004:	c0000000 	ll	zero,0(zero)
    1008:	fffffffc 	sdc3	$31,-4(ra)
	...
    1014:	00000020 	add	zero,zero,zero
    1018:	0000001e 	0x1e
    101c:	0000001f 	0x1f
    1020:	800074f8 	lb	zero,29944(zero)
    1024:	c0000000 	ll	zero,0(zero)
    1028:	fffffffc 	sdc3	$31,-4(ra)
	...
    1034:	00000020 	add	zero,zero,zero
    1038:	0000001e 	0x1e
    103c:	0000001f 	0x1f
    1040:	800076b8 	lb	zero,30392(zero)
    1044:	c0010000 	ll	at,0(zero)
    1048:	fffffffc 	sdc3	$31,-4(ra)
	...
    1054:	00000028 	0x28
    1058:	0000001e 	0x1e
    105c:	0000001f 	0x1f
    1060:	8000778c 	lb	zero,30604(zero)
    1064:	40010000 	mfc0	at,c0_index
    1068:	fffffffc 	sdc3	$31,-4(ra)
	...
    1074:	00000010 	mfhi	zero
    1078:	0000001e 	0x1e
    107c:	0000001f 	0x1f
    1080:	80007818 	lb	zero,30744(zero)
    1084:	40000000 	mfc0	zero,c0_index
    1088:	fffffffc 	sdc3	$31,-4(ra)
	...
    1094:	00000010 	mfhi	zero
    1098:	0000001e 	0x1e
    109c:	0000001f 	0x1f
    10a0:	80007860 	lb	zero,30816(zero)
    10a4:	40000000 	mfc0	zero,c0_index
    10a8:	fffffffc 	sdc3	$31,-4(ra)
	...
    10b4:	00000008 	jr	zero
    10b8:	0000001e 	0x1e
    10bc:	0000001f 	0x1f
    10c0:	800078a0 	lb	zero,30880(zero)
    10c4:	c0000000 	ll	zero,0(zero)
    10c8:	fffffffc 	sdc3	$31,-4(ra)
	...
    10d4:	00000020 	add	zero,zero,zero
    10d8:	0000001e 	0x1e
    10dc:	0000001f 	0x1f
    10e0:	800079a0 	lb	zero,31136(zero)
    10e4:	c0000000 	ll	zero,0(zero)
    10e8:	fffffffc 	sdc3	$31,-4(ra)
	...
    10f4:	00000020 	add	zero,zero,zero
    10f8:	0000001e 	0x1e
    10fc:	0000001f 	0x1f
    1100:	80007ae4 	lb	zero,31460(zero)
    1104:	c0000000 	ll	zero,0(zero)
    1108:	fffffffc 	sdc3	$31,-4(ra)
	...
    1114:	00000028 	0x28
    1118:	0000001e 	0x1e
    111c:	0000001f 	0x1f
    1120:	80007d2c 	lb	zero,32044(zero)
    1124:	c0000000 	ll	zero,0(zero)
    1128:	fffffffc 	sdc3	$31,-4(ra)
	...
    1134:	00000028 	0x28
    1138:	0000001e 	0x1e
    113c:	0000001f 	0x1f
    1140:	80007fac 	lb	zero,32684(zero)
    1144:	c0000000 	ll	zero,0(zero)
    1148:	fffffffc 	sdc3	$31,-4(ra)
	...
    1154:	00000028 	0x28
    1158:	0000001e 	0x1e
    115c:	0000001f 	0x1f
    1160:	8000815c 	lb	zero,-32420(zero)
    1164:	c0000000 	ll	zero,0(zero)
    1168:	fffffffc 	sdc3	$31,-4(ra)
	...
    1174:	00000020 	add	zero,zero,zero
    1178:	0000001e 	0x1e
    117c:	0000001f 	0x1f
    1180:	800081f0 	lb	zero,-32272(zero)
    1184:	c0000000 	ll	zero,0(zero)
    1188:	fffffffc 	sdc3	$31,-4(ra)
	...
    1194:	00000020 	add	zero,zero,zero
    1198:	0000001e 	0x1e
    119c:	0000001f 	0x1f
    11a0:	80008334 	lb	zero,-31948(zero)
    11a4:	c0000000 	ll	zero,0(zero)
    11a8:	fffffffc 	sdc3	$31,-4(ra)
	...
    11b4:	00000020 	add	zero,zero,zero
    11b8:	0000001e 	0x1e
    11bc:	0000001f 	0x1f
    11c0:	800084bc 	lb	zero,-31556(zero)
    11c4:	c0000000 	ll	zero,0(zero)
    11c8:	fffffffc 	sdc3	$31,-4(ra)
	...
    11d4:	00000030 	tge	zero,zero
    11d8:	0000001e 	0x1e
    11dc:	0000001f 	0x1f
    11e0:	80008598 	lb	zero,-31336(zero)
    11e4:	c0000000 	ll	zero,0(zero)
    11e8:	fffffffc 	sdc3	$31,-4(ra)
	...
    11f4:	00000018 	mult	zero,zero
    11f8:	0000001e 	0x1e
    11fc:	0000001f 	0x1f
    1200:	80008630 	lb	zero,-31184(zero)
    1204:	c0000000 	ll	zero,0(zero)
    1208:	fffffffc 	sdc3	$31,-4(ra)
	...
    1214:	00000018 	mult	zero,zero
    1218:	0000001e 	0x1e
    121c:	0000001f 	0x1f
    1220:	80008698 	lb	zero,-31080(zero)
    1224:	c0000000 	ll	zero,0(zero)
    1228:	fffffffc 	sdc3	$31,-4(ra)
	...
    1234:	00000028 	0x28
    1238:	0000001e 	0x1e
    123c:	0000001f 	0x1f
    1240:	80008700 	lb	zero,-30976(zero)
    1244:	c0010000 	ll	at,0(zero)
    1248:	fffffffc 	sdc3	$31,-4(ra)
	...
    1254:	00000028 	0x28
    1258:	0000001e 	0x1e
    125c:	0000001f 	0x1f
    1260:	800087c8 	lb	zero,-30776(zero)
    1264:	c0010000 	ll	at,0(zero)
    1268:	fffffffc 	sdc3	$31,-4(ra)
	...
    1274:	00000028 	0x28
    1278:	0000001e 	0x1e
    127c:	0000001f 	0x1f
    1280:	800088a4 	lb	zero,-30556(zero)
    1284:	c0000000 	ll	zero,0(zero)
    1288:	fffffffc 	sdc3	$31,-4(ra)
	...
    1294:	00000020 	add	zero,zero,zero
    1298:	0000001e 	0x1e
    129c:	0000001f 	0x1f
    12a0:	80008950 	lb	zero,-30384(zero)
    12a4:	c0000000 	ll	zero,0(zero)
    12a8:	fffffffc 	sdc3	$31,-4(ra)
	...
    12b4:	00000040 	ssnop
    12b8:	0000001e 	0x1e
    12bc:	0000001f 	0x1f
    12c0:	80008d60 	lb	zero,-29344(zero)
    12c4:	c0000000 	ll	zero,0(zero)
    12c8:	fffffffc 	sdc3	$31,-4(ra)
	...
    12d4:	00000028 	0x28
    12d8:	0000001e 	0x1e
    12dc:	0000001f 	0x1f
    12e0:	80008f90 	lb	zero,-28784(zero)
    12e4:	c0000000 	ll	zero,0(zero)
    12e8:	fffffffc 	sdc3	$31,-4(ra)
	...
    12f4:	00000030 	tge	zero,zero
    12f8:	0000001e 	0x1e
    12fc:	0000001f 	0x1f
    1300:	80009184 	lb	zero,-28284(zero)
    1304:	c0000000 	ll	zero,0(zero)
    1308:	fffffffc 	sdc3	$31,-4(ra)
	...
    1314:	00000040 	ssnop
    1318:	0000001e 	0x1e
    131c:	0000001f 	0x1f
    1320:	80009590 	lb	zero,-27248(zero)
    1324:	c0000000 	ll	zero,0(zero)
    1328:	fffffffc 	sdc3	$31,-4(ra)
	...
    1334:	00000030 	tge	zero,zero
    1338:	0000001e 	0x1e
    133c:	0000001f 	0x1f
    1340:	8000971c 	lb	zero,-26852(zero)
    1344:	c0000000 	ll	zero,0(zero)
    1348:	fffffffc 	sdc3	$31,-4(ra)
	...
    1354:	00000028 	0x28
    1358:	0000001e 	0x1e
    135c:	0000001f 	0x1f
    1360:	80009848 	lb	zero,-26552(zero)
    1364:	c0000000 	ll	zero,0(zero)
    1368:	fffffffc 	sdc3	$31,-4(ra)
	...
    1374:	00000020 	add	zero,zero,zero
    1378:	0000001e 	0x1e
    137c:	0000001f 	0x1f
    1380:	800098b4 	lb	zero,-26444(zero)
    1384:	c0000000 	ll	zero,0(zero)
    1388:	fffffffc 	sdc3	$31,-4(ra)
	...
    1394:	00000020 	add	zero,zero,zero
    1398:	0000001e 	0x1e
    139c:	0000001f 	0x1f
    13a0:	80009934 	lb	zero,-26316(zero)
    13a4:	c0000000 	ll	zero,0(zero)
    13a8:	fffffffc 	sdc3	$31,-4(ra)
	...
    13b4:	00000020 	add	zero,zero,zero
    13b8:	0000001e 	0x1e
    13bc:	0000001f 	0x1f
    13c0:	80009990 	lb	zero,-26224(zero)
    13c4:	c0000000 	ll	zero,0(zero)
    13c8:	fffffffc 	sdc3	$31,-4(ra)
	...
    13d4:	00000020 	add	zero,zero,zero
    13d8:	0000001e 	0x1e
    13dc:	0000001f 	0x1f
    13e0:	800099f0 	lb	zero,-26128(zero)
    13e4:	c0000000 	ll	zero,0(zero)
    13e8:	fffffffc 	sdc3	$31,-4(ra)
	...
    13f4:	00000020 	add	zero,zero,zero
    13f8:	0000001e 	0x1e
    13fc:	0000001f 	0x1f
    1400:	80009bb8 	lb	zero,-25672(zero)
    1404:	c0000000 	ll	zero,0(zero)
    1408:	fffffffc 	sdc3	$31,-4(ra)
	...
    1414:	00000018 	mult	zero,zero
    1418:	0000001e 	0x1e
    141c:	0000001f 	0x1f
    1420:	80009c64 	lb	zero,-25500(zero)
    1424:	c0000000 	ll	zero,0(zero)
    1428:	fffffffc 	sdc3	$31,-4(ra)
	...
    1434:	00000020 	add	zero,zero,zero
    1438:	0000001e 	0x1e
    143c:	0000001f 	0x1f
    1440:	80009de8 	lb	zero,-25112(zero)
    1444:	c0000000 	ll	zero,0(zero)
    1448:	fffffffc 	sdc3	$31,-4(ra)
	...
    1454:	00000020 	add	zero,zero,zero
    1458:	0000001e 	0x1e
    145c:	0000001f 	0x1f
    1460:	80009e4c 	lb	zero,-25012(zero)
    1464:	c0000000 	ll	zero,0(zero)
    1468:	fffffffc 	sdc3	$31,-4(ra)
	...
    1474:	00000020 	add	zero,zero,zero
    1478:	0000001e 	0x1e
    147c:	0000001f 	0x1f
    1480:	80009ec0 	lb	zero,-24896(zero)
    1484:	c0000000 	ll	zero,0(zero)
    1488:	fffffffc 	sdc3	$31,-4(ra)
	...
    1494:	00000020 	add	zero,zero,zero
    1498:	0000001e 	0x1e
    149c:	0000001f 	0x1f
    14a0:	80009f2c 	lb	zero,-24788(zero)
    14a4:	c0000000 	ll	zero,0(zero)
    14a8:	fffffffc 	sdc3	$31,-4(ra)
	...
    14b4:	00000020 	add	zero,zero,zero
    14b8:	0000001e 	0x1e
    14bc:	0000001f 	0x1f
    14c0:	80009fa8 	lb	zero,-24664(zero)
    14c4:	c0000000 	ll	zero,0(zero)
    14c8:	fffffffc 	sdc3	$31,-4(ra)
	...
    14d4:	00000020 	add	zero,zero,zero
    14d8:	0000001e 	0x1e
    14dc:	0000001f 	0x1f
    14e0:	8000a06c 	lb	zero,-24468(zero)
    14e4:	c0000000 	ll	zero,0(zero)
    14e8:	fffffffc 	sdc3	$31,-4(ra)
	...
    14f4:	00000020 	add	zero,zero,zero
    14f8:	0000001e 	0x1e
    14fc:	0000001f 	0x1f
    1500:	8000a0b4 	lb	zero,-24396(zero)
    1504:	c0000000 	ll	zero,0(zero)
    1508:	fffffffc 	sdc3	$31,-4(ra)
	...
    1514:	00000020 	add	zero,zero,zero
    1518:	0000001e 	0x1e
    151c:	0000001f 	0x1f
    1520:	8000a144 	lb	zero,-24252(zero)
    1524:	c0000000 	ll	zero,0(zero)
    1528:	fffffffc 	sdc3	$31,-4(ra)
	...
    1534:	00000020 	add	zero,zero,zero
    1538:	0000001e 	0x1e
    153c:	0000001f 	0x1f
    1540:	8000a1dc 	lb	zero,-24100(zero)
    1544:	c0000000 	ll	zero,0(zero)
    1548:	fffffffc 	sdc3	$31,-4(ra)
	...
    1554:	00000020 	add	zero,zero,zero
    1558:	0000001e 	0x1e
    155c:	0000001f 	0x1f
    1560:	8000a230 	lb	zero,-24016(zero)
    1564:	c0000000 	ll	zero,0(zero)
    1568:	fffffffc 	sdc3	$31,-4(ra)
	...
    1574:	00000020 	add	zero,zero,zero
    1578:	0000001e 	0x1e
    157c:	0000001f 	0x1f
    1580:	8000a27c 	lb	zero,-23940(zero)
    1584:	c0000000 	ll	zero,0(zero)
    1588:	fffffffc 	sdc3	$31,-4(ra)
	...
    1594:	00000028 	0x28
    1598:	0000001e 	0x1e
    159c:	0000001f 	0x1f
    15a0:	8000a3bc 	lb	zero,-23620(zero)
    15a4:	40000000 	mfc0	zero,c0_index
    15a8:	fffffffc 	sdc3	$31,-4(ra)
	...
    15b4:	00000008 	jr	zero
    15b8:	0000001e 	0x1e
    15bc:	0000001f 	0x1f
    15c0:	8000a424 	lb	zero,-23516(zero)
    15c4:	40000000 	mfc0	zero,c0_index
    15c8:	fffffffc 	sdc3	$31,-4(ra)
	...
    15d4:	00000008 	jr	zero
    15d8:	0000001e 	0x1e
    15dc:	0000001f 	0x1f
    15e0:	8000a450 	lb	zero,-23472(zero)
    15e4:	40000000 	mfc0	zero,c0_index
    15e8:	fffffffc 	sdc3	$31,-4(ra)
	...
    15f4:	00000010 	mfhi	zero
    15f8:	0000001e 	0x1e
    15fc:	0000001f 	0x1f
    1600:	8000a4dc 	lb	zero,-23332(zero)
    1604:	40000000 	mfc0	zero,c0_index
    1608:	fffffffc 	sdc3	$31,-4(ra)
	...
    1614:	00000010 	mfhi	zero
    1618:	0000001e 	0x1e
    161c:	0000001f 	0x1f
    1620:	8000a5c8 	lb	zero,-23096(zero)
    1624:	40000000 	mfc0	zero,c0_index
    1628:	fffffffc 	sdc3	$31,-4(ra)
	...
    1634:	00000010 	mfhi	zero
    1638:	0000001e 	0x1e
    163c:	0000001f 	0x1f
    1640:	8000a668 	lb	zero,-22936(zero)
    1644:	40010000 	mfc0	at,c0_index
    1648:	fffffffc 	sdc3	$31,-4(ra)
	...
    1654:	00000008 	jr	zero
    1658:	0000001e 	0x1e
    165c:	0000001f 	0x1f
    1660:	8000a6bc 	lb	zero,-22852(zero)
    1664:	c0000000 	ll	zero,0(zero)
    1668:	fffffffc 	sdc3	$31,-4(ra)
	...
    1674:	00000020 	add	zero,zero,zero
    1678:	0000001e 	0x1e
    167c:	0000001f 	0x1f
    1680:	8000a768 	lb	zero,-22680(zero)
    1684:	40000000 	mfc0	zero,c0_index
    1688:	fffffffc 	sdc3	$31,-4(ra)
	...
    1694:	00000008 	jr	zero
    1698:	0000001e 	0x1e
    169c:	0000001f 	0x1f
    16a0:	8000a798 	lb	zero,-22632(zero)
    16a4:	c0000000 	ll	zero,0(zero)
    16a8:	fffffffc 	sdc3	$31,-4(ra)
	...
    16b4:	00000018 	mult	zero,zero
    16b8:	0000001e 	0x1e
    16bc:	0000001f 	0x1f
    16c0:	8000a7e4 	lb	zero,-22556(zero)
    16c4:	c0000000 	ll	zero,0(zero)
    16c8:	fffffffc 	sdc3	$31,-4(ra)
	...
    16d4:	00000018 	mult	zero,zero
    16d8:	0000001e 	0x1e
    16dc:	0000001f 	0x1f
    16e0:	8000a814 	lb	zero,-22508(zero)
    16e4:	c0000000 	ll	zero,0(zero)
    16e8:	fffffffc 	sdc3	$31,-4(ra)
	...
    16f4:	00000018 	mult	zero,zero
    16f8:	0000001e 	0x1e
    16fc:	0000001f 	0x1f
    1700:	8000a88c 	lb	zero,-22388(zero)
    1704:	40010000 	mfc0	at,c0_index
    1708:	fffffffc 	sdc3	$31,-4(ra)
	...
    1714:	00000010 	mfhi	zero
    1718:	0000001e 	0x1e
    171c:	0000001f 	0x1f
    1720:	8000a8e4 	lb	zero,-22300(zero)
    1724:	40010000 	mfc0	at,c0_index
    1728:	fffffffc 	sdc3	$31,-4(ra)
	...
    1734:	00000008 	jr	zero
    1738:	0000001e 	0x1e
    173c:	0000001f 	0x1f
    1740:	8000aa0c 	lb	zero,-22004(zero)
    1744:	c0000000 	ll	zero,0(zero)
    1748:	fffffffc 	sdc3	$31,-4(ra)
	...
    1754:	00000020 	add	zero,zero,zero
    1758:	0000001e 	0x1e
    175c:	0000001f 	0x1f
    1760:	8000aa90 	lb	zero,-21872(zero)
    1764:	40000000 	mfc0	zero,c0_index
    1768:	fffffffc 	sdc3	$31,-4(ra)
	...
    1774:	00000008 	jr	zero
    1778:	0000001e 	0x1e
    177c:	0000001f 	0x1f
    1780:	8000aab8 	lb	zero,-21832(zero)
    1784:	40000000 	mfc0	zero,c0_index
    1788:	fffffffc 	sdc3	$31,-4(ra)
	...
    1794:	00000008 	jr	zero
    1798:	0000001e 	0x1e
    179c:	0000001f 	0x1f
    17a0:	8000aae0 	lb	zero,-21792(zero)
    17a4:	40000000 	mfc0	zero,c0_index
    17a8:	fffffffc 	sdc3	$31,-4(ra)
	...
    17b4:	00000010 	mfhi	zero
    17b8:	0000001e 	0x1e
    17bc:	0000001f 	0x1f
    17c0:	8000ab0c 	lb	zero,-21748(zero)
    17c4:	40000000 	mfc0	zero,c0_index
    17c8:	fffffffc 	sdc3	$31,-4(ra)
	...
    17d4:	00000008 	jr	zero
    17d8:	0000001e 	0x1e
    17dc:	0000001f 	0x1f
    17e0:	8000ab38 	lb	zero,-21704(zero)
    17e4:	c0000000 	ll	zero,0(zero)
    17e8:	fffffffc 	sdc3	$31,-4(ra)
	...
    17f4:	00000020 	add	zero,zero,zero
    17f8:	0000001e 	0x1e
    17fc:	0000001f 	0x1f
    1800:	8000ab7c 	lb	zero,-21636(zero)
    1804:	c0000000 	ll	zero,0(zero)
    1808:	fffffffc 	sdc3	$31,-4(ra)
	...
    1814:	00000020 	add	zero,zero,zero
    1818:	0000001e 	0x1e
    181c:	0000001f 	0x1f
    1820:	8000abc0 	lb	zero,-21568(zero)
    1824:	c0000000 	ll	zero,0(zero)
    1828:	fffffffc 	sdc3	$31,-4(ra)
	...
    1834:	00000030 	tge	zero,zero
    1838:	0000001e 	0x1e
    183c:	0000001f 	0x1f
    1840:	8000ade8 	lb	zero,-21016(zero)
    1844:	c0000000 	ll	zero,0(zero)
    1848:	fffffffc 	sdc3	$31,-4(ra)
	...
    1854:	00000028 	0x28
    1858:	0000001e 	0x1e
    185c:	0000001f 	0x1f
    1860:	8000aec8 	lb	zero,-20792(zero)
    1864:	40000000 	mfc0	zero,c0_index
    1868:	fffffffc 	sdc3	$31,-4(ra)
	...
    1874:	00000008 	jr	zero
    1878:	0000001e 	0x1e
    187c:	0000001f 	0x1f
    1880:	8000aeec 	lb	zero,-20756(zero)
    1884:	40000000 	mfc0	zero,c0_index
    1888:	fffffffc 	sdc3	$31,-4(ra)
	...
    1894:	00000008 	jr	zero
    1898:	0000001e 	0x1e
    189c:	0000001f 	0x1f
    18a0:	8000af0c 	lb	zero,-20724(zero)
    18a4:	40000000 	mfc0	zero,c0_index
    18a8:	fffffffc 	sdc3	$31,-4(ra)
	...
    18b4:	00000010 	mfhi	zero
    18b8:	0000001e 	0x1e
    18bc:	0000001f 	0x1f
    18c0:	8000afbc 	lb	zero,-20548(zero)
    18c4:	80000000 	lb	zero,0(zero)
    18c8:	fffffffc 	sdc3	$31,-4(ra)
	...
    18d4:	00000018 	mult	zero,zero
    18d8:	0000001d 	0x1d
    18dc:	0000001f 	0x1f
    18e0:	8000afe4 	lb	zero,-20508(zero)
    18e4:	80010000 	lb	at,0(zero)
    18e8:	fffffffc 	sdc3	$31,-4(ra)
	...
    18f4:	00000018 	mult	zero,zero
    18f8:	0000001d 	0x1d
    18fc:	0000001f 	0x1f
    1900:	8000b020 	lb	zero,-20448(zero)
	...
    1918:	0000001d 	0x1d
    191c:	0000001f 	0x1f
    1920:	8000b058 	lb	zero,-20392(zero)
	...
    1940:	8000b3f4 	lb	zero,-19468(zero)
	...
    1960:	8000b520 	lb	zero,-19168(zero)
    1964:	801f0000 	lb	ra,0(zero)
    1968:	fffffffc 	sdc3	$31,-4(ra)
	...
    1974:	00000028 	0x28
    1978:	0000001d 	0x1d
    197c:	0000001f 	0x1f
    1980:	8000b630 	lb	zero,-18896(zero)
    1984:	c0ff0000 	ll	ra,0(a3)
    1988:	fffffffc 	sdc3	$31,-4(ra)
	...
    1994:	00000040 	ssnop
    1998:	0000001d 	0x1d
    199c:	0000001f 	0x1f
    19a0:	8000b7b0 	lb	zero,-18512(zero)
    19a4:	800f0000 	lb	t7,0(zero)
    19a8:	fffffffc 	sdc3	$31,-4(ra)
	...
    19b4:	00000028 	0x28
    19b8:	0000001d 	0x1d
    19bc:	0000001f 	0x1f
    19c0:	8000b838 	lb	zero,-18376(zero)
	...
    19e0:	8000b8f0 	lb	zero,-18192(zero)
	...
    19f8:	0000001d 	0x1d
    19fc:	0000001f 	0x1f
    1a00:	80000000 	lb	zero,0(zero)
	...
    1a20:	8000b9ec 	lb	zero,-17940(zero)
	...
    1a34:	000000b0 	tge	zero,zero,0x2
    1a38:	0000001d 	0x1d
    1a3c:	00000000 	nop
    1a40:	8000b93c 	lb	zero,-18116(zero)
	...

Disassembly of section .gnu.attributes:

00000000 <.gnu.attributes>:
   0:	00000f41 	0xf41
   4:	756e6700 	jalx	5b99c00 <__memory_size+0x5b7a400>
   8:	00070100 	sll	zero,a3,0x4
   c:	03040000 	0x3040000

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	xori	v1,s2,0x4347
   4:	6f432820 	0x6f432820
   8:	63736564 	0x63736564
   c:	20657061 	addi	a1,v1,28769
  10:	20554e47 	addi	s5,v0,20039
  14:	6c6f6f54 	0x6c6f6f54
  18:	30322073 	andi	s2,at,0x2073
  1c:	302e3631 	andi	t6,at,0x3631
  20:	33302d35 	andi	s0,t9,0x2d35
  24:	726f6620 	0x726f6620
  28:	50494d20 	beql	v0,t1,134ac <__isr_vec_space+0x1348c>
  2c:	544d2053 	bnel	v0,t5,817c <__isr_vec_space+0x815c>
  30:	61422049 	0x61422049
  34:	4d206572 	0x4d206572
  38:	6c617465 	0x6c617465
  3c:	2e342029 	sltiu	s4,s1,8233
  40:	00322e39 	0x322e39
